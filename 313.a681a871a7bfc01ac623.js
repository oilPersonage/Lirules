/*! For license information please see 313.a681a871a7bfc01ac623.js.LICENSE.txt */
(self.webpackChunkLirules_front=self.webpackChunkLirules_front||[]).push([[313],{9307:(t,e,n)=>{"use strict";n.d(e,{Z:()=>N});var o=n(7294);function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var s=void 0!==n.g&&"[object global]"==={}.toString.call(n.g);function a(t,e){return 0===t.indexOf(e.toLowerCase())?t:"".concat(e.toLowerCase()).concat(t.substr(0,1).toUpperCase()).concat(t.substr(1))}function l(t){return Boolean(t&&1===t.nodeType&&"nodeName"in t&&t.ownerDocument&&t.ownerDocument.defaultView)}function u(t){return!isNaN(parseFloat(t))&&isFinite(t)&&Math.floor(t)==t}function c(t){return/^(https?:)?\/\/((player|www)\.)?vimeo\.com(?=$|\/)/.test(t)}function d(t){return/^https:\/\/player\.vimeo\.com\/video\/\d+/.test(t)}function h(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.id,n=t.url,o=e||n;if(!o)throw new Error("An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.");if(u(o))return"https://vimeo.com/".concat(o);if(c(o))return o.replace("http:","https:");if(e)throw new TypeError("“".concat(e,"” is not a valid video id."));throw new TypeError("“".concat(o,"” is not a vimeo.com url."))}var p=void 0!==Array.prototype.indexOf,f="undefined"!=typeof window&&void 0!==window.postMessage;if(!(s||p&&f))throw new Error("Sorry, the Vimeo Player API is not available in this browser.");var m="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{};!function(t){if(!t.WeakMap){var e=Object.prototype.hasOwnProperty,n=Object.defineProperty&&function(){try{return 1===Object.defineProperty({},"x",{value:1}).x}catch(t){}}(),o=function(t,e,o){n?Object.defineProperty(t,e,{configurable:!0,writable:!0,value:o}):t[e]=o};t.WeakMap=function(){function t(){if(void 0===this)throw new TypeError("Constructor WeakMap requires 'new'");if(o(this,"_id",i("_WeakMap")),arguments.length>0)throw new TypeError("WeakMap iterable is not supported")}function n(t,n){if(!r(t)||!e.call(t,"_id"))throw new TypeError(n+" method called on incompatible receiver "+typeof t)}function i(t){return t+"_"+s()+"."+s()}function s(){return Math.random().toString().substring(2)}return o(t.prototype,"delete",(function(t){if(n(this,"delete"),!r(t))return!1;var e=t[this._id];return!(!e||e[0]!==t||(delete t[this._id],0))})),o(t.prototype,"get",(function(t){if(n(this,"get"),r(t)){var e=t[this._id];return e&&e[0]===t?e[1]:void 0}})),o(t.prototype,"has",(function(t){if(n(this,"has"),!r(t))return!1;var e=t[this._id];return!(!e||e[0]!==t)})),o(t.prototype,"set",(function(t,e){if(n(this,"set"),!r(t))throw new TypeError("Invalid value used as weak map key");var i=t[this._id];return i&&i[0]===t?(i[1]=e,this):(o(t,this._id,[t,e]),this)})),o(t,"_polyfill",!0),t}()}function r(t){return Object(t)===t}}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:m);var v,g,y=(v=function(t){var e,n,o;o=function(){var t,e,n,o=Object.prototype.toString,r="undefined"!=typeof setImmediate?function(t){return setImmediate(t)}:setTimeout;try{Object.defineProperty({},"x",{}),t=function(t,e,n,o){return Object.defineProperty(t,e,{value:n,writable:!0,configurable:!1!==o})}}catch(e){t=function(t,e,n){return t[e]=n,t}}function i(t,o){n.add(t,o),e||(e=r(n.drain))}function s(t){var e,n=typeof t;return null==t||"object"!=n&&"function"!=n||(e=t.then),"function"==typeof e&&e}function a(){for(var t=0;t<this.chain.length;t++)l(this,1===this.state?this.chain[t].success:this.chain[t].failure,this.chain[t]);this.chain.length=0}function l(t,e,n){var o,r;try{!1===e?n.reject(t.msg):(o=!0===e?t.msg:e.call(void 0,t.msg))===n.promise?n.reject(TypeError("Promise-chain cycle")):(r=s(o))?r.call(o,n.resolve,n.reject):n.resolve(o)}catch(t){n.reject(t)}}function u(t){var e,n=this;if(!n.triggered){n.triggered=!0,n.def&&(n=n.def);try{(e=s(t))?i((function(){var o=new h(n);try{e.call(t,(function(){u.apply(o,arguments)}),(function(){c.apply(o,arguments)}))}catch(t){c.call(o,t)}})):(n.msg=t,n.state=1,n.chain.length>0&&i(a,n))}catch(t){c.call(new h(n),t)}}}function c(t){var e=this;e.triggered||(e.triggered=!0,e.def&&(e=e.def),e.msg=t,e.state=2,e.chain.length>0&&i(a,e))}function d(t,e,n,o){for(var r=0;r<e.length;r++)!function(r){t.resolve(e[r]).then((function(t){n(r,t)}),o)}(r)}function h(t){this.def=t,this.triggered=!1}function p(t){this.promise=t,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function f(t){if("function"!=typeof t)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var e=new p(this);this.then=function(t,n){var o={success:"function"!=typeof t||t,failure:"function"==typeof n&&n};return o.promise=new this.constructor((function(t,e){if("function"!=typeof t||"function"!=typeof e)throw TypeError("Not a function");o.resolve=t,o.reject=e})),e.chain.push(o),0!==e.state&&i(a,e),o.promise},this.catch=function(t){return this.then(void 0,t)};try{t.call(void 0,(function(t){u.call(e,t)}),(function(t){c.call(e,t)}))}catch(t){c.call(e,t)}}n=function(){var t,n,o;function r(t,e){this.fn=t,this.self=e,this.next=void 0}return{add:function(e,i){o=new r(e,i),n?n.next=o:t=o,n=o,o=void 0},drain:function(){var o=t;for(t=n=e=void 0;o;)o.fn.call(o.self),o=o.next}}}();var m=t({},"constructor",f,!1);return f.prototype=m,t(m,"__NPO__",0,!1),t(f,"resolve",(function(t){return t&&"object"==typeof t&&1===t.__NPO__?t:new this((function(e,n){if("function"!=typeof e||"function"!=typeof n)throw TypeError("Not a function");e(t)}))})),t(f,"reject",(function(t){return new this((function(e,n){if("function"!=typeof e||"function"!=typeof n)throw TypeError("Not a function");n(t)}))})),t(f,"all",(function(t){var e=this;return"[object Array]"!=o.call(t)?e.reject(TypeError("Not an array")):0===t.length?e.resolve([]):new e((function(n,o){if("function"!=typeof n||"function"!=typeof o)throw TypeError("Not a function");var r=t.length,i=Array(r),s=0;d(e,t,(function(t,e){i[t]=e,++s===r&&n(i)}),o)}))})),t(f,"race",(function(t){var e=this;return"[object Array]"!=o.call(t)?e.reject(TypeError("Not an array")):new e((function(n,o){if("function"!=typeof n||"function"!=typeof o)throw TypeError("Not a function");d(e,t,(function(t,e){n(e)}),o)}))})),f},(n=m)[e="Promise"]=n[e]||o(),t.exports&&(t.exports=n[e])},v(g={exports:{}}),g.exports),x=new WeakMap;function w(t,e,n){var o=x.get(t.element)||{};e in o||(o[e]=[]),o[e].push(n),x.set(t.element,o)}function b(t,e){return(x.get(t.element)||{})[e]||[]}function E(t,e,n){var o=x.get(t.element)||{};if(!o[e])return!0;if(!n)return o[e]=[],x.set(t.element,o),!0;var r=o[e].indexOf(n);return-1!==r&&o[e].splice(r,1),x.set(t.element,o),o[e]&&0===o[e].length}function P(t,e){var n=x.get(t);x.set(e,n),x.delete(t)}function T(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){return console.warn(t),{}}return t}function S(t,e,n){if(t.element.contentWindow&&t.element.contentWindow.postMessage){var o={method:e};void 0!==n&&(o.value=n);var r=parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\d+).*$/,"$1"));r>=8&&r<10&&(o=JSON.stringify(o)),t.element.contentWindow.postMessage(o,t.origin)}}function k(t,e){var n,o=[];if((e=T(e)).event)"error"===e.event&&b(t,e.data.method).forEach((function(n){var o=new Error(e.data.message);o.name=e.data.name,n.reject(o),E(t,e.data.method,n)})),o=b(t,"event:".concat(e.event)),n=e.data;else if(e.method){var r=function(t,e){var n=b(t,e);if(n.length<1)return!1;var o=n.shift();return E(t,e,o),o}(t,e.method);r&&(o.push(r),n=e.value)}o.forEach((function(e){try{if("function"==typeof e)return void e.call(t,n);e.resolve(n)}catch(t){}}))}var A=["autopause","autoplay","background","byline","color","controls","dnt","height","id","interactive_params","keyboard","loop","maxheight","maxwidth","muted","playsinline","portrait","responsive","speed","texttrack","title","transparent","url","width"];function C(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return A.reduce((function(e,n){var o=t.getAttribute("data-vimeo-".concat(n));return(o||""===o)&&(e[n]=""===o?1:o),e}),e)}function V(t,e){var n=t.html;if(!e)throw new TypeError("An element must be provided");if(null!==e.getAttribute("data-vimeo-initialized"))return e.querySelector("iframe");var o=document.createElement("div");return o.innerHTML=n,e.appendChild(o.firstChild),e.setAttribute("data-vimeo-initialized","true"),e.querySelector("iframe")}function M(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;return new Promise((function(o,r){if(!c(t))throw new TypeError("“".concat(t,"” is not a vimeo.com url."));var i="https://vimeo.com/api/oembed.json?url=".concat(encodeURIComponent(t));for(var s in e)e.hasOwnProperty(s)&&(i+="&".concat(s,"=").concat(encodeURIComponent(e[s])));var a="XDomainRequest"in window?new XDomainRequest:new XMLHttpRequest;a.open("GET",i,!0),a.onload=function(){if(404!==a.status)if(403!==a.status)try{var e=JSON.parse(a.responseText);if(403===e.domain_status_code)return V(e,n),void r(new Error("“".concat(t,"” is not embeddable.")));o(e)}catch(t){r(t)}else r(new Error("“".concat(t,"” is not embeddable.")));else r(new Error("“".concat(t,"” was not found.")))},a.onerror=function(){var t=a.status?" (".concat(a.status,")"):"";r(new Error("There was an error fetching the embed code from Vimeo".concat(t,".")))},a.send()}))}var R=new WeakMap,j=new WeakMap,O={},L=function(){function t(e){var n=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(r(this,t),window.jQuery&&e instanceof jQuery&&(e.length>1&&window.console&&console.warn&&console.warn("A jQuery object with multiple elements was passed, using the first element."),e=e[0]),"undefined"!=typeof document&&"string"==typeof e&&(e=document.getElementById(e)),!l(e))throw new TypeError("You must pass either a valid element or a valid id.");if("IFRAME"!==e.nodeName){var i=e.querySelector("iframe");i&&(e=i)}if("IFRAME"===e.nodeName&&!c(e.getAttribute("src")||""))throw new Error("The player element passed isn’t a Vimeo embed.");if(R.has(e))return R.get(e);this._window=e.ownerDocument.defaultView,this.element=e,this.origin="*";var s=new y((function(t,r){if(n._onMessage=function(e){if(c(e.origin)&&n.element.contentWindow===e.source){"*"===n.origin&&(n.origin=e.origin);var o=T(e.data);if(o&&"error"===o.event&&o.data&&"ready"===o.data.method){var i=new Error(o.data.message);return i.name=o.data.name,void r(i)}var s=o&&"ready"===o.event,a=o&&"ping"===o.method;if(s||a)return n.element.setAttribute("data-ready","true"),void t();k(n,o)}},n._window.addEventListener("message",n._onMessage),"IFRAME"!==n.element.nodeName){var i=C(e,o);M(h(i),i,e).then((function(t){var o=V(t,e);return n.element=o,n._originalElement=e,P(e,o),R.set(n.element,n),t})).catch(r)}}));if(j.set(this,s),R.set(this.element,this),"IFRAME"===this.element.nodeName&&S(this,"ping"),O.isEnabled){var a=function(){return O.exit()};this.fullscreenchangeHandler=function(){O.isFullscreen?w(n,"event:exitFullscreen",a):E(n,"event:exitFullscreen",a),n.ready().then((function(){S(n,"fullscreenchange",O.isFullscreen)}))},O.on("fullscreenchange",this.fullscreenchangeHandler)}return this}var e,n;return e=t,n=[{key:"callMethod",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new y((function(o,r){return e.ready().then((function(){w(e,t,{resolve:o,reject:r}),S(e,t,n)})).catch(r)}))}},{key:"get",value:function(t){var e=this;return new y((function(n,o){return t=a(t,"get"),e.ready().then((function(){w(e,t,{resolve:n,reject:o}),S(e,t)})).catch(o)}))}},{key:"set",value:function(t,e){var n=this;return new y((function(o,r){if(t=a(t,"set"),null==e)throw new TypeError("There must be a value to set.");return n.ready().then((function(){w(n,t,{resolve:o,reject:r}),S(n,t,e)})).catch(r)}))}},{key:"on",value:function(t,e){if(!t)throw new TypeError("You must pass an event name.");if(!e)throw new TypeError("You must pass a callback function.");if("function"!=typeof e)throw new TypeError("The callback must be a function.");0===b(this,"event:".concat(t)).length&&this.callMethod("addEventListener",t).catch((function(){})),w(this,"event:".concat(t),e)}},{key:"off",value:function(t,e){if(!t)throw new TypeError("You must pass an event name.");if(e&&"function"!=typeof e)throw new TypeError("The callback must be a function.");E(this,"event:".concat(t),e)&&this.callMethod("removeEventListener",t).catch((function(t){}))}},{key:"loadVideo",value:function(t){return this.callMethod("loadVideo",t)}},{key:"ready",value:function(){var t=j.get(this)||new y((function(t,e){e(new Error("Unknown player. Probably unloaded."))}));return y.resolve(t)}},{key:"addCuePoint",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.callMethod("addCuePoint",{time:t,data:e})}},{key:"removeCuePoint",value:function(t){return this.callMethod("removeCuePoint",t)}},{key:"enableTextTrack",value:function(t,e){if(!t)throw new TypeError("You must pass a language.");return this.callMethod("enableTextTrack",{language:t,kind:e})}},{key:"disableTextTrack",value:function(){return this.callMethod("disableTextTrack")}},{key:"pause",value:function(){return this.callMethod("pause")}},{key:"play",value:function(){return this.callMethod("play")}},{key:"requestFullscreen",value:function(){return O.isEnabled?O.request(this.element):this.callMethod("requestFullscreen")}},{key:"exitFullscreen",value:function(){return O.isEnabled?O.exit():this.callMethod("exitFullscreen")}},{key:"getFullscreen",value:function(){return O.isEnabled?y.resolve(O.isFullscreen):this.get("fullscreen")}},{key:"requestPictureInPicture",value:function(){return this.callMethod("requestPictureInPicture")}},{key:"exitPictureInPicture",value:function(){return this.callMethod("exitPictureInPicture")}},{key:"getPictureInPicture",value:function(){return this.get("pictureInPicture")}},{key:"unload",value:function(){return this.callMethod("unload")}},{key:"destroy",value:function(){var t=this;return new y((function(e){if(j.delete(t),R.delete(t.element),t._originalElement&&(R.delete(t._originalElement),t._originalElement.removeAttribute("data-vimeo-initialized")),t.element&&"IFRAME"===t.element.nodeName&&t.element.parentNode&&(t.element.parentNode.parentNode&&t._originalElement&&t._originalElement!==t.element.parentNode?t.element.parentNode.parentNode.removeChild(t.element.parentNode):t.element.parentNode.removeChild(t.element)),t.element&&"DIV"===t.element.nodeName&&t.element.parentNode){t.element.removeAttribute("data-vimeo-initialized");var n=t.element.querySelector("iframe");n&&n.parentNode&&(n.parentNode.parentNode&&t._originalElement&&t._originalElement!==n.parentNode?n.parentNode.parentNode.removeChild(n.parentNode):n.parentNode.removeChild(n))}t._window.removeEventListener("message",t._onMessage),O.isEnabled&&O.off("fullscreenchange",t.fullscreenchangeHandler),e()}))}},{key:"getAutopause",value:function(){return this.get("autopause")}},{key:"setAutopause",value:function(t){return this.set("autopause",t)}},{key:"getBuffered",value:function(){return this.get("buffered")}},{key:"getCameraProps",value:function(){return this.get("cameraProps")}},{key:"setCameraProps",value:function(t){return this.set("cameraProps",t)}},{key:"getChapters",value:function(){return this.get("chapters")}},{key:"getCurrentChapter",value:function(){return this.get("currentChapter")}},{key:"getColor",value:function(){return this.get("color")}},{key:"setColor",value:function(t){return this.set("color",t)}},{key:"getCuePoints",value:function(){return this.get("cuePoints")}},{key:"getCurrentTime",value:function(){return this.get("currentTime")}},{key:"setCurrentTime",value:function(t){return this.set("currentTime",t)}},{key:"getDuration",value:function(){return this.get("duration")}},{key:"getEnded",value:function(){return this.get("ended")}},{key:"getLoop",value:function(){return this.get("loop")}},{key:"setLoop",value:function(t){return this.set("loop",t)}},{key:"setMuted",value:function(t){return this.set("muted",t)}},{key:"getMuted",value:function(){return this.get("muted")}},{key:"getPaused",value:function(){return this.get("paused")}},{key:"getPlaybackRate",value:function(){return this.get("playbackRate")}},{key:"setPlaybackRate",value:function(t){return this.set("playbackRate",t)}},{key:"getPlayed",value:function(){return this.get("played")}},{key:"getQualities",value:function(){return this.get("qualities")}},{key:"getQuality",value:function(){return this.get("quality")}},{key:"setQuality",value:function(t){return this.set("quality",t)}},{key:"getSeekable",value:function(){return this.get("seekable")}},{key:"getSeeking",value:function(){return this.get("seeking")}},{key:"getTextTracks",value:function(){return this.get("textTracks")}},{key:"getVideoEmbedCode",value:function(){return this.get("videoEmbedCode")}},{key:"getVideoId",value:function(){return this.get("videoId")}},{key:"getVideoTitle",value:function(){return this.get("videoTitle")}},{key:"getVideoWidth",value:function(){return this.get("videoWidth")}},{key:"getVideoHeight",value:function(){return this.get("videoHeight")}},{key:"getVideoUrl",value:function(){return this.get("videoUrl")}},{key:"getVolume",value:function(){return this.get("volume")}},{key:"setVolume",value:function(t){return this.set("volume",t)}}],n&&i(e.prototype,n),t}();s||(O=function(){var t=function(){for(var t,e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n=0,o=e.length,r={};n<o;n++)if((t=e[n])&&t[1]in document){for(n=0;n<t.length;n++)r[e[0][n]]=t[n];return r}return!1}(),e={fullscreenchange:t.fullscreenchange,fullscreenerror:t.fullscreenerror},n={request:function(e){return new Promise((function(o,r){var i=function t(){n.off("fullscreenchange",t),o()};n.on("fullscreenchange",i);var s=(e=e||document.documentElement)[t.requestFullscreen]();s instanceof Promise&&s.then(i).catch(r)}))},exit:function(){return new Promise((function(e,o){if(n.isFullscreen){var r=function t(){n.off("fullscreenchange",t),e()};n.on("fullscreenchange",r);var i=document[t.exitFullscreen]();i instanceof Promise&&i.then(r).catch(o)}else e()}))},on:function(t,n){var o=e[t];o&&document.addEventListener(o,n)},off:function(t,n){var o=e[t];o&&document.removeEventListener(o,n)}};return Object.defineProperties(n,{isFullscreen:{get:function(){return Boolean(document[t.fullscreenElement])}},element:{enumerable:!0,get:function(){return document[t.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(document[t.fullscreenEnabled])}}}),n}(),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,e=[].slice.call(t.querySelectorAll("[data-vimeo-id], [data-vimeo-url]")),n=function(t){"console"in window&&console.error&&console.error("There was an error creating an embed: ".concat(t))};e.forEach((function(t){try{if(null!==t.getAttribute("data-vimeo-defer"))return;var e=C(t);M(h(e),e,t).then((function(e){return V(e,t)})).catch(n)}catch(t){n(t)}}))}(),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document;if(!window.VimeoPlayerResizeEmbeds_){window.VimeoPlayerResizeEmbeds_=!0;var e=function(e){if(c(e.origin)&&e.data&&"spacechange"===e.data.event)for(var n=t.querySelectorAll("iframe"),o=0;o<n.length;o++)if(n[o].contentWindow===e.source){n[o].parentElement.style.paddingBottom="".concat(e.data.data[0].bottom,"px");break}};window.addEventListener("message",e)}}(),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document;if(!window.VimeoSeoMetadataAppended){window.VimeoSeoMetadataAppended=!0;var e=function(e){if(c(e.origin)){var n=T(e.data);if(n&&"ready"===n.event)for(var o=t.querySelectorAll("iframe"),r=0;r<o.length;r++){var i=o[r],s=i.contentWindow===e.source;d(i.src)&&s&&new L(i).callMethod("appendVideoMetadata",window.location.href)}}};window.addEventListener("message",e)}}());const F=L;function D(t,e){return D=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},D(t,e)}var I={play:"onPlay",pause:"onPause",ended:"onEnd",timeupdate:"onTimeUpdate",progress:"onProgress",seeked:"onSeeked",texttrackchange:"onTextTrackChange",cuechange:"onCueChange",cuepoint:"onCuePoint",volumechange:"onVolumeChange",playbackratechange:"onPlaybackRateChange",error:"onError",loaded:"onLoaded"},N=function(t){var e,n;function r(e){var n;return(n=t.call(this,e)||this).refContainer=n.refContainer.bind(function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(n)),n}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,D(e,n);var i=r.prototype;return i.componentDidMount=function(){this.createPlayer()},i.componentDidUpdate=function(t){var e=this,n=Object.keys(this.props).filter((function(n){return e.props[n]!==t[n]}));this.updateProps(n)},i.componentWillUnmount=function(){this.player.destroy()},i.getInitialOptions=function(){return{id:this.props.video,width:this.props.width,height:this.props.height,autopause:this.props.autopause,autoplay:this.props.autoplay,byline:this.props.showByline,color:this.props.color,controls:this.props.controls,loop:this.props.loop,portrait:this.props.showPortrait,title:this.props.showTitle,muted:this.props.muted,background:this.props.background,responsive:this.props.responsive,dnt:this.props.dnt,speed:this.props.speed,keyboard:this.props.keyboard,pip:this.props.pip,playsinline:this.props.playsInline,quality:this.props.quality,texttrack:this.props.textTrack,transparent:this.props.transparent}},i.updateProps=function(t){var e=this,n=this.player;t.forEach((function(t){var o=e.props[t];switch(t){case"autopause":n.setAutopause(o);break;case"color":n.setColor(o);break;case"loop":n.setLoop(o);break;case"volume":n.setVolume(o);break;case"paused":n.getPaused().then((function(t){return o&&!t?n.pause():!o&&t?n.play():null}));break;case"width":case"height":n.element[t]=o;break;case"video":if(o){var r=e.props.start,i=n.loadVideo(o);"number"==typeof r&&i.then((function(){n.setCurrentTime(r)}))}else n.unload()}}))},i.createPlayer=function(){var t=this,e=this.props,n=e.start,o=e.volume;this.player=new F(this.container,this.getInitialOptions()),Object.keys(I).forEach((function(e){var n=I[e];t.player.on(e,(function(e){var o=t.props[n];o&&o(e)}))}));var r=this.props,i=r.onError,s=r.onReady;this.player.ready().then((function(){s&&s(t.player)}),(function(t){if(!i)throw t;i(t)})),"number"==typeof n&&this.player.setCurrentTime(n),"number"==typeof o&&this.updateProps(["volume"])},i.refContainer=function(t){this.container=t},i.render=function(){var t=this.props,e=t.id,n=t.className,r=t.style;return o.createElement("div",{id:e,className:n,style:r,ref:this.refContainer})},r}(o.Component);N.defaultProps={autopause:!0,autoplay:!1,showByline:!0,controls:!0,loop:!1,showPortrait:!0,showTitle:!0,muted:!1,background:!1,responsive:!1,dnt:!1,speed:!1,keyboard:!0,pip:!1,playsInline:!0,transparent:!0}},4184:(t,e)=>{var n;!function(){"use strict";var o={}.hasOwnProperty;function r(){for(var t=[],e=0;e<arguments.length;e++){var n=arguments[e];if(n){var i=typeof n;if("string"===i||"number"===i)t.push(n);else if(Array.isArray(n)){if(n.length){var s=r.apply(null,n);s&&t.push(s)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var a in n)o.call(n,a)&&n[a]&&t.push(a);else t.push(n.toString())}}return t.join(" ")}t.exports?(r.default=r,t.exports=r):void 0===(n=function(){return r}.apply(e,[]))||(t.exports=n)}()},1667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},2705:(t,e,n)=>{var o=n(5639).Symbol;t.exports=o},4239:(t,e,n)=>{var o=n(2705),r=n(9607),i=n(2333),s=o?o.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":s&&s in Object(t)?r(t):i(t)}},7561:(t,e,n)=>{var o=n(7990),r=/^\s+/;t.exports=function(t){return t?t.slice(0,o(t)+1).replace(r,""):t}},1957:(t,e,n)=>{var o="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;t.exports=o},9607:(t,e,n)=>{var o=n(2705),r=Object.prototype,i=r.hasOwnProperty,s=r.toString,a=o?o.toStringTag:void 0;t.exports=function(t){var e=i.call(t,a),n=t[a];try{t[a]=void 0;var o=!0}catch(t){}var r=s.call(t);return o&&(e?t[a]=n:delete t[a]),r}},2333:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},5639:(t,e,n)=>{var o=n(1957),r="object"==typeof self&&self&&self.Object===Object&&self,i=o||r||Function("return this")();t.exports=i},7990:t=>{var e=/\s/;t.exports=function(t){for(var n=t.length;n--&&e.test(t.charAt(n)););return n}},3279:(t,e,n)=>{var o=n(3218),r=n(7771),i=n(4841),s=Math.max,a=Math.min;t.exports=function(t,e,n){var l,u,c,d,h,p,f=0,m=!1,v=!1,g=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function y(e){var n=l,o=u;return l=u=void 0,f=e,d=t.apply(o,n)}function x(t){return f=t,h=setTimeout(b,e),m?y(t):d}function w(t){var n=t-p;return void 0===p||n>=e||n<0||v&&t-f>=c}function b(){var t=r();if(w(t))return E(t);h=setTimeout(b,function(t){var n=e-(t-p);return v?a(n,c-(t-f)):n}(t))}function E(t){return h=void 0,g&&l?y(t):(l=u=void 0,d)}function P(){var t=r(),n=w(t);if(l=arguments,u=this,p=t,n){if(void 0===h)return x(p);if(v)return clearTimeout(h),h=setTimeout(b,e),y(p)}return void 0===h&&(h=setTimeout(b,e)),d}return e=i(e)||0,o(n)&&(m=!!n.leading,c=(v="maxWait"in n)?s(i(n.maxWait)||0,e):c,g="trailing"in n?!!n.trailing:g),P.cancel=function(){void 0!==h&&clearTimeout(h),f=0,l=p=u=h=void 0},P.flush=function(){return void 0===h?d:E(r())},P}},3218:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7005:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},3448:(t,e,n)=>{var o=n(4239),r=n(7005);t.exports=function(t){return"symbol"==typeof t||r(t)&&"[object Symbol]"==o(t)}},7771:(t,e,n)=>{var o=n(5639);t.exports=function(){return o.Date.now()}},3493:(t,e,n)=>{var o=n(3279),r=n(3218);t.exports=function(t,e,n){var i=!0,s=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return r(n)&&(i="leading"in n?!!n.leading:i,s="trailing"in n?!!n.trailing:s),o(t,e,{leading:i,maxWait:e,trailing:s})}},4841:(t,e,n)=>{var o=n(7561),r=n(3218),i=n(3448),s=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,l=/^0o[0-7]+$/i,u=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(i(t))return NaN;if(r(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=r(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=o(t);var n=a.test(t);return n||l.test(t)?u(t.slice(2),n?2:8):s.test(t)?NaN:+t}},9520:(t,e,n)=>{"use strict";n.d(e,{M:()=>y});var o=n(7294),r=n(9304),i=n(2396),s=n(8868);function a(){const t=(0,o.useRef)(!1);return(0,s.L)((()=>(t.current=!0,()=>{t.current=!1})),[]),t}var l=n(240),u=n(6681);class c extends o.Component{getSnapshotBeforeUpdate(t){const e=this.props.childRef.current;if(e&&t.isPresent&&!this.props.isPresent){const t=this.props.sizeRef.current;t.height=e.offsetHeight||0,t.width=e.offsetWidth||0,t.top=e.offsetTop,t.left=e.offsetLeft}return null}componentDidUpdate(){}render(){return this.props.children}}function d({children:t,isPresent:e}){const n=(0,o.useId)(),r=(0,o.useRef)(null),i=(0,o.useRef)({width:0,height:0,top:0,left:0});return(0,o.useInsertionEffect)((()=>{const{width:t,height:o,top:s,left:a}=i.current;if(e||!r.current||!t||!o)return;r.current.dataset.motionPopId=n;const l=document.createElement("style");return document.head.appendChild(l),l.sheet&&l.sheet.insertRule(`\n          [data-motion-pop-id="${n}"] {\n            position: absolute !important;\n            width: ${t}px !important;\n            height: ${o}px !important;\n            top: ${s}px !important;\n            left: ${a}px !important;\n          }\n        `),()=>{document.head.removeChild(l)}}),[e]),o.createElement(c,{isPresent:e,childRef:r,sizeRef:i},o.cloneElement(t,{ref:r}))}const h=({children:t,initial:e,isPresent:n,onExitComplete:r,custom:i,presenceAffectsLayout:s,mode:a})=>{const c=(0,u.h)(p),h=(0,o.useId)(),f=(0,o.useMemo)((()=>({id:h,initial:e,isPresent:n,custom:i,onExitComplete:t=>{c.set(t,!0);for(const t of c.values())if(!t)return;r&&r()},register:t=>(c.set(t,!1),()=>c.delete(t))})),s?void 0:[n]);return(0,o.useMemo)((()=>{c.forEach(((t,e)=>c.set(e,!1)))}),[n]),o.useEffect((()=>{!n&&!c.size&&r&&r()}),[n]),"popLayout"===a&&(t=o.createElement(d,{isPresent:n},t)),o.createElement(l.O.Provider,{value:f},t)};function p(){return new Map}var f=n(5364),m=n(5411),v=n(6034);const g=t=>t.key||"",y=({children:t,custom:e,initial:n=!0,onExitComplete:l,exitBeforeEnter:u,presenceAffectsLayout:c=!0,mode:d="sync"})=>{u&&(d="wait",(0,v.O)(!1,"Replace exitBeforeEnter with mode='wait'"));let[p]=function(){const t=a(),[e,n]=(0,o.useState)(0),r=(0,o.useCallback)((()=>{t.current&&n(e+1)}),[e]);return[(0,o.useCallback)((()=>i.ZP.postRender(r)),[r]),e]}();const y=(0,o.useContext)(f.p).forceRender;y&&(p=y);const x=a(),w=function(t){const e=[];return o.Children.forEach(t,(t=>{(0,o.isValidElement)(t)&&e.push(t)})),e}(t);let b=w;const E=new Set,P=(0,o.useRef)(b),T=(0,o.useRef)(new Map).current,S=(0,o.useRef)(!0);if((0,s.L)((()=>{S.current=!1,function(t,e){t.forEach((t=>{const n=g(t);e.set(n,t)}))}(w,T),P.current=b})),(0,m.z)((()=>{S.current=!0,T.clear(),E.clear()})),S.current)return o.createElement(o.Fragment,null,b.map((t=>o.createElement(h,{key:g(t),isPresent:!0,initial:!!n&&void 0,presenceAffectsLayout:c,mode:d},t))));b=[...b];const k=P.current.map(g),A=w.map(g),C=k.length;for(let t=0;t<C;t++){const e=k[t];-1===A.indexOf(e)&&E.add(e)}return"wait"===d&&E.size&&(b=[]),E.forEach((t=>{if(-1!==A.indexOf(t))return;const n=T.get(t);if(!n)return;const r=k.indexOf(t);b.splice(r,0,o.createElement(h,{key:g(n),isPresent:!1,onExitComplete:()=>{T.delete(t),E.delete(t);const e=P.current.findIndex((e=>e.key===t));if(P.current.splice(e,1),!E.size){if(P.current=w,!1===x.current)return;p(),l&&l()}},custom:e,presenceAffectsLayout:c,mode:d},n))})),b=b.map((t=>{const e=t.key;return E.has(e)?t:o.createElement(h,{key:g(t),isPresent:!0,presenceAffectsLayout:c,mode:d},t)})),"production"!==r.O&&"wait"===d&&b.length>1&&console.warn('You\'re attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.'),o.createElement(o.Fragment,null,E.size?b:b.map((t=>(0,o.cloneElement)(t))))}},5364:(t,e,n)=>{"use strict";n.d(e,{p:()=>o});const o=(0,n(7294).createContext)({})},240:(t,e,n)=>{"use strict";n.d(e,{O:()=>o});const o=(0,n(7294).createContext)(null)},4104:(t,e,n)=>{"use strict";n.d(e,{E:()=>Wi});var o=n(7294);const r=(0,o.createContext)({transformPagePoint:t=>t,isStatic:!1,reducedMotion:"never"}),i=(0,o.createContext)({});var s=n(240),a=n(8868);const l=(0,o.createContext)({strict:!1});function u(t){return"object"==typeof t&&Object.prototype.hasOwnProperty.call(t,"current")}function c(t){return"string"==typeof t||Array.isArray(t)}function d(t){return"object"==typeof t&&"function"==typeof t.start}const h=["initial","animate","exit","whileHover","whileDrag","whileTap","whileFocus","whileInView"];function p(t){return d(t.animate)||h.some((e=>c(t[e])))}function f(t){return Boolean(p(t)||t.variants)}function m(t){return Array.isArray(t)?t.join(" "):t}const v=t=>({isEnabled:e=>t.some((t=>!!e[t]))}),g={measureLayout:v(["layout","layoutId","drag"]),animation:v(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:v(["exit"]),drag:v(["drag","dragControls"]),focus:v(["whileFocus"]),hover:v(["whileHover","onHoverStart","onHoverEnd"]),tap:v(["whileTap","onTap","onTapStart","onTapCancel"]),pan:v(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:v(["whileInView","onViewportEnter","onViewportLeave"])};var y=n(1741),x=n(6681);const w={hasAnimatedSinceResize:!0,hasEverUpdated:!1};let b=1;var E=n(5364);class P extends o.Component{getSnapshotBeforeUpdate(){const{visualElement:t,props:e}=this.props;return t&&t.setProps(e),null}componentDidUpdate(){}render(){return this.props.children}}const T=(0,o.createContext)({}),S=Symbol.for("motionComponentSymbol");function k({preloadedFeatures:t,createVisualElement:e,projectionNodeConstructor:n,useRender:d,useVisualState:h,Component:f}){t&&function(t){for(const e in t)"projectionNodeConstructor"===e?g.projectionNodeConstructor=t[e]:g[e].Component=t[e]}(t);const v=(0,o.forwardRef)((function(v,E){const S={...(0,o.useContext)(r),...v,layoutId:A(v)},{isStatic:k}=S;let C=null;const V=function(t){const{initial:e,animate:n}=function(t,e){if(p(t)){const{initial:e,animate:n}=t;return{initial:!1===e||c(e)?e:void 0,animate:c(n)?n:void 0}}return!1!==t.inherit?e:{}}(t,(0,o.useContext)(i));return(0,o.useMemo)((()=>({initial:e,animate:n})),[m(e),m(n)])}(v),M=k?void 0:(0,x.h)((()=>{if(w.hasEverUpdated)return b++})),R=h(v,k);if(!k&&y.j){V.visualElement=function(t,e,n,u){const c=(0,o.useContext)(i).visualElement,d=(0,o.useContext)(l),h=(0,o.useContext)(s.O),p=(0,o.useContext)(r).reducedMotion,f=(0,o.useRef)(void 0);u=u||d.renderer,!f.current&&u&&(f.current=u(t,{visualState:e,parent:c,props:n,presenceId:h?h.id:void 0,blockInitialAnimation:!!h&&!1===h.initial,reducedMotionConfig:p}));const m=f.current;return(0,a.L)((()=>{m&&m.syncRender()})),(0,o.useEffect)((()=>{m&&m.animationState&&m.animationState.animateChanges()})),(0,a.L)((()=>()=>m&&m.notifyUnmount()),[]),m}(f,R,S,e);const u=(0,o.useContext)(l).strict,c=(0,o.useContext)(T);V.visualElement&&(C=V.visualElement.loadFeatures(v,u,t,M,n||g.projectionNodeConstructor,c))}return o.createElement(P,{visualElement:V.visualElement,props:S},C,o.createElement(i.Provider,{value:V},d(f,v,M,function(t,e,n){return(0,o.useCallback)((o=>{o&&t.mount&&t.mount(o),e&&(o?e.mount(o):e.unmount()),n&&("function"==typeof n?n(o):u(n)&&(n.current=o))}),[e])}(R,V.visualElement,E),R,k,V.visualElement)))}));return v[S]=f,v}function A({layoutId:t}){const e=(0,o.useContext)(E.p).id;return e&&void 0!==t?e+"-"+t:t}function C(t){function e(e,n={}){return k(t(e,n))}if("undefined"==typeof Proxy)return e;const n=new Map;return new Proxy(e,{get:(t,o)=>(n.has(o)||n.set(o,e(o)),n.get(o))})}const V=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","svg","switch","symbol","text","tspan","use","view"];function M(t){return"string"==typeof t&&!t.includes("-")&&!!(V.indexOf(t)>-1||/[A-Z]/.test(t))}const R={},j=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],O=new Set(j);function L(t,{layout:e,layoutId:n}){return O.has(t)||t.startsWith("origin")||(e||void 0!==n)&&(!!R[t]||"opacity"===t)}const F=t=>void 0!==t&&!!t.getVelocity,D={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},I=(t,e)=>j.indexOf(t)-j.indexOf(e);function N(t){return t.startsWith("--")}const B=(t,e)=>e&&"number"==typeof t?e.transform(t):t,U=(t,e)=>n=>Math.max(Math.min(n,e),t),z=t=>t%1?Number(t.toFixed(5)):t,_=/(-)?([\d]*\.?[\d])+/g,W=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,$=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function q(t){return"string"==typeof t}const H=t=>({test:e=>q(e)&&e.endsWith(t)&&1===e.split(" ").length,parse:parseFloat,transform:e=>`${e}${t}`}),Y=H("deg"),X=H("%"),Z=H("px"),G=H("vh"),K=H("vw"),Q=Object.assign(Object.assign({},X),{parse:t=>X.parse(t)/100,transform:t=>X.transform(100*t)}),J={test:t=>"number"==typeof t,parse:parseFloat,transform:t=>t},tt=Object.assign(Object.assign({},J),{transform:U(0,1)}),et=Object.assign(Object.assign({},J),{default:1}),nt={...J,transform:Math.round},ot={borderWidth:Z,borderTopWidth:Z,borderRightWidth:Z,borderBottomWidth:Z,borderLeftWidth:Z,borderRadius:Z,radius:Z,borderTopLeftRadius:Z,borderTopRightRadius:Z,borderBottomRightRadius:Z,borderBottomLeftRadius:Z,width:Z,maxWidth:Z,height:Z,maxHeight:Z,size:Z,top:Z,right:Z,bottom:Z,left:Z,padding:Z,paddingTop:Z,paddingRight:Z,paddingBottom:Z,paddingLeft:Z,margin:Z,marginTop:Z,marginRight:Z,marginBottom:Z,marginLeft:Z,rotate:Y,rotateX:Y,rotateY:Y,rotateZ:Y,scale:et,scaleX:et,scaleY:et,scaleZ:et,skew:Y,skewX:Y,skewY:Y,distance:Z,translateX:Z,translateY:Z,translateZ:Z,x:Z,y:Z,z:Z,perspective:Z,transformPerspective:Z,opacity:tt,originX:Q,originY:Q,originZ:Z,zIndex:nt,fillOpacity:tt,strokeOpacity:tt,numOctaves:nt};function rt(t,e,n,o){const{style:r,vars:i,transform:s,transformKeys:a,transformOrigin:l}=t;a.length=0;let u=!1,c=!1,d=!0;for(const t in e){const n=e[t];if(N(t)){i[t]=n;continue}const o=ot[t],h=B(n,o);if(O.has(t)){if(u=!0,s[t]=h,a.push(t),!d)continue;n!==(o.default||0)&&(d=!1)}else t.startsWith("origin")?(c=!0,l[t]=h):r[t]=h}if(u||o?r.transform=function({transform:t,transformKeys:e},{enableHardwareAcceleration:n=!0,allowTransformNone:o=!0},r,i){let s="";e.sort(I);for(const n of e)s+=`${D[n]||n}(${t[n]}) `;return n&&!t.z&&(s+="translateZ(0)"),s=s.trim(),i?s=i(t,r?"":s):o&&r&&(s="none"),s}(t,n,d,o):!e.transform&&r.transform&&(r.transform="none"),c){const{originX:t="50%",originY:e="50%",originZ:n=0}=l;r.transformOrigin=`${t} ${e} ${n}`}}function it(t,e,n){for(const o in e)F(e[o])||L(o,n)||(t[o]=e[o])}function st(t,e,n){const r={},i=function(t,e,n){const r={};return it(r,t.style||{},t),Object.assign(r,function({transformTemplate:t},e,n){return(0,o.useMemo)((()=>{const o={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};return rt(o,e,{enableHardwareAcceleration:!n},t),Object.assign({},o.vars,o.style)}),[e])}(t,e,n)),t.transformValues?t.transformValues(r):r}(t,e,n);return t.drag&&!1!==t.dragListener&&(r.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=!0===t.drag?"none":"pan-"+("x"===t.drag?"y":"x")),r.style=i,r}const at=new Set(["initial","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","onHoverStart","onHoverEnd","layoutScroll","whileInView","onViewportEnter","onViewportLeave","viewport","whileTap","onTap","onTapStart","onTapCancel","animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView","onPan","onPanStart","onPanSessionStart","onPanEnd"]);function lt(t){return at.has(t)}let ut=t=>!lt(t);try{(ct=require("@emotion/is-prop-valid").default)&&(ut=t=>t.startsWith("on")?!lt(t):ct(t))}catch(t){}var ct;function dt(t,e,n){return"string"==typeof t?t:Z.transform(e+n*t)}const ht={offset:"stroke-dashoffset",array:"stroke-dasharray"},pt={offset:"strokeDashoffset",array:"strokeDasharray"};function ft(t,{attrX:e,attrY:n,originX:o,originY:r,pathLength:i,pathSpacing:s=1,pathOffset:a=0,...l},u,c){rt(t,l,u,c),t.attrs=t.style,t.style={};const{attrs:d,style:h,dimensions:p}=t;d.transform&&(p&&(h.transform=d.transform),delete d.transform),p&&(void 0!==o||void 0!==r||h.transform)&&(h.transformOrigin=function(t,e,n){return`${dt(e,t.x,t.width)} ${dt(n,t.y,t.height)}`}(p,void 0!==o?o:.5,void 0!==r?r:.5)),void 0!==e&&(d.x=e),void 0!==n&&(d.y=n),void 0!==i&&function(t,e,n=1,o=0,r=!0){t.pathLength=1;const i=r?ht:pt;t[i.offset]=Z.transform(-o);const s=Z.transform(e),a=Z.transform(n);t[i.array]=`${s} ${a}`}(d,i,s,a,!1)}function mt(t,e){const n=(0,o.useMemo)((()=>{const n={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{},attrs:{}};return ft(n,e,{enableHardwareAcceleration:!1},t.transformTemplate),{...n.attrs,style:{...n.style}}}),[e]);if(t.style){const e={};it(e,t.style,t),n.style={...e,...n.style}}return n}function vt(t=!1){return(e,n,r,i,{latestValues:s},a)=>{const l=(M(e)?mt:st)(n,s,a),u=function(t,e,n){const o={};for(const r in t)(ut(r)||!0===n&&lt(r)||!e&&!lt(r)||t.draggable&&r.startsWith("onDrag"))&&(o[r]=t[r]);return o}(n,"string"==typeof e,t),c={...u,...l,ref:i};return r&&(c["data-projection-id"]=r),(0,o.createElement)(e,c)}}const gt=t=>t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();function yt(t,{style:e,vars:n},o,r){Object.assign(t.style,e,r&&r.getProjectionStyles(o));for(const e in n)t.style.setProperty(e,n[e])}const xt=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function wt(t,e,n,o){yt(t,e,void 0,o);for(const n in e.attrs)t.setAttribute(xt.has(n)?n:gt(n),e.attrs[n])}function bt(t){const{style:e}=t,n={};for(const o in e)(F(e[o])||L(o,t))&&(n[o]=e[o]);return n}function Et(t){const e=bt(t);for(const n in t)F(t[n])&&(e["x"===n||"y"===n?"attr"+n.toUpperCase():n]=t[n]);return e}function Pt(t,e,n,o={},r={}){return"function"==typeof e&&(e=e(void 0!==n?n:t.custom,o,r)),"string"==typeof e&&(e=t.variants&&t.variants[e]),"function"==typeof e&&(e=e(void 0!==n?n:t.custom,o,r)),e}const Tt=t=>Array.isArray(t),St=t=>Tt(t)?t[t.length-1]||0:t;function kt(t){const e=F(t)?t.get():t;return n=e,Boolean(n&&"object"==typeof n&&n.mix&&n.toValue)?e.toValue():e;var n}const At=t=>(e,n)=>{const r=(0,o.useContext)(i),a=(0,o.useContext)(s.O),l=()=>function({scrapeMotionValuesFromProps:t,createRenderState:e,onMount:n},o,r,i){const s={latestValues:Ct(o,r,i,t),renderState:e()};return n&&(s.mount=t=>n(o,t,s)),s}(t,e,r,a);return n?l():(0,x.h)(l)};function Ct(t,e,n,o){const r={},i=o(t);for(const t in i)r[t]=kt(i[t]);let{initial:s,animate:a}=t;const l=p(t),u=f(t);e&&u&&!l&&!1!==t.inherit&&(void 0===s&&(s=e.initial),void 0===a&&(a=e.animate));let c=!!n&&!1===n.initial;c=c||!1===s;const h=c?a:s;return h&&"boolean"!=typeof h&&!d(h)&&(Array.isArray(h)?h:[h]).forEach((e=>{const n=Pt(t,e);if(!n)return;const{transitionEnd:o,transition:i,...s}=n;for(const t in s){let e=s[t];Array.isArray(e)&&(e=e[c?e.length-1:0]),null!==e&&(r[t]=e)}for(const t in o)r[t]=o[t]})),r}const Vt={useVisualState:At({scrapeMotionValuesFromProps:Et,createRenderState:()=>({style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{},attrs:{}}),onMount:(t,e,{renderState:n,latestValues:o})=>{try{n.dimensions="function"==typeof e.getBBox?e.getBBox():e.getBoundingClientRect()}catch(t){n.dimensions={x:0,y:0,width:0,height:0}}ft(n,o,{enableHardwareAcceleration:!1},t.transformTemplate),wt(e,n)}})},Mt={useVisualState:At({scrapeMotionValuesFromProps:bt,createRenderState:()=>({style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}})})};var Rt;function jt(t,e,n,o={passive:!0}){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n)}function Ot(t,e,n,r){(0,o.useEffect)((()=>{const o=t.current;if(n&&o)return jt(o,e,n,r)}),[t,e,n,r])}function Lt(t){return"undefined"!=typeof PointerEvent&&t instanceof PointerEvent?!("mouse"!==t.pointerType):t instanceof MouseEvent}function Ft(t){return!!t.touches}!function(t){t.Animate="animate",t.Hover="whileHover",t.Tap="whileTap",t.Drag="whileDrag",t.Focus="whileFocus",t.InView="whileInView",t.Exit="exit"}(Rt||(Rt={}));const Dt={pageX:0,pageY:0};function It(t,e="page"){const n=t.touches[0]||t.changedTouches[0]||Dt;return{x:n[e+"X"],y:n[e+"Y"]}}function Nt(t,e="page"){return{x:t[e+"X"],y:t[e+"Y"]}}function Bt(t,e="page"){return{point:Ft(t)?It(t,e):Nt(t,e)}}const Ut=(t,e=!1)=>{const n=e=>t(e,Bt(e));return e?(o=n,t=>{const e=t instanceof MouseEvent;(!e||e&&0===t.button)&&o(t)}):n;var o},zt={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},_t={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function Wt(t){return y.j&&null===window.onpointerdown?t:y.j&&null===window.ontouchstart?_t[t]:y.j&&null===window.onmousedown?zt[t]:t}function $t(t,e,n,o){return jt(t,Wt(e),Ut(n,"pointerdown"===e),o)}function qt(t,e,n,o){return Ot(t,Wt(e),n&&Ut(n,"pointerdown"===e),o)}function Ht(t){let e=null;return()=>null===e&&(e=t,()=>{e=null})}const Yt=Ht("dragHorizontal"),Xt=Ht("dragVertical");function Zt(t){let e=!1;if("y"===t)e=Xt();else if("x"===t)e=Yt();else{const t=Yt(),n=Xt();t&&n?e=()=>{t(),n()}:(t&&t(),n&&n())}return e}function Gt(){const t=Zt(!0);return!t||(t(),!1)}function Kt(t,e,n){return(o,r)=>{Lt(o)&&!Gt()&&(t.animationState&&t.animationState.setActive(Rt.Hover,e),n&&n(o,r))}}const Qt=(t,e)=>!!e&&(t===e||Qt(t,e.parentElement));var Jt=n(5411);const te=(t,e)=>n=>e(t(n)),ee=(...t)=>t.reduce(te);var ne=n(9304),oe=n(6034);const re=new WeakMap,ie=new WeakMap,se=t=>{const e=re.get(t.target);e&&e(t)},ae=t=>{t.forEach(se)};const le={some:0,all:1};function ue(t,e,n,{root:r,margin:i,amount:s="some",once:a}){(0,o.useEffect)((()=>{if(!t)return;const o={root:null==r?void 0:r.current,rootMargin:i,threshold:"number"==typeof s?s:le[s]};return function(t,e,n){const o=function({root:t,...e}){const n=t||document;ie.has(n)||ie.set(n,{});const o=ie.get(n),r=JSON.stringify(e);return o[r]||(o[r]=new IntersectionObserver(ae,{root:t,...e})),o[r]}(e);return re.set(t,n),o.observe(t),()=>{re.delete(t),o.unobserve(t)}}(n.getInstance(),o,(t=>{const{isIntersecting:o}=t;if(e.isInView===o)return;if(e.isInView=o,a&&!o&&e.hasEnteredView)return;o&&(e.hasEnteredView=!0),n.animationState&&n.animationState.setActive(Rt.InView,o);const r=n.getProps(),i=o?r.onViewportEnter:r.onViewportLeave;i&&i(t)}))}),[t,r,i,s])}function ce(t,e,n,{fallback:r=!0}){(0,o.useEffect)((()=>{t&&r&&("production"!==ne.O&&(0,oe.O)(!1,"IntersectionObserver not available on this device. whileInView animations will trigger on mount."),requestAnimationFrame((()=>{e.hasEnteredView=!0;const{onViewportEnter:t}=n.getProps();t&&t(null),n.animationState&&n.animationState.setActive(Rt.InView,!0)})))}),[t])}const de=t=>e=>(t(e),null),he={inView:de((function({visualElement:t,whileInView:e,onViewportEnter:n,onViewportLeave:r,viewport:i={}}){const s=(0,o.useRef)({hasEnteredView:!1,isInView:!1});let a=Boolean(e||n||r);i.once&&s.current.hasEnteredView&&(a=!1),("undefined"==typeof IntersectionObserver?ce:ue)(a,s.current,t,i)})),tap:de((function({onTap:t,onTapStart:e,onTapCancel:n,whileTap:r,visualElement:i}){const s=t||e||n||r,a=(0,o.useRef)(!1),l=(0,o.useRef)(null),u={passive:!(e||t||n||f)};function c(){l.current&&l.current(),l.current=null}function d(){return c(),a.current=!1,i.animationState&&i.animationState.setActive(Rt.Tap,!1),!Gt()}function h(e,o){d()&&(Qt(i.getInstance(),e.target)?t&&t(e,o):n&&n(e,o))}function p(t,e){d()&&n&&n(t,e)}function f(t,n){c(),a.current||(a.current=!0,l.current=ee($t(window,"pointerup",h,u),$t(window,"pointercancel",p,u)),i.animationState&&i.animationState.setActive(Rt.Tap,!0),e&&e(t,n))}qt(i,"pointerdown",s?f:void 0,u),(0,Jt.z)(c)})),focus:de((function({whileFocus:t,visualElement:e}){const{animationState:n}=e;Ot(e,"focus",t?()=>{n&&n.setActive(Rt.Focus,!0)}:void 0),Ot(e,"blur",t?()=>{n&&n.setActive(Rt.Focus,!1)}:void 0)})),hover:de((function({onHoverStart:t,onHoverEnd:e,whileHover:n,visualElement:o}){qt(o,"pointerenter",t||n?Kt(o,!0,t):void 0,{passive:!t}),qt(o,"pointerleave",e||n?Kt(o,!1,e):void 0,{passive:!e})}))};function pe(){const t=(0,o.useContext)(s.O);if(null===t)return[!0,null];const{isPresent:e,onExitComplete:n,register:r}=t,i=(0,o.useId)();return(0,o.useEffect)((()=>r(i)),[]),!e&&n?[!1,()=>n&&n(i)]:[!0]}function fe(t,e){if(!Array.isArray(e))return!1;const n=e.length;if(n!==t.length)return!1;for(let o=0;o<n;o++)if(e[o]!==t[o])return!1;return!0}function me(t,e){var n={};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.indexOf(o)<0&&(n[o]=t[o]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(t);r<o.length;r++)e.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(t,o[r])&&(n[o[r]]=t[o[r]])}return n}Object.create,Object.create;const ve=(t,e,n)=>Math.min(Math.max(n,t),e);function ge(t,e){return t*Math.sqrt(1-e*e)}const ye=["duration","bounce"],xe=["stiffness","damping","mass"];function we(t,e){return e.some((e=>void 0!==t[e]))}function be(t){var{from:e=0,to:n=1,restSpeed:o=2,restDelta:r}=t,i=me(t,["from","to","restSpeed","restDelta"]);const s={done:!1,value:e};let{stiffness:a,damping:l,mass:u,velocity:c,duration:d,isResolvedFromDuration:h}=function(t){let e=Object.assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},t);if(!we(t,xe)&&we(t,ye)){const n=function({duration:t=800,bounce:e=.25,velocity:n=0,mass:o=1}){let r,i,s=1-e;s=ve(.05,1,s),t=ve(.01,10,t/1e3),s<1?(r=e=>{const o=e*s,r=o*t;return.001-(o-n)/ge(e,s)*Math.exp(-r)},i=e=>{const o=e*s*t,i=o*n+n,a=Math.pow(s,2)*Math.pow(e,2)*t,l=Math.exp(-o),u=ge(Math.pow(e,2),s);return(.001-r(e)>0?-1:1)*((i-a)*l)/u}):(r=e=>Math.exp(-e*t)*((e-n)*t+1)-.001,i=e=>Math.exp(-e*t)*(t*t*(n-e)));const a=function(t,e,n){let o=n;for(let n=1;n<12;n++)o-=t(o)/e(o);return o}(r,i,5/t);if(t*=1e3,isNaN(a))return{stiffness:100,damping:10,duration:t};{const e=Math.pow(a,2)*o;return{stiffness:e,damping:2*s*Math.sqrt(o*e),duration:t}}}(t);e=Object.assign(Object.assign(Object.assign({},e),n),{velocity:0,mass:1}),e.isResolvedFromDuration=!0}return e}(i),p=Ee,f=Ee;function m(){const t=c?-c/1e3:0,o=n-e,i=l/(2*Math.sqrt(a*u)),s=Math.sqrt(a/u)/1e3;if(void 0===r&&(r=Math.min(Math.abs(n-e)/100,.4)),i<1){const e=ge(s,i);p=r=>{const a=Math.exp(-i*s*r);return n-a*((t+i*s*o)/e*Math.sin(e*r)+o*Math.cos(e*r))},f=n=>{const r=Math.exp(-i*s*n);return i*s*r*(Math.sin(e*n)*(t+i*s*o)/e+o*Math.cos(e*n))-r*(Math.cos(e*n)*(t+i*s*o)-e*o*Math.sin(e*n))}}else if(1===i)p=e=>n-Math.exp(-s*e)*(o+(t+s*o)*e);else{const e=s*Math.sqrt(i*i-1);p=r=>{const a=Math.exp(-i*s*r),l=Math.min(e*r,300);return n-a*((t+i*s*o)*Math.sinh(l)+e*o*Math.cosh(l))/e}}}return m(),{next:t=>{const e=p(t);if(h)s.done=t>=d;else{const i=1e3*f(t),a=Math.abs(i)<=o,l=Math.abs(n-e)<=r;s.done=a&&l}return s.value=s.done?n:e,s},flipTarget:()=>{c=-c,[e,n]=[n,e],m()}}}be.needsInterpolation=(t,e)=>"string"==typeof t||"string"==typeof e;const Ee=t=>0,Pe=(t,e,n)=>{const o=e-t;return 0===o?1:(n-t)/o},Te=(t,e,n)=>-n*t+n*e+t,Se=(t,e)=>n=>Boolean(q(n)&&$.test(n)&&n.startsWith(t)||e&&Object.prototype.hasOwnProperty.call(n,e)),ke=(t,e,n)=>o=>{if(!q(o))return o;const[r,i,s,a]=o.match(_);return{[t]:parseFloat(r),[e]:parseFloat(i),[n]:parseFloat(s),alpha:void 0!==a?parseFloat(a):1}},Ae=U(0,255),Ce=Object.assign(Object.assign({},J),{transform:t=>Math.round(Ae(t))}),Ve={test:Se("rgb","red"),parse:ke("red","green","blue"),transform:({red:t,green:e,blue:n,alpha:o=1})=>"rgba("+Ce.transform(t)+", "+Ce.transform(e)+", "+Ce.transform(n)+", "+z(tt.transform(o))+")"},Me={test:Se("#"),parse:function(t){let e="",n="",o="",r="";return t.length>5?(e=t.substr(1,2),n=t.substr(3,2),o=t.substr(5,2),r=t.substr(7,2)):(e=t.substr(1,1),n=t.substr(2,1),o=t.substr(3,1),r=t.substr(4,1),e+=e,n+=n,o+=o,r+=r),{red:parseInt(e,16),green:parseInt(n,16),blue:parseInt(o,16),alpha:r?parseInt(r,16)/255:1}},transform:Ve.transform},Re={test:Se("hsl","hue"),parse:ke("hue","saturation","lightness"),transform:({hue:t,saturation:e,lightness:n,alpha:o=1})=>"hsla("+Math.round(t)+", "+X.transform(z(e))+", "+X.transform(z(n))+", "+z(tt.transform(o))+")"};function je(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function Oe({hue:t,saturation:e,lightness:n,alpha:o}){t/=360,n/=100;let r=0,i=0,s=0;if(e/=100){const o=n<.5?n*(1+e):n+e-n*e,a=2*n-o;r=je(a,o,t+1/3),i=je(a,o,t),s=je(a,o,t-1/3)}else r=i=s=n;return{red:Math.round(255*r),green:Math.round(255*i),blue:Math.round(255*s),alpha:o}}const Le=(t,e,n)=>{const o=t*t,r=e*e;return Math.sqrt(Math.max(0,n*(r-o)+o))},Fe=[Me,Ve,Re],De=t=>Fe.find((e=>e.test(t))),Ie=t=>`'${t}' is not an animatable color. Use the equivalent color code instead.`,Ne=(t,e)=>{let n=De(t),o=De(e);Ie(t),Ie(e);let r=n.parse(t),i=o.parse(e);n===Re&&(r=Oe(r),n=Ve),o===Re&&(i=Oe(i),o=Ve);const s=Object.assign({},r);return t=>{for(const e in s)"alpha"!==e&&(s[e]=Le(r[e],i[e],t));return s.alpha=Te(r.alpha,i.alpha,t),n.transform(s)}},Be={test:t=>Ve.test(t)||Me.test(t)||Re.test(t),parse:t=>Ve.test(t)?Ve.parse(t):Re.test(t)?Re.parse(t):Me.parse(t),transform:t=>q(t)?t:t.hasOwnProperty("red")?Ve.transform(t):Re.transform(t)},Ue="${c}",ze="${n}";function _e(t){"number"==typeof t&&(t=`${t}`);const e=[];let n=0;const o=t.match(W);o&&(n=o.length,t=t.replace(W,Ue),e.push(...o.map(Be.parse)));const r=t.match(_);return r&&(t=t.replace(_,ze),e.push(...r.map(J.parse))),{values:e,numColors:n,tokenised:t}}function We(t){return _e(t).values}function $e(t){const{values:e,numColors:n,tokenised:o}=_e(t),r=e.length;return t=>{let e=o;for(let o=0;o<r;o++)e=e.replace(o<n?Ue:ze,o<n?Be.transform(t[o]):z(t[o]));return e}}const qe=t=>"number"==typeof t?0:t,He={test:function(t){var e,n,o,r;return isNaN(t)&&q(t)&&(null!==(n=null===(e=t.match(_))||void 0===e?void 0:e.length)&&void 0!==n?n:0)+(null!==(r=null===(o=t.match(W))||void 0===o?void 0:o.length)&&void 0!==r?r:0)>0},parse:We,createTransformer:$e,getAnimatableNone:function(t){const e=We(t);return $e(t)(e.map(qe))}},Ye=t=>"number"==typeof t;function Xe(t,e){return Ye(t)?n=>Te(t,e,n):Be.test(t)?Ne(t,e):Qe(t,e)}const Ze=(t,e)=>{const n=[...t],o=n.length,r=t.map(((t,n)=>Xe(t,e[n])));return t=>{for(let e=0;e<o;e++)n[e]=r[e](t);return n}},Ge=(t,e)=>{const n=Object.assign(Object.assign({},t),e),o={};for(const r in n)void 0!==t[r]&&void 0!==e[r]&&(o[r]=Xe(t[r],e[r]));return t=>{for(const e in o)n[e]=o[e](t);return n}};function Ke(t){const e=He.parse(t),n=e.length;let o=0,r=0,i=0;for(let t=0;t<n;t++)o||"number"==typeof e[t]?o++:void 0!==e[t].hue?i++:r++;return{parsed:e,numNumbers:o,numRGB:r,numHSL:i}}const Qe=(t,e)=>{const n=He.createTransformer(e),o=Ke(t),r=Ke(e);return o.numHSL===r.numHSL&&o.numRGB===r.numRGB&&o.numNumbers>=r.numNumbers?ee(Ze(o.parsed,r.parsed),n):n=>`${n>0?e:t}`},Je=(t,e)=>n=>Te(t,e,n);function tn(t,e,{clamp:n=!0,ease:o,mixer:r}={}){const i=t.length;e.length,!o||!Array.isArray(o)||o.length,t[0]>t[i-1]&&(t=[].concat(t),e=[].concat(e),t.reverse(),e.reverse());const s=function(t,e,n){const o=[],r=n||("number"==typeof(i=t[0])?Je:"string"==typeof i?Be.test(i)?Ne:Qe:Array.isArray(i)?Ze:"object"==typeof i?Ge:void 0);var i;const s=t.length-1;for(let n=0;n<s;n++){let i=r(t[n],t[n+1]);if(e){const t=Array.isArray(e)?e[n]:e;i=ee(t,i)}o.push(i)}return o}(e,o,r),a=2===i?function([t,e],[n]){return o=>n(Pe(t,e,o))}(t,s):function(t,e){const n=t.length,o=n-1;return r=>{let i=0,s=!1;if(r<=t[0]?s=!0:r>=t[o]&&(i=o-1,s=!0),!s){let e=1;for(;e<n&&!(t[e]>r||e===o);e++);i=e-1}const a=Pe(t[i],t[i+1],r);return e[i](a)}}(t,s);return n?e=>a(ve(t[0],t[i-1],e)):a}const en=t=>e=>1-t(1-e),nn=t=>e=>e<=.5?t(2*e)/2:(2-t(2*(1-e)))/2,on=t=>e=>e*e*((t+1)*e-t),rn=t=>t,sn=(2,t=>Math.pow(t,2));const an=en(sn),ln=nn(sn),un=t=>1-Math.sin(Math.acos(t)),cn=en(un),dn=nn(cn),hn=on(1.525),pn=en(hn),fn=nn(hn),mn=(t=>{const e=on(1.525);return t=>(t*=2)<1?.5*e(t):.5*(2-Math.pow(2,-10*(t-1)))})(),vn=t=>{if(1===t||0===t)return t;const e=t*t;return t<.36363636363636365?7.5625*e:t<.7272727272727273?9.075*e-9.9*t+3.4:t<.9?12.066481994459833*e-19.63545706371191*t+8.898060941828255:10.8*t*t-20.52*t+10.72},gn=en(vn);function yn(t,e){return t.map((()=>e||ln)).splice(0,t.length-1)}function xn({from:t=0,to:e=1,ease:n,offset:o,duration:r=300}){const i={done:!1,value:t},s=Array.isArray(e)?e:[t,e],a=function(t,e){return t.map((t=>t*e))}(o&&o.length===s.length?o:function(t){const e=t.length;return t.map(((t,n)=>0!==n?n/(e-1):0))}(s),r);function l(){return tn(a,s,{ease:Array.isArray(n)?n:yn(s,n)})}let u=l();return{next:t=>(i.value=u(t),i.done=t>=r,i),flipTarget:()=>{s.reverse(),u=l()}}}const wn={keyframes:xn,spring:be,decay:function({velocity:t=0,from:e=0,power:n=.8,timeConstant:o=350,restDelta:r=.5,modifyTarget:i}){const s={done:!1,value:e};let a=n*t;const l=e+a,u=void 0===i?l:i(l);return u!==l&&(a=u-e),{next:t=>{const e=-a*Math.exp(-t/o);return s.done=!(e>r||e<-r),s.value=s.done?u:u+e,s},flipTarget:()=>{}}}};var bn=n(2396);function En(t,e,n=0){return t-e-n}const Pn=t=>{const e=({delta:e})=>t(e);return{start:()=>bn.ZP.update(e,!0),stop:()=>bn.qY.update(e)}};function Tn(t){var e,n,{from:o,autoplay:r=!0,driver:i=Pn,elapsed:s=0,repeat:a=0,repeatType:l="loop",repeatDelay:u=0,onPlay:c,onStop:d,onComplete:h,onRepeat:p,onUpdate:f}=t,m=me(t,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]);let v,g,y,{to:x}=m,w=0,b=m.duration,E=!1,P=!0;const T=function(t){if(Array.isArray(t.to))return xn;if(wn[t.type])return wn[t.type];const e=new Set(Object.keys(t));return e.has("ease")||e.has("duration")&&!e.has("dampingRatio")?xn:e.has("dampingRatio")||e.has("stiffness")||e.has("mass")||e.has("damping")||e.has("restSpeed")||e.has("restDelta")?be:xn}(m);(null===(n=(e=T).needsInterpolation)||void 0===n?void 0:n.call(e,o,x))&&(y=tn([0,100],[o,x],{clamp:!1}),o=0,x=100);const S=T(Object.assign(Object.assign({},m),{from:o,to:x}));return r&&(null==c||c(),v=i((function(t){if(P||(t=-t),s+=t,!E){const t=S.next(Math.max(0,s));g=t.value,y&&(g=y(g)),E=P?t.done:s<=0}null==f||f(g),E&&(0===w&&(null!=b||(b=s)),w<a?function(t,e,n,o){return o?t>=e+n:t<=-n}(s,b,u,P)&&(w++,"reverse"===l?(P=w%2==0,s=function(t,e,n=0,o=!0){return o?En(e+-t,e,n):e-(t-e)+n}(s,b,u,P)):(s=En(s,b,u),"mirror"===l&&S.flipTarget()),E=!1,p&&p()):(v.stop(),h&&h()))})),v.start()),{stop:()=>{null==d||d(),v.stop()}}}function Sn(t,e){return e?t*(1e3/e):0}const kn=t=>1e3*t,An=(t,e)=>1-3*e+3*t,Cn=(t,e)=>3*e-6*t,Vn=t=>3*t,Mn=(t,e,n)=>((An(e,n)*t+Cn(e,n))*t+Vn(e))*t,Rn=(t,e,n)=>3*An(e,n)*t*t+2*Cn(e,n)*t+Vn(e),jn=.1;function On(t,e,n,o){if(t===e&&n===o)return rn;const r=new Float32Array(11);for(let e=0;e<11;++e)r[e]=Mn(e*jn,t,n);return i=>0===i||1===i?i:Mn(function(e){let o=0,i=1;for(;10!==i&&r[i]<=e;++i)o+=jn;--i;const s=o+(e-r[i])/(r[i+1]-r[i])*jn,a=Rn(s,t,n);return a>=.001?function(t,e,n,o){for(let r=0;r<8;++r){const r=Rn(e,n,o);if(0===r)return e;e-=(Mn(e,n,o)-t)/r}return e}(e,s,t,n):0===a?s:function(t,e,n,o,r){let i,s,a=0;do{s=e+(n-e)/2,i=Mn(s,o,r)-t,i>0?n=s:e=s}while(Math.abs(i)>1e-7&&++a<10);return s}(e,o,o+jn,t,n)}(i),e,o)}const Ln={linear:rn,easeIn:sn,easeInOut:ln,easeOut:an,circIn:un,circInOut:dn,circOut:cn,backIn:hn,backInOut:fn,backOut:pn,anticipate:mn,bounceIn:gn,bounceInOut:t=>t<.5?.5*(1-vn(1-2*t)):.5*vn(2*t-1)+.5,bounceOut:vn},Fn=t=>{if(Array.isArray(t)){t.length;const[e,n,o,r]=t;return On(e,n,o,r)}return"string"==typeof t?Ln[t]:t},Dn=(t,e)=>!("zIndex"===t||"number"!=typeof e&&!Array.isArray(e)&&("string"!=typeof e||!He.test(e)||e.startsWith("url("))),In=()=>({type:"spring",stiffness:500,damping:25,restSpeed:10}),Nn=t=>({type:"spring",stiffness:550,damping:0===t?2*Math.sqrt(550):30,restSpeed:10}),Bn=()=>({type:"keyframes",ease:"linear",duration:.3}),Un=t=>({type:"keyframes",duration:.8,values:t}),zn={x:In,y:In,z:In,rotate:In,rotateX:In,rotateY:In,rotateZ:In,scaleX:Nn,scaleY:Nn,scale:Nn,opacity:Bn,backgroundColor:Bn,color:Bn,default:Nn},_n=(t,e)=>{let n;return n=Tt(e)?Un:zn[t]||zn.default,{to:e,...n(e)}},Wn=new Set(["brightness","contrast","saturate","opacity"]);function $n(t){let[e,n]=t.slice(0,-1).split("(");if("drop-shadow"===e)return t;const[o]=n.match(_)||[];if(!o)return t;const r=n.replace(o,"");let i=Wn.has(e)?1:0;return o!==n&&(i*=100),e+"("+i+r+")"}const qn=/([a-z-]*)\(.*?\)/g,Hn=Object.assign(Object.assign({},He),{getAnimatableNone:t=>{const e=t.match(qn);return e?e.map($n).join(" "):t}}),Yn={...ot,color:Be,backgroundColor:Be,outlineColor:Be,fill:Be,stroke:Be,borderColor:Be,borderTopColor:Be,borderRightColor:Be,borderBottomColor:Be,borderLeftColor:Be,filter:Hn,WebkitFilter:Hn},Xn=t=>Yn[t];function Zn(t,e){var n;let o=Xn(t);return o!==Hn&&(o=He),null===(n=o.getAnimatableNone)||void 0===n?void 0:n.call(o,e)}let Gn=!1;function Kn({ease:t,times:e,yoyo:n,flip:o,loop:r,...i}){const s={...i};return e&&(s.offset=e),i.duration&&(s.duration=kn(i.duration)),i.repeatDelay&&(s.repeatDelay=kn(i.repeatDelay)),t&&(s.ease=(t=>Array.isArray(t)&&"number"!=typeof t[0])(t)?t.map(Fn):Fn(t)),"tween"===i.type&&(s.type="keyframes"),(n||r||o)&&(Gn=!0,n?s.repeatType="reverse":r?s.repeatType="loop":o&&(s.repeatType="mirror"),s.repeat=r||n||o||i.repeat),"spring"!==i.type&&(s.type="keyframes"),s}function Qn(t,e,n){return Array.isArray(e.to)&&void 0===t.duration&&(t.duration=.8),function(t){Array.isArray(t.to)&&null===t.to[0]&&(t.to=[...t.to],t.to[0]=t.from)}(e),function({when:t,delay:e,delayChildren:n,staggerChildren:o,staggerDirection:r,repeat:i,repeatType:s,repeatDelay:a,from:l,...u}){return!!Object.keys(u).length}(t)||(t={...t,..._n(n,e.to)}),{...e,...Kn(t)}}function Jn(t){return 0===t||"string"==typeof t&&0===parseFloat(t)&&-1===t.indexOf(" ")}function to(t){return"number"==typeof t?0:Zn("",t)}function eo(t,e){return t[e]||t.default||t}function no(t,e,n,o={}){return e.start((r=>{let i,s;const a=function(t,e,n,o,r){const i=eo(o,t)||{};let s=void 0!==i.from?i.from:e.get();const a=Dn(t,n);return"none"===s&&a&&"string"==typeof n?s=Zn(t,n):Jn(s)&&"string"==typeof n?s=to(n):!Array.isArray(n)&&Jn(n)&&"string"==typeof s&&(n=to(s)),Dn(t,s)&&a&&!1!==i.type?function(){const o={from:s,to:n,velocity:e.getVelocity(),onComplete:r,onUpdate:t=>e.set(t)};return"inertia"===i.type||"decay"===i.type?function({from:t=0,velocity:e=0,min:n,max:o,power:r=.8,timeConstant:i=750,bounceStiffness:s=500,bounceDamping:a=10,restDelta:l=1,modifyTarget:u,driver:c,onUpdate:d,onComplete:h,onStop:p}){let f;function m(t){return void 0!==n&&t<n||void 0!==o&&t>o}function v(t){return void 0===n?o:void 0===o||Math.abs(n-t)<Math.abs(o-t)?n:o}function g(t){null==f||f.stop(),f=Tn(Object.assign(Object.assign({},t),{driver:c,onUpdate:e=>{var n;null==d||d(e),null===(n=t.onUpdate)||void 0===n||n.call(t,e)},onComplete:h,onStop:p}))}function y(t){g(Object.assign({type:"spring",stiffness:s,damping:a,restDelta:l},t))}if(m(t))y({from:t,velocity:e,to:v(t)});else{let o=r*e+t;void 0!==u&&(o=u(o));const s=v(o),a=s===n?-1:1;let c,d;const h=t=>{c=d,d=t,e=Sn(t-c,(0,bn.$B)().delta),(1===a&&t>s||-1===a&&t<s)&&y({from:t,to:s,velocity:e})};g({type:"decay",from:t,velocity:e,timeConstant:i,power:r,restDelta:l,modifyTarget:u,onUpdate:m(o)?h:void 0})}return{stop:()=>null==f?void 0:f.stop()}}({...o,...i}):Tn({...Qn(i,o,t),onUpdate:t=>{o.onUpdate(t),i.onUpdate&&i.onUpdate(t)},onComplete:()=>{o.onComplete(),i.onComplete&&i.onComplete()}})}:function(){const t=St(n);return e.set(t),r(),i.onUpdate&&i.onUpdate(t),i.onComplete&&i.onComplete(),{stop:()=>{}}}}(t,e,n,o,r),l=function(t,e){var n,o;return null!==(o=null!==(n=(eo(t,e)||{}).delay)&&void 0!==n?n:t.delay)&&void 0!==o?o:0}(o,t),u=()=>s=a();return l?i=window.setTimeout(u,kn(l)):u(),()=>{clearTimeout(i),s&&s.stop()}}))}function oo(t,e){-1===t.indexOf(e)&&t.push(e)}function ro(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}class io{constructor(){this.subscriptions=[]}add(t){return oo(this.subscriptions,t),()=>ro(this.subscriptions,t)}notify(t,e,n){const o=this.subscriptions.length;if(o)if(1===o)this.subscriptions[0](t,e,n);else for(let r=0;r<o;r++){const o=this.subscriptions[r];o&&o(t,e,n)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}class so{constructor(t){var e;this.version="7.3.2",this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new io,this.velocityUpdateSubscribers=new io,this.renderSubscribers=new io,this.canTrackVelocity=!1,this.updateAndNotify=(t,e=!0)=>{this.prev=this.current,this.current=t;const{delta:n,timestamp:o}=(0,bn.$B)();this.lastUpdated!==o&&(this.timeDelta=n,this.lastUpdated=o,bn.ZP.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.updateSubscribers.notify(this.current),this.velocityUpdateSubscribers.getSize()&&this.velocityUpdateSubscribers.notify(this.getVelocity()),e&&this.renderSubscribers.notify(this.current)},this.scheduleVelocityCheck=()=>bn.ZP.postRender(this.velocityCheck),this.velocityCheck=({timestamp:t})=>{t!==this.lastUpdated&&(this.prev=this.current,this.velocityUpdateSubscribers.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=t,this.canTrackVelocity=(e=this.current,!isNaN(parseFloat(e)))}onChange(t){return this.updateSubscribers.add(t)}clearListeners(){this.updateSubscribers.clear()}onRenderRequest(t){return t(this.get()),this.renderSubscribers.add(t)}attach(t){this.passiveEffect=t}set(t,e=!0){e&&this.passiveEffect?this.passiveEffect(t,this.updateAndNotify):this.updateAndNotify(t,e)}get(){return this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?Sn(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(t){return this.stop(),new Promise((e=>{this.hasAnimated=!0,this.stopAnimation=t(e)})).then((()=>this.clearAnimation()))}stop(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()}isAnimating(){return!!this.stopAnimation}clearAnimation(){this.stopAnimation=null}destroy(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()}}function ao(t){return new so(t)}const lo=t=>e=>e.test(t),uo=[J,Z,X,Y,K,G,{test:t=>"auto"===t,parse:t=>t}],co=t=>uo.find(lo(t)),ho=[...uo,Be,He],po=t=>ho.find(lo(t));function fo(t,e,n){const o=t.getProps();return Pt(o,e,void 0!==n?n:o.custom,function(t){const e={};return t.forEachValue(((t,n)=>e[n]=t.get())),e}(t),function(t){const e={};return t.forEachValue(((t,n)=>e[n]=t.getVelocity())),e}(t))}function mo(t,e,n){t.hasValue(e)?t.getValue(e).set(n):t.addValue(e,ao(n))}function vo(t,e){if(e)return(e[t]||e.default||e).from}function go(t){return Boolean(F(t)&&t.add)}function yo(t,e,n={}){var o;const r=fo(t,e,n.custom);let{transition:i=t.getDefaultTransition()||{}}=r||{};n.transitionOverride&&(i=n.transitionOverride);const s=r?()=>xo(t,r,n):()=>Promise.resolve(),a=(null===(o=t.variantChildren)||void 0===o?void 0:o.size)?(o=0)=>{const{delayChildren:r=0,staggerChildren:s,staggerDirection:a}=i;return function(t,e,n=0,o=0,r=1,i){const s=[],a=(t.variantChildren.size-1)*o,l=1===r?(t=0)=>t*o:(t=0)=>a-t*o;return Array.from(t.variantChildren).sort(wo).forEach(((t,o)=>{s.push(yo(t,e,{...i,delay:n+l(o)}).then((()=>t.notifyAnimationComplete(e))))})),Promise.all(s)}(t,e,r+o,s,a,n)}:()=>Promise.resolve(),{when:l}=i;if(l){const[t,e]="beforeChildren"===l?[s,a]:[a,s];return t().then(e)}return Promise.all([s(),a(n.delay)])}function xo(t,e,{delay:n=0,transitionOverride:o,type:r}={}){var i;let{transition:s=t.getDefaultTransition(),transitionEnd:a,...l}=t.makeTargetAnimatable(e);const u=t.getValue("willChange");o&&(s=o);const c=[],d=r&&(null===(i=t.animationState)||void 0===i?void 0:i.getState()[r]);for(const e in l){const o=t.getValue(e),r=l[e];if(!o||void 0===r||d&&bo(d,e))continue;let i={delay:n,...s};t.shouldReduceMotion&&O.has(e)&&(i={...i,type:!1,delay:0});let a=no(e,o,r,i);go(u)&&(u.add(e),a=a.then((()=>u.remove(e)))),c.push(a)}return Promise.all(c).then((()=>{a&&function(t,e){const n=fo(t,e);let{transitionEnd:o={},transition:r={},...i}=n?t.makeTargetAnimatable(n,!1):{};i={...i,...o};for(const e in i)mo(t,e,St(i[e]))}(t,a)}))}function wo(t,e){return t.sortNodePosition(e)}function bo({protectedKeys:t,needsAnimating:e},n){const o=t.hasOwnProperty(n)&&!0!==e[n];return e[n]=!1,o}const Eo=[Rt.Animate,Rt.InView,Rt.Focus,Rt.Hover,Rt.Tap,Rt.Drag,Rt.Exit],Po=[...Eo].reverse(),To=Eo.length;function So(t){let e=function(t){return e=>Promise.all(e.map((({animation:e,options:n})=>function(t,e,n={}){let o;if(t.notifyAnimationStart(e),Array.isArray(e)){const r=e.map((e=>yo(t,e,n)));o=Promise.all(r)}else if("string"==typeof e)o=yo(t,e,n);else{const r="function"==typeof e?fo(t,e,n.custom):e;o=xo(t,r,n)}return o.then((()=>t.notifyAnimationComplete(e)))}(t,e,n))))}(t);const n={[Rt.Animate]:ko(!0),[Rt.InView]:ko(),[Rt.Hover]:ko(),[Rt.Tap]:ko(),[Rt.Drag]:ko(),[Rt.Focus]:ko(),[Rt.Exit]:ko()};let o=!0;const r=(e,n)=>{const o=fo(t,n);if(o){const{transition:t,transitionEnd:n,...r}=o;e={...e,...r,...n}}return e};function i(i,s){var a;const l=t.getProps(),u=t.getVariantContext(!0)||{},h=[],p=new Set;let f={},m=1/0;for(let e=0;e<To;e++){const y=Po[e],x=n[y],w=null!==(a=l[y])&&void 0!==a?a:u[y],b=c(w),E=y===s?x.isActive:null;!1===E&&(m=e);let P=w===u[y]&&w!==l[y]&&b;if(P&&o&&t.manuallyAnimateOnMount&&(P=!1),x.protectedKeys={...f},!x.isActive&&null===E||!w&&!x.prevProp||d(w)||"boolean"==typeof w)continue;const T=(v=x.prevProp,"string"==typeof(g=w)?g!==v:!!Array.isArray(g)&&!fe(g,v));let S=T||y===s&&x.isActive&&!P&&b||e>m&&b;const k=Array.isArray(w)?w:[w];let A=k.reduce(r,{});!1===E&&(A={});const{prevResolvedValues:C={}}=x,V={...C,...A},M=t=>{S=!0,p.delete(t),x.needsAnimating[t]=!0};for(const t in V){const e=A[t],n=C[t];f.hasOwnProperty(t)||(e!==n?Tt(e)&&Tt(n)?!fe(e,n)||T?M(t):x.protectedKeys[t]=!0:void 0!==e?M(t):p.add(t):void 0!==e&&p.has(t)?M(t):x.protectedKeys[t]=!0)}x.prevProp=w,x.prevResolvedValues=A,x.isActive&&(f={...f,...A}),o&&t.blockInitialAnimation&&(S=!1),S&&!P&&h.push(...k.map((t=>({animation:t,options:{type:y,...i}}))))}var v,g;if(p.size){const e={};p.forEach((n=>{const o=t.getBaseTarget(n);void 0!==o&&(e[n]=o)})),h.push({animation:e})}let y=Boolean(h.length);return o&&!1===l.initial&&!t.manuallyAnimateOnMount&&(y=!1),o=!1,y?e(h):Promise.resolve()}return{animateChanges:i,setActive:function(e,o,r){var s;if(n[e].isActive===o)return Promise.resolve();null===(s=t.variantChildren)||void 0===s||s.forEach((t=>{var n;return null===(n=t.animationState)||void 0===n?void 0:n.setActive(e,o)})),n[e].isActive=o;const a=i(r,e);for(const t in n)n[t].protectedKeys={};return a},setAnimateFunction:function(n){e=n(t)},getState:()=>n}}function ko(t=!1){return{isActive:t,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}const Ao={animation:de((({visualElement:t,animate:e})=>{t.animationState||(t.animationState=So(t)),d(e)&&(0,o.useEffect)((()=>e.subscribe(t)),[e])})),exit:de((t=>{const{custom:e,visualElement:n}=t,[r,i]=pe(),a=(0,o.useContext)(s.O);(0,o.useEffect)((()=>{n.isPresent=r;const t=n.animationState&&n.animationState.setActive(Rt.Exit,!r,{custom:a&&a.custom||e});t&&!r&&t.then(i)}),[r])}))},Co=t=>t.hasOwnProperty("x")&&t.hasOwnProperty("y"),Vo=t=>Co(t)&&t.hasOwnProperty("z"),Mo=(t,e)=>Math.abs(t-e);function Ro(t,e){if(Ye(t)&&Ye(e))return Mo(t,e);if(Co(t)&&Co(e)){const n=Mo(t.x,e.x),o=Mo(t.y,e.y),r=Vo(t)&&Vo(e)?Mo(t.z,e.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2)+Math.pow(r,2))}}class jo{constructor(t,e,{transformPagePoint:n}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=()=>{if(!this.lastMoveEvent||!this.lastMoveEventInfo)return;const t=Fo(this.lastMoveEventInfo,this.history),e=null!==this.startEvent,n=Ro(t.offset,{x:0,y:0})>=3;if(!e&&!n)return;const{point:o}=t,{timestamp:r}=(0,bn.$B)();this.history.push({...o,timestamp:r});const{onStart:i,onMove:s}=this.handlers;e||(i&&i(this.lastMoveEvent,t),this.startEvent=this.lastMoveEvent),s&&s(this.lastMoveEvent,t)},this.handlePointerMove=(t,e)=>{this.lastMoveEvent=t,this.lastMoveEventInfo=Oo(e,this.transformPagePoint),Lt(t)&&0===t.buttons?this.handlePointerUp(t,e):bn.ZP.update(this.updatePoint,!0)},this.handlePointerUp=(t,e)=>{this.end();const{onEnd:n,onSessionEnd:o}=this.handlers,r=Fo(Oo(e,this.transformPagePoint),this.history);this.startEvent&&n&&n(t,r),o&&o(t,r)},Ft(t)&&t.touches.length>1)return;this.handlers=e,this.transformPagePoint=n;const o=Oo(Bt(t),this.transformPagePoint),{point:r}=o,{timestamp:i}=(0,bn.$B)();this.history=[{...r,timestamp:i}];const{onSessionStart:s}=e;s&&s(t,Fo(o,this.history)),this.removeListeners=ee($t(window,"pointermove",this.handlePointerMove),$t(window,"pointerup",this.handlePointerUp),$t(window,"pointercancel",this.handlePointerUp))}updateHandlers(t){this.handlers=t}end(){this.removeListeners&&this.removeListeners(),bn.qY.update(this.updatePoint)}}function Oo(t,e){return e?{point:e(t.point)}:t}function Lo(t,e){return{x:t.x-e.x,y:t.y-e.y}}function Fo({point:t},e){return{point:t,delta:Lo(t,Io(e)),offset:Lo(t,Do(e)),velocity:No(e,.1)}}function Do(t){return t[0]}function Io(t){return t[t.length-1]}function No(t,e){if(t.length<2)return{x:0,y:0};let n=t.length-1,o=null;const r=Io(t);for(;n>=0&&(o=t[n],!(r.timestamp-o.timestamp>kn(e)));)n--;if(!o)return{x:0,y:0};const i=(r.timestamp-o.timestamp)/1e3;if(0===i)return{x:0,y:0};const s={x:(r.x-o.x)/i,y:(r.y-o.y)/i};return s.x===1/0&&(s.x=0),s.y===1/0&&(s.y=0),s}function Bo(t){return t.max-t.min}function Uo(t,e=0,n=.01){return Ro(t,e)<n}function zo(t,e,n,o=.5){t.origin=o,t.originPoint=Te(e.min,e.max,t.origin),t.scale=Bo(n)/Bo(e),(Uo(t.scale,1,1e-4)||isNaN(t.scale))&&(t.scale=1),t.translate=Te(n.min,n.max,t.origin)-t.originPoint,(Uo(t.translate)||isNaN(t.translate))&&(t.translate=0)}function _o(t,e,n,o){zo(t.x,e.x,n.x,null==o?void 0:o.originX),zo(t.y,e.y,n.y,null==o?void 0:o.originY)}function Wo(t,e,n){t.min=n.min+e.min,t.max=t.min+Bo(e)}function $o(t,e,n){t.min=e.min-n.min,t.max=t.min+Bo(e)}function qo(t,e,n){$o(t.x,e.x,n.x),$o(t.y,e.y,n.y)}function Ho(t,e,n){return{min:void 0!==e?t.min+e:void 0,max:void 0!==n?t.max+n-(t.max-t.min):void 0}}function Yo(t,e){let n=e.min-t.min,o=e.max-t.max;return e.max-e.min<t.max-t.min&&([n,o]=[o,n]),{min:n,max:o}}const Xo=.35;function Zo(t,e,n){return{min:Go(t,e),max:Go(t,n)}}function Go(t,e){var n;return"number"==typeof t?t:null!==(n=t[e])&&void 0!==n?n:0}function Ko(t){return[t("x"),t("y")]}function Qo({top:t,left:e,right:n,bottom:o}){return{x:{min:e,max:n},y:{min:t,max:o}}}function Jo(t){return void 0===t||1===t}function tr({scale:t,scaleX:e,scaleY:n}){return!Jo(t)||!Jo(e)||!Jo(n)}function er(t){return tr(t)||nr(t.x)||nr(t.y)||t.z||t.rotate||t.rotateX||t.rotateY}function nr(t){return t&&"0%"!==t}function or(t,e,n){return n+e*(t-n)}function rr(t,e,n,o,r){return void 0!==r&&(t=or(t,r,o)),or(t,n,o)+e}function ir(t,e=0,n=1,o,r){t.min=rr(t.min,e,n,o,r),t.max=rr(t.max,e,n,o,r)}function sr(t,{x:e,y:n}){ir(t.x,e.translate,e.scale,e.originPoint),ir(t.y,n.translate,n.scale,n.originPoint)}function ar(t,e){t.min=t.min+e,t.max=t.max+e}function lr(t,e,[n,o,r]){const i=void 0!==e[r]?e[r]:.5,s=Te(t.min,t.max,i);ir(t,e[n],e[o],s,e.scale)}const ur=["x","scaleX","originX"],cr=["y","scaleY","originY"];function dr(t,e){lr(t.x,e,ur),lr(t.y,e,cr)}function hr(t,e){return Qo(function(t,e){if(!e)return t;const n=e({x:t.left,y:t.top}),o=e({x:t.right,y:t.bottom});return{top:n.y,left:n.x,bottom:o.y,right:o.x}}(t.getBoundingClientRect(),e))}const pr=new WeakMap;class fr{constructor(t){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic={x:{min:0,max:0},y:{min:0,max:0}},this.visualElement=t}start(t,{snapToCursor:e=!1}={}){!1!==this.visualElement.isPresent&&(this.panSession=new jo(t,{onSessionStart:t=>{this.stopAnimation(),e&&this.snapToCursor(Bt(t,"page").point)},onStart:(t,e)=>{var n;const{drag:o,dragPropagation:r,onDragStart:i}=this.getProps();(!o||r||(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=Zt(o),this.openGlobalLock))&&(this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),Ko((t=>{var e,n;let o=this.getAxisMotionValue(t).get()||0;if(X.test(o)){const r=null===(n=null===(e=this.visualElement.projection)||void 0===e?void 0:e.layout)||void 0===n?void 0:n.actual[t];r&&(o=Bo(r)*(parseFloat(o)/100))}this.originPoint[t]=o})),null==i||i(t,e),null===(n=this.visualElement.animationState)||void 0===n||n.setActive(Rt.Drag,!0))},onMove:(t,e)=>{const{dragPropagation:n,dragDirectionLock:o,onDirectionLock:r,onDrag:i}=this.getProps();if(!n&&!this.openGlobalLock)return;const{offset:s}=e;if(o&&null===this.currentDirection)return this.currentDirection=function(t,e=10){let n=null;return Math.abs(t.y)>e?n="y":Math.abs(t.x)>e&&(n="x"),n}(s),void(null!==this.currentDirection&&(null==r||r(this.currentDirection)));this.updateAxis("x",e.point,s),this.updateAxis("y",e.point,s),this.visualElement.syncRender(),null==i||i(t,e)},onSessionEnd:(t,e)=>this.stop(t,e)},{transformPagePoint:this.visualElement.getTransformPagePoint()}))}stop(t,e){const n=this.isDragging;if(this.cancel(),!n)return;const{velocity:o}=e;this.startAnimation(o);const{onDragEnd:r}=this.getProps();null==r||r(t,e)}cancel(){var t,e;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(t=this.panSession)||void 0===t||t.end(),this.panSession=void 0;const{dragPropagation:n}=this.getProps();!n&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(e=this.visualElement.animationState)||void 0===e||e.setActive(Rt.Drag,!1)}updateAxis(t,e,n){const{drag:o}=this.getProps();if(!n||!mr(t,o,this.currentDirection))return;const r=this.getAxisMotionValue(t);let i=this.originPoint[t]+n[t];this.constraints&&this.constraints[t]&&(i=function(t,{min:e,max:n},o){return void 0!==e&&t<e?t=o?Te(e,t,o.min):Math.max(t,e):void 0!==n&&t>n&&(t=o?Te(n,t,o.max):Math.min(t,n)),t}(i,this.constraints[t],this.elastic[t])),r.set(i)}resolveConstraints(){const{dragConstraints:t,dragElastic:e}=this.getProps(),{layout:n}=this.visualElement.projection||{},o=this.constraints;t&&u(t)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!t||!n)&&function(t,{top:e,left:n,bottom:o,right:r}){return{x:Ho(t.x,n,r),y:Ho(t.y,e,o)}}(n.actual,t),this.elastic=function(t=Xo){return!1===t?t=0:!0===t&&(t=Xo),{x:Zo(t,"left","right"),y:Zo(t,"top","bottom")}}(e),o!==this.constraints&&n&&this.constraints&&!this.hasMutatedConstraints&&Ko((t=>{this.getAxisMotionValue(t)&&(this.constraints[t]=function(t,e){const n={};return void 0!==e.min&&(n.min=e.min-t.min),void 0!==e.max&&(n.max=e.max-t.min),n}(n.actual[t],this.constraints[t]))}))}resolveRefConstraints(){const{dragConstraints:t,onMeasureDragConstraints:e}=this.getProps();if(!t||!u(t))return!1;const n=t.current,{projection:o}=this.visualElement;if(!o||!o.layout)return!1;const r=function(t,e,n){const o=hr(t,n),{scroll:r}=e;return r&&(ar(o.x,r.x),ar(o.y,r.y)),o}(n,o.root,this.visualElement.getTransformPagePoint());let i=function(t,e){return{x:Yo(t.x,e.x),y:Yo(t.y,e.y)}}(o.layout.actual,r);if(e){const t=e(function({x:t,y:e}){return{top:e.min,right:t.max,bottom:e.max,left:t.min}}(i));this.hasMutatedConstraints=!!t,t&&(i=Qo(t))}return i}startAnimation(t){const{drag:e,dragMomentum:n,dragElastic:o,dragTransition:r,dragSnapToOrigin:i,onDragTransitionEnd:s}=this.getProps(),a=this.constraints||{},l=Ko((s=>{var l;if(!mr(s,e,this.currentDirection))return;let u=null!==(l=null==a?void 0:a[s])&&void 0!==l?l:{};i&&(u={min:0,max:0});const c=o?200:1e6,d=o?40:1e7,h={type:"inertia",velocity:n?t[s]:0,bounceStiffness:c,bounceDamping:d,timeConstant:750,restDelta:1,restSpeed:10,...r,...u};return this.startAxisValueAnimation(s,h)}));return Promise.all(l).then(s)}startAxisValueAnimation(t,e){return no(t,this.getAxisMotionValue(t),0,e)}stopAnimation(){Ko((t=>this.getAxisMotionValue(t).stop()))}getAxisMotionValue(t){var e,n;const o="_drag"+t.toUpperCase();return this.visualElement.getProps()[o]||this.visualElement.getValue(t,null!==(n=null===(e=this.visualElement.getProps().initial)||void 0===e?void 0:e[t])&&void 0!==n?n:0)}snapToCursor(t){Ko((e=>{const{drag:n}=this.getProps();if(!mr(e,n,this.currentDirection))return;const{projection:o}=this.visualElement,r=this.getAxisMotionValue(e);if(o&&o.layout){const{min:n,max:i}=o.layout.actual[e];r.set(t[e]-Te(n,i,.5))}}))}scalePositionWithinConstraints(){var t;const{drag:e,dragConstraints:n}=this.getProps(),{projection:o}=this.visualElement;if(!u(n)||!o||!this.constraints)return;this.stopAnimation();const r={x:0,y:0};Ko((t=>{const e=this.getAxisMotionValue(t);if(e){const n=e.get();r[t]=function(t,e){let n=.5;const o=Bo(t),r=Bo(e);return r>o?n=Pe(e.min,e.max-o,t.min):o>r&&(n=Pe(t.min,t.max-r,e.min)),ve(0,1,n)}({min:n,max:n},this.constraints[t])}}));const{transformTemplate:i}=this.visualElement.getProps();this.visualElement.getInstance().style.transform=i?i({},""):"none",null===(t=o.root)||void 0===t||t.updateScroll(),o.updateLayout(),this.resolveConstraints(),Ko((t=>{if(!mr(t,e,null))return;const n=this.getAxisMotionValue(t),{min:o,max:i}=this.constraints[t];n.set(Te(o,i,r[t]))}))}addListeners(){var t;pr.set(this.visualElement,this);const e=$t(this.visualElement.getInstance(),"pointerdown",(t=>{const{drag:e,dragListener:n=!0}=this.getProps();e&&n&&this.start(t)})),n=()=>{const{dragConstraints:t}=this.getProps();u(t)&&(this.constraints=this.resolveRefConstraints())},{projection:o}=this.visualElement,r=o.addEventListener("measure",n);o&&!o.layout&&(null===(t=o.root)||void 0===t||t.updateScroll(),o.updateLayout()),n();const i=jt(window,"resize",(()=>this.scalePositionWithinConstraints())),s=o.addEventListener("didUpdate",(({delta:t,hasLayoutChanged:e})=>{this.isDragging&&e&&(Ko((e=>{const n=this.getAxisMotionValue(e);n&&(this.originPoint[e]+=t[e].translate,n.set(n.get()+t[e].translate))})),this.visualElement.syncRender())}));return()=>{i(),e(),r(),null==s||s()}}getProps(){const t=this.visualElement.getProps(),{drag:e=!1,dragDirectionLock:n=!1,dragPropagation:o=!1,dragConstraints:r=!1,dragElastic:i=Xo,dragMomentum:s=!0}=t;return{...t,drag:e,dragDirectionLock:n,dragPropagation:o,dragConstraints:r,dragElastic:i,dragMomentum:s}}}function mr(t,e,n){return!(!0!==e&&e!==t||null!==n&&n!==t)}const vr={pan:de((function({onPan:t,onPanStart:e,onPanEnd:n,onPanSessionStart:i,visualElement:s}){const a=t||e||n||i,l=(0,o.useRef)(null),{transformPagePoint:u}=(0,o.useContext)(r),c={onSessionStart:i,onStart:e,onMove:t,onEnd:(t,e)=>{l.current=null,n&&n(t,e)}};(0,o.useEffect)((()=>{null!==l.current&&l.current.updateHandlers(c)})),qt(s,"pointerdown",a&&function(t){l.current=new jo(t,c,{transformPagePoint:u})}),(0,Jt.z)((()=>l.current&&l.current.end()))})),drag:de((function(t){const{dragControls:e,visualElement:n}=t,r=(0,x.h)((()=>new fr(n)));(0,o.useEffect)((()=>e&&e.subscribe(r)),[r,e]),(0,o.useEffect)((()=>r.addListeners()),[r])}))},gr={current:null},yr={current:!1},xr=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","LayoutAnimationStart","SetAxisTarget","Unmount"],wr=Object.keys(g),br=wr.length,Er=({treeType:t="",build:e,getBaseTarget:n,makeTargetAnimatable:r,measureViewportBox:i,render:s,readValueFromInstance:a,removeValueFromRenderState:l,sortNodePosition:d,scrapeMotionValuesFromProps:h})=>({parent:m,props:v,presenceId:x,blockInitialAnimation:w,visualState:b,reducedMotionConfig:E},P={})=>{let T=!1;const{latestValues:S,renderState:k}=b;let A;const C=function(){const t=xr.map((()=>new io)),e={},n={clearAllListeners:()=>t.forEach((t=>t.clear())),updatePropListeners:t=>{xr.forEach((o=>{var r;const i="on"+o,s=t[i];null===(r=e[o])||void 0===r||r.call(e),s&&(e[o]=n[i](s))}))}};return t.forEach(((t,e)=>{n["on"+xr[e]]=e=>t.add(e),n["notify"+xr[e]]=(...e)=>t.notify(...e)})),n}(),V=new Map,M=new Map;let R={};const j={...S};let O;function L(){A&&T&&(D(),s(A,k,v.style,W.projection))}function D(){e(W,k,S,P,v)}function I(){C.notifyUpdate(S)}function N(t,e){const n=e.onChange((e=>{S[t]=e,v.onUpdate&&bn.ZP.update(I,!1,!0)})),o=e.onRenderRequest(W.scheduleRender);M.set(t,(()=>{n(),o()}))}const{willChange:B,...U}=h(v);for(const t in U){const e=U[t];void 0!==S[t]&&F(e)&&(e.set(S[t],!1),go(B)&&B.add(t))}const z=p(v),_=f(v),W={treeType:t,current:null,depth:m?m.depth+1:0,parent:m,children:new Set,presenceId:x,shouldReduceMotion:null,variantChildren:_?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==m?void 0:m.isMounted()),blockInitialAnimation:w,isMounted:()=>Boolean(A),mount(t){T=!0,A=W.current=t,W.projection&&W.projection.mount(t),_&&m&&!z&&(O=null==m?void 0:m.addVariantChild(W)),V.forEach(((t,e)=>N(e,t))),yr.current||function(){if(yr.current=!0,y.j)if(window.matchMedia){const t=window.matchMedia("(prefers-reduced-motion)"),e=()=>gr.current=t.matches;t.addListener(e),e()}else gr.current=!1}(),W.shouldReduceMotion="never"!==E&&("always"===E||gr.current),null==m||m.children.add(W),W.setProps(v)},unmount(){var t;null===(t=W.projection)||void 0===t||t.unmount(),bn.qY.update(I),bn.qY.render(L),M.forEach((t=>t())),null==O||O(),null==m||m.children.delete(W),C.clearAllListeners(),A=void 0,T=!1},loadFeatures(t,e,n,r,i,s){const a=[];ne.O;for(let e=0;e<br;e++){const n=wr[e],{isEnabled:r,Component:i}=g[n];r(v)&&i&&a.push((0,o.createElement)(i,{key:n,...t,visualElement:W}))}if(!W.projection&&i){W.projection=new i(r,W.getLatestValues(),m&&m.projection);const{layoutId:e,layout:n,drag:o,dragConstraints:a,layoutScroll:l}=t;W.projection.setOptions({layoutId:e,layout:n,alwaysMeasureLayout:Boolean(o)||a&&u(a),visualElement:W,scheduleRender:()=>W.scheduleRender(),animationType:"string"==typeof n?n:"both",initialPromotionConfig:s,layoutScroll:l})}return a},addVariantChild(t){var e;const n=W.getClosestVariantNode();if(n)return null===(e=n.variantChildren)||void 0===e||e.add(t),()=>n.variantChildren.delete(t)},sortNodePosition:e=>d&&t===e.treeType?d(W.getInstance(),e.getInstance()):0,getClosestVariantNode:()=>_?W:null==m?void 0:m.getClosestVariantNode(),getLayoutId:()=>v.layoutId,getInstance:()=>A,getStaticValue:t=>S[t],setStaticValue:(t,e)=>S[t]=e,getLatestValues:()=>S,setVisibility(t){W.isVisible!==t&&(W.isVisible=t,W.scheduleRender())},makeTargetAnimatable:(t,e=!0)=>r(W,t,v,e),measureViewportBox:()=>i(A,v),addValue(t,e){W.hasValue(t)&&W.removeValue(t),V.set(t,e),S[t]=e.get(),N(t,e)},removeValue(t){var e;V.delete(t),null===(e=M.get(t))||void 0===e||e(),M.delete(t),delete S[t],l(t,k)},hasValue:t=>V.has(t),getValue(t,e){let n=V.get(t);return void 0===n&&void 0!==e&&(n=ao(e),W.addValue(t,n)),n},forEachValue:t=>V.forEach(t),readValue:t=>void 0!==S[t]?S[t]:a(A,t,P),setBaseTarget(t,e){j[t]=e},getBaseTarget(t){if(n){const e=n(v,t);if(void 0!==e&&!F(e))return e}return j[t]},...C,build:()=>(D(),k),scheduleRender(){bn.ZP.render(L,!1,!0)},syncRender:L,setProps(t){(t.transformTemplate||v.transformTemplate)&&W.scheduleRender(),v=t,C.updatePropListeners(t),R=function(t,e,n){const{willChange:o}=e;for(const r in e){const i=e[r],s=n[r];if(F(i))t.addValue(r,i),go(o)&&o.add(r);else if(F(s))t.addValue(r,ao(i)),go(o)&&o.remove(r);else if(s!==i)if(t.hasValue(r)){const e=t.getValue(r);!e.hasAnimated&&e.set(i)}else{const e=t.getStaticValue(r);t.addValue(r,ao(void 0!==e?e:i))}}for(const o in n)void 0===e[o]&&t.removeValue(o);return e}(W,h(v),R)},getProps:()=>v,getVariant:t=>{var e;return null===(e=v.variants)||void 0===e?void 0:e[t]},getDefaultTransition:()=>v.transition,getTransformPagePoint:()=>v.transformPagePoint,getVariantContext(t=!1){if(t)return null==m?void 0:m.getVariantContext();if(!z){const t=(null==m?void 0:m.getVariantContext())||{};return void 0!==v.initial&&(t.initial=v.initial),t}const e={};for(let t=0;t<Tr;t++){const n=Pr[t],o=v[n];(c(o)||!1===o)&&(e[n]=o)}return e}};return W},Pr=["initial",...Eo],Tr=Pr.length;function Sr(t){return"string"==typeof t&&t.startsWith("var(--")}const kr=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function Ar(t,e,n=1){const[o,r]=function(t){const e=kr.exec(t);if(!e)return[,];const[,n,o]=e;return[n,o]}(t);if(!o)return;const i=window.getComputedStyle(e).getPropertyValue(o);return i?i.trim():Sr(r)?Ar(r,e,n+1):r}const Cr=new Set(["width","height","top","left","right","bottom","x","y"]),Vr=t=>Cr.has(t),Mr=(t,e)=>{t.set(e,!1),t.set(e)},Rr=t=>t===J||t===Z;var jr;!function(t){t.width="width",t.height="height",t.left="left",t.right="right",t.top="top",t.bottom="bottom"}(jr||(jr={}));const Or=(t,e)=>parseFloat(t.split(", ")[e]),Lr=(t,e)=>(n,{transform:o})=>{if("none"===o||!o)return 0;const r=o.match(/^matrix3d\((.+)\)$/);if(r)return Or(r[1],e);{const e=o.match(/^matrix\((.+)\)$/);return e?Or(e[1],t):0}},Fr=new Set(["x","y","z"]),Dr=j.filter((t=>!Fr.has(t))),Ir={width:({x:t},{paddingLeft:e="0",paddingRight:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),height:({y:t},{paddingTop:e="0",paddingBottom:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),top:(t,{top:e})=>parseFloat(e),left:(t,{left:e})=>parseFloat(e),bottom:({y:t},{top:e})=>parseFloat(e)+(t.max-t.min),right:({x:t},{left:e})=>parseFloat(e)+(t.max-t.min),x:Lr(4,13),y:Lr(5,14)};function Nr(t,e,n,o){return(t=>Object.keys(t).some(Vr))(e)?((t,e,n={},o={})=>{e={...e},o={...o};const r=Object.keys(e).filter(Vr);let i=[],s=!1;const a=[];if(r.forEach((r=>{const l=t.getValue(r);if(!t.hasValue(r))return;let u=n[r],c=co(u);const d=e[r];let h;if(Tt(d)){const t=d.length,e=null===d[0]?1:0;u=d[e],c=co(u);for(let n=e;n<t;n++)h?co(d[n]):(h=co(d[n]),h===c||Rr(c)&&Rr(h))}else h=co(d);if(c!==h)if(Rr(c)&&Rr(h)){const t=l.get();"string"==typeof t&&l.set(parseFloat(t)),"string"==typeof d?e[r]=parseFloat(d):Array.isArray(d)&&h===Z&&(e[r]=d.map(parseFloat))}else(null==c?void 0:c.transform)&&(null==h?void 0:h.transform)&&(0===u||0===d)?0===u?l.set(h.transform(u)):e[r]=c.transform(d):(s||(i=function(t){const e=[];return Dr.forEach((n=>{const o=t.getValue(n);void 0!==o&&(e.push([n,o.get()]),o.set(n.startsWith("scale")?1:0))})),e.length&&t.syncRender(),e}(t),s=!0),a.push(r),o[r]=void 0!==o[r]?o[r]:e[r],Mr(l,d))})),a.length){const n=a.indexOf("height")>=0?window.pageYOffset:null,r=((t,e,n)=>{const o=e.measureViewportBox(),r=e.getInstance(),i=getComputedStyle(r),{display:s}=i,a={};"none"===s&&e.setStaticValue("display",t.display||"block"),n.forEach((t=>{a[t]=Ir[t](o,i)})),e.syncRender();const l=e.measureViewportBox();return n.forEach((n=>{const o=e.getValue(n);Mr(o,a[n]),t[n]=Ir[n](l,i)})),t})(e,t,a);return i.length&&i.forEach((([e,n])=>{t.getValue(e).set(n)})),t.syncRender(),y.j&&null!==n&&window.scrollTo({top:n}),{target:r,transitionEnd:o}}return{target:e,transitionEnd:o}})(t,e,n,o):{target:e,transitionEnd:o}}const Br={treeType:"dom",readValueFromInstance(t,e){if(O.has(e)){const t=Xn(e);return t&&t.default||0}{const o=(n=t,window.getComputedStyle(n)),r=(N(e)?o.getPropertyValue(e):o[e])||0;return"string"==typeof r?r.trim():r}var n},sortNodePosition:(t,e)=>2&t.compareDocumentPosition(e)?1:-1,getBaseTarget(t,e){var n;return null===(n=t.style)||void 0===n?void 0:n[e]},measureViewportBox:(t,{transformPagePoint:e})=>hr(t,e),resetTransform(t,e,n){const{transformTemplate:o}=n;e.style.transform=o?o({},""):"none",t.scheduleRender()},restoreTransform(t,e){t.style.transform=e.style.transform},removeValueFromRenderState(t,{vars:e,style:n}){delete e[t],delete n[t]},makeTargetAnimatable(t,{transition:e,transitionEnd:n,...o},{transformValues:r},i=!0){let s=function(t,e,n){var o;const r={};for(const i in t){const t=vo(i,e);r[i]=void 0!==t?t:null===(o=n.getValue(i))||void 0===o?void 0:o.get()}return r}(o,e||{},t);if(r&&(n&&(n=r(n)),o&&(o=r(o)),s&&(s=r(s))),i){!function(t,e,n){var o,r;const i=Object.keys(e).filter((e=>!t.hasValue(e))),s=i.length;if(s)for(let a=0;a<s;a++){const s=i[a],l=e[s];let u=null;Array.isArray(l)&&(u=l[0]),null===u&&(u=null!==(r=null!==(o=n[s])&&void 0!==o?o:t.readValue(s))&&void 0!==r?r:e[s]),null!=u&&("string"==typeof u&&(/^\-?\d*\.?\d+$/.test(u)||/^0[^.\s]+$/.test(u))?u=parseFloat(u):!po(u)&&He.test(l)&&(u=Zn(s,l)),t.addValue(s,ao(u)),void 0===n[s]&&(n[s]=u),t.setBaseTarget(s,u))}}(t,o,s);const e=((t,e,n,o)=>{const r=function(t,{...e},n){const o=t.getInstance();if(!(o instanceof Element))return{target:e,transitionEnd:n};n&&(n={...n}),t.forEachValue((t=>{const e=t.get();if(!Sr(e))return;const n=Ar(e,o);n&&t.set(n)}));for(const t in e){const r=e[t];if(!Sr(r))continue;const i=Ar(r,o);i&&(e[t]=i,n&&void 0===n[t]&&(n[t]=r))}return{target:e,transitionEnd:n}}(t,e,o);return Nr(t,e=r.target,n,o=r.transitionEnd)})(t,o,s,n);n=e.transitionEnd,o=e.target}return{transition:e,transitionEnd:n,...o}},scrapeMotionValuesFromProps:bt,build(t,e,n,o,r){void 0!==t.isVisible&&(e.style.visibility=t.isVisible?"visible":"hidden"),rt(e,n,o,r.transformTemplate)},render:yt},Ur=Er(Br),zr=Er({...Br,getBaseTarget:(t,e)=>t[e],readValueFromInstance(t,e){var n;return O.has(e)?(null===(n=Xn(e))||void 0===n?void 0:n.default)||0:(e=xt.has(e)?e:gt(e),t.getAttribute(e))},scrapeMotionValuesFromProps:Et,build(t,e,n,o,r){ft(e,n,o,r.transformTemplate)},render:wt}),_r=(t,e)=>M(t)?zr(e,{enableHardwareAcceleration:!1}):Ur(e,{enableHardwareAcceleration:!0});function Wr(t,e){return e.max===e.min?0:t/(e.max-e.min)*100}const $r={correct:(t,e)=>{if(!e.target)return t;if("string"==typeof t){if(!Z.test(t))return t;t=parseFloat(t)}return`${Wr(t,e.target.x)}% ${Wr(t,e.target.y)}%`}},qr="_$css",Hr={correct:(t,{treeScale:e,projectionDelta:n})=>{const o=t,r=t.includes("var("),i=[];r&&(t=t.replace(kr,(t=>(i.push(t),qr))));const s=He.parse(t);if(s.length>5)return o;const a=He.createTransformer(t),l="number"!=typeof s[0]?1:0,u=n.x.scale*e.x,c=n.y.scale*e.y;s[0+l]/=u,s[1+l]/=c;const d=Te(u,c,.5);"number"==typeof s[2+l]&&(s[2+l]/=d),"number"==typeof s[3+l]&&(s[3+l]/=d);let h=a(s);if(r){let t=0;h=h.replace(qr,(()=>{const e=i[t];return t++,e}))}return h}};class Yr extends o.Component{componentDidMount(){const{visualElement:t,layoutGroup:e,switchLayoutGroup:n,layoutId:o}=this.props,{projection:r}=t;var i;i=Xr,Object.assign(R,i),r&&(e.group&&e.group.add(r),n&&n.register&&o&&n.register(r),r.root.didUpdate(),r.addEventListener("animationComplete",(()=>{this.safeToRemove()})),r.setOptions({...r.options,onExitComplete:()=>this.safeToRemove()})),w.hasEverUpdated=!0}getSnapshotBeforeUpdate(t){const{layoutDependency:e,visualElement:n,drag:o,isPresent:r}=this.props,i=n.projection;return i?(i.isPresent=r,o||t.layoutDependency!==e||void 0===e?i.willUpdate():this.safeToRemove(),t.isPresent!==r&&(r?i.promote():i.relegate()||bn.ZP.postRender((()=>{var t;(null===(t=i.getStack())||void 0===t?void 0:t.members.length)||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:t}=this.props.visualElement;t&&(t.root.didUpdate(),!t.currentAnimation&&t.isLead()&&this.safeToRemove())}componentWillUnmount(){const{visualElement:t,layoutGroup:e,switchLayoutGroup:n}=this.props,{projection:o}=t;o&&(o.scheduleCheckAfterUnmount(),(null==e?void 0:e.group)&&e.group.remove(o),(null==n?void 0:n.deregister)&&n.deregister(o))}safeToRemove(){const{safeToRemove:t}=this.props;null==t||t()}render(){return null}}const Xr={borderRadius:{...$r,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:$r,borderTopRightRadius:$r,borderBottomLeftRadius:$r,borderBottomRightRadius:$r,boxShadow:Hr},Zr={measureLayout:function(t){const[e,n]=pe(),r=(0,o.useContext)(E.p);return o.createElement(Yr,{...t,layoutGroup:r,switchLayoutGroup:(0,o.useContext)(T),isPresent:e,safeToRemove:n})}},Gr=["TopLeft","TopRight","BottomLeft","BottomRight"],Kr=Gr.length,Qr=t=>"string"==typeof t?parseFloat(t):t,Jr=t=>"number"==typeof t||Z.test(t);function ti(t,e){var n;return null!==(n=t[e])&&void 0!==n?n:t.borderRadius}const ei=oi(0,.5,cn),ni=oi(.5,.95,rn);function oi(t,e,n){return o=>o<t?0:o>e?1:n(Pe(t,e,o))}function ri(t,e){t.min=e.min,t.max=e.max}function ii(t,e){ri(t.x,e.x),ri(t.y,e.y)}function si(t,e,n,o,r){return t=or(t-=e,1/n,o),void 0!==r&&(t=or(t,1/r,o)),t}function ai(t,e,[n,o,r],i,s){!function(t,e=0,n=1,o=.5,r,i=t,s=t){if(X.test(e)&&(e=parseFloat(e),e=Te(s.min,s.max,e/100)-s.min),"number"!=typeof e)return;let a=Te(i.min,i.max,o);t===i&&(a-=e),t.min=si(t.min,e,n,a,r),t.max=si(t.max,e,n,a,r)}(t,e[n],e[o],e[r],e.scale,i,s)}const li=["x","scaleX","originX"],ui=["y","scaleY","originY"];function ci(t,e,n,o){ai(t.x,e,li,null==n?void 0:n.x,null==o?void 0:o.x),ai(t.y,e,ui,null==n?void 0:n.y,null==o?void 0:o.y)}function di(t){return 0===t.translate&&1===t.scale}function hi(t){return di(t.x)&&di(t.y)}function pi(t,e){return t.x.min===e.x.min&&t.x.max===e.x.max&&t.y.min===e.y.min&&t.y.max===e.y.max}function fi(t){return Bo(t.x)/Bo(t.y)}class mi{constructor(){this.members=[]}add(t){oo(this.members,t),t.scheduleRender()}remove(t){if(ro(this.members,t),t===this.prevLead&&(this.prevLead=void 0),t===this.lead){const t=this.members[this.members.length-1];t&&this.promote(t)}}relegate(t){const e=this.members.findIndex((e=>t===e));if(0===e)return!1;let n;for(let t=e;t>=0;t--){const e=this.members[t];if(!1!==e.isPresent){n=e;break}}return!!n&&(this.promote(n),!0)}promote(t,e){var n;const o=this.lead;if(t!==o&&(this.prevLead=o,this.lead=t,t.show(),o)){o.instance&&o.scheduleRender(),t.scheduleRender(),t.resumeFrom=o,e&&(t.resumeFrom.preserveOpacity=!0),o.snapshot&&(t.snapshot=o.snapshot,t.snapshot.latestValues=o.animationValues||o.latestValues,t.snapshot.isShared=!0),(null===(n=t.root)||void 0===n?void 0:n.isUpdating)&&(t.isLayoutDirty=!0);const{crossfade:r}=t.options;!1===r&&o.hide()}}exitAnimationComplete(){this.members.forEach((t=>{var e,n,o,r,i;null===(n=(e=t.options).onExitComplete)||void 0===n||n.call(e),null===(i=null===(o=t.resumingFrom)||void 0===o?void 0:(r=o.options).onExitComplete)||void 0===i||i.call(r)}))}scheduleRender(){this.members.forEach((t=>{t.instance&&t.scheduleRender(!1)}))}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function vi(t,e,n){let o=`translate3d(${t.x.translate/e.x}px, ${t.y.translate/e.y}px, 0) `;if(o+=`scale(${1/e.x}, ${1/e.y}) `,n){const{rotate:t,rotateX:e,rotateY:r}=n;t&&(o+=`rotate(${t}deg) `),e&&(o+=`rotateX(${e}deg) `),r&&(o+=`rotateY(${r}deg) `)}return o+=`scale(${t.x.scale*e.x}, ${t.y.scale*e.y})`,"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)"===o?"none":o}const gi=(t,e)=>t.depth-e.depth;class yi{constructor(){this.children=[],this.isDirty=!1}add(t){oo(this.children,t),this.isDirty=!0}remove(t){ro(this.children,t),this.isDirty=!0}forEach(t){this.isDirty&&this.children.sort(gi),this.isDirty=!1,this.children.forEach(t)}}const xi=["","X","Y","Z"];function wi({attachResizeListener:t,defaultParent:e,measureScroll:n,checkIsScrollRoot:o,resetTransform:r}){return class{constructor(t,n={},o=(null==e?void 0:e())){this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.nodes.forEach(Ai),this.nodes.forEach(Ci)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.id=t,this.latestValues=n,this.root=o?o.root||o:this,this.path=o?[...o.path,o]:[],this.parent=o,this.depth=o?o.depth+1:0,t&&this.root.registerPotentialNode(t,this);for(let t=0;t<this.path.length;t++)this.path[t].shouldResetTransform=!0;this.root===this&&(this.nodes=new yi)}addEventListener(t,e){return this.eventHandlers.has(t)||this.eventHandlers.set(t,new io),this.eventHandlers.get(t).add(e)}notifyListeners(t,...e){const n=this.eventHandlers.get(t);null==n||n.notify(...e)}hasListeners(t){return this.eventHandlers.has(t)}registerPotentialNode(t,e){this.potentialNodes.set(t,e)}mount(e,n=!1){var o;if(this.instance)return;this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;const{layoutId:r,layout:i,visualElement:s}=this.options;if(s&&!s.getInstance()&&s.mount(e),this.root.nodes.add(this),null===(o=this.parent)||void 0===o||o.children.add(this),this.id&&this.root.potentialNodes.delete(this.id),n&&(i||r)&&(this.isLayoutDirty=!0),t){let n;const o=()=>this.root.updateBlockedByResize=!1;t(e,(()=>{this.root.updateBlockedByResize=!0,clearTimeout(n),n=window.setTimeout(o,250),w.hasAnimatedSinceResize&&(w.hasAnimatedSinceResize=!1,this.nodes.forEach(ki))}))}r&&this.root.registerSharedNode(r,this),!1!==this.options.animate&&s&&(r||i)&&this.addEventListener("didUpdate",(({delta:t,hasLayoutChanged:e,hasRelativeTargetChanged:n,layout:o})=>{var r,i,a,l,u;if(this.isTreeAnimationBlocked())return this.target=void 0,void(this.relativeTarget=void 0);const c=null!==(i=null!==(r=this.options.transition)&&void 0!==r?r:s.getDefaultTransition())&&void 0!==i?i:Li,{onLayoutAnimationStart:d,onLayoutAnimationComplete:h}=s.getProps(),p=!this.targetLayout||!pi(this.targetLayout,o)||n,f=!e&&n;if((null===(a=this.resumeFrom)||void 0===a?void 0:a.instance)||f||e&&(p||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(t,f);const e={...eo(c,"layout"),onPlay:d,onComplete:h};s.shouldReduceMotion&&(e.delay=0,e.type=!1),this.startAnimation(e)}else e||0!==this.animationProgress||this.finishAnimation(),this.isLead()&&(null===(u=(l=this.options).onExitComplete)||void 0===u||u.call(l));this.targetLayout=o}))}unmount(){var t,e;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(t=this.getStack())||void 0===t||t.remove(this),null===(e=this.parent)||void 0===e||e.children.delete(this),this.instance=void 0,bn.qY.preRender(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){var t;return this.isAnimationBlocked||(null===(t=this.parent)||void 0===t?void 0:t.isTreeAnimationBlocked())||!1}startUpdate(){var t;this.isUpdateBlocked()||(this.isUpdating=!0,null===(t=this.nodes)||void 0===t||t.forEach(Vi))}willUpdate(t=!0){var e,n,o;if(this.root.isUpdateBlocked())return void(null===(n=(e=this.options).onExitComplete)||void 0===n||n.call(e));if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let t=0;t<this.path.length;t++){const e=this.path[t];e.shouldResetTransform=!0,e.updateScroll()}const{layoutId:r,layout:i}=this.options;if(void 0===r&&!i)return;const s=null===(o=this.options.visualElement)||void 0===o?void 0:o.getProps().transformTemplate;this.prevTransformTemplateValue=null==s?void 0:s(this.latestValues,""),this.updateSnapshot(),t&&this.notifyListeners("willUpdate")}didUpdate(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(Ti);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(Fi),this.potentialNodes.clear()),this.nodes.forEach(Si),this.nodes.forEach(bi),this.nodes.forEach(Ei),this.clearAllSnapshots(),bn.iW.update(),bn.iW.preRender(),bn.iW.render())}clearAllSnapshots(){this.nodes.forEach(Pi),this.sharedNodes.forEach(Mi)}scheduleUpdateProjection(){bn.ZP.preRender(this.updateProjection,!1,!0)}scheduleCheckAfterUnmount(){bn.ZP.postRender((()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()}))}updateSnapshot(){if(this.snapshot||!this.instance)return;const t=this.measure(),e=this.removeTransform(this.removeElementScroll(t));Ii(e),this.snapshot={measured:t,layout:e,latestValues:{}}}updateLayout(){var t;if(!this.instance)return;if(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let t=0;t<this.path.length;t++)this.path[t].updateScroll();const e=this.measure();Ii(e);const n=this.layout;this.layout={measured:e,actual:this.removeElementScroll(e)},this.layoutCorrected={x:{min:0,max:0},y:{min:0,max:0}},this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.actual),null===(t=this.options.visualElement)||void 0===t||t.notifyLayoutMeasure(this.layout.actual,null==n?void 0:n.actual)}updateScroll(){this.options.layoutScroll&&this.instance&&(this.isScrollRoot=o(this.instance),this.scroll=n(this.instance))}resetTransform(){var t;if(!r)return;const e=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!hi(this.projectionDelta),o=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate,i=null==o?void 0:o(this.latestValues,""),s=i!==this.prevTransformTemplateValue;e&&(n||er(this.latestValues)||s)&&(r(this.instance,i),this.shouldResetTransform=!1,this.scheduleRender())}measure(){const{visualElement:t}=this.options;if(!t)return{x:{min:0,max:0},y:{min:0,max:0}};const e=t.measureViewportBox(),{scroll:n}=this.root;return n&&(ar(e.x,n.x),ar(e.y,n.y)),e}removeElementScroll(t){const e={x:{min:0,max:0},y:{min:0,max:0}};ii(e,t);for(let n=0;n<this.path.length;n++){const o=this.path[n],{scroll:r,options:i,isScrollRoot:s}=o;if(o!==this.root&&r&&i.layoutScroll){if(s){ii(e,t);const{scroll:n}=this.root;n&&(ar(e.x,-n.x),ar(e.y,-n.y))}ar(e.x,r.x),ar(e.y,r.y)}}return e}applyTransform(t,e=!1){const n={x:{min:0,max:0},y:{min:0,max:0}};ii(n,t);for(let t=0;t<this.path.length;t++){const o=this.path[t];!e&&o.options.layoutScroll&&o.scroll&&o!==o.root&&dr(n,{x:-o.scroll.x,y:-o.scroll.y}),er(o.latestValues)&&dr(n,o.latestValues)}return er(this.latestValues)&&dr(n,this.latestValues),n}removeTransform(t){var e;const n={x:{min:0,max:0},y:{min:0,max:0}};ii(n,t);for(let t=0;t<this.path.length;t++){const o=this.path[t];if(!o.instance)continue;if(!er(o.latestValues))continue;tr(o.latestValues)&&o.updateSnapshot();const r={x:{min:0,max:0},y:{min:0,max:0}};ii(r,o.measure()),ci(n,o.latestValues,null===(e=o.snapshot)||void 0===e?void 0:e.layout,r)}return er(this.latestValues)&&ci(n,this.latestValues),n}setTargetDelta(t){this.targetDelta=t,this.root.scheduleUpdateProjection()}setOptions(t){this.options={...this.options,...t,crossfade:void 0===t.crossfade||t.crossfade}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}resolveTargetDelta(){var t;const{layout:e,layoutId:n}=this.options;var o,r,i;this.layout&&(e||n)&&(this.targetDelta||this.relativeTarget||(this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&this.relativeParent.layout&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},qo(this.relativeTargetOrigin,this.layout.actual,this.relativeParent.layout.actual),ii(this.relativeTarget,this.relativeTargetOrigin))),(this.relativeTarget||this.targetDelta)&&(this.target||(this.target={x:{min:0,max:0},y:{min:0,max:0}},this.targetWithTransforms={x:{min:0,max:0},y:{min:0,max:0}}),this.relativeTarget&&this.relativeTargetOrigin&&(null===(t=this.relativeParent)||void 0===t?void 0:t.target)?(o=this.target,r=this.relativeTarget,i=this.relativeParent.target,Wo(o.x,r.x,i.x),Wo(o.y,r.y,i.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.actual):ii(this.target,this.layout.actual),sr(this.target,this.targetDelta)):ii(this.target,this.layout.actual),this.attemptToResolveRelativeTarget&&(this.attemptToResolveRelativeTarget=!1,this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&Boolean(this.relativeParent.resumingFrom)===Boolean(this.resumingFrom)&&!this.relativeParent.options.layoutScroll&&this.relativeParent.target&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},qo(this.relativeTargetOrigin,this.target,this.relativeParent.target),ii(this.relativeTarget,this.relativeTargetOrigin)))))}getClosestProjectingParent(){if(this.parent&&!er(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()}calcProjection(){var t;const{layout:e,layoutId:n}=this.options;if(this.isTreeAnimating=Boolean((null===(t=this.parent)||void 0===t?void 0:t.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!e&&!n)return;const o=this.getLead();ii(this.layoutCorrected,this.layout.actual),function(t,e,n,o=!1){var r,i;const s=n.length;if(!s)return;let a,l;e.x=e.y=1;for(let u=0;u<s;u++)a=n[u],l=a.projectionDelta,"contents"!==(null===(i=null===(r=a.instance)||void 0===r?void 0:r.style)||void 0===i?void 0:i.display)&&(o&&a.options.layoutScroll&&a.scroll&&a!==a.root&&dr(t,{x:-a.scroll.x,y:-a.scroll.y}),l&&(e.x*=l.x.scale,e.y*=l.y.scale,sr(t,l)),o&&er(a.latestValues)&&dr(t,a.latestValues))}(this.layoutCorrected,this.treeScale,this.path,Boolean(this.resumingFrom)||this!==o);const{target:r}=o;if(!r)return;this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});const i=this.treeScale.x,s=this.treeScale.y,a=this.projectionTransform;_o(this.projectionDelta,this.layoutCorrected,r,this.latestValues),this.projectionTransform=vi(this.projectionDelta,this.treeScale),this.projectionTransform===a&&this.treeScale.x===i&&this.treeScale.y===s||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",r))}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(t=!0){var e,n,o;null===(n=(e=this.options).scheduleRender)||void 0===n||n.call(e),t&&(null===(o=this.getStack())||void 0===o||o.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(t,e=!1){var n;const o=this.snapshot,r=(null==o?void 0:o.latestValues)||{},i={...this.latestValues},s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!e;const a={x:{min:0,max:0},y:{min:0,max:0}},l=null==o?void 0:o.isShared,u=((null===(n=this.getStack())||void 0===n?void 0:n.members.length)||0)<=1,c=Boolean(l&&!u&&!0===this.options.crossfade&&!this.path.some(Oi));this.animationProgress=0,this.mixTargetDelta=e=>{var n;const o=e/1e3;var d,h,p,f;Ri(s.x,t.x,o),Ri(s.y,t.y,o),this.setTargetDelta(s),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&(null===(n=this.relativeParent)||void 0===n?void 0:n.layout)&&(qo(a,this.layout.actual,this.relativeParent.layout.actual),d=this.relativeTarget,h=this.relativeTargetOrigin,p=a,f=o,ji(d.x,h.x,p.x,f),ji(d.y,h.y,p.y,f)),l&&(this.animationValues=i,function(t,e,n,o,r,i){var s,a,l,u;r?(t.opacity=Te(0,null!==(s=n.opacity)&&void 0!==s?s:1,ei(o)),t.opacityExit=Te(null!==(a=e.opacity)&&void 0!==a?a:1,0,ni(o))):i&&(t.opacity=Te(null!==(l=e.opacity)&&void 0!==l?l:1,null!==(u=n.opacity)&&void 0!==u?u:1,o));for(let r=0;r<Kr;r++){const i=`border${Gr[r]}Radius`;let s=ti(e,i),a=ti(n,i);void 0===s&&void 0===a||(s||(s=0),a||(a=0),0===s||0===a||Jr(s)===Jr(a)?(t[i]=Math.max(Te(Qr(s),Qr(a),o),0),(X.test(a)||X.test(s))&&(t[i]+="%")):t[i]=a)}(e.rotate||n.rotate)&&(t.rotate=Te(e.rotate||0,n.rotate||0,o))}(i,r,this.latestValues,o,c,u)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=o},this.mixTargetDelta(0)}startAnimation(t){var e,n;this.notifyListeners("animationStart"),null===(e=this.currentAnimation)||void 0===e||e.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(bn.qY.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=bn.ZP.update((()=>{w.hasAnimatedSinceResize=!0,this.currentAnimation=function(t,e,n={}){const o=F(t)?t:ao(t);return no("",o,e,n),{stop:()=>o.stop(),isAnimating:()=>o.isAnimating()}}(0,1e3,{...t,onUpdate:e=>{var n;this.mixTargetDelta(e),null===(n=t.onUpdate)||void 0===n||n.call(t,e)},onComplete:()=>{var e;null===(e=t.onComplete)||void 0===e||e.call(t),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0}))}completeAnimation(){var t;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(t=this.getStack())||void 0===t||t.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){var t;this.currentAnimation&&(null===(t=this.mixTargetDelta)||void 0===t||t.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const t=this.getLead();let{targetWithTransforms:e,target:n,layout:o,latestValues:r}=t;if(e&&n&&o){if(this!==t&&this.layout&&o&&Ni(this.options.animationType,this.layout.actual,o.actual)){n=this.target||{x:{min:0,max:0},y:{min:0,max:0}};const e=Bo(this.layout.actual.x);n.x.min=t.target.x.min,n.x.max=n.x.min+e;const o=Bo(this.layout.actual.y);n.y.min=t.target.y.min,n.y.max=n.y.min+o}ii(e,n),dr(e,r),_o(this.projectionDeltaWithTransform,this.layoutCorrected,e,r)}}registerSharedNode(t,e){var n,o,r;this.sharedNodes.has(t)||this.sharedNodes.set(t,new mi),this.sharedNodes.get(t).add(e),e.promote({transition:null===(n=e.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(r=null===(o=e.options.initialPromotionConfig)||void 0===o?void 0:o.shouldPreserveFollowOpacity)||void 0===r?void 0:r.call(o,e)})}isLead(){const t=this.getStack();return!t||t.lead===this}getLead(){var t;const{layoutId:e}=this.options;return e&&(null===(t=this.getStack())||void 0===t?void 0:t.lead)||this}getPrevLead(){var t;const{layoutId:e}=this.options;return e?null===(t=this.getStack())||void 0===t?void 0:t.prevLead:void 0}getStack(){const{layoutId:t}=this.options;if(t)return this.root.sharedNodes.get(t)}promote({needsReset:t,transition:e,preserveFollowOpacity:n}={}){const o=this.getStack();o&&o.promote(this,n),t&&(this.projectionDelta=void 0,this.needsReset=!0),e&&this.setOptions({transition:e})}relegate(){const t=this.getStack();return!!t&&t.relegate(this)}resetRotation(){const{visualElement:t}=this.options;if(!t)return;let e=!1;const n={};for(let o=0;o<xi.length;o++){const r="rotate"+xi[o];t.getStaticValue(r)&&(e=!0,n[r]=t.getStaticValue(r),t.setStaticValue(r,0))}if(e){null==t||t.syncRender();for(const e in n)t.setStaticValue(e,n[e]);t.scheduleRender()}}getProjectionStyles(t={}){var e,n,o;const r={};if(!this.instance||this.isSVG)return r;if(!this.isVisible)return{visibility:"hidden"};r.visibility="";const i=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,r.opacity="",r.pointerEvents=kt(t.pointerEvents)||"",r.transform=i?i(this.latestValues,""):"none",r;const s=this.getLead();if(!this.projectionDelta||!this.layout||!s.target){const e={};return this.options.layoutId&&(e.opacity=void 0!==this.latestValues.opacity?this.latestValues.opacity:1,e.pointerEvents=kt(t.pointerEvents)||""),this.hasProjected&&!er(this.latestValues)&&(e.transform=i?i({},""):"none",this.hasProjected=!1),e}const a=s.animationValues||s.latestValues;this.applyTransformsToTarget(),r.transform=vi(this.projectionDeltaWithTransform,this.treeScale,a),i&&(r.transform=i(a,r.transform));const{x:l,y:u}=this.projectionDelta;r.transformOrigin=`${100*l.origin}% ${100*u.origin}% 0`,s.animationValues?r.opacity=s===this?null!==(o=null!==(n=a.opacity)&&void 0!==n?n:this.latestValues.opacity)&&void 0!==o?o:1:this.preserveOpacity?this.latestValues.opacity:a.opacityExit:r.opacity=s===this?void 0!==a.opacity?a.opacity:"":void 0!==a.opacityExit?a.opacityExit:0;for(const t in R){if(void 0===a[t])continue;const{correct:e,applyTo:n}=R[t],o=e(a[t],s);if(n){const t=n.length;for(let e=0;e<t;e++)r[n[e]]=o}else r[t]=o}return this.options.layoutId&&(r.pointerEvents=s===this?kt(t.pointerEvents)||"":"none"),r}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach((t=>{var e;return null===(e=t.currentAnimation)||void 0===e?void 0:e.stop()})),this.root.nodes.forEach(Ti),this.root.sharedNodes.clear()}}}function bi(t){t.updateLayout()}function Ei(t){var e,n,o;const r=(null===(e=t.resumeFrom)||void 0===e?void 0:e.snapshot)||t.snapshot;if(t.isLead()&&t.layout&&r&&t.hasListeners("didUpdate")){const{actual:e,measured:n}=t.layout,{animationType:o}=t.options;"size"===o?Ko((t=>{const n=r.isShared?r.measured[t]:r.layout[t],o=Bo(n);n.min=e[t].min,n.max=n.min+o})):Ni(o,r.layout,e)&&Ko((t=>{const n=r.isShared?r.measured[t]:r.layout[t],o=Bo(e[t]);n.max=n.min+o}));const i={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};_o(i,e,r.layout);const s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};r.isShared?_o(s,t.applyTransform(n,!0),r.measured):_o(s,e,r.layout);const a=!hi(i);let l=!1;if(!t.resumeFrom&&(t.relativeParent=t.getClosestProjectingParent(),t.relativeParent&&!t.relativeParent.resumeFrom)){const{snapshot:n,layout:o}=t.relativeParent;if(n&&o){const t={x:{min:0,max:0},y:{min:0,max:0}};qo(t,r.layout,n.layout);const i={x:{min:0,max:0},y:{min:0,max:0}};qo(i,e,o.actual),pi(t,i)||(l=!0)}}t.notifyListeners("didUpdate",{layout:e,snapshot:r,delta:s,layoutDelta:i,hasLayoutChanged:a,hasRelativeTargetChanged:l})}else t.isLead()&&(null===(o=(n=t.options).onExitComplete)||void 0===o||o.call(n));t.options.transition=void 0}function Pi(t){t.clearSnapshot()}function Ti(t){t.clearMeasurements()}function Si(t){const{visualElement:e}=t.options;(null==e?void 0:e.getProps().onBeforeLayoutMeasure)&&e.notifyBeforeLayoutMeasure(),t.resetTransform()}function ki(t){t.finishAnimation(),t.targetDelta=t.relativeTarget=t.target=void 0}function Ai(t){t.resolveTargetDelta()}function Ci(t){t.calcProjection()}function Vi(t){t.resetRotation()}function Mi(t){t.removeLeadSnapshot()}function Ri(t,e,n){t.translate=Te(e.translate,0,n),t.scale=Te(e.scale,1,n),t.origin=e.origin,t.originPoint=e.originPoint}function ji(t,e,n,o){t.min=Te(e.min,n.min,o),t.max=Te(e.max,n.max,o)}function Oi(t){return t.animationValues&&void 0!==t.animationValues.opacityExit}const Li={duration:.45,ease:[.4,0,.1,1]};function Fi(t,e){let n=t.root;for(let e=t.path.length-1;e>=0;e--)if(Boolean(t.path[e].instance)){n=t.path[e];break}const o=(n&&n!==t.root?n.instance:document).querySelector(`[data-projection-id="${e}"]`);o&&t.mount(o,!0)}function Di(t){t.min=Math.round(t.min),t.max=Math.round(t.max)}function Ii(t){Di(t.x),Di(t.y)}function Ni(t,e,n){return"position"===t||"preserve-aspect"===t&&!function(t,e,n=.01){return Ro(t,e)<=n}(fi(e),fi(n))}const Bi=wi({attachResizeListener:(t,e)=>jt(t,"resize",e),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),Ui={current:void 0},zi=wi({measureScroll:t=>({x:t.scrollLeft,y:t.scrollTop}),defaultParent:()=>{if(!Ui.current){const t=new Bi(0,{});t.mount(window),t.setOptions({layoutScroll:!0}),Ui.current=t}return Ui.current},resetTransform:(t,e)=>{t.style.transform=void 0!==e?e:"none"},checkIsScrollRoot:t=>Boolean("fixed"===window.getComputedStyle(t).position)}),_i={...Ao,...he,...vr,...Zr},Wi=C(((t,e)=>function(t,{forwardMotionProps:e=!1},n,o,r){return{...M(t)?Vt:Mt,preloadedFeatures:n,useRender:vt(e),createVisualElement:o,projectionNodeConstructor:r,Component:t}}(t,e,_i,_r,zi)))},1741:(t,e,n)=>{"use strict";n.d(e,{j:()=>o});const o="undefined"!=typeof document},9304:(t,e,n)=>{"use strict";n.d(e,{O:()=>o});const o=("undefined"==typeof process||process.env,"production")},6681:(t,e,n)=>{"use strict";n.d(e,{h:()=>r});var o=n(7294);function r(t){const e=(0,o.useRef)(null);return null===e.current&&(e.current=t()),e.current}},8868:(t,e,n)=>{"use strict";n.d(e,{L:()=>r});var o=n(7294);const r=n(1741).j?o.useLayoutEffect:o.useEffect},5411:(t,e,n)=>{"use strict";n.d(e,{z:()=>r});var o=n(7294);function r(t){return(0,o.useEffect)((()=>()=>t()),[])}},6034:(t,e,n)=>{"use strict";n.d(e,{O:()=>r});const o=new Set;function r(t,e,n){t||o.has(e)||(console.warn(e),n&&console.warn(n),o.add(e))}},2396:(t,e,n)=>{"use strict";n.d(e,{qY:()=>p,ZP:()=>x,iW:()=>f,$B:()=>y});const o=1/60*1e3,r="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),i="undefined"!=typeof window?t=>window.requestAnimationFrame(t):t=>setTimeout((()=>t(r())),o);let s=!0,a=!1,l=!1;const u={delta:0,timestamp:0},c=["read","update","preRender","render","postRender"],d=c.reduce(((t,e)=>(t[e]=function(t){let e=[],n=[],o=0,r=!1,i=!1;const s=new WeakSet,a={schedule:(t,i=!1,a=!1)=>{const l=a&&r,u=l?e:n;return i&&s.add(t),-1===u.indexOf(t)&&(u.push(t),l&&r&&(o=e.length)),t},cancel:t=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1),s.delete(t)},process:l=>{if(r)i=!0;else{if(r=!0,[e,n]=[n,e],n.length=0,o=e.length,o)for(let n=0;n<o;n++){const o=e[n];o(l),s.has(o)&&(a.schedule(o),t())}r=!1,i&&(i=!1,a.process(l))}}};return a}((()=>a=!0)),t)),{}),h=c.reduce(((t,e)=>{const n=d[e];return t[e]=(t,e=!1,o=!1)=>(a||g(),n.schedule(t,e,o)),t}),{}),p=c.reduce(((t,e)=>(t[e]=d[e].cancel,t)),{}),f=c.reduce(((t,e)=>(t[e]=()=>d[e].process(u),t)),{}),m=t=>d[t].process(u),v=t=>{a=!1,u.delta=s?o:Math.max(Math.min(t-u.timestamp,40),1),u.timestamp=t,l=!0,c.forEach(m),l=!1,a&&(s=!1,i(v))},g=()=>{a=!0,s=!0,l||i(v)},y=()=>u,x=h}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,