$base: 4px;
$sm: $base * 3; // 12px
$md: $base * 6; // 28px
$lg: $base * 15; // 70px

$white: white;
$black: #0d0d0d;
$accent: #F9FE00;
$red: #a73131;
$orange: #f9ac02;
$gblue: #02f9a3;
$green: #93D20B;
$blue: #0067ff;
$purple: #780bd2;

$row: 1280px;
$md-row: 1024px;

$bezier: cubic-bezier(.17, .67, .58, 1);

$fastTransitionHover: 0.1s $bezier;
$middleTransitionHover: 0.3s $bezier;
$slowTransitionHover: 2s $bezier;

$breakpoints: (
        xs: 0, // "0px" ломает миксины, поэтому обязательно "0"
        sm: 600px,
        md: 1024px,
        lg: 1264px,
        xl: 1456px,
);

:export {
  xs: map-get($breakpoints, xs);
  sm: map-get($breakpoints, sm);
  md: map-get($breakpoints, md);
  lg: map-get($breakpoints, lg);
  xl: map-get($breakpoints, xl);
}

@mixin respond($breakpoint, $breakpoints-debug: false) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
      @if $breakpoints-debug==true {
        &::after {
          position: absolute;
          top: 0;
          z-index: 99999;

          color: blue;

          content: "#{$breakpoint}";
        }
      }
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}