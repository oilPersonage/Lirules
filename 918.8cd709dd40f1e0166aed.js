/*! For license information please see 918.8cd709dd40f1e0166aed.js.LICENSE.txt */
(self.webpackChunkLirules_front=self.webpackChunkLirules_front||[]).push([[918],{9307:(t,e,n)=>{"use strict";n.d(e,{Z:()=>N});var o=n(7294);function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var s=void 0!==n.g&&"[object global]"==={}.toString.call(n.g);function a(t,e){return 0===t.indexOf(e.toLowerCase())?t:"".concat(e.toLowerCase()).concat(t.substr(0,1).toUpperCase()).concat(t.substr(1))}function l(t){return Boolean(t&&1===t.nodeType&&"nodeName"in t&&t.ownerDocument&&t.ownerDocument.defaultView)}function u(t){return!isNaN(parseFloat(t))&&isFinite(t)&&Math.floor(t)==t}function c(t){return/^(https?:)?\/\/((player|www)\.)?vimeo\.com(?=$|\/)/.test(t)}function d(t){return/^https:\/\/player\.vimeo\.com\/video\/\d+/.test(t)}function h(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.id,n=t.url,o=e||n;if(!o)throw new Error("An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.");if(u(o))return"https://vimeo.com/".concat(o);if(c(o))return o.replace("http:","https:");if(e)throw new TypeError("“".concat(e,"” is not a valid video id."));throw new TypeError("“".concat(o,"” is not a vimeo.com url."))}var p=void 0!==Array.prototype.indexOf,f="undefined"!=typeof window&&void 0!==window.postMessage;if(!(s||p&&f))throw new Error("Sorry, the Vimeo Player API is not available in this browser.");var m="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{};!function(t){if(!t.WeakMap){var e=Object.prototype.hasOwnProperty,n=Object.defineProperty&&function(){try{return 1===Object.defineProperty({},"x",{value:1}).x}catch(t){}}(),o=function(t,e,o){n?Object.defineProperty(t,e,{configurable:!0,writable:!0,value:o}):t[e]=o};t.WeakMap=function(){function t(){if(void 0===this)throw new TypeError("Constructor WeakMap requires 'new'");if(o(this,"_id",i("_WeakMap")),arguments.length>0)throw new TypeError("WeakMap iterable is not supported")}function n(t,n){if(!r(t)||!e.call(t,"_id"))throw new TypeError(n+" method called on incompatible receiver "+typeof t)}function i(t){return t+"_"+s()+"."+s()}function s(){return Math.random().toString().substring(2)}return o(t.prototype,"delete",(function(t){if(n(this,"delete"),!r(t))return!1;var e=t[this._id];return!(!e||e[0]!==t||(delete t[this._id],0))})),o(t.prototype,"get",(function(t){if(n(this,"get"),r(t)){var e=t[this._id];return e&&e[0]===t?e[1]:void 0}})),o(t.prototype,"has",(function(t){if(n(this,"has"),!r(t))return!1;var e=t[this._id];return!(!e||e[0]!==t)})),o(t.prototype,"set",(function(t,e){if(n(this,"set"),!r(t))throw new TypeError("Invalid value used as weak map key");var i=t[this._id];return i&&i[0]===t?(i[1]=e,this):(o(t,this._id,[t,e]),this)})),o(t,"_polyfill",!0),t}()}function r(t){return Object(t)===t}}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:m);var v,g,y=(v=function(t){var e,n,o;o=function(){var t,e,n,o=Object.prototype.toString,r="undefined"!=typeof setImmediate?function(t){return setImmediate(t)}:setTimeout;try{Object.defineProperty({},"x",{}),t=function(t,e,n,o){return Object.defineProperty(t,e,{value:n,writable:!0,configurable:!1!==o})}}catch(e){t=function(t,e,n){return t[e]=n,t}}function i(t,o){n.add(t,o),e||(e=r(n.drain))}function s(t){var e,n=typeof t;return null==t||"object"!=n&&"function"!=n||(e=t.then),"function"==typeof e&&e}function a(){for(var t=0;t<this.chain.length;t++)l(this,1===this.state?this.chain[t].success:this.chain[t].failure,this.chain[t]);this.chain.length=0}function l(t,e,n){var o,r;try{!1===e?n.reject(t.msg):(o=!0===e?t.msg:e.call(void 0,t.msg))===n.promise?n.reject(TypeError("Promise-chain cycle")):(r=s(o))?r.call(o,n.resolve,n.reject):n.resolve(o)}catch(t){n.reject(t)}}function u(t){var e,n=this;if(!n.triggered){n.triggered=!0,n.def&&(n=n.def);try{(e=s(t))?i((function(){var o=new h(n);try{e.call(t,(function(){u.apply(o,arguments)}),(function(){c.apply(o,arguments)}))}catch(t){c.call(o,t)}})):(n.msg=t,n.state=1,n.chain.length>0&&i(a,n))}catch(t){c.call(new h(n),t)}}}function c(t){var e=this;e.triggered||(e.triggered=!0,e.def&&(e=e.def),e.msg=t,e.state=2,e.chain.length>0&&i(a,e))}function d(t,e,n,o){for(var r=0;r<e.length;r++)!function(r){t.resolve(e[r]).then((function(t){n(r,t)}),o)}(r)}function h(t){this.def=t,this.triggered=!1}function p(t){this.promise=t,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function f(t){if("function"!=typeof t)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var e=new p(this);this.then=function(t,n){var o={success:"function"!=typeof t||t,failure:"function"==typeof n&&n};return o.promise=new this.constructor((function(t,e){if("function"!=typeof t||"function"!=typeof e)throw TypeError("Not a function");o.resolve=t,o.reject=e})),e.chain.push(o),0!==e.state&&i(a,e),o.promise},this.catch=function(t){return this.then(void 0,t)};try{t.call(void 0,(function(t){u.call(e,t)}),(function(t){c.call(e,t)}))}catch(t){c.call(e,t)}}n=function(){var t,n,o;function r(t,e){this.fn=t,this.self=e,this.next=void 0}return{add:function(e,i){o=new r(e,i),n?n.next=o:t=o,n=o,o=void 0},drain:function(){var o=t;for(t=n=e=void 0;o;)o.fn.call(o.self),o=o.next}}}();var m=t({},"constructor",f,!1);return f.prototype=m,t(m,"__NPO__",0,!1),t(f,"resolve",(function(t){return t&&"object"==typeof t&&1===t.__NPO__?t:new this((function(e,n){if("function"!=typeof e||"function"!=typeof n)throw TypeError("Not a function");e(t)}))})),t(f,"reject",(function(t){return new this((function(e,n){if("function"!=typeof e||"function"!=typeof n)throw TypeError("Not a function");n(t)}))})),t(f,"all",(function(t){var e=this;return"[object Array]"!=o.call(t)?e.reject(TypeError("Not an array")):0===t.length?e.resolve([]):new e((function(n,o){if("function"!=typeof n||"function"!=typeof o)throw TypeError("Not a function");var r=t.length,i=Array(r),s=0;d(e,t,(function(t,e){i[t]=e,++s===r&&n(i)}),o)}))})),t(f,"race",(function(t){var e=this;return"[object Array]"!=o.call(t)?e.reject(TypeError("Not an array")):new e((function(n,o){if("function"!=typeof n||"function"!=typeof o)throw TypeError("Not a function");d(e,t,(function(t,e){n(e)}),o)}))})),f},(n=m)[e="Promise"]=n[e]||o(),t.exports&&(t.exports=n[e])},v(g={exports:{}}),g.exports),x=new WeakMap;function w(t,e,n){var o=x.get(t.element)||{};e in o||(o[e]=[]),o[e].push(n),x.set(t.element,o)}function b(t,e){return(x.get(t.element)||{})[e]||[]}function E(t,e,n){var o=x.get(t.element)||{};if(!o[e])return!0;if(!n)return o[e]=[],x.set(t.element,o),!0;var r=o[e].indexOf(n);return-1!==r&&o[e].splice(r,1),x.set(t.element,o),o[e]&&0===o[e].length}function P(t,e){var n=x.get(t);x.set(e,n),x.delete(t)}function T(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){return console.warn(t),{}}return t}function S(t,e,n){if(t.element.contentWindow&&t.element.contentWindow.postMessage){var o={method:e};void 0!==n&&(o.value=n);var r=parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\d+).*$/,"$1"));r>=8&&r<10&&(o=JSON.stringify(o)),t.element.contentWindow.postMessage(o,t.origin)}}function k(t,e){var n,o=[];if((e=T(e)).event)"error"===e.event&&b(t,e.data.method).forEach((function(n){var o=new Error(e.data.message);o.name=e.data.name,n.reject(o),E(t,e.data.method,n)})),o=b(t,"event:".concat(e.event)),n=e.data;else if(e.method){var r=function(t,e){var n=b(t,e);if(n.length<1)return!1;var o=n.shift();return E(t,e,o),o}(t,e.method);r&&(o.push(r),n=e.value)}o.forEach((function(e){try{if("function"==typeof e)return void e.call(t,n);e.resolve(n)}catch(t){}}))}var A=["autopause","autoplay","background","byline","color","controls","dnt","height","id","interactive_params","keyboard","loop","maxheight","maxwidth","muted","playsinline","portrait","responsive","speed","texttrack","title","transparent","url","width"];function C(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return A.reduce((function(e,n){var o=t.getAttribute("data-vimeo-".concat(n));return(o||""===o)&&(e[n]=""===o?1:o),e}),e)}function V(t,e){var n=t.html;if(!e)throw new TypeError("An element must be provided");if(null!==e.getAttribute("data-vimeo-initialized"))return e.querySelector("iframe");var o=document.createElement("div");return o.innerHTML=n,e.appendChild(o.firstChild),e.setAttribute("data-vimeo-initialized","true"),e.querySelector("iframe")}function M(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;return new Promise((function(o,r){if(!c(t))throw new TypeError("“".concat(t,"” is not a vimeo.com url."));var i="https://vimeo.com/api/oembed.json?url=".concat(encodeURIComponent(t));for(var s in e)e.hasOwnProperty(s)&&(i+="&".concat(s,"=").concat(encodeURIComponent(e[s])));var a="XDomainRequest"in window?new XDomainRequest:new XMLHttpRequest;a.open("GET",i,!0),a.onload=function(){if(404!==a.status)if(403!==a.status)try{var e=JSON.parse(a.responseText);if(403===e.domain_status_code)return V(e,n),void r(new Error("“".concat(t,"” is not embeddable.")));o(e)}catch(t){r(t)}else r(new Error("“".concat(t,"” is not embeddable.")));else r(new Error("“".concat(t,"” was not found.")))},a.onerror=function(){var t=a.status?" (".concat(a.status,")"):"";r(new Error("There was an error fetching the embed code from Vimeo".concat(t,".")))},a.send()}))}var R=new WeakMap,j=new WeakMap,O={},L=function(){function t(e){var n=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(r(this,t),window.jQuery&&e instanceof jQuery&&(e.length>1&&window.console&&console.warn&&console.warn("A jQuery object with multiple elements was passed, using the first element."),e=e[0]),"undefined"!=typeof document&&"string"==typeof e&&(e=document.getElementById(e)),!l(e))throw new TypeError("You must pass either a valid element or a valid id.");if("IFRAME"!==e.nodeName){var i=e.querySelector("iframe");i&&(e=i)}if("IFRAME"===e.nodeName&&!c(e.getAttribute("src")||""))throw new Error("The player element passed isn’t a Vimeo embed.");if(R.has(e))return R.get(e);this._window=e.ownerDocument.defaultView,this.element=e,this.origin="*";var s=new y((function(t,r){if(n._onMessage=function(e){if(c(e.origin)&&n.element.contentWindow===e.source){"*"===n.origin&&(n.origin=e.origin);var o=T(e.data);if(o&&"error"===o.event&&o.data&&"ready"===o.data.method){var i=new Error(o.data.message);return i.name=o.data.name,void r(i)}var s=o&&"ready"===o.event,a=o&&"ping"===o.method;if(s||a)return n.element.setAttribute("data-ready","true"),void t();k(n,o)}},n._window.addEventListener("message",n._onMessage),"IFRAME"!==n.element.nodeName){var i=C(e,o);M(h(i),i,e).then((function(t){var o=V(t,e);return n.element=o,n._originalElement=e,P(e,o),R.set(n.element,n),t})).catch(r)}}));if(j.set(this,s),R.set(this.element,this),"IFRAME"===this.element.nodeName&&S(this,"ping"),O.isEnabled){var a=function(){return O.exit()};this.fullscreenchangeHandler=function(){O.isFullscreen?w(n,"event:exitFullscreen",a):E(n,"event:exitFullscreen",a),n.ready().then((function(){S(n,"fullscreenchange",O.isFullscreen)}))},O.on("fullscreenchange",this.fullscreenchangeHandler)}return this}var e,n;return e=t,n=[{key:"callMethod",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new y((function(o,r){return e.ready().then((function(){w(e,t,{resolve:o,reject:r}),S(e,t,n)})).catch(r)}))}},{key:"get",value:function(t){var e=this;return new y((function(n,o){return t=a(t,"get"),e.ready().then((function(){w(e,t,{resolve:n,reject:o}),S(e,t)})).catch(o)}))}},{key:"set",value:function(t,e){var n=this;return new y((function(o,r){if(t=a(t,"set"),null==e)throw new TypeError("There must be a value to set.");return n.ready().then((function(){w(n,t,{resolve:o,reject:r}),S(n,t,e)})).catch(r)}))}},{key:"on",value:function(t,e){if(!t)throw new TypeError("You must pass an event name.");if(!e)throw new TypeError("You must pass a callback function.");if("function"!=typeof e)throw new TypeError("The callback must be a function.");0===b(this,"event:".concat(t)).length&&this.callMethod("addEventListener",t).catch((function(){})),w(this,"event:".concat(t),e)}},{key:"off",value:function(t,e){if(!t)throw new TypeError("You must pass an event name.");if(e&&"function"!=typeof e)throw new TypeError("The callback must be a function.");E(this,"event:".concat(t),e)&&this.callMethod("removeEventListener",t).catch((function(t){}))}},{key:"loadVideo",value:function(t){return this.callMethod("loadVideo",t)}},{key:"ready",value:function(){var t=j.get(this)||new y((function(t,e){e(new Error("Unknown player. Probably unloaded."))}));return y.resolve(t)}},{key:"addCuePoint",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.callMethod("addCuePoint",{time:t,data:e})}},{key:"removeCuePoint",value:function(t){return this.callMethod("removeCuePoint",t)}},{key:"enableTextTrack",value:function(t,e){if(!t)throw new TypeError("You must pass a language.");return this.callMethod("enableTextTrack",{language:t,kind:e})}},{key:"disableTextTrack",value:function(){return this.callMethod("disableTextTrack")}},{key:"pause",value:function(){return this.callMethod("pause")}},{key:"play",value:function(){return this.callMethod("play")}},{key:"requestFullscreen",value:function(){return O.isEnabled?O.request(this.element):this.callMethod("requestFullscreen")}},{key:"exitFullscreen",value:function(){return O.isEnabled?O.exit():this.callMethod("exitFullscreen")}},{key:"getFullscreen",value:function(){return O.isEnabled?y.resolve(O.isFullscreen):this.get("fullscreen")}},{key:"requestPictureInPicture",value:function(){return this.callMethod("requestPictureInPicture")}},{key:"exitPictureInPicture",value:function(){return this.callMethod("exitPictureInPicture")}},{key:"getPictureInPicture",value:function(){return this.get("pictureInPicture")}},{key:"unload",value:function(){return this.callMethod("unload")}},{key:"destroy",value:function(){var t=this;return new y((function(e){if(j.delete(t),R.delete(t.element),t._originalElement&&(R.delete(t._originalElement),t._originalElement.removeAttribute("data-vimeo-initialized")),t.element&&"IFRAME"===t.element.nodeName&&t.element.parentNode&&(t.element.parentNode.parentNode&&t._originalElement&&t._originalElement!==t.element.parentNode?t.element.parentNode.parentNode.removeChild(t.element.parentNode):t.element.parentNode.removeChild(t.element)),t.element&&"DIV"===t.element.nodeName&&t.element.parentNode){t.element.removeAttribute("data-vimeo-initialized");var n=t.element.querySelector("iframe");n&&n.parentNode&&(n.parentNode.parentNode&&t._originalElement&&t._originalElement!==n.parentNode?n.parentNode.parentNode.removeChild(n.parentNode):n.parentNode.removeChild(n))}t._window.removeEventListener("message",t._onMessage),O.isEnabled&&O.off("fullscreenchange",t.fullscreenchangeHandler),e()}))}},{key:"getAutopause",value:function(){return this.get("autopause")}},{key:"setAutopause",value:function(t){return this.set("autopause",t)}},{key:"getBuffered",value:function(){return this.get("buffered")}},{key:"getCameraProps",value:function(){return this.get("cameraProps")}},{key:"setCameraProps",value:function(t){return this.set("cameraProps",t)}},{key:"getChapters",value:function(){return this.get("chapters")}},{key:"getCurrentChapter",value:function(){return this.get("currentChapter")}},{key:"getColor",value:function(){return this.get("color")}},{key:"setColor",value:function(t){return this.set("color",t)}},{key:"getCuePoints",value:function(){return this.get("cuePoints")}},{key:"getCurrentTime",value:function(){return this.get("currentTime")}},{key:"setCurrentTime",value:function(t){return this.set("currentTime",t)}},{key:"getDuration",value:function(){return this.get("duration")}},{key:"getEnded",value:function(){return this.get("ended")}},{key:"getLoop",value:function(){return this.get("loop")}},{key:"setLoop",value:function(t){return this.set("loop",t)}},{key:"setMuted",value:function(t){return this.set("muted",t)}},{key:"getMuted",value:function(){return this.get("muted")}},{key:"getPaused",value:function(){return this.get("paused")}},{key:"getPlaybackRate",value:function(){return this.get("playbackRate")}},{key:"setPlaybackRate",value:function(t){return this.set("playbackRate",t)}},{key:"getPlayed",value:function(){return this.get("played")}},{key:"getQualities",value:function(){return this.get("qualities")}},{key:"getQuality",value:function(){return this.get("quality")}},{key:"setQuality",value:function(t){return this.set("quality",t)}},{key:"getSeekable",value:function(){return this.get("seekable")}},{key:"getSeeking",value:function(){return this.get("seeking")}},{key:"getTextTracks",value:function(){return this.get("textTracks")}},{key:"getVideoEmbedCode",value:function(){return this.get("videoEmbedCode")}},{key:"getVideoId",value:function(){return this.get("videoId")}},{key:"getVideoTitle",value:function(){return this.get("videoTitle")}},{key:"getVideoWidth",value:function(){return this.get("videoWidth")}},{key:"getVideoHeight",value:function(){return this.get("videoHeight")}},{key:"getVideoUrl",value:function(){return this.get("videoUrl")}},{key:"getVolume",value:function(){return this.get("volume")}},{key:"setVolume",value:function(t){return this.set("volume",t)}}],n&&i(e.prototype,n),t}();s||(O=function(){var t=function(){for(var t,e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n=0,o=e.length,r={};n<o;n++)if((t=e[n])&&t[1]in document){for(n=0;n<t.length;n++)r[e[0][n]]=t[n];return r}return!1}(),e={fullscreenchange:t.fullscreenchange,fullscreenerror:t.fullscreenerror},n={request:function(e){return new Promise((function(o,r){var i=function t(){n.off("fullscreenchange",t),o()};n.on("fullscreenchange",i);var s=(e=e||document.documentElement)[t.requestFullscreen]();s instanceof Promise&&s.then(i).catch(r)}))},exit:function(){return new Promise((function(e,o){if(n.isFullscreen){var r=function t(){n.off("fullscreenchange",t),e()};n.on("fullscreenchange",r);var i=document[t.exitFullscreen]();i instanceof Promise&&i.then(r).catch(o)}else e()}))},on:function(t,n){var o=e[t];o&&document.addEventListener(o,n)},off:function(t,n){var o=e[t];o&&document.removeEventListener(o,n)}};return Object.defineProperties(n,{isFullscreen:{get:function(){return Boolean(document[t.fullscreenElement])}},element:{enumerable:!0,get:function(){return document[t.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(document[t.fullscreenEnabled])}}}),n}(),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,e=[].slice.call(t.querySelectorAll("[data-vimeo-id], [data-vimeo-url]")),n=function(t){"console"in window&&console.error&&console.error("There was an error creating an embed: ".concat(t))};e.forEach((function(t){try{if(null!==t.getAttribute("data-vimeo-defer"))return;var e=C(t);M(h(e),e,t).then((function(e){return V(e,t)})).catch(n)}catch(t){n(t)}}))}(),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document;if(!window.VimeoPlayerResizeEmbeds_){window.VimeoPlayerResizeEmbeds_=!0;var e=function(e){if(c(e.origin)&&e.data&&"spacechange"===e.data.event)for(var n=t.querySelectorAll("iframe"),o=0;o<n.length;o++)if(n[o].contentWindow===e.source){n[o].parentElement.style.paddingBottom="".concat(e.data.data[0].bottom,"px");break}};window.addEventListener("message",e)}}(),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document;if(!window.VimeoSeoMetadataAppended){window.VimeoSeoMetadataAppended=!0;var e=function(e){if(c(e.origin)){var n=T(e.data);if(n&&"ready"===n.event)for(var o=t.querySelectorAll("iframe"),r=0;r<o.length;r++){var i=o[r],s=i.contentWindow===e.source;d(i.src)&&s&&new L(i).callMethod("appendVideoMetadata",window.location.href)}}};window.addEventListener("message",e)}}());const F=L;function D(t,e){return D=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},D(t,e)}var I={play:"onPlay",pause:"onPause",ended:"onEnd",timeupdate:"onTimeUpdate",progress:"onProgress",seeked:"onSeeked",texttrackchange:"onTextTrackChange",cuechange:"onCueChange",cuepoint:"onCuePoint",volumechange:"onVolumeChange",playbackratechange:"onPlaybackRateChange",error:"onError",loaded:"onLoaded"},N=function(t){var e,n;function r(e){var n;return(n=t.call(this,e)||this).refContainer=n.refContainer.bind(function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(n)),n}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,D(e,n);var i=r.prototype;return i.componentDidMount=function(){this.createPlayer()},i.componentDidUpdate=function(t){var e=this,n=Object.keys(this.props).filter((function(n){return e.props[n]!==t[n]}));this.updateProps(n)},i.componentWillUnmount=function(){this.player.destroy()},i.getInitialOptions=function(){return{id:this.props.video,width:this.props.width,height:this.props.height,autopause:this.props.autopause,autoplay:this.props.autoplay,byline:this.props.showByline,color:this.props.color,controls:this.props.controls,loop:this.props.loop,portrait:this.props.showPortrait,title:this.props.showTitle,muted:this.props.muted,background:this.props.background,responsive:this.props.responsive,dnt:this.props.dnt,speed:this.props.speed,keyboard:this.props.keyboard,pip:this.props.pip,playsinline:this.props.playsInline,quality:this.props.quality,texttrack:this.props.textTrack,transparent:this.props.transparent}},i.updateProps=function(t){var e=this,n=this.player;t.forEach((function(t){var o=e.props[t];switch(t){case"autopause":n.setAutopause(o);break;case"color":n.setColor(o);break;case"loop":n.setLoop(o);break;case"volume":n.setVolume(o);break;case"paused":n.getPaused().then((function(t){return o&&!t?n.pause():!o&&t?n.play():null}));break;case"width":case"height":n.element[t]=o;break;case"video":if(o){var r=e.props.start,i=n.loadVideo(o);"number"==typeof r&&i.then((function(){n.setCurrentTime(r)}))}else n.unload()}}))},i.createPlayer=function(){var t=this,e=this.props,n=e.start,o=e.volume;this.player=new F(this.container,this.getInitialOptions()),Object.keys(I).forEach((function(e){var n=I[e];t.player.on(e,(function(e){var o=t.props[n];o&&o(e)}))}));var r=this.props,i=r.onError,s=r.onReady;this.player.ready().then((function(){s&&s(t.player)}),(function(t){if(!i)throw t;i(t)})),"number"==typeof n&&this.player.setCurrentTime(n),"number"==typeof o&&this.updateProps(["volume"])},i.refContainer=function(t){this.container=t},i.render=function(){var t=this.props,e=t.id,n=t.className,r=t.style;return o.createElement("div",{id:e,className:n,style:r,ref:this.refContainer})},r}(o.Component);N.defaultProps={autopause:!0,autoplay:!1,showByline:!0,controls:!0,loop:!1,showPortrait:!0,showTitle:!0,muted:!1,background:!1,responsive:!1,dnt:!1,speed:!1,keyboard:!0,pip:!1,playsInline:!0,transparent:!0}},4184:(t,e)=>{var n;!function(){"use strict";var o={}.hasOwnProperty;function r(){for(var t=[],e=0;e<arguments.length;e++){var n=arguments[e];if(n){var i=typeof n;if("string"===i||"number"===i)t.push(n);else if(Array.isArray(n)){if(n.length){var s=r.apply(null,n);s&&t.push(s)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var a in n)o.call(n,a)&&n[a]&&t.push(a);else t.push(n.toString())}}return t.join(" ")}t.exports?(r.default=r,t.exports=r):void 0===(n=function(){return r}.apply(e,[]))||(t.exports=n)}()},2705:(t,e,n)=>{var o=n(5639).Symbol;t.exports=o},4239:(t,e,n)=>{var o=n(2705),r=n(9607),i=n(2333),s=o?o.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":s&&s in Object(t)?r(t):i(t)}},7561:(t,e,n)=>{var o=n(7990),r=/^\s+/;t.exports=function(t){return t?t.slice(0,o(t)+1).replace(r,""):t}},1957:(t,e,n)=>{var o="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;t.exports=o},9607:(t,e,n)=>{var o=n(2705),r=Object.prototype,i=r.hasOwnProperty,s=r.toString,a=o?o.toStringTag:void 0;t.exports=function(t){var e=i.call(t,a),n=t[a];try{t[a]=void 0;var o=!0}catch(t){}var r=s.call(t);return o&&(e?t[a]=n:delete t[a]),r}},2333:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},5639:(t,e,n)=>{var o=n(1957),r="object"==typeof self&&self&&self.Object===Object&&self,i=o||r||Function("return this")();t.exports=i},7990:t=>{var e=/\s/;t.exports=function(t){for(var n=t.length;n--&&e.test(t.charAt(n)););return n}},3279:(t,e,n)=>{var o=n(3218),r=n(7771),i=n(4841),s=Math.max,a=Math.min;t.exports=function(t,e,n){var l,u,c,d,h,p,f=0,m=!1,v=!1,g=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function y(e){var n=l,o=u;return l=u=void 0,f=e,d=t.apply(o,n)}function x(t){return f=t,h=setTimeout(b,e),m?y(t):d}function w(t){var n=t-p;return void 0===p||n>=e||n<0||v&&t-f>=c}function b(){var t=r();if(w(t))return E(t);h=setTimeout(b,function(t){var n=e-(t-p);return v?a(n,c-(t-f)):n}(t))}function E(t){return h=void 0,g&&l?y(t):(l=u=void 0,d)}function P(){var t=r(),n=w(t);if(l=arguments,u=this,p=t,n){if(void 0===h)return x(p);if(v)return clearTimeout(h),h=setTimeout(b,e),y(p)}return void 0===h&&(h=setTimeout(b,e)),d}return e=i(e)||0,o(n)&&(m=!!n.leading,c=(v="maxWait"in n)?s(i(n.maxWait)||0,e):c,g="trailing"in n?!!n.trailing:g),P.cancel=function(){void 0!==h&&clearTimeout(h),f=0,l=p=u=h=void 0},P.flush=function(){return void 0===h?d:E(r())},P}},3218:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7005:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},3448:(t,e,n)=>{var o=n(4239),r=n(7005);t.exports=function(t){return"symbol"==typeof t||r(t)&&"[object Symbol]"==o(t)}},7771:(t,e,n)=>{var o=n(5639);t.exports=function(){return o.Date.now()}},3493:(t,e,n)=>{var o=n(3279),r=n(3218);t.exports=function(t,e,n){var i=!0,s=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return r(n)&&(i="leading"in n?!!n.leading:i,s="trailing"in n?!!n.trailing:s),o(t,e,{leading:i,maxWait:e,trailing:s})}},4841:(t,e,n)=>{var o=n(7561),r=n(3218),i=n(3448),s=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,l=/^0o[0-7]+$/i,u=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(i(t))return NaN;if(r(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=r(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=o(t);var n=a.test(t);return n||l.test(t)?u(t.slice(2),n?2:8):s.test(t)?NaN:+t}},9520:(t,e,n)=>{"use strict";n.d(e,{M:()=>y});var o=n(7294),r=n(9304),i=n(2396),s=n(8868);function a(){const t=(0,o.useRef)(!1);return(0,s.L)((()=>(t.current=!0,()=>{t.current=!1})),[]),t}var l=n(240),u=n(6681);class c extends o.Component{getSnapshotBeforeUpdate(t){const e=this.props.childRef.current;if(e&&t.isPresent&&!this.props.isPresent){const t=this.props.sizeRef.current;t.height=e.offsetHeight||0,t.width=e.offsetWidth||0,t.top=e.offsetTop,t.left=e.offsetLeft}return null}componentDidUpdate(){}render(){return this.props.children}}function d({children:t,isPresent:e}){const n=(0,o.useId)(),r=(0,o.useRef)(null),i=(0,o.useRef)({width:0,height:0,top:0,left:0});return(0,o.useInsertionEffect)((()=>{const{width:t,height:o,top:s,left:a}=i.current;if(e||!r.current||!t||!o)return;r.current.dataset.motionPopId=n;const l=document.createElement("style");return document.head.appendChild(l),l.sheet&&l.sheet.insertRule(`\n          [data-motion-pop-id="${n}"] {\n            position: absolute !important;\n            width: ${t}px !important;\n            height: ${o}px !important;\n            top: ${s}px !important;\n            left: ${a}px !important;\n          }\n        `),()=>{document.head.removeChild(l)}}),[e]),o.createElement(c,{isPresent:e,childRef:r,sizeRef:i},o.cloneElement(t,{ref:r}))}const h=({children:t,initial:e,isPresent:n,onExitComplete:r,custom:i,presenceAffectsLayout:s,mode:a})=>{const c=(0,u.h)(p),h=(0,o.useId)(),f=(0,o.useMemo)((()=>({id:h,initial:e,isPresent:n,custom:i,onExitComplete:t=>{c.set(t,!0);for(const t of c.values())if(!t)return;r&&r()},register:t=>(c.set(t,!1),()=>c.delete(t))})),s?void 0:[n]);return(0,o.useMemo)((()=>{c.forEach(((t,e)=>c.set(e,!1)))}),[n]),o.useEffect((()=>{!n&&!c.size&&r&&r()}),[n]),"popLayout"===a&&(t=o.createElement(d,{isPresent:n},t)),o.createElement(l.O.Provider,{value:f},t)};function p(){return new Map}var f=n(5364),m=n(5411),v=n(6034);const g=t=>t.key||"",y=({children:t,custom:e,initial:n=!0,onExitComplete:l,exitBeforeEnter:u,presenceAffectsLayout:c=!0,mode:d="sync"})=>{u&&(d="wait",(0,v.O)(!1,"Replace exitBeforeEnter with mode='wait'"));let[p]=function(){const t=a(),[e,n]=(0,o.useState)(0),r=(0,o.useCallback)((()=>{t.current&&n(e+1)}),[e]);return[(0,o.useCallback)((()=>i.ZP.postRender(r)),[r]),e]}();const y=(0,o.useContext)(f.p).forceRender;y&&(p=y);const x=a(),w=function(t){const e=[];return o.Children.forEach(t,(t=>{(0,o.isValidElement)(t)&&e.push(t)})),e}(t);let b=w;const E=new Set,P=(0,o.useRef)(b),T=(0,o.useRef)(new Map).current,S=(0,o.useRef)(!0);if((0,s.L)((()=>{S.current=!1,function(t,e){t.forEach((t=>{const n=g(t);e.set(n,t)}))}(w,T),P.current=b})),(0,m.z)((()=>{S.current=!0,T.clear(),E.clear()})),S.current)return o.createElement(o.Fragment,null,b.map((t=>o.createElement(h,{key:g(t),isPresent:!0,initial:!!n&&void 0,presenceAffectsLayout:c,mode:d},t))));b=[...b];const k=P.current.map(g),A=w.map(g),C=k.length;for(let t=0;t<C;t++){const e=k[t];-1===A.indexOf(e)&&E.add(e)}return"wait"===d&&E.size&&(b=[]),E.forEach((t=>{if(-1!==A.indexOf(t))return;const n=T.get(t);if(!n)return;const r=k.indexOf(t);b.splice(r,0,o.createElement(h,{key:g(n),isPresent:!1,onExitComplete:()=>{T.delete(t),E.delete(t);const e=P.current.findIndex((e=>e.key===t));if(P.current.splice(e,1),!E.size){if(P.current=w,!1===x.current)return;p(),l&&l()}},custom:e,presenceAffectsLayout:c,mode:d},n))})),b=b.map((t=>{const e=t.key;return E.has(e)?t:o.createElement(h,{key:g(t),isPresent:!0,presenceAffectsLayout:c,mode:d},t)})),"production"!==r.O&&"wait"===d&&b.length>1&&console.warn('You\'re attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.'),o.createElement(o.Fragment,null,E.size?b:b.map((t=>(0,o.cloneElement)(t))))}},5364:(t,e,n)=>{"use strict";n.d(e,{p:()=>o});const o=(0,n(7294).createContext)({})},240:(t,e,n)=>{"use strict";n.d(e,{O:()=>o});const o=(0,n(7294).createContext)(null)},4104:(t,e,n)=>{"use strict";n.d(e,{E:()=>_i});var o=n(7294);const r=(0,o.createContext)({transformPagePoint:t=>t,isStatic:!1,reducedMotion:"never"}),i=(0,o.createContext)({});var s=n(240),a=n(8868);const l=(0,o.createContext)({strict:!1});function u(t){return"object"==typeof t&&Object.prototype.hasOwnProperty.call(t,"current")}function c(t){return"string"==typeof t||Array.isArray(t)}function d(t){return"object"==typeof t&&"function"==typeof t.start}const h=["initial","animate","exit","whileHover","whileDrag","whileTap","whileFocus","whileInView"];function p(t){return d(t.animate)||h.some((e=>c(t[e])))}function f(t){return Boolean(p(t)||t.variants)}function m(t){return Array.isArray(t)?t.join(" "):t}const v=t=>({isEnabled:e=>t.some((t=>!!e[t]))}),g={measureLayout:v(["layout","layoutId","drag"]),animation:v(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:v(["exit"]),drag:v(["drag","dragControls"]),focus:v(["whileFocus"]),hover:v(["whileHover","onHoverStart","onHoverEnd"]),tap:v(["whileTap","onTap","onTapStart","onTapCancel"]),pan:v(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:v(["whileInView","onViewportEnter","onViewportLeave"])};var y=n(1741),x=n(6681);const w={hasAnimatedSinceResize:!0,hasEverUpdated:!1};let b=1;var E=n(5364);class P extends o.Component{getSnapshotBeforeUpdate(){const{visualElement:t,props:e}=this.props;return t&&t.setProps(e),null}componentDidUpdate(){}render(){return this.props.children}}const T=(0,o.createContext)({}),S=Symbol.for("motionComponentSymbol");function k({preloadedFeatures:t,createVisualElement:e,projectionNodeConstructor:n,useRender:d,useVisualState:h,Component:f}){t&&function(t){for(const e in t)"projectionNodeConstructor"===e?g.projectionNodeConstructor=t[e]:g[e].Component=t[e]}(t);const v=(0,o.forwardRef)((function(v,E){const S={...(0,o.useContext)(r),...v,layoutId:A(v)},{isStatic:k}=S;let C=null;const V=function(t){const{initial:e,animate:n}=function(t,e){if(p(t)){const{initial:e,animate:n}=t;return{initial:!1===e||c(e)?e:void 0,animate:c(n)?n:void 0}}return!1!==t.inherit?e:{}}(t,(0,o.useContext)(i));return(0,o.useMemo)((()=>({initial:e,animate:n})),[m(e),m(n)])}(v),M=k?void 0:(0,x.h)((()=>{if(w.hasEverUpdated)return b++})),R=h(v,k);if(!k&&y.j){V.visualElement=function(t,e,n,u){const c=(0,o.useContext)(i).visualElement,d=(0,o.useContext)(l),h=(0,o.useContext)(s.O),p=(0,o.useContext)(r).reducedMotion,f=(0,o.useRef)(void 0);u=u||d.renderer,!f.current&&u&&(f.current=u(t,{visualState:e,parent:c,props:n,presenceId:h?h.id:void 0,blockInitialAnimation:!!h&&!1===h.initial,reducedMotionConfig:p}));const m=f.current;return(0,a.L)((()=>{m&&m.syncRender()})),(0,o.useEffect)((()=>{m&&m.animationState&&m.animationState.animateChanges()})),(0,a.L)((()=>()=>m&&m.notifyUnmount()),[]),m}(f,R,S,e);const u=(0,o.useContext)(l).strict,c=(0,o.useContext)(T);V.visualElement&&(C=V.visualElement.loadFeatures(v,u,t,M,n||g.projectionNodeConstructor,c))}return o.createElement(P,{visualElement:V.visualElement,props:S},C,o.createElement(i.Provider,{value:V},d(f,v,M,function(t,e,n){return(0,o.useCallback)((o=>{o&&t.mount&&t.mount(o),e&&(o?e.mount(o):e.unmount()),n&&("function"==typeof n?n(o):u(n)&&(n.current=o))}),[e])}(R,V.visualElement,E),R,k,V.visualElement)))}));return v[S]=f,v}function A({layoutId:t}){const e=(0,o.useContext)(E.p).id;return e&&void 0!==t?e+"-"+t:t}function C(t){function e(e,n={}){return k(t(e,n))}if("undefined"==typeof Proxy)return e;const n=new Map;return new Proxy(e,{get:(t,o)=>(n.has(o)||n.set(o,e(o)),n.get(o))})}const V=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","svg","switch","symbol","text","tspan","use","view"];function M(t){return"string"==typeof t&&!t.includes("-")&&!!(V.indexOf(t)>-1||/[A-Z]/.test(t))}const R={},j=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],O=new Set(j);function L(t,{layout:e,layoutId:n}){return O.has(t)||t.startsWith("origin")||(e||void 0!==n)&&(!!R[t]||"opacity"===t)}const F=t=>void 0!==t&&!!t.getVelocity,D={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},I=(t,e)=>j.indexOf(t)-j.indexOf(e);function N(t){return t.startsWith("--")}const B=(t,e)=>e&&"number"==typeof t?e.transform(t):t,U=(t,e)=>n=>Math.max(Math.min(n,e),t),z=t=>t%1?Number(t.toFixed(5)):t,W=/(-)?([\d]*\.?[\d])+/g,_=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,$=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function q(t){return"string"==typeof t}const H=t=>({test:e=>q(e)&&e.endsWith(t)&&1===e.split(" ").length,parse:parseFloat,transform:e=>`${e}${t}`}),Y=H("deg"),X=H("%"),Z=H("px"),G=H("vh"),K=H("vw"),Q=Object.assign(Object.assign({},X),{parse:t=>X.parse(t)/100,transform:t=>X.transform(100*t)}),J={test:t=>"number"==typeof t,parse:parseFloat,transform:t=>t},tt=Object.assign(Object.assign({},J),{transform:U(0,1)}),et=Object.assign(Object.assign({},J),{default:1}),nt={...J,transform:Math.round},ot={borderWidth:Z,borderTopWidth:Z,borderRightWidth:Z,borderBottomWidth:Z,borderLeftWidth:Z,borderRadius:Z,radius:Z,borderTopLeftRadius:Z,borderTopRightRadius:Z,borderBottomRightRadius:Z,borderBottomLeftRadius:Z,width:Z,maxWidth:Z,height:Z,maxHeight:Z,size:Z,top:Z,right:Z,bottom:Z,left:Z,padding:Z,paddingTop:Z,paddingRight:Z,paddingBottom:Z,paddingLeft:Z,margin:Z,marginTop:Z,marginRight:Z,marginBottom:Z,marginLeft:Z,rotate:Y,rotateX:Y,rotateY:Y,rotateZ:Y,scale:et,scaleX:et,scaleY:et,scaleZ:et,skew:Y,skewX:Y,skewY:Y,distance:Z,translateX:Z,translateY:Z,translateZ:Z,x:Z,y:Z,z:Z,perspective:Z,transformPerspective:Z,opacity:tt,originX:Q,originY:Q,originZ:Z,zIndex:nt,fillOpacity:tt,strokeOpacity:tt,numOctaves:nt};function rt(t,e,n,o){const{style:r,vars:i,transform:s,transformKeys:a,transformOrigin:l}=t;a.length=0;let u=!1,c=!1,d=!0;for(const t in e){const n=e[t];if(N(t)){i[t]=n;continue}const o=ot[t],h=B(n,o);if(O.has(t)){if(u=!0,s[t]=h,a.push(t),!d)continue;n!==(o.default||0)&&(d=!1)}else t.startsWith("origin")?(c=!0,l[t]=h):r[t]=h}if(u||o?r.transform=function({transform:t,transformKeys:e},{enableHardwareAcceleration:n=!0,allowTransformNone:o=!0},r,i){let s="";e.sort(I);for(const n of e)s+=`${D[n]||n}(${t[n]}) `;return n&&!t.z&&(s+="translateZ(0)"),s=s.trim(),i?s=i(t,r?"":s):o&&r&&(s="none"),s}(t,n,d,o):!e.transform&&r.transform&&(r.transform="none"),c){const{originX:t="50%",originY:e="50%",originZ:n=0}=l;r.transformOrigin=`${t} ${e} ${n}`}}function it(t,e,n){for(const o in e)F(e[o])||L(o,n)||(t[o]=e[o])}function st(t,e,n){const r={},i=function(t,e,n){const r={};return it(r,t.style||{},t),Object.assign(r,function({transformTemplate:t},e,n){return(0,o.useMemo)((()=>{const o={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};return rt(o,e,{enableHardwareAcceleration:!n},t),Object.assign({},o.vars,o.style)}),[e])}(t,e,n)),t.transformValues?t.transformValues(r):r}(t,e,n);return t.drag&&!1!==t.dragListener&&(r.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=!0===t.drag?"none":"pan-"+("x"===t.drag?"y":"x")),r.style=i,r}const at=new Set(["initial","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","onHoverStart","onHoverEnd","layoutScroll","whileInView","onViewportEnter","onViewportLeave","viewport","whileTap","onTap","onTapStart","onTapCancel","animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView","onPan","onPanStart","onPanSessionStart","onPanEnd"]);function lt(t){return at.has(t)}let ut=t=>!lt(t);try{(ct=require("@emotion/is-prop-valid").default)&&(ut=t=>t.startsWith("on")?!lt(t):ct(t))}catch(t){}var ct;function dt(t,e,n){return"string"==typeof t?t:Z.transform(e+n*t)}const ht={offset:"stroke-dashoffset",array:"stroke-dasharray"},pt={offset:"strokeDashoffset",array:"strokeDasharray"};function ft(t,{attrX:e,attrY:n,originX:o,originY:r,pathLength:i,pathSpacing:s=1,pathOffset:a=0,...l},u,c){rt(t,l,u,c),t.attrs=t.style,t.style={};const{attrs:d,style:h,dimensions:p}=t;d.transform&&(p&&(h.transform=d.transform),delete d.transform),p&&(void 0!==o||void 0!==r||h.transform)&&(h.transformOrigin=function(t,e,n){return`${dt(e,t.x,t.width)} ${dt(n,t.y,t.height)}`}(p,void 0!==o?o:.5,void 0!==r?r:.5)),void 0!==e&&(d.x=e),void 0!==n&&(d.y=n),void 0!==i&&function(t,e,n=1,o=0,r=!0){t.pathLength=1;const i=r?ht:pt;t[i.offset]=Z.transform(-o);const s=Z.transform(e),a=Z.transform(n);t[i.array]=`${s} ${a}`}(d,i,s,a,!1)}function mt(t,e){const n=(0,o.useMemo)((()=>{const n={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{},attrs:{}};return ft(n,e,{enableHardwareAcceleration:!1},t.transformTemplate),{...n.attrs,style:{...n.style}}}),[e]);if(t.style){const e={};it(e,t.style,t),n.style={...e,...n.style}}return n}function vt(t=!1){return(e,n,r,i,{latestValues:s},a)=>{const l=(M(e)?mt:st)(n,s,a),u=function(t,e,n){const o={};for(const r in t)(ut(r)||!0===n&&lt(r)||!e&&!lt(r)||t.draggable&&r.startsWith("onDrag"))&&(o[r]=t[r]);return o}(n,"string"==typeof e,t),c={...u,...l,ref:i};return r&&(c["data-projection-id"]=r),(0,o.createElement)(e,c)}}const gt=t=>t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();function yt(t,{style:e,vars:n},o,r){Object.assign(t.style,e,r&&r.getProjectionStyles(o));for(const e in n)t.style.setProperty(e,n[e])}const xt=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function wt(t,e,n,o){yt(t,e,void 0,o);for(const n in e.attrs)t.setAttribute(xt.has(n)?n:gt(n),e.attrs[n])}function bt(t){const{style:e}=t,n={};for(const o in e)(F(e[o])||L(o,t))&&(n[o]=e[o]);return n}function Et(t){const e=bt(t);for(const n in t)F(t[n])&&(e["x"===n||"y"===n?"attr"+n.toUpperCase():n]=t[n]);return e}function Pt(t,e,n,o={},r={}){return"function"==typeof e&&(e=e(void 0!==n?n:t.custom,o,r)),"string"==typeof e&&(e=t.variants&&t.variants[e]),"function"==typeof e&&(e=e(void 0!==n?n:t.custom,o,r)),e}const Tt=t=>Array.isArray(t),St=t=>Tt(t)?t[t.length-1]||0:t;function kt(t){const e=F(t)?t.get():t;return n=e,Boolean(n&&"object"==typeof n&&n.mix&&n.toValue)?e.toValue():e;var n}const At=t=>(e,n)=>{const r=(0,o.useContext)(i),a=(0,o.useContext)(s.O),l=()=>function({scrapeMotionValuesFromProps:t,createRenderState:e,onMount:n},o,r,i){const s={latestValues:Ct(o,r,i,t),renderState:e()};return n&&(s.mount=t=>n(o,t,s)),s}(t,e,r,a);return n?l():(0,x.h)(l)};function Ct(t,e,n,o){const r={},i=o(t);for(const t in i)r[t]=kt(i[t]);let{initial:s,animate:a}=t;const l=p(t),u=f(t);e&&u&&!l&&!1!==t.inherit&&(void 0===s&&(s=e.initial),void 0===a&&(a=e.animate));let c=!!n&&!1===n.initial;c=c||!1===s;const h=c?a:s;return h&&"boolean"!=typeof h&&!d(h)&&(Array.isArray(h)?h:[h]).forEach((e=>{const n=Pt(t,e);if(!n)return;const{transitionEnd:o,transition:i,...s}=n;for(const t in s){let e=s[t];Array.isArray(e)&&(e=e[c?e.length-1:0]),null!==e&&(r[t]=e)}for(const t in o)r[t]=o[t]})),r}const Vt={useVisualState:At({scrapeMotionValuesFromProps:Et,createRenderState:()=>({style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{},attrs:{}}),onMount:(t,e,{renderState:n,latestValues:o})=>{try{n.dimensions="function"==typeof e.getBBox?e.getBBox():e.getBoundingClientRect()}catch(t){n.dimensions={x:0,y:0,width:0,height:0}}ft(n,o,{enableHardwareAcceleration:!1},t.transformTemplate),wt(e,n)}})},Mt={useVisualState:At({scrapeMotionValuesFromProps:bt,createRenderState:()=>({style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}})})};var Rt;function jt(t,e,n,o={passive:!0}){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n)}function Ot(t,e,n,r){(0,o.useEffect)((()=>{const o=t.current;if(n&&o)return jt(o,e,n,r)}),[t,e,n,r])}function Lt(t){return"undefined"!=typeof PointerEvent&&t instanceof PointerEvent?!("mouse"!==t.pointerType):t instanceof MouseEvent}function Ft(t){return!!t.touches}!function(t){t.Animate="animate",t.Hover="whileHover",t.Tap="whileTap",t.Drag="whileDrag",t.Focus="whileFocus",t.InView="whileInView",t.Exit="exit"}(Rt||(Rt={}));const Dt={pageX:0,pageY:0};function It(t,e="page"){const n=t.touches[0]||t.changedTouches[0]||Dt;return{x:n[e+"X"],y:n[e+"Y"]}}function Nt(t,e="page"){return{x:t[e+"X"],y:t[e+"Y"]}}function Bt(t,e="page"){return{point:Ft(t)?It(t,e):Nt(t,e)}}const Ut=(t,e=!1)=>{const n=e=>t(e,Bt(e));return e?(o=n,t=>{const e=t instanceof MouseEvent;(!e||e&&0===t.button)&&o(t)}):n;var o},zt={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Wt={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function _t(t){return y.j&&null===window.onpointerdown?t:y.j&&null===window.ontouchstart?Wt[t]:y.j&&null===window.onmousedown?zt[t]:t}function $t(t,e,n,o){return jt(t,_t(e),Ut(n,"pointerdown"===e),o)}function qt(t,e,n,o){return Ot(t,_t(e),n&&Ut(n,"pointerdown"===e),o)}function Ht(t){let e=null;return()=>null===e&&(e=t,()=>{e=null})}const Yt=Ht("dragHorizontal"),Xt=Ht("dragVertical");function Zt(t){let e=!1;if("y"===t)e=Xt();else if("x"===t)e=Yt();else{const t=Yt(),n=Xt();t&&n?e=()=>{t(),n()}:(t&&t(),n&&n())}return e}function Gt(){const t=Zt(!0);return!t||(t(),!1)}function Kt(t,e,n){return(o,r)=>{Lt(o)&&!Gt()&&(t.animationState&&t.animationState.setActive(Rt.Hover,e),n&&n(o,r))}}const Qt=(t,e)=>!!e&&(t===e||Qt(t,e.parentElement));var Jt=n(5411);const te=(t,e)=>n=>e(t(n)),ee=(...t)=>t.reduce(te);var ne=n(9304),oe=n(6034);const re=new WeakMap,ie=new WeakMap,se=t=>{const e=re.get(t.target);e&&e(t)},ae=t=>{t.forEach(se)};const le={some:0,all:1};function ue(t,e,n,{root:r,margin:i,amount:s="some",once:a}){(0,o.useEffect)((()=>{if(!t)return;const o={root:null==r?void 0:r.current,rootMargin:i,threshold:"number"==typeof s?s:le[s]};return function(t,e,n){const o=function({root:t,...e}){const n=t||document;ie.has(n)||ie.set(n,{});const o=ie.get(n),r=JSON.stringify(e);return o[r]||(o[r]=new IntersectionObserver(ae,{root:t,...e})),o[r]}(e);return re.set(t,n),o.observe(t),()=>{re.delete(t),o.unobserve(t)}}(n.getInstance(),o,(t=>{const{isIntersecting:o}=t;if(e.isInView===o)return;if(e.isInView=o,a&&!o&&e.hasEnteredView)return;o&&(e.hasEnteredView=!0),n.animationState&&n.animationState.setActive(Rt.InView,o);const r=n.getProps(),i=o?r.onViewportEnter:r.onViewportLeave;i&&i(t)}))}),[t,r,i,s])}function ce(t,e,n,{fallback:r=!0}){(0,o.useEffect)((()=>{t&&r&&("production"!==ne.O&&(0,oe.O)(!1,"IntersectionObserver not available on this device. whileInView animations will trigger on mount."),requestAnimationFrame((()=>{e.hasEnteredView=!0;const{onViewportEnter:t}=n.getProps();t&&t(null),n.animationState&&n.animationState.setActive(Rt.InView,!0)})))}),[t])}const de=t=>e=>(t(e),null),he={inView:de((function({visualElement:t,whileInView:e,onViewportEnter:n,onViewportLeave:r,viewport:i={}}){const s=(0,o.useRef)({hasEnteredView:!1,isInView:!1});let a=Boolean(e||n||r);i.once&&s.current.hasEnteredView&&(a=!1),("undefined"==typeof IntersectionObserver?ce:ue)(a,s.current,t,i)})),tap:de((function({onTap:t,onTapStart:e,onTapCancel:n,whileTap:r,visualElement:i}){const s=t||e||n||r,a=(0,o.useRef)(!1),l=(0,o.useRef)(null),u={passive:!(e||t||n||f)};function c(){l.current&&l.current(),l.current=null}function d(){return c(),a.current=!1,i.animationState&&i.animationState.setActive(Rt.Tap,!1),!Gt()}function h(e,o){d()&&(Qt(i.getInstance(),e.target)?t&&t(e,o):n&&n(e,o))}function p(t,e){d()&&n&&n(t,e)}function f(t,n){c(),a.current||(a.current=!0,l.current=ee($t(window,"pointerup",h,u),$t(window,"pointercancel",p,u)),i.animationState&&i.animationState.setActive(Rt.Tap,!0),e&&e(t,n))}qt(i,"pointerdown",s?f:void 0,u),(0,Jt.z)(c)})),focus:de((function({whileFocus:t,visualElement:e}){const{animationState:n}=e;Ot(e,"focus",t?()=>{n&&n.setActive(Rt.Focus,!0)}:void 0),Ot(e,"blur",t?()=>{n&&n.setActive(Rt.Focus,!1)}:void 0)})),hover:de((function({onHoverStart:t,onHoverEnd:e,whileHover:n,visualElement:o}){qt(o,"pointerenter",t||n?Kt(o,!0,t):void 0,{passive:!t}),qt(o,"pointerleave",e||n?Kt(o,!1,e):void 0,{passive:!e})}))};function pe(){const t=(0,o.useContext)(s.O);if(null===t)return[!0,null];const{isPresent:e,onExitComplete:n,register:r}=t,i=(0,o.useId)();return(0,o.useEffect)((()=>r(i)),[]),!e&&n?[!1,()=>n&&n(i)]:[!0]}function fe(t,e){if(!Array.isArray(e))return!1;const n=e.length;if(n!==t.length)return!1;for(let o=0;o<n;o++)if(e[o]!==t[o])return!1;return!0}function me(t,e){var n={};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.indexOf(o)<0&&(n[o]=t[o]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(t);r<o.length;r++)e.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(t,o[r])&&(n[o[r]]=t[o[r]])}return n}Object.create,Object.create;const ve=(t,e,n)=>Math.min(Math.max(n,t),e);function ge(t,e){return t*Math.sqrt(1-e*e)}const ye=["duration","bounce"],xe=["stiffness","damping","mass"];function we(t,e){return e.some((e=>void 0!==t[e]))}function be(t){var{from:e=0,to:n=1,restSpeed:o=2,restDelta:r}=t,i=me(t,["from","to","restSpeed","restDelta"]);const s={done:!1,value:e};let{stiffness:a,damping:l,mass:u,velocity:c,duration:d,isResolvedFromDuration:h}=function(t){let e=Object.assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},t);if(!we(t,xe)&&we(t,ye)){const n=function({duration:t=800,bounce:e=.25,velocity:n=0,mass:o=1}){let r,i,s=1-e;s=ve(.05,1,s),t=ve(.01,10,t/1e3),s<1?(r=e=>{const o=e*s,r=o*t;return.001-(o-n)/ge(e,s)*Math.exp(-r)},i=e=>{const o=e*s*t,i=o*n+n,a=Math.pow(s,2)*Math.pow(e,2)*t,l=Math.exp(-o),u=ge(Math.pow(e,2),s);return(.001-r(e)>0?-1:1)*((i-a)*l)/u}):(r=e=>Math.exp(-e*t)*((e-n)*t+1)-.001,i=e=>Math.exp(-e*t)*(t*t*(n-e)));const a=function(t,e,n){let o=n;for(let n=1;n<12;n++)o-=t(o)/e(o);return o}(r,i,5/t);if(t*=1e3,isNaN(a))return{stiffness:100,damping:10,duration:t};{const e=Math.pow(a,2)*o;return{stiffness:e,damping:2*s*Math.sqrt(o*e),duration:t}}}(t);e=Object.assign(Object.assign(Object.assign({},e),n),{velocity:0,mass:1}),e.isResolvedFromDuration=!0}return e}(i),p=Ee,f=Ee;function m(){const t=c?-c/1e3:0,o=n-e,i=l/(2*Math.sqrt(a*u)),s=Math.sqrt(a/u)/1e3;if(void 0===r&&(r=Math.min(Math.abs(n-e)/100,.4)),i<1){const e=ge(s,i);p=r=>{const a=Math.exp(-i*s*r);return n-a*((t+i*s*o)/e*Math.sin(e*r)+o*Math.cos(e*r))},f=n=>{const r=Math.exp(-i*s*n);return i*s*r*(Math.sin(e*n)*(t+i*s*o)/e+o*Math.cos(e*n))-r*(Math.cos(e*n)*(t+i*s*o)-e*o*Math.sin(e*n))}}else if(1===i)p=e=>n-Math.exp(-s*e)*(o+(t+s*o)*e);else{const e=s*Math.sqrt(i*i-1);p=r=>{const a=Math.exp(-i*s*r),l=Math.min(e*r,300);return n-a*((t+i*s*o)*Math.sinh(l)+e*o*Math.cosh(l))/e}}}return m(),{next:t=>{const e=p(t);if(h)s.done=t>=d;else{const i=1e3*f(t),a=Math.abs(i)<=o,l=Math.abs(n-e)<=r;s.done=a&&l}return s.value=s.done?n:e,s},flipTarget:()=>{c=-c,[e,n]=[n,e],m()}}}be.needsInterpolation=(t,e)=>"string"==typeof t||"string"==typeof e;const Ee=t=>0,Pe=(t,e,n)=>{const o=e-t;return 0===o?1:(n-t)/o},Te=(t,e,n)=>-n*t+n*e+t,Se=(t,e)=>n=>Boolean(q(n)&&$.test(n)&&n.startsWith(t)||e&&Object.prototype.hasOwnProperty.call(n,e)),ke=(t,e,n)=>o=>{if(!q(o))return o;const[r,i,s,a]=o.match(W);return{[t]:parseFloat(r),[e]:parseFloat(i),[n]:parseFloat(s),alpha:void 0!==a?parseFloat(a):1}},Ae=U(0,255),Ce=Object.assign(Object.assign({},J),{transform:t=>Math.round(Ae(t))}),Ve={test:Se("rgb","red"),parse:ke("red","green","blue"),transform:({red:t,green:e,blue:n,alpha:o=1})=>"rgba("+Ce.transform(t)+", "+Ce.transform(e)+", "+Ce.transform(n)+", "+z(tt.transform(o))+")"},Me={test:Se("#"),parse:function(t){let e="",n="",o="",r="";return t.length>5?(e=t.substr(1,2),n=t.substr(3,2),o=t.substr(5,2),r=t.substr(7,2)):(e=t.substr(1,1),n=t.substr(2,1),o=t.substr(3,1),r=t.substr(4,1),e+=e,n+=n,o+=o,r+=r),{red:parseInt(e,16),green:parseInt(n,16),blue:parseInt(o,16),alpha:r?parseInt(r,16)/255:1}},transform:Ve.transform},Re={test:Se("hsl","hue"),parse:ke("hue","saturation","lightness"),transform:({hue:t,saturation:e,lightness:n,alpha:o=1})=>"hsla("+Math.round(t)+", "+X.transform(z(e))+", "+X.transform(z(n))+", "+z(tt.transform(o))+")"};function je(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function Oe({hue:t,saturation:e,lightness:n,alpha:o}){t/=360,n/=100;let r=0,i=0,s=0;if(e/=100){const o=n<.5?n*(1+e):n+e-n*e,a=2*n-o;r=je(a,o,t+1/3),i=je(a,o,t),s=je(a,o,t-1/3)}else r=i=s=n;return{red:Math.round(255*r),green:Math.round(255*i),blue:Math.round(255*s),alpha:o}}const Le=(t,e,n)=>{const o=t*t,r=e*e;return Math.sqrt(Math.max(0,n*(r-o)+o))},Fe=[Me,Ve,Re],De=t=>Fe.find((e=>e.test(t))),Ie=t=>`'${t}' is not an animatable color. Use the equivalent color code instead.`,Ne=(t,e)=>{let n=De(t),o=De(e);Ie(t),Ie(e);let r=n.parse(t),i=o.parse(e);n===Re&&(r=Oe(r),n=Ve),o===Re&&(i=Oe(i),o=Ve);const s=Object.assign({},r);return t=>{for(const e in s)"alpha"!==e&&(s[e]=Le(r[e],i[e],t));return s.alpha=Te(r.alpha,i.alpha,t),n.transform(s)}},Be={test:t=>Ve.test(t)||Me.test(t)||Re.test(t),parse:t=>Ve.test(t)?Ve.parse(t):Re.test(t)?Re.parse(t):Me.parse(t),transform:t=>q(t)?t:t.hasOwnProperty("red")?Ve.transform(t):Re.transform(t)},Ue="${c}",ze="${n}";function We(t){"number"==typeof t&&(t=`${t}`);const e=[];let n=0;const o=t.match(_);o&&(n=o.length,t=t.replace(_,Ue),e.push(...o.map(Be.parse)));const r=t.match(W);return r&&(t=t.replace(W,ze),e.push(...r.map(J.parse))),{values:e,numColors:n,tokenised:t}}function _e(t){return We(t).values}function $e(t){const{values:e,numColors:n,tokenised:o}=We(t),r=e.length;return t=>{let e=o;for(let o=0;o<r;o++)e=e.replace(o<n?Ue:ze,o<n?Be.transform(t[o]):z(t[o]));return e}}const qe=t=>"number"==typeof t?0:t,He={test:function(t){var e,n,o,r;return isNaN(t)&&q(t)&&(null!==(n=null===(e=t.match(W))||void 0===e?void 0:e.length)&&void 0!==n?n:0)+(null!==(r=null===(o=t.match(_))||void 0===o?void 0:o.length)&&void 0!==r?r:0)>0},parse:_e,createTransformer:$e,getAnimatableNone:function(t){const e=_e(t);return $e(t)(e.map(qe))}},Ye=t=>"number"==typeof t;function Xe(t,e){return Ye(t)?n=>Te(t,e,n):Be.test(t)?Ne(t,e):Qe(t,e)}const Ze=(t,e)=>{const n=[...t],o=n.length,r=t.map(((t,n)=>Xe(t,e[n])));return t=>{for(let e=0;e<o;e++)n[e]=r[e](t);return n}},Ge=(t,e)=>{const n=Object.assign(Object.assign({},t),e),o={};for(const r in n)void 0!==t[r]&&void 0!==e[r]&&(o[r]=Xe(t[r],e[r]));return t=>{for(const e in o)n[e]=o[e](t);return n}};function Ke(t){const e=He.parse(t),n=e.length;let o=0,r=0,i=0;for(let t=0;t<n;t++)o||"number"==typeof e[t]?o++:void 0!==e[t].hue?i++:r++;return{parsed:e,numNumbers:o,numRGB:r,numHSL:i}}const Qe=(t,e)=>{const n=He.createTransformer(e),o=Ke(t),r=Ke(e);return o.numHSL===r.numHSL&&o.numRGB===r.numRGB&&o.numNumbers>=r.numNumbers?ee(Ze(o.parsed,r.parsed),n):n=>`${n>0?e:t}`},Je=(t,e)=>n=>Te(t,e,n);function tn(t,e,{clamp:n=!0,ease:o,mixer:r}={}){const i=t.length;e.length,!o||!Array.isArray(o)||o.length,t[0]>t[i-1]&&(t=[].concat(t),e=[].concat(e),t.reverse(),e.reverse());const s=function(t,e,n){const o=[],r=n||("number"==typeof(i=t[0])?Je:"string"==typeof i?Be.test(i)?Ne:Qe:Array.isArray(i)?Ze:"object"==typeof i?Ge:void 0);var i;const s=t.length-1;for(let n=0;n<s;n++){let i=r(t[n],t[n+1]);if(e){const t=Array.isArray(e)?e[n]:e;i=ee(t,i)}o.push(i)}return o}(e,o,r),a=2===i?function([t,e],[n]){return o=>n(Pe(t,e,o))}(t,s):function(t,e){const n=t.length,o=n-1;return r=>{let i=0,s=!1;if(r<=t[0]?s=!0:r>=t[o]&&(i=o-1,s=!0),!s){let e=1;for(;e<n&&!(t[e]>r||e===o);e++);i=e-1}const a=Pe(t[i],t[i+1],r);return e[i](a)}}(t,s);return n?e=>a(ve(t[0],t[i-1],e)):a}const en=t=>e=>1-t(1-e),nn=t=>e=>e<=.5?t(2*e)/2:(2-t(2*(1-e)))/2,on=t=>e=>e*e*((t+1)*e-t),rn=t=>t,sn=(2,t=>Math.pow(t,2));const an=en(sn),ln=nn(sn),un=t=>1-Math.sin(Math.acos(t)),cn=en(un),dn=nn(cn),hn=on(1.525),pn=en(hn),fn=nn(hn),mn=(t=>{const e=on(1.525);return t=>(t*=2)<1?.5*e(t):.5*(2-Math.pow(2,-10*(t-1)))})(),vn=t=>{if(1===t||0===t)return t;const e=t*t;return t<.36363636363636365?7.5625*e:t<.7272727272727273?9.075*e-9.9*t+3.4:t<.9?12.066481994459833*e-19.63545706371191*t+8.898060941828255:10.8*t*t-20.52*t+10.72},gn=en(vn);function yn(t,e){return t.map((()=>e||ln)).splice(0,t.length-1)}function xn({from:t=0,to:e=1,ease:n,offset:o,duration:r=300}){const i={done:!1,value:t},s=Array.isArray(e)?e:[t,e],a=function(t,e){return t.map((t=>t*e))}(o&&o.length===s.length?o:function(t){const e=t.length;return t.map(((t,n)=>0!==n?n/(e-1):0))}(s),r);function l(){return tn(a,s,{ease:Array.isArray(n)?n:yn(s,n)})}let u=l();return{next:t=>(i.value=u(t),i.done=t>=r,i),flipTarget:()=>{s.reverse(),u=l()}}}const wn={keyframes:xn,spring:be,decay:function({velocity:t=0,from:e=0,power:n=.8,timeConstant:o=350,restDelta:r=.5,modifyTarget:i}){const s={done:!1,value:e};let a=n*t;const l=e+a,u=void 0===i?l:i(l);return u!==l&&(a=u-e),{next:t=>{const e=-a*Math.exp(-t/o);return s.done=!(e>r||e<-r),s.value=s.done?u:u+e,s},flipTarget:()=>{}}}};var bn=n(2396);function En(t,e,n=0){return t-e-n}const Pn=t=>{const e=({delta:e})=>t(e);return{start:()=>bn.ZP.update(e,!0),stop:()=>bn.qY.update(e)}};function Tn(t){var e,n,{from:o,autoplay:r=!0,driver:i=Pn,elapsed:s=0,repeat:a=0,repeatType:l="loop",repeatDelay:u=0,onPlay:c,onStop:d,onComplete:h,onRepeat:p,onUpdate:f}=t,m=me(t,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]);let v,g,y,{to:x}=m,w=0,b=m.duration,E=!1,P=!0;const T=function(t){if(Array.isArray(t.to))return xn;if(wn[t.type])return wn[t.type];const e=new Set(Object.keys(t));return e.has("ease")||e.has("duration")&&!e.has("dampingRatio")?xn:e.has("dampingRatio")||e.has("stiffness")||e.has("mass")||e.has("damping")||e.has("restSpeed")||e.has("restDelta")?be:xn}(m);(null===(n=(e=T).needsInterpolation)||void 0===n?void 0:n.call(e,o,x))&&(y=tn([0,100],[o,x],{clamp:!1}),o=0,x=100);const S=T(Object.assign(Object.assign({},m),{from:o,to:x}));return r&&(null==c||c(),v=i((function(t){if(P||(t=-t),s+=t,!E){const t=S.next(Math.max(0,s));g=t.value,y&&(g=y(g)),E=P?t.done:s<=0}null==f||f(g),E&&(0===w&&(null!=b||(b=s)),w<a?function(t,e,n,o){return o?t>=e+n:t<=-n}(s,b,u,P)&&(w++,"reverse"===l?(P=w%2==0,s=function(t,e,n=0,o=!0){return o?En(e+-t,e,n):e-(t-e)+n}(s,b,u,P)):(s=En(s,b,u),"mirror"===l&&S.flipTarget()),E=!1,p&&p()):(v.stop(),h&&h()))})),v.start()),{stop:()=>{null==d||d(),v.stop()}}}function Sn(t,e){return e?t*(1e3/e):0}const kn=t=>1e3*t,An=(t,e)=>1-3*e+3*t,Cn=(t,e)=>3*e-6*t,Vn=t=>3*t,Mn=(t,e,n)=>((An(e,n)*t+Cn(e,n))*t+Vn(e))*t,Rn=(t,e,n)=>3*An(e,n)*t*t+2*Cn(e,n)*t+Vn(e),jn=.1;function On(t,e,n,o){if(t===e&&n===o)return rn;const r=new Float32Array(11);for(let e=0;e<11;++e)r[e]=Mn(e*jn,t,n);return i=>0===i||1===i?i:Mn(function(e){let o=0,i=1;for(;10!==i&&r[i]<=e;++i)o+=jn;--i;const s=o+(e-r[i])/(r[i+1]-r[i])*jn,a=Rn(s,t,n);return a>=.001?function(t,e,n,o){for(let r=0;r<8;++r){const r=Rn(e,n,o);if(0===r)return e;e-=(Mn(e,n,o)-t)/r}return e}(e,s,t,n):0===a?s:function(t,e,n,o,r){let i,s,a=0;do{s=e+(n-e)/2,i=Mn(s,o,r)-t,i>0?n=s:e=s}while(Math.abs(i)>1e-7&&++a<10);return s}(e,o,o+jn,t,n)}(i),e,o)}const Ln={linear:rn,easeIn:sn,easeInOut:ln,easeOut:an,circIn:un,circInOut:dn,circOut:cn,backIn:hn,backInOut:fn,backOut:pn,anticipate:mn,bounceIn:gn,bounceInOut:t=>t<.5?.5*(1-vn(1-2*t)):.5*vn(2*t-1)+.5,bounceOut:vn},Fn=t=>{if(Array.isArray(t)){t.length;const[e,n,o,r]=t;return On(e,n,o,r)}return"string"==typeof t?Ln[t]:t},Dn=(t,e)=>!("zIndex"===t||"number"!=typeof e&&!Array.isArray(e)&&("string"!=typeof e||!He.test(e)||e.startsWith("url("))),In=()=>({type:"spring",stiffness:500,damping:25,restSpeed:10}),Nn=t=>({type:"spring",stiffness:550,damping:0===t?2*Math.sqrt(550):30,restSpeed:10}),Bn=()=>({type:"keyframes",ease:"linear",duration:.3}),Un=t=>({type:"keyframes",duration:.8,values:t}),zn={x:In,y:In,z:In,rotate:In,rotateX:In,rotateY:In,rotateZ:In,scaleX:Nn,scaleY:Nn,scale:Nn,opacity:Bn,backgroundColor:Bn,color:Bn,default:Nn},Wn=(t,e)=>{let n;return n=Tt(e)?Un:zn[t]||zn.default,{to:e,...n(e)}},_n=new Set(["brightness","contrast","saturate","opacity"]);function $n(t){let[e,n]=t.slice(0,-1).split("(");if("drop-shadow"===e)return t;const[o]=n.match(W)||[];if(!o)return t;const r=n.replace(o,"");let i=_n.has(e)?1:0;return o!==n&&(i*=100),e+"("+i+r+")"}const qn=/([a-z-]*)\(.*?\)/g,Hn=Object.assign(Object.assign({},He),{getAnimatableNone:t=>{const e=t.match(qn);return e?e.map($n).join(" "):t}}),Yn={...ot,color:Be,backgroundColor:Be,outlineColor:Be,fill:Be,stroke:Be,borderColor:Be,borderTopColor:Be,borderRightColor:Be,borderBottomColor:Be,borderLeftColor:Be,filter:Hn,WebkitFilter:Hn},Xn=t=>Yn[t];function Zn(t,e){var n;let o=Xn(t);return o!==Hn&&(o=He),null===(n=o.getAnimatableNone)||void 0===n?void 0:n.call(o,e)}let Gn=!1;function Kn({ease:t,times:e,yoyo:n,flip:o,loop:r,...i}){const s={...i};return e&&(s.offset=e),i.duration&&(s.duration=kn(i.duration)),i.repeatDelay&&(s.repeatDelay=kn(i.repeatDelay)),t&&(s.ease=(t=>Array.isArray(t)&&"number"!=typeof t[0])(t)?t.map(Fn):Fn(t)),"tween"===i.type&&(s.type="keyframes"),(n||r||o)&&(Gn=!0,n?s.repeatType="reverse":r?s.repeatType="loop":o&&(s.repeatType="mirror"),s.repeat=r||n||o||i.repeat),"spring"!==i.type&&(s.type="keyframes"),s}function Qn(t,e,n){return Array.isArray(e.to)&&void 0===t.duration&&(t.duration=.8),function(t){Array.isArray(t.to)&&null===t.to[0]&&(t.to=[...t.to],t.to[0]=t.from)}(e),function({when:t,delay:e,delayChildren:n,staggerChildren:o,staggerDirection:r,repeat:i,repeatType:s,repeatDelay:a,from:l,...u}){return!!Object.keys(u).length}(t)||(t={...t,...Wn(n,e.to)}),{...e,...Kn(t)}}function Jn(t){return 0===t||"string"==typeof t&&0===parseFloat(t)&&-1===t.indexOf(" ")}function to(t){return"number"==typeof t?0:Zn("",t)}function eo(t,e){return t[e]||t.default||t}function no(t,e,n,o={}){return e.start((r=>{let i,s;const a=function(t,e,n,o,r){const i=eo(o,t)||{};let s=void 0!==i.from?i.from:e.get();const a=Dn(t,n);return"none"===s&&a&&"string"==typeof n?s=Zn(t,n):Jn(s)&&"string"==typeof n?s=to(n):!Array.isArray(n)&&Jn(n)&&"string"==typeof s&&(n=to(s)),Dn(t,s)&&a&&!1!==i.type?function(){const o={from:s,to:n,velocity:e.getVelocity(),onComplete:r,onUpdate:t=>e.set(t)};return"inertia"===i.type||"decay"===i.type?function({from:t=0,velocity:e=0,min:n,max:o,power:r=.8,timeConstant:i=750,bounceStiffness:s=500,bounceDamping:a=10,restDelta:l=1,modifyTarget:u,driver:c,onUpdate:d,onComplete:h,onStop:p}){let f;function m(t){return void 0!==n&&t<n||void 0!==o&&t>o}function v(t){return void 0===n?o:void 0===o||Math.abs(n-t)<Math.abs(o-t)?n:o}function g(t){null==f||f.stop(),f=Tn(Object.assign(Object.assign({},t),{driver:c,onUpdate:e=>{var n;null==d||d(e),null===(n=t.onUpdate)||void 0===n||n.call(t,e)},onComplete:h,onStop:p}))}function y(t){g(Object.assign({type:"spring",stiffness:s,damping:a,restDelta:l},t))}if(m(t))y({from:t,velocity:e,to:v(t)});else{let o=r*e+t;void 0!==u&&(o=u(o));const s=v(o),a=s===n?-1:1;let c,d;const h=t=>{c=d,d=t,e=Sn(t-c,(0,bn.$B)().delta),(1===a&&t>s||-1===a&&t<s)&&y({from:t,to:s,velocity:e})};g({type:"decay",from:t,velocity:e,timeConstant:i,power:r,restDelta:l,modifyTarget:u,onUpdate:m(o)?h:void 0})}return{stop:()=>null==f?void 0:f.stop()}}({...o,...i}):Tn({...Qn(i,o,t),onUpdate:t=>{o.onUpdate(t),i.onUpdate&&i.onUpdate(t)},onComplete:()=>{o.onComplete(),i.onComplete&&i.onComplete()}})}:function(){const t=St(n);return e.set(t),r(),i.onUpdate&&i.onUpdate(t),i.onComplete&&i.onComplete(),{stop:()=>{}}}}(t,e,n,o,r),l=function(t,e){var n,o;return null!==(o=null!==(n=(eo(t,e)||{}).delay)&&void 0!==n?n:t.delay)&&void 0!==o?o:0}(o,t),u=()=>s=a();return l?i=window.setTimeout(u,kn(l)):u(),()=>{clearTimeout(i),s&&s.stop()}}))}function oo(t,e){-1===t.indexOf(e)&&t.push(e)}function ro(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}class io{constructor(){this.subscriptions=[]}add(t){return oo(this.subscriptions,t),()=>ro(this.subscriptions,t)}notify(t,e,n){const o=this.subscriptions.length;if(o)if(1===o)this.subscriptions[0](t,e,n);else for(let r=0;r<o;r++){const o=this.subscriptions[r];o&&o(t,e,n)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}class so{constructor(t){var e;this.version="7.3.2",this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new io,this.velocityUpdateSubscribers=new io,this.renderSubscribers=new io,this.canTrackVelocity=!1,this.updateAndNotify=(t,e=!0)=>{this.prev=this.current,this.current=t;const{delta:n,timestamp:o}=(0,bn.$B)();this.lastUpdated!==o&&(this.timeDelta=n,this.lastUpdated=o,bn.ZP.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.updateSubscribers.notify(this.current),this.velocityUpdateSubscribers.getSize()&&this.velocityUpdateSubscribers.notify(this.getVelocity()),e&&this.renderSubscribers.notify(this.current)},this.scheduleVelocityCheck=()=>bn.ZP.postRender(this.velocityCheck),this.velocityCheck=({timestamp:t})=>{t!==this.lastUpdated&&(this.prev=this.current,this.velocityUpdateSubscribers.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=t,this.canTrackVelocity=(e=this.current,!isNaN(parseFloat(e)))}onChange(t){return this.updateSubscribers.add(t)}clearListeners(){this.updateSubscribers.clear()}onRenderRequest(t){return t(this.get()),this.renderSubscribers.add(t)}attach(t){this.passiveEffect=t}set(t,e=!0){e&&this.passiveEffect?this.passiveEffect(t,this.updateAndNotify):this.updateAndNotify(t,e)}get(){return this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?Sn(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(t){return this.stop(),new Promise((e=>{this.hasAnimated=!0,this.stopAnimation=t(e)})).then((()=>this.clearAnimation()))}stop(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()}isAnimating(){return!!this.stopAnimation}clearAnimation(){this.stopAnimation=null}destroy(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()}}function ao(t){return new so(t)}const lo=t=>e=>e.test(t),uo=[J,Z,X,Y,K,G,{test:t=>"auto"===t,parse:t=>t}],co=t=>uo.find(lo(t)),ho=[...uo,Be,He],po=t=>ho.find(lo(t));function fo(t,e,n){const o=t.getProps();return Pt(o,e,void 0!==n?n:o.custom,function(t){const e={};return t.forEachValue(((t,n)=>e[n]=t.get())),e}(t),function(t){const e={};return t.forEachValue(((t,n)=>e[n]=t.getVelocity())),e}(t))}function mo(t,e,n){t.hasValue(e)?t.getValue(e).set(n):t.addValue(e,ao(n))}function vo(t,e){if(e)return(e[t]||e.default||e).from}function go(t){return Boolean(F(t)&&t.add)}function yo(t,e,n={}){var o;const r=fo(t,e,n.custom);let{transition:i=t.getDefaultTransition()||{}}=r||{};n.transitionOverride&&(i=n.transitionOverride);const s=r?()=>xo(t,r,n):()=>Promise.resolve(),a=(null===(o=t.variantChildren)||void 0===o?void 0:o.size)?(o=0)=>{const{delayChildren:r=0,staggerChildren:s,staggerDirection:a}=i;return function(t,e,n=0,o=0,r=1,i){const s=[],a=(t.variantChildren.size-1)*o,l=1===r?(t=0)=>t*o:(t=0)=>a-t*o;return Array.from(t.variantChildren).sort(wo).forEach(((t,o)=>{s.push(yo(t,e,{...i,delay:n+l(o)}).then((()=>t.notifyAnimationComplete(e))))})),Promise.all(s)}(t,e,r+o,s,a,n)}:()=>Promise.resolve(),{when:l}=i;if(l){const[t,e]="beforeChildren"===l?[s,a]:[a,s];return t().then(e)}return Promise.all([s(),a(n.delay)])}function xo(t,e,{delay:n=0,transitionOverride:o,type:r}={}){var i;let{transition:s=t.getDefaultTransition(),transitionEnd:a,...l}=t.makeTargetAnimatable(e);const u=t.getValue("willChange");o&&(s=o);const c=[],d=r&&(null===(i=t.animationState)||void 0===i?void 0:i.getState()[r]);for(const e in l){const o=t.getValue(e),r=l[e];if(!o||void 0===r||d&&bo(d,e))continue;let i={delay:n,...s};t.shouldReduceMotion&&O.has(e)&&(i={...i,type:!1,delay:0});let a=no(e,o,r,i);go(u)&&(u.add(e),a=a.then((()=>u.remove(e)))),c.push(a)}return Promise.all(c).then((()=>{a&&function(t,e){const n=fo(t,e);let{transitionEnd:o={},transition:r={},...i}=n?t.makeTargetAnimatable(n,!1):{};i={...i,...o};for(const e in i)mo(t,e,St(i[e]))}(t,a)}))}function wo(t,e){return t.sortNodePosition(e)}function bo({protectedKeys:t,needsAnimating:e},n){const o=t.hasOwnProperty(n)&&!0!==e[n];return e[n]=!1,o}const Eo=[Rt.Animate,Rt.InView,Rt.Focus,Rt.Hover,Rt.Tap,Rt.Drag,Rt.Exit],Po=[...Eo].reverse(),To=Eo.length;function So(t){let e=function(t){return e=>Promise.all(e.map((({animation:e,options:n})=>function(t,e,n={}){let o;if(t.notifyAnimationStart(e),Array.isArray(e)){const r=e.map((e=>yo(t,e,n)));o=Promise.all(r)}else if("string"==typeof e)o=yo(t,e,n);else{const r="function"==typeof e?fo(t,e,n.custom):e;o=xo(t,r,n)}return o.then((()=>t.notifyAnimationComplete(e)))}(t,e,n))))}(t);const n={[Rt.Animate]:ko(!0),[Rt.InView]:ko(),[Rt.Hover]:ko(),[Rt.Tap]:ko(),[Rt.Drag]:ko(),[Rt.Focus]:ko(),[Rt.Exit]:ko()};let o=!0;const r=(e,n)=>{const o=fo(t,n);if(o){const{transition:t,transitionEnd:n,...r}=o;e={...e,...r,...n}}return e};function i(i,s){var a;const l=t.getProps(),u=t.getVariantContext(!0)||{},h=[],p=new Set;let f={},m=1/0;for(let e=0;e<To;e++){const y=Po[e],x=n[y],w=null!==(a=l[y])&&void 0!==a?a:u[y],b=c(w),E=y===s?x.isActive:null;!1===E&&(m=e);let P=w===u[y]&&w!==l[y]&&b;if(P&&o&&t.manuallyAnimateOnMount&&(P=!1),x.protectedKeys={...f},!x.isActive&&null===E||!w&&!x.prevProp||d(w)||"boolean"==typeof w)continue;const T=(v=x.prevProp,"string"==typeof(g=w)?g!==v:!!Array.isArray(g)&&!fe(g,v));let S=T||y===s&&x.isActive&&!P&&b||e>m&&b;const k=Array.isArray(w)?w:[w];let A=k.reduce(r,{});!1===E&&(A={});const{prevResolvedValues:C={}}=x,V={...C,...A},M=t=>{S=!0,p.delete(t),x.needsAnimating[t]=!0};for(const t in V){const e=A[t],n=C[t];f.hasOwnProperty(t)||(e!==n?Tt(e)&&Tt(n)?!fe(e,n)||T?M(t):x.protectedKeys[t]=!0:void 0!==e?M(t):p.add(t):void 0!==e&&p.has(t)?M(t):x.protectedKeys[t]=!0)}x.prevProp=w,x.prevResolvedValues=A,x.isActive&&(f={...f,...A}),o&&t.blockInitialAnimation&&(S=!1),S&&!P&&h.push(...k.map((t=>({animation:t,options:{type:y,...i}}))))}var v,g;if(p.size){const e={};p.forEach((n=>{const o=t.getBaseTarget(n);void 0!==o&&(e[n]=o)})),h.push({animation:e})}let y=Boolean(h.length);return o&&!1===l.initial&&!t.manuallyAnimateOnMount&&(y=!1),o=!1,y?e(h):Promise.resolve()}return{animateChanges:i,setActive:function(e,o,r){var s;if(n[e].isActive===o)return Promise.resolve();null===(s=t.variantChildren)||void 0===s||s.forEach((t=>{var n;return null===(n=t.animationState)||void 0===n?void 0:n.setActive(e,o)})),n[e].isActive=o;const a=i(r,e);for(const t in n)n[t].protectedKeys={};return a},setAnimateFunction:function(n){e=n(t)},getState:()=>n}}function ko(t=!1){return{isActive:t,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}const Ao={animation:de((({visualElement:t,animate:e})=>{t.animationState||(t.animationState=So(t)),d(e)&&(0,o.useEffect)((()=>e.subscribe(t)),[e])})),exit:de((t=>{const{custom:e,visualElement:n}=t,[r,i]=pe(),a=(0,o.useContext)(s.O);(0,o.useEffect)((()=>{n.isPresent=r;const t=n.animationState&&n.animationState.setActive(Rt.Exit,!r,{custom:a&&a.custom||e});t&&!r&&t.then(i)}),[r])}))},Co=t=>t.hasOwnProperty("x")&&t.hasOwnProperty("y"),Vo=t=>Co(t)&&t.hasOwnProperty("z"),Mo=(t,e)=>Math.abs(t-e);function Ro(t,e){if(Ye(t)&&Ye(e))return Mo(t,e);if(Co(t)&&Co(e)){const n=Mo(t.x,e.x),o=Mo(t.y,e.y),r=Vo(t)&&Vo(e)?Mo(t.z,e.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2)+Math.pow(r,2))}}class jo{constructor(t,e,{transformPagePoint:n}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=()=>{if(!this.lastMoveEvent||!this.lastMoveEventInfo)return;const t=Fo(this.lastMoveEventInfo,this.history),e=null!==this.startEvent,n=Ro(t.offset,{x:0,y:0})>=3;if(!e&&!n)return;const{point:o}=t,{timestamp:r}=(0,bn.$B)();this.history.push({...o,timestamp:r});const{onStart:i,onMove:s}=this.handlers;e||(i&&i(this.lastMoveEvent,t),this.startEvent=this.lastMoveEvent),s&&s(this.lastMoveEvent,t)},this.handlePointerMove=(t,e)=>{this.lastMoveEvent=t,this.lastMoveEventInfo=Oo(e,this.transformPagePoint),Lt(t)&&0===t.buttons?this.handlePointerUp(t,e):bn.ZP.update(this.updatePoint,!0)},this.handlePointerUp=(t,e)=>{this.end();const{onEnd:n,onSessionEnd:o}=this.handlers,r=Fo(Oo(e,this.transformPagePoint),this.history);this.startEvent&&n&&n(t,r),o&&o(t,r)},Ft(t)&&t.touches.length>1)return;this.handlers=e,this.transformPagePoint=n;const o=Oo(Bt(t),this.transformPagePoint),{point:r}=o,{timestamp:i}=(0,bn.$B)();this.history=[{...r,timestamp:i}];const{onSessionStart:s}=e;s&&s(t,Fo(o,this.history)),this.removeListeners=ee($t(window,"pointermove",this.handlePointerMove),$t(window,"pointerup",this.handlePointerUp),$t(window,"pointercancel",this.handlePointerUp))}updateHandlers(t){this.handlers=t}end(){this.removeListeners&&this.removeListeners(),bn.qY.update(this.updatePoint)}}function Oo(t,e){return e?{point:e(t.point)}:t}function Lo(t,e){return{x:t.x-e.x,y:t.y-e.y}}function Fo({point:t},e){return{point:t,delta:Lo(t,Io(e)),offset:Lo(t,Do(e)),velocity:No(e,.1)}}function Do(t){return t[0]}function Io(t){return t[t.length-1]}function No(t,e){if(t.length<2)return{x:0,y:0};let n=t.length-1,o=null;const r=Io(t);for(;n>=0&&(o=t[n],!(r.timestamp-o.timestamp>kn(e)));)n--;if(!o)return{x:0,y:0};const i=(r.timestamp-o.timestamp)/1e3;if(0===i)return{x:0,y:0};const s={x:(r.x-o.x)/i,y:(r.y-o.y)/i};return s.x===1/0&&(s.x=0),s.y===1/0&&(s.y=0),s}function Bo(t){return t.max-t.min}function Uo(t,e=0,n=.01){return Ro(t,e)<n}function zo(t,e,n,o=.5){t.origin=o,t.originPoint=Te(e.min,e.max,t.origin),t.scale=Bo(n)/Bo(e),(Uo(t.scale,1,1e-4)||isNaN(t.scale))&&(t.scale=1),t.translate=Te(n.min,n.max,t.origin)-t.originPoint,(Uo(t.translate)||isNaN(t.translate))&&(t.translate=0)}function Wo(t,e,n,o){zo(t.x,e.x,n.x,null==o?void 0:o.originX),zo(t.y,e.y,n.y,null==o?void 0:o.originY)}function _o(t,e,n){t.min=n.min+e.min,t.max=t.min+Bo(e)}function $o(t,e,n){t.min=e.min-n.min,t.max=t.min+Bo(e)}function qo(t,e,n){$o(t.x,e.x,n.x),$o(t.y,e.y,n.y)}function Ho(t,e,n){return{min:void 0!==e?t.min+e:void 0,max:void 0!==n?t.max+n-(t.max-t.min):void 0}}function Yo(t,e){let n=e.min-t.min,o=e.max-t.max;return e.max-e.min<t.max-t.min&&([n,o]=[o,n]),{min:n,max:o}}const Xo=.35;function Zo(t,e,n){return{min:Go(t,e),max:Go(t,n)}}function Go(t,e){var n;return"number"==typeof t?t:null!==(n=t[e])&&void 0!==n?n:0}function Ko(t){return[t("x"),t("y")]}function Qo({top:t,left:e,right:n,bottom:o}){return{x:{min:e,max:n},y:{min:t,max:o}}}function Jo(t){return void 0===t||1===t}function tr({scale:t,scaleX:e,scaleY:n}){return!Jo(t)||!Jo(e)||!Jo(n)}function er(t){return tr(t)||nr(t.x)||nr(t.y)||t.z||t.rotate||t.rotateX||t.rotateY}function nr(t){return t&&"0%"!==t}function or(t,e,n){return n+e*(t-n)}function rr(t,e,n,o,r){return void 0!==r&&(t=or(t,r,o)),or(t,n,o)+e}function ir(t,e=0,n=1,o,r){t.min=rr(t.min,e,n,o,r),t.max=rr(t.max,e,n,o,r)}function sr(t,{x:e,y:n}){ir(t.x,e.translate,e.scale,e.originPoint),ir(t.y,n.translate,n.scale,n.originPoint)}function ar(t,e){t.min=t.min+e,t.max=t.max+e}function lr(t,e,[n,o,r]){const i=void 0!==e[r]?e[r]:.5,s=Te(t.min,t.max,i);ir(t,e[n],e[o],s,e.scale)}const ur=["x","scaleX","originX"],cr=["y","scaleY","originY"];function dr(t,e){lr(t.x,e,ur),lr(t.y,e,cr)}function hr(t,e){return Qo(function(t,e){if(!e)return t;const n=e({x:t.left,y:t.top}),o=e({x:t.right,y:t.bottom});return{top:n.y,left:n.x,bottom:o.y,right:o.x}}(t.getBoundingClientRect(),e))}const pr=new WeakMap;class fr{constructor(t){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic={x:{min:0,max:0},y:{min:0,max:0}},this.visualElement=t}start(t,{snapToCursor:e=!1}={}){!1!==this.visualElement.isPresent&&(this.panSession=new jo(t,{onSessionStart:t=>{this.stopAnimation(),e&&this.snapToCursor(Bt(t,"page").point)},onStart:(t,e)=>{var n;const{drag:o,dragPropagation:r,onDragStart:i}=this.getProps();(!o||r||(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=Zt(o),this.openGlobalLock))&&(this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),Ko((t=>{var e,n;let o=this.getAxisMotionValue(t).get()||0;if(X.test(o)){const r=null===(n=null===(e=this.visualElement.projection)||void 0===e?void 0:e.layout)||void 0===n?void 0:n.actual[t];r&&(o=Bo(r)*(parseFloat(o)/100))}this.originPoint[t]=o})),null==i||i(t,e),null===(n=this.visualElement.animationState)||void 0===n||n.setActive(Rt.Drag,!0))},onMove:(t,e)=>{const{dragPropagation:n,dragDirectionLock:o,onDirectionLock:r,onDrag:i}=this.getProps();if(!n&&!this.openGlobalLock)return;const{offset:s}=e;if(o&&null===this.currentDirection)return this.currentDirection=function(t,e=10){let n=null;return Math.abs(t.y)>e?n="y":Math.abs(t.x)>e&&(n="x"),n}(s),void(null!==this.currentDirection&&(null==r||r(this.currentDirection)));this.updateAxis("x",e.point,s),this.updateAxis("y",e.point,s),this.visualElement.syncRender(),null==i||i(t,e)},onSessionEnd:(t,e)=>this.stop(t,e)},{transformPagePoint:this.visualElement.getTransformPagePoint()}))}stop(t,e){const n=this.isDragging;if(this.cancel(),!n)return;const{velocity:o}=e;this.startAnimation(o);const{onDragEnd:r}=this.getProps();null==r||r(t,e)}cancel(){var t,e;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(t=this.panSession)||void 0===t||t.end(),this.panSession=void 0;const{dragPropagation:n}=this.getProps();!n&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(e=this.visualElement.animationState)||void 0===e||e.setActive(Rt.Drag,!1)}updateAxis(t,e,n){const{drag:o}=this.getProps();if(!n||!mr(t,o,this.currentDirection))return;const r=this.getAxisMotionValue(t);let i=this.originPoint[t]+n[t];this.constraints&&this.constraints[t]&&(i=function(t,{min:e,max:n},o){return void 0!==e&&t<e?t=o?Te(e,t,o.min):Math.max(t,e):void 0!==n&&t>n&&(t=o?Te(n,t,o.max):Math.min(t,n)),t}(i,this.constraints[t],this.elastic[t])),r.set(i)}resolveConstraints(){const{dragConstraints:t,dragElastic:e}=this.getProps(),{layout:n}=this.visualElement.projection||{},o=this.constraints;t&&u(t)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!t||!n)&&function(t,{top:e,left:n,bottom:o,right:r}){return{x:Ho(t.x,n,r),y:Ho(t.y,e,o)}}(n.actual,t),this.elastic=function(t=Xo){return!1===t?t=0:!0===t&&(t=Xo),{x:Zo(t,"left","right"),y:Zo(t,"top","bottom")}}(e),o!==this.constraints&&n&&this.constraints&&!this.hasMutatedConstraints&&Ko((t=>{this.getAxisMotionValue(t)&&(this.constraints[t]=function(t,e){const n={};return void 0!==e.min&&(n.min=e.min-t.min),void 0!==e.max&&(n.max=e.max-t.min),n}(n.actual[t],this.constraints[t]))}))}resolveRefConstraints(){const{dragConstraints:t,onMeasureDragConstraints:e}=this.getProps();if(!t||!u(t))return!1;const n=t.current,{projection:o}=this.visualElement;if(!o||!o.layout)return!1;const r=function(t,e,n){const o=hr(t,n),{scroll:r}=e;return r&&(ar(o.x,r.x),ar(o.y,r.y)),o}(n,o.root,this.visualElement.getTransformPagePoint());let i=function(t,e){return{x:Yo(t.x,e.x),y:Yo(t.y,e.y)}}(o.layout.actual,r);if(e){const t=e(function({x:t,y:e}){return{top:e.min,right:t.max,bottom:e.max,left:t.min}}(i));this.hasMutatedConstraints=!!t,t&&(i=Qo(t))}return i}startAnimation(t){const{drag:e,dragMomentum:n,dragElastic:o,dragTransition:r,dragSnapToOrigin:i,onDragTransitionEnd:s}=this.getProps(),a=this.constraints||{},l=Ko((s=>{var l;if(!mr(s,e,this.currentDirection))return;let u=null!==(l=null==a?void 0:a[s])&&void 0!==l?l:{};i&&(u={min:0,max:0});const c=o?200:1e6,d=o?40:1e7,h={type:"inertia",velocity:n?t[s]:0,bounceStiffness:c,bounceDamping:d,timeConstant:750,restDelta:1,restSpeed:10,...r,...u};return this.startAxisValueAnimation(s,h)}));return Promise.all(l).then(s)}startAxisValueAnimation(t,e){return no(t,this.getAxisMotionValue(t),0,e)}stopAnimation(){Ko((t=>this.getAxisMotionValue(t).stop()))}getAxisMotionValue(t){var e,n;const o="_drag"+t.toUpperCase();return this.visualElement.getProps()[o]||this.visualElement.getValue(t,null!==(n=null===(e=this.visualElement.getProps().initial)||void 0===e?void 0:e[t])&&void 0!==n?n:0)}snapToCursor(t){Ko((e=>{const{drag:n}=this.getProps();if(!mr(e,n,this.currentDirection))return;const{projection:o}=this.visualElement,r=this.getAxisMotionValue(e);if(o&&o.layout){const{min:n,max:i}=o.layout.actual[e];r.set(t[e]-Te(n,i,.5))}}))}scalePositionWithinConstraints(){var t;const{drag:e,dragConstraints:n}=this.getProps(),{projection:o}=this.visualElement;if(!u(n)||!o||!this.constraints)return;this.stopAnimation();const r={x:0,y:0};Ko((t=>{const e=this.getAxisMotionValue(t);if(e){const n=e.get();r[t]=function(t,e){let n=.5;const o=Bo(t),r=Bo(e);return r>o?n=Pe(e.min,e.max-o,t.min):o>r&&(n=Pe(t.min,t.max-r,e.min)),ve(0,1,n)}({min:n,max:n},this.constraints[t])}}));const{transformTemplate:i}=this.visualElement.getProps();this.visualElement.getInstance().style.transform=i?i({},""):"none",null===(t=o.root)||void 0===t||t.updateScroll(),o.updateLayout(),this.resolveConstraints(),Ko((t=>{if(!mr(t,e,null))return;const n=this.getAxisMotionValue(t),{min:o,max:i}=this.constraints[t];n.set(Te(o,i,r[t]))}))}addListeners(){var t;pr.set(this.visualElement,this);const e=$t(this.visualElement.getInstance(),"pointerdown",(t=>{const{drag:e,dragListener:n=!0}=this.getProps();e&&n&&this.start(t)})),n=()=>{const{dragConstraints:t}=this.getProps();u(t)&&(this.constraints=this.resolveRefConstraints())},{projection:o}=this.visualElement,r=o.addEventListener("measure",n);o&&!o.layout&&(null===(t=o.root)||void 0===t||t.updateScroll(),o.updateLayout()),n();const i=jt(window,"resize",(()=>this.scalePositionWithinConstraints())),s=o.addEventListener("didUpdate",(({delta:t,hasLayoutChanged:e})=>{this.isDragging&&e&&(Ko((e=>{const n=this.getAxisMotionValue(e);n&&(this.originPoint[e]+=t[e].translate,n.set(n.get()+t[e].translate))})),this.visualElement.syncRender())}));return()=>{i(),e(),r(),null==s||s()}}getProps(){const t=this.visualElement.getProps(),{drag:e=!1,dragDirectionLock:n=!1,dragPropagation:o=!1,dragConstraints:r=!1,dragElastic:i=Xo,dragMomentum:s=!0}=t;return{...t,drag:e,dragDirectionLock:n,dragPropagation:o,dragConstraints:r,dragElastic:i,dragMomentum:s}}}function mr(t,e,n){return!(!0!==e&&e!==t||null!==n&&n!==t)}const vr={pan:de((function({onPan:t,onPanStart:e,onPanEnd:n,onPanSessionStart:i,visualElement:s}){const a=t||e||n||i,l=(0,o.useRef)(null),{transformPagePoint:u}=(0,o.useContext)(r),c={onSessionStart:i,onStart:e,onMove:t,onEnd:(t,e)=>{l.current=null,n&&n(t,e)}};(0,o.useEffect)((()=>{null!==l.current&&l.current.updateHandlers(c)})),qt(s,"pointerdown",a&&function(t){l.current=new jo(t,c,{transformPagePoint:u})}),(0,Jt.z)((()=>l.current&&l.current.end()))})),drag:de((function(t){const{dragControls:e,visualElement:n}=t,r=(0,x.h)((()=>new fr(n)));(0,o.useEffect)((()=>e&&e.subscribe(r)),[r,e]),(0,o.useEffect)((()=>r.addListeners()),[r])}))},gr={current:null},yr={current:!1},xr=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","LayoutAnimationStart","SetAxisTarget","Unmount"],wr=Object.keys(g),br=wr.length,Er=({treeType:t="",build:e,getBaseTarget:n,makeTargetAnimatable:r,measureViewportBox:i,render:s,readValueFromInstance:a,removeValueFromRenderState:l,sortNodePosition:d,scrapeMotionValuesFromProps:h})=>({parent:m,props:v,presenceId:x,blockInitialAnimation:w,visualState:b,reducedMotionConfig:E},P={})=>{let T=!1;const{latestValues:S,renderState:k}=b;let A;const C=function(){const t=xr.map((()=>new io)),e={},n={clearAllListeners:()=>t.forEach((t=>t.clear())),updatePropListeners:t=>{xr.forEach((o=>{var r;const i="on"+o,s=t[i];null===(r=e[o])||void 0===r||r.call(e),s&&(e[o]=n[i](s))}))}};return t.forEach(((t,e)=>{n["on"+xr[e]]=e=>t.add(e),n["notify"+xr[e]]=(...e)=>t.notify(...e)})),n}(),V=new Map,M=new Map;let R={};const j={...S};let O;function L(){A&&T&&(D(),s(A,k,v.style,_.projection))}function D(){e(_,k,S,P,v)}function I(){C.notifyUpdate(S)}function N(t,e){const n=e.onChange((e=>{S[t]=e,v.onUpdate&&bn.ZP.update(I,!1,!0)})),o=e.onRenderRequest(_.scheduleRender);M.set(t,(()=>{n(),o()}))}const{willChange:B,...U}=h(v);for(const t in U){const e=U[t];void 0!==S[t]&&F(e)&&(e.set(S[t],!1),go(B)&&B.add(t))}const z=p(v),W=f(v),_={treeType:t,current:null,depth:m?m.depth+1:0,parent:m,children:new Set,presenceId:x,shouldReduceMotion:null,variantChildren:W?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==m?void 0:m.isMounted()),blockInitialAnimation:w,isMounted:()=>Boolean(A),mount(t){T=!0,A=_.current=t,_.projection&&_.projection.mount(t),W&&m&&!z&&(O=null==m?void 0:m.addVariantChild(_)),V.forEach(((t,e)=>N(e,t))),yr.current||function(){if(yr.current=!0,y.j)if(window.matchMedia){const t=window.matchMedia("(prefers-reduced-motion)"),e=()=>gr.current=t.matches;t.addListener(e),e()}else gr.current=!1}(),_.shouldReduceMotion="never"!==E&&("always"===E||gr.current),null==m||m.children.add(_),_.setProps(v)},unmount(){var t;null===(t=_.projection)||void 0===t||t.unmount(),bn.qY.update(I),bn.qY.render(L),M.forEach((t=>t())),null==O||O(),null==m||m.children.delete(_),C.clearAllListeners(),A=void 0,T=!1},loadFeatures(t,e,n,r,i,s){const a=[];ne.O;for(let e=0;e<br;e++){const n=wr[e],{isEnabled:r,Component:i}=g[n];r(v)&&i&&a.push((0,o.createElement)(i,{key:n,...t,visualElement:_}))}if(!_.projection&&i){_.projection=new i(r,_.getLatestValues(),m&&m.projection);const{layoutId:e,layout:n,drag:o,dragConstraints:a,layoutScroll:l}=t;_.projection.setOptions({layoutId:e,layout:n,alwaysMeasureLayout:Boolean(o)||a&&u(a),visualElement:_,scheduleRender:()=>_.scheduleRender(),animationType:"string"==typeof n?n:"both",initialPromotionConfig:s,layoutScroll:l})}return a},addVariantChild(t){var e;const n=_.getClosestVariantNode();if(n)return null===(e=n.variantChildren)||void 0===e||e.add(t),()=>n.variantChildren.delete(t)},sortNodePosition:e=>d&&t===e.treeType?d(_.getInstance(),e.getInstance()):0,getClosestVariantNode:()=>W?_:null==m?void 0:m.getClosestVariantNode(),getLayoutId:()=>v.layoutId,getInstance:()=>A,getStaticValue:t=>S[t],setStaticValue:(t,e)=>S[t]=e,getLatestValues:()=>S,setVisibility(t){_.isVisible!==t&&(_.isVisible=t,_.scheduleRender())},makeTargetAnimatable:(t,e=!0)=>r(_,t,v,e),measureViewportBox:()=>i(A,v),addValue(t,e){_.hasValue(t)&&_.removeValue(t),V.set(t,e),S[t]=e.get(),N(t,e)},removeValue(t){var e;V.delete(t),null===(e=M.get(t))||void 0===e||e(),M.delete(t),delete S[t],l(t,k)},hasValue:t=>V.has(t),getValue(t,e){let n=V.get(t);return void 0===n&&void 0!==e&&(n=ao(e),_.addValue(t,n)),n},forEachValue:t=>V.forEach(t),readValue:t=>void 0!==S[t]?S[t]:a(A,t,P),setBaseTarget(t,e){j[t]=e},getBaseTarget(t){if(n){const e=n(v,t);if(void 0!==e&&!F(e))return e}return j[t]},...C,build:()=>(D(),k),scheduleRender(){bn.ZP.render(L,!1,!0)},syncRender:L,setProps(t){(t.transformTemplate||v.transformTemplate)&&_.scheduleRender(),v=t,C.updatePropListeners(t),R=function(t,e,n){const{willChange:o}=e;for(const r in e){const i=e[r],s=n[r];if(F(i))t.addValue(r,i),go(o)&&o.add(r);else if(F(s))t.addValue(r,ao(i)),go(o)&&o.remove(r);else if(s!==i)if(t.hasValue(r)){const e=t.getValue(r);!e.hasAnimated&&e.set(i)}else{const e=t.getStaticValue(r);t.addValue(r,ao(void 0!==e?e:i))}}for(const o in n)void 0===e[o]&&t.removeValue(o);return e}(_,h(v),R)},getProps:()=>v,getVariant:t=>{var e;return null===(e=v.variants)||void 0===e?void 0:e[t]},getDefaultTransition:()=>v.transition,getTransformPagePoint:()=>v.transformPagePoint,getVariantContext(t=!1){if(t)return null==m?void 0:m.getVariantContext();if(!z){const t=(null==m?void 0:m.getVariantContext())||{};return void 0!==v.initial&&(t.initial=v.initial),t}const e={};for(let t=0;t<Tr;t++){const n=Pr[t],o=v[n];(c(o)||!1===o)&&(e[n]=o)}return e}};return _},Pr=["initial",...Eo],Tr=Pr.length;function Sr(t){return"string"==typeof t&&t.startsWith("var(--")}const kr=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function Ar(t,e,n=1){const[o,r]=function(t){const e=kr.exec(t);if(!e)return[,];const[,n,o]=e;return[n,o]}(t);if(!o)return;const i=window.getComputedStyle(e).getPropertyValue(o);return i?i.trim():Sr(r)?Ar(r,e,n+1):r}const Cr=new Set(["width","height","top","left","right","bottom","x","y"]),Vr=t=>Cr.has(t),Mr=(t,e)=>{t.set(e,!1),t.set(e)},Rr=t=>t===J||t===Z;var jr;!function(t){t.width="width",t.height="height",t.left="left",t.right="right",t.top="top",t.bottom="bottom"}(jr||(jr={}));const Or=(t,e)=>parseFloat(t.split(", ")[e]),Lr=(t,e)=>(n,{transform:o})=>{if("none"===o||!o)return 0;const r=o.match(/^matrix3d\((.+)\)$/);if(r)return Or(r[1],e);{const e=o.match(/^matrix\((.+)\)$/);return e?Or(e[1],t):0}},Fr=new Set(["x","y","z"]),Dr=j.filter((t=>!Fr.has(t))),Ir={width:({x:t},{paddingLeft:e="0",paddingRight:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),height:({y:t},{paddingTop:e="0",paddingBottom:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),top:(t,{top:e})=>parseFloat(e),left:(t,{left:e})=>parseFloat(e),bottom:({y:t},{top:e})=>parseFloat(e)+(t.max-t.min),right:({x:t},{left:e})=>parseFloat(e)+(t.max-t.min),x:Lr(4,13),y:Lr(5,14)};function Nr(t,e,n,o){return(t=>Object.keys(t).some(Vr))(e)?((t,e,n={},o={})=>{e={...e},o={...o};const r=Object.keys(e).filter(Vr);let i=[],s=!1;const a=[];if(r.forEach((r=>{const l=t.getValue(r);if(!t.hasValue(r))return;let u=n[r],c=co(u);const d=e[r];let h;if(Tt(d)){const t=d.length,e=null===d[0]?1:0;u=d[e],c=co(u);for(let n=e;n<t;n++)h?co(d[n]):(h=co(d[n]),h===c||Rr(c)&&Rr(h))}else h=co(d);if(c!==h)if(Rr(c)&&Rr(h)){const t=l.get();"string"==typeof t&&l.set(parseFloat(t)),"string"==typeof d?e[r]=parseFloat(d):Array.isArray(d)&&h===Z&&(e[r]=d.map(parseFloat))}else(null==c?void 0:c.transform)&&(null==h?void 0:h.transform)&&(0===u||0===d)?0===u?l.set(h.transform(u)):e[r]=c.transform(d):(s||(i=function(t){const e=[];return Dr.forEach((n=>{const o=t.getValue(n);void 0!==o&&(e.push([n,o.get()]),o.set(n.startsWith("scale")?1:0))})),e.length&&t.syncRender(),e}(t),s=!0),a.push(r),o[r]=void 0!==o[r]?o[r]:e[r],Mr(l,d))})),a.length){const n=a.indexOf("height")>=0?window.pageYOffset:null,r=((t,e,n)=>{const o=e.measureViewportBox(),r=e.getInstance(),i=getComputedStyle(r),{display:s}=i,a={};"none"===s&&e.setStaticValue("display",t.display||"block"),n.forEach((t=>{a[t]=Ir[t](o,i)})),e.syncRender();const l=e.measureViewportBox();return n.forEach((n=>{const o=e.getValue(n);Mr(o,a[n]),t[n]=Ir[n](l,i)})),t})(e,t,a);return i.length&&i.forEach((([e,n])=>{t.getValue(e).set(n)})),t.syncRender(),y.j&&null!==n&&window.scrollTo({top:n}),{target:r,transitionEnd:o}}return{target:e,transitionEnd:o}})(t,e,n,o):{target:e,transitionEnd:o}}const Br={treeType:"dom",readValueFromInstance(t,e){if(O.has(e)){const t=Xn(e);return t&&t.default||0}{const o=(n=t,window.getComputedStyle(n)),r=(N(e)?o.getPropertyValue(e):o[e])||0;return"string"==typeof r?r.trim():r}var n},sortNodePosition:(t,e)=>2&t.compareDocumentPosition(e)?1:-1,getBaseTarget(t,e){var n;return null===(n=t.style)||void 0===n?void 0:n[e]},measureViewportBox:(t,{transformPagePoint:e})=>hr(t,e),resetTransform(t,e,n){const{transformTemplate:o}=n;e.style.transform=o?o({},""):"none",t.scheduleRender()},restoreTransform(t,e){t.style.transform=e.style.transform},removeValueFromRenderState(t,{vars:e,style:n}){delete e[t],delete n[t]},makeTargetAnimatable(t,{transition:e,transitionEnd:n,...o},{transformValues:r},i=!0){let s=function(t,e,n){var o;const r={};for(const i in t){const t=vo(i,e);r[i]=void 0!==t?t:null===(o=n.getValue(i))||void 0===o?void 0:o.get()}return r}(o,e||{},t);if(r&&(n&&(n=r(n)),o&&(o=r(o)),s&&(s=r(s))),i){!function(t,e,n){var o,r;const i=Object.keys(e).filter((e=>!t.hasValue(e))),s=i.length;if(s)for(let a=0;a<s;a++){const s=i[a],l=e[s];let u=null;Array.isArray(l)&&(u=l[0]),null===u&&(u=null!==(r=null!==(o=n[s])&&void 0!==o?o:t.readValue(s))&&void 0!==r?r:e[s]),null!=u&&("string"==typeof u&&(/^\-?\d*\.?\d+$/.test(u)||/^0[^.\s]+$/.test(u))?u=parseFloat(u):!po(u)&&He.test(l)&&(u=Zn(s,l)),t.addValue(s,ao(u)),void 0===n[s]&&(n[s]=u),t.setBaseTarget(s,u))}}(t,o,s);const e=((t,e,n,o)=>{const r=function(t,{...e},n){const o=t.getInstance();if(!(o instanceof Element))return{target:e,transitionEnd:n};n&&(n={...n}),t.forEachValue((t=>{const e=t.get();if(!Sr(e))return;const n=Ar(e,o);n&&t.set(n)}));for(const t in e){const r=e[t];if(!Sr(r))continue;const i=Ar(r,o);i&&(e[t]=i,n&&void 0===n[t]&&(n[t]=r))}return{target:e,transitionEnd:n}}(t,e,o);return Nr(t,e=r.target,n,o=r.transitionEnd)})(t,o,s,n);n=e.transitionEnd,o=e.target}return{transition:e,transitionEnd:n,...o}},scrapeMotionValuesFromProps:bt,build(t,e,n,o,r){void 0!==t.isVisible&&(e.style.visibility=t.isVisible?"visible":"hidden"),rt(e,n,o,r.transformTemplate)},render:yt},Ur=Er(Br),zr=Er({...Br,getBaseTarget:(t,e)=>t[e],readValueFromInstance(t,e){var n;return O.has(e)?(null===(n=Xn(e))||void 0===n?void 0:n.default)||0:(e=xt.has(e)?e:gt(e),t.getAttribute(e))},scrapeMotionValuesFromProps:Et,build(t,e,n,o,r){ft(e,n,o,r.transformTemplate)},render:wt}),Wr=(t,e)=>M(t)?zr(e,{enableHardwareAcceleration:!1}):Ur(e,{enableHardwareAcceleration:!0});function _r(t,e){return e.max===e.min?0:t/(e.max-e.min)*100}const $r={correct:(t,e)=>{if(!e.target)return t;if("string"==typeof t){if(!Z.test(t))return t;t=parseFloat(t)}return`${_r(t,e.target.x)}% ${_r(t,e.target.y)}%`}},qr="_$css",Hr={correct:(t,{treeScale:e,projectionDelta:n})=>{const o=t,r=t.includes("var("),i=[];r&&(t=t.replace(kr,(t=>(i.push(t),qr))));const s=He.parse(t);if(s.length>5)return o;const a=He.createTransformer(t),l="number"!=typeof s[0]?1:0,u=n.x.scale*e.x,c=n.y.scale*e.y;s[0+l]/=u,s[1+l]/=c;const d=Te(u,c,.5);"number"==typeof s[2+l]&&(s[2+l]/=d),"number"==typeof s[3+l]&&(s[3+l]/=d);let h=a(s);if(r){let t=0;h=h.replace(qr,(()=>{const e=i[t];return t++,e}))}return h}};class Yr extends o.Component{componentDidMount(){const{visualElement:t,layoutGroup:e,switchLayoutGroup:n,layoutId:o}=this.props,{projection:r}=t;var i;i=Xr,Object.assign(R,i),r&&(e.group&&e.group.add(r),n&&n.register&&o&&n.register(r),r.root.didUpdate(),r.addEventListener("animationComplete",(()=>{this.safeToRemove()})),r.setOptions({...r.options,onExitComplete:()=>this.safeToRemove()})),w.hasEverUpdated=!0}getSnapshotBeforeUpdate(t){const{layoutDependency:e,visualElement:n,drag:o,isPresent:r}=this.props,i=n.projection;return i?(i.isPresent=r,o||t.layoutDependency!==e||void 0===e?i.willUpdate():this.safeToRemove(),t.isPresent!==r&&(r?i.promote():i.relegate()||bn.ZP.postRender((()=>{var t;(null===(t=i.getStack())||void 0===t?void 0:t.members.length)||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:t}=this.props.visualElement;t&&(t.root.didUpdate(),!t.currentAnimation&&t.isLead()&&this.safeToRemove())}componentWillUnmount(){const{visualElement:t,layoutGroup:e,switchLayoutGroup:n}=this.props,{projection:o}=t;o&&(o.scheduleCheckAfterUnmount(),(null==e?void 0:e.group)&&e.group.remove(o),(null==n?void 0:n.deregister)&&n.deregister(o))}safeToRemove(){const{safeToRemove:t}=this.props;null==t||t()}render(){return null}}const Xr={borderRadius:{...$r,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:$r,borderTopRightRadius:$r,borderBottomLeftRadius:$r,borderBottomRightRadius:$r,boxShadow:Hr},Zr={measureLayout:function(t){const[e,n]=pe(),r=(0,o.useContext)(E.p);return o.createElement(Yr,{...t,layoutGroup:r,switchLayoutGroup:(0,o.useContext)(T),isPresent:e,safeToRemove:n})}},Gr=["TopLeft","TopRight","BottomLeft","BottomRight"],Kr=Gr.length,Qr=t=>"string"==typeof t?parseFloat(t):t,Jr=t=>"number"==typeof t||Z.test(t);function ti(t,e){var n;return null!==(n=t[e])&&void 0!==n?n:t.borderRadius}const ei=oi(0,.5,cn),ni=oi(.5,.95,rn);function oi(t,e,n){return o=>o<t?0:o>e?1:n(Pe(t,e,o))}function ri(t,e){t.min=e.min,t.max=e.max}function ii(t,e){ri(t.x,e.x),ri(t.y,e.y)}function si(t,e,n,o,r){return t=or(t-=e,1/n,o),void 0!==r&&(t=or(t,1/r,o)),t}function ai(t,e,[n,o,r],i,s){!function(t,e=0,n=1,o=.5,r,i=t,s=t){if(X.test(e)&&(e=parseFloat(e),e=Te(s.min,s.max,e/100)-s.min),"number"!=typeof e)return;let a=Te(i.min,i.max,o);t===i&&(a-=e),t.min=si(t.min,e,n,a,r),t.max=si(t.max,e,n,a,r)}(t,e[n],e[o],e[r],e.scale,i,s)}const li=["x","scaleX","originX"],ui=["y","scaleY","originY"];function ci(t,e,n,o){ai(t.x,e,li,null==n?void 0:n.x,null==o?void 0:o.x),ai(t.y,e,ui,null==n?void 0:n.y,null==o?void 0:o.y)}function di(t){return 0===t.translate&&1===t.scale}function hi(t){return di(t.x)&&di(t.y)}function pi(t,e){return t.x.min===e.x.min&&t.x.max===e.x.max&&t.y.min===e.y.min&&t.y.max===e.y.max}function fi(t){return Bo(t.x)/Bo(t.y)}class mi{constructor(){this.members=[]}add(t){oo(this.members,t),t.scheduleRender()}remove(t){if(ro(this.members,t),t===this.prevLead&&(this.prevLead=void 0),t===this.lead){const t=this.members[this.members.length-1];t&&this.promote(t)}}relegate(t){const e=this.members.findIndex((e=>t===e));if(0===e)return!1;let n;for(let t=e;t>=0;t--){const e=this.members[t];if(!1!==e.isPresent){n=e;break}}return!!n&&(this.promote(n),!0)}promote(t,e){var n;const o=this.lead;if(t!==o&&(this.prevLead=o,this.lead=t,t.show(),o)){o.instance&&o.scheduleRender(),t.scheduleRender(),t.resumeFrom=o,e&&(t.resumeFrom.preserveOpacity=!0),o.snapshot&&(t.snapshot=o.snapshot,t.snapshot.latestValues=o.animationValues||o.latestValues,t.snapshot.isShared=!0),(null===(n=t.root)||void 0===n?void 0:n.isUpdating)&&(t.isLayoutDirty=!0);const{crossfade:r}=t.options;!1===r&&o.hide()}}exitAnimationComplete(){this.members.forEach((t=>{var e,n,o,r,i;null===(n=(e=t.options).onExitComplete)||void 0===n||n.call(e),null===(i=null===(o=t.resumingFrom)||void 0===o?void 0:(r=o.options).onExitComplete)||void 0===i||i.call(r)}))}scheduleRender(){this.members.forEach((t=>{t.instance&&t.scheduleRender(!1)}))}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function vi(t,e,n){let o=`translate3d(${t.x.translate/e.x}px, ${t.y.translate/e.y}px, 0) `;if(o+=`scale(${1/e.x}, ${1/e.y}) `,n){const{rotate:t,rotateX:e,rotateY:r}=n;t&&(o+=`rotate(${t}deg) `),e&&(o+=`rotateX(${e}deg) `),r&&(o+=`rotateY(${r}deg) `)}return o+=`scale(${t.x.scale*e.x}, ${t.y.scale*e.y})`,"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)"===o?"none":o}const gi=(t,e)=>t.depth-e.depth;class yi{constructor(){this.children=[],this.isDirty=!1}add(t){oo(this.children,t),this.isDirty=!0}remove(t){ro(this.children,t),this.isDirty=!0}forEach(t){this.isDirty&&this.children.sort(gi),this.isDirty=!1,this.children.forEach(t)}}const xi=["","X","Y","Z"];function wi({attachResizeListener:t,defaultParent:e,measureScroll:n,checkIsScrollRoot:o,resetTransform:r}){return class{constructor(t,n={},o=(null==e?void 0:e())){this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.nodes.forEach(Ai),this.nodes.forEach(Ci)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.id=t,this.latestValues=n,this.root=o?o.root||o:this,this.path=o?[...o.path,o]:[],this.parent=o,this.depth=o?o.depth+1:0,t&&this.root.registerPotentialNode(t,this);for(let t=0;t<this.path.length;t++)this.path[t].shouldResetTransform=!0;this.root===this&&(this.nodes=new yi)}addEventListener(t,e){return this.eventHandlers.has(t)||this.eventHandlers.set(t,new io),this.eventHandlers.get(t).add(e)}notifyListeners(t,...e){const n=this.eventHandlers.get(t);null==n||n.notify(...e)}hasListeners(t){return this.eventHandlers.has(t)}registerPotentialNode(t,e){this.potentialNodes.set(t,e)}mount(e,n=!1){var o;if(this.instance)return;this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;const{layoutId:r,layout:i,visualElement:s}=this.options;if(s&&!s.getInstance()&&s.mount(e),this.root.nodes.add(this),null===(o=this.parent)||void 0===o||o.children.add(this),this.id&&this.root.potentialNodes.delete(this.id),n&&(i||r)&&(this.isLayoutDirty=!0),t){let n;const o=()=>this.root.updateBlockedByResize=!1;t(e,(()=>{this.root.updateBlockedByResize=!0,clearTimeout(n),n=window.setTimeout(o,250),w.hasAnimatedSinceResize&&(w.hasAnimatedSinceResize=!1,this.nodes.forEach(ki))}))}r&&this.root.registerSharedNode(r,this),!1!==this.options.animate&&s&&(r||i)&&this.addEventListener("didUpdate",(({delta:t,hasLayoutChanged:e,hasRelativeTargetChanged:n,layout:o})=>{var r,i,a,l,u;if(this.isTreeAnimationBlocked())return this.target=void 0,void(this.relativeTarget=void 0);const c=null!==(i=null!==(r=this.options.transition)&&void 0!==r?r:s.getDefaultTransition())&&void 0!==i?i:Li,{onLayoutAnimationStart:d,onLayoutAnimationComplete:h}=s.getProps(),p=!this.targetLayout||!pi(this.targetLayout,o)||n,f=!e&&n;if((null===(a=this.resumeFrom)||void 0===a?void 0:a.instance)||f||e&&(p||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(t,f);const e={...eo(c,"layout"),onPlay:d,onComplete:h};s.shouldReduceMotion&&(e.delay=0,e.type=!1),this.startAnimation(e)}else e||0!==this.animationProgress||this.finishAnimation(),this.isLead()&&(null===(u=(l=this.options).onExitComplete)||void 0===u||u.call(l));this.targetLayout=o}))}unmount(){var t,e;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(t=this.getStack())||void 0===t||t.remove(this),null===(e=this.parent)||void 0===e||e.children.delete(this),this.instance=void 0,bn.qY.preRender(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){var t;return this.isAnimationBlocked||(null===(t=this.parent)||void 0===t?void 0:t.isTreeAnimationBlocked())||!1}startUpdate(){var t;this.isUpdateBlocked()||(this.isUpdating=!0,null===(t=this.nodes)||void 0===t||t.forEach(Vi))}willUpdate(t=!0){var e,n,o;if(this.root.isUpdateBlocked())return void(null===(n=(e=this.options).onExitComplete)||void 0===n||n.call(e));if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let t=0;t<this.path.length;t++){const e=this.path[t];e.shouldResetTransform=!0,e.updateScroll()}const{layoutId:r,layout:i}=this.options;if(void 0===r&&!i)return;const s=null===(o=this.options.visualElement)||void 0===o?void 0:o.getProps().transformTemplate;this.prevTransformTemplateValue=null==s?void 0:s(this.latestValues,""),this.updateSnapshot(),t&&this.notifyListeners("willUpdate")}didUpdate(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(Ti);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(Fi),this.potentialNodes.clear()),this.nodes.forEach(Si),this.nodes.forEach(bi),this.nodes.forEach(Ei),this.clearAllSnapshots(),bn.iW.update(),bn.iW.preRender(),bn.iW.render())}clearAllSnapshots(){this.nodes.forEach(Pi),this.sharedNodes.forEach(Mi)}scheduleUpdateProjection(){bn.ZP.preRender(this.updateProjection,!1,!0)}scheduleCheckAfterUnmount(){bn.ZP.postRender((()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()}))}updateSnapshot(){if(this.snapshot||!this.instance)return;const t=this.measure(),e=this.removeTransform(this.removeElementScroll(t));Ii(e),this.snapshot={measured:t,layout:e,latestValues:{}}}updateLayout(){var t;if(!this.instance)return;if(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let t=0;t<this.path.length;t++)this.path[t].updateScroll();const e=this.measure();Ii(e);const n=this.layout;this.layout={measured:e,actual:this.removeElementScroll(e)},this.layoutCorrected={x:{min:0,max:0},y:{min:0,max:0}},this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.actual),null===(t=this.options.visualElement)||void 0===t||t.notifyLayoutMeasure(this.layout.actual,null==n?void 0:n.actual)}updateScroll(){this.options.layoutScroll&&this.instance&&(this.isScrollRoot=o(this.instance),this.scroll=n(this.instance))}resetTransform(){var t;if(!r)return;const e=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!hi(this.projectionDelta),o=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate,i=null==o?void 0:o(this.latestValues,""),s=i!==this.prevTransformTemplateValue;e&&(n||er(this.latestValues)||s)&&(r(this.instance,i),this.shouldResetTransform=!1,this.scheduleRender())}measure(){const{visualElement:t}=this.options;if(!t)return{x:{min:0,max:0},y:{min:0,max:0}};const e=t.measureViewportBox(),{scroll:n}=this.root;return n&&(ar(e.x,n.x),ar(e.y,n.y)),e}removeElementScroll(t){const e={x:{min:0,max:0},y:{min:0,max:0}};ii(e,t);for(let n=0;n<this.path.length;n++){const o=this.path[n],{scroll:r,options:i,isScrollRoot:s}=o;if(o!==this.root&&r&&i.layoutScroll){if(s){ii(e,t);const{scroll:n}=this.root;n&&(ar(e.x,-n.x),ar(e.y,-n.y))}ar(e.x,r.x),ar(e.y,r.y)}}return e}applyTransform(t,e=!1){const n={x:{min:0,max:0},y:{min:0,max:0}};ii(n,t);for(let t=0;t<this.path.length;t++){const o=this.path[t];!e&&o.options.layoutScroll&&o.scroll&&o!==o.root&&dr(n,{x:-o.scroll.x,y:-o.scroll.y}),er(o.latestValues)&&dr(n,o.latestValues)}return er(this.latestValues)&&dr(n,this.latestValues),n}removeTransform(t){var e;const n={x:{min:0,max:0},y:{min:0,max:0}};ii(n,t);for(let t=0;t<this.path.length;t++){const o=this.path[t];if(!o.instance)continue;if(!er(o.latestValues))continue;tr(o.latestValues)&&o.updateSnapshot();const r={x:{min:0,max:0},y:{min:0,max:0}};ii(r,o.measure()),ci(n,o.latestValues,null===(e=o.snapshot)||void 0===e?void 0:e.layout,r)}return er(this.latestValues)&&ci(n,this.latestValues),n}setTargetDelta(t){this.targetDelta=t,this.root.scheduleUpdateProjection()}setOptions(t){this.options={...this.options,...t,crossfade:void 0===t.crossfade||t.crossfade}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}resolveTargetDelta(){var t;const{layout:e,layoutId:n}=this.options;var o,r,i;this.layout&&(e||n)&&(this.targetDelta||this.relativeTarget||(this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&this.relativeParent.layout&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},qo(this.relativeTargetOrigin,this.layout.actual,this.relativeParent.layout.actual),ii(this.relativeTarget,this.relativeTargetOrigin))),(this.relativeTarget||this.targetDelta)&&(this.target||(this.target={x:{min:0,max:0},y:{min:0,max:0}},this.targetWithTransforms={x:{min:0,max:0},y:{min:0,max:0}}),this.relativeTarget&&this.relativeTargetOrigin&&(null===(t=this.relativeParent)||void 0===t?void 0:t.target)?(o=this.target,r=this.relativeTarget,i=this.relativeParent.target,_o(o.x,r.x,i.x),_o(o.y,r.y,i.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.actual):ii(this.target,this.layout.actual),sr(this.target,this.targetDelta)):ii(this.target,this.layout.actual),this.attemptToResolveRelativeTarget&&(this.attemptToResolveRelativeTarget=!1,this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&Boolean(this.relativeParent.resumingFrom)===Boolean(this.resumingFrom)&&!this.relativeParent.options.layoutScroll&&this.relativeParent.target&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},qo(this.relativeTargetOrigin,this.target,this.relativeParent.target),ii(this.relativeTarget,this.relativeTargetOrigin)))))}getClosestProjectingParent(){if(this.parent&&!er(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()}calcProjection(){var t;const{layout:e,layoutId:n}=this.options;if(this.isTreeAnimating=Boolean((null===(t=this.parent)||void 0===t?void 0:t.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!e&&!n)return;const o=this.getLead();ii(this.layoutCorrected,this.layout.actual),function(t,e,n,o=!1){var r,i;const s=n.length;if(!s)return;let a,l;e.x=e.y=1;for(let u=0;u<s;u++)a=n[u],l=a.projectionDelta,"contents"!==(null===(i=null===(r=a.instance)||void 0===r?void 0:r.style)||void 0===i?void 0:i.display)&&(o&&a.options.layoutScroll&&a.scroll&&a!==a.root&&dr(t,{x:-a.scroll.x,y:-a.scroll.y}),l&&(e.x*=l.x.scale,e.y*=l.y.scale,sr(t,l)),o&&er(a.latestValues)&&dr(t,a.latestValues))}(this.layoutCorrected,this.treeScale,this.path,Boolean(this.resumingFrom)||this!==o);const{target:r}=o;if(!r)return;this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});const i=this.treeScale.x,s=this.treeScale.y,a=this.projectionTransform;Wo(this.projectionDelta,this.layoutCorrected,r,this.latestValues),this.projectionTransform=vi(this.projectionDelta,this.treeScale),this.projectionTransform===a&&this.treeScale.x===i&&this.treeScale.y===s||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",r))}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(t=!0){var e,n,o;null===(n=(e=this.options).scheduleRender)||void 0===n||n.call(e),t&&(null===(o=this.getStack())||void 0===o||o.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(t,e=!1){var n;const o=this.snapshot,r=(null==o?void 0:o.latestValues)||{},i={...this.latestValues},s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!e;const a={x:{min:0,max:0},y:{min:0,max:0}},l=null==o?void 0:o.isShared,u=((null===(n=this.getStack())||void 0===n?void 0:n.members.length)||0)<=1,c=Boolean(l&&!u&&!0===this.options.crossfade&&!this.path.some(Oi));this.animationProgress=0,this.mixTargetDelta=e=>{var n;const o=e/1e3;var d,h,p,f;Ri(s.x,t.x,o),Ri(s.y,t.y,o),this.setTargetDelta(s),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&(null===(n=this.relativeParent)||void 0===n?void 0:n.layout)&&(qo(a,this.layout.actual,this.relativeParent.layout.actual),d=this.relativeTarget,h=this.relativeTargetOrigin,p=a,f=o,ji(d.x,h.x,p.x,f),ji(d.y,h.y,p.y,f)),l&&(this.animationValues=i,function(t,e,n,o,r,i){var s,a,l,u;r?(t.opacity=Te(0,null!==(s=n.opacity)&&void 0!==s?s:1,ei(o)),t.opacityExit=Te(null!==(a=e.opacity)&&void 0!==a?a:1,0,ni(o))):i&&(t.opacity=Te(null!==(l=e.opacity)&&void 0!==l?l:1,null!==(u=n.opacity)&&void 0!==u?u:1,o));for(let r=0;r<Kr;r++){const i=`border${Gr[r]}Radius`;let s=ti(e,i),a=ti(n,i);void 0===s&&void 0===a||(s||(s=0),a||(a=0),0===s||0===a||Jr(s)===Jr(a)?(t[i]=Math.max(Te(Qr(s),Qr(a),o),0),(X.test(a)||X.test(s))&&(t[i]+="%")):t[i]=a)}(e.rotate||n.rotate)&&(t.rotate=Te(e.rotate||0,n.rotate||0,o))}(i,r,this.latestValues,o,c,u)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=o},this.mixTargetDelta(0)}startAnimation(t){var e,n;this.notifyListeners("animationStart"),null===(e=this.currentAnimation)||void 0===e||e.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(bn.qY.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=bn.ZP.update((()=>{w.hasAnimatedSinceResize=!0,this.currentAnimation=function(t,e,n={}){const o=F(t)?t:ao(t);return no("",o,e,n),{stop:()=>o.stop(),isAnimating:()=>o.isAnimating()}}(0,1e3,{...t,onUpdate:e=>{var n;this.mixTargetDelta(e),null===(n=t.onUpdate)||void 0===n||n.call(t,e)},onComplete:()=>{var e;null===(e=t.onComplete)||void 0===e||e.call(t),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0}))}completeAnimation(){var t;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(t=this.getStack())||void 0===t||t.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){var t;this.currentAnimation&&(null===(t=this.mixTargetDelta)||void 0===t||t.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const t=this.getLead();let{targetWithTransforms:e,target:n,layout:o,latestValues:r}=t;if(e&&n&&o){if(this!==t&&this.layout&&o&&Ni(this.options.animationType,this.layout.actual,o.actual)){n=this.target||{x:{min:0,max:0},y:{min:0,max:0}};const e=Bo(this.layout.actual.x);n.x.min=t.target.x.min,n.x.max=n.x.min+e;const o=Bo(this.layout.actual.y);n.y.min=t.target.y.min,n.y.max=n.y.min+o}ii(e,n),dr(e,r),Wo(this.projectionDeltaWithTransform,this.layoutCorrected,e,r)}}registerSharedNode(t,e){var n,o,r;this.sharedNodes.has(t)||this.sharedNodes.set(t,new mi),this.sharedNodes.get(t).add(e),e.promote({transition:null===(n=e.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(r=null===(o=e.options.initialPromotionConfig)||void 0===o?void 0:o.shouldPreserveFollowOpacity)||void 0===r?void 0:r.call(o,e)})}isLead(){const t=this.getStack();return!t||t.lead===this}getLead(){var t;const{layoutId:e}=this.options;return e&&(null===(t=this.getStack())||void 0===t?void 0:t.lead)||this}getPrevLead(){var t;const{layoutId:e}=this.options;return e?null===(t=this.getStack())||void 0===t?void 0:t.prevLead:void 0}getStack(){const{layoutId:t}=this.options;if(t)return this.root.sharedNodes.get(t)}promote({needsReset:t,transition:e,preserveFollowOpacity:n}={}){const o=this.getStack();o&&o.promote(this,n),t&&(this.projectionDelta=void 0,this.needsReset=!0),e&&this.setOptions({transition:e})}relegate(){const t=this.getStack();return!!t&&t.relegate(this)}resetRotation(){const{visualElement:t}=this.options;if(!t)return;let e=!1;const n={};for(let o=0;o<xi.length;o++){const r="rotate"+xi[o];t.getStaticValue(r)&&(e=!0,n[r]=t.getStaticValue(r),t.setStaticValue(r,0))}if(e){null==t||t.syncRender();for(const e in n)t.setStaticValue(e,n[e]);t.scheduleRender()}}getProjectionStyles(t={}){var e,n,o;const r={};if(!this.instance||this.isSVG)return r;if(!this.isVisible)return{visibility:"hidden"};r.visibility="";const i=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,r.opacity="",r.pointerEvents=kt(t.pointerEvents)||"",r.transform=i?i(this.latestValues,""):"none",r;const s=this.getLead();if(!this.projectionDelta||!this.layout||!s.target){const e={};return this.options.layoutId&&(e.opacity=void 0!==this.latestValues.opacity?this.latestValues.opacity:1,e.pointerEvents=kt(t.pointerEvents)||""),this.hasProjected&&!er(this.latestValues)&&(e.transform=i?i({},""):"none",this.hasProjected=!1),e}const a=s.animationValues||s.latestValues;this.applyTransformsToTarget(),r.transform=vi(this.projectionDeltaWithTransform,this.treeScale,a),i&&(r.transform=i(a,r.transform));const{x:l,y:u}=this.projectionDelta;r.transformOrigin=`${100*l.origin}% ${100*u.origin}% 0`,s.animationValues?r.opacity=s===this?null!==(o=null!==(n=a.opacity)&&void 0!==n?n:this.latestValues.opacity)&&void 0!==o?o:1:this.preserveOpacity?this.latestValues.opacity:a.opacityExit:r.opacity=s===this?void 0!==a.opacity?a.opacity:"":void 0!==a.opacityExit?a.opacityExit:0;for(const t in R){if(void 0===a[t])continue;const{correct:e,applyTo:n}=R[t],o=e(a[t],s);if(n){const t=n.length;for(let e=0;e<t;e++)r[n[e]]=o}else r[t]=o}return this.options.layoutId&&(r.pointerEvents=s===this?kt(t.pointerEvents)||"":"none"),r}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach((t=>{var e;return null===(e=t.currentAnimation)||void 0===e?void 0:e.stop()})),this.root.nodes.forEach(Ti),this.root.sharedNodes.clear()}}}function bi(t){t.updateLayout()}function Ei(t){var e,n,o;const r=(null===(e=t.resumeFrom)||void 0===e?void 0:e.snapshot)||t.snapshot;if(t.isLead()&&t.layout&&r&&t.hasListeners("didUpdate")){const{actual:e,measured:n}=t.layout,{animationType:o}=t.options;"size"===o?Ko((t=>{const n=r.isShared?r.measured[t]:r.layout[t],o=Bo(n);n.min=e[t].min,n.max=n.min+o})):Ni(o,r.layout,e)&&Ko((t=>{const n=r.isShared?r.measured[t]:r.layout[t],o=Bo(e[t]);n.max=n.min+o}));const i={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};Wo(i,e,r.layout);const s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};r.isShared?Wo(s,t.applyTransform(n,!0),r.measured):Wo(s,e,r.layout);const a=!hi(i);let l=!1;if(!t.resumeFrom&&(t.relativeParent=t.getClosestProjectingParent(),t.relativeParent&&!t.relativeParent.resumeFrom)){const{snapshot:n,layout:o}=t.relativeParent;if(n&&o){const t={x:{min:0,max:0},y:{min:0,max:0}};qo(t,r.layout,n.layout);const i={x:{min:0,max:0},y:{min:0,max:0}};qo(i,e,o.actual),pi(t,i)||(l=!0)}}t.notifyListeners("didUpdate",{layout:e,snapshot:r,delta:s,layoutDelta:i,hasLayoutChanged:a,hasRelativeTargetChanged:l})}else t.isLead()&&(null===(o=(n=t.options).onExitComplete)||void 0===o||o.call(n));t.options.transition=void 0}function Pi(t){t.clearSnapshot()}function Ti(t){t.clearMeasurements()}function Si(t){const{visualElement:e}=t.options;(null==e?void 0:e.getProps().onBeforeLayoutMeasure)&&e.notifyBeforeLayoutMeasure(),t.resetTransform()}function ki(t){t.finishAnimation(),t.targetDelta=t.relativeTarget=t.target=void 0}function Ai(t){t.resolveTargetDelta()}function Ci(t){t.calcProjection()}function Vi(t){t.resetRotation()}function Mi(t){t.removeLeadSnapshot()}function Ri(t,e,n){t.translate=Te(e.translate,0,n),t.scale=Te(e.scale,1,n),t.origin=e.origin,t.originPoint=e.originPoint}function ji(t,e,n,o){t.min=Te(e.min,n.min,o),t.max=Te(e.max,n.max,o)}function Oi(t){return t.animationValues&&void 0!==t.animationValues.opacityExit}const Li={duration:.45,ease:[.4,0,.1,1]};function Fi(t,e){let n=t.root;for(let e=t.path.length-1;e>=0;e--)if(Boolean(t.path[e].instance)){n=t.path[e];break}const o=(n&&n!==t.root?n.instance:document).querySelector(`[data-projection-id="${e}"]`);o&&t.mount(o,!0)}function Di(t){t.min=Math.round(t.min),t.max=Math.round(t.max)}function Ii(t){Di(t.x),Di(t.y)}function Ni(t,e,n){return"position"===t||"preserve-aspect"===t&&!function(t,e,n=.01){return Ro(t,e)<=n}(fi(e),fi(n))}const Bi=wi({attachResizeListener:(t,e)=>jt(t,"resize",e),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),Ui={current:void 0},zi=wi({measureScroll:t=>({x:t.scrollLeft,y:t.scrollTop}),defaultParent:()=>{if(!Ui.current){const t=new Bi(0,{});t.mount(window),t.setOptions({layoutScroll:!0}),Ui.current=t}return Ui.current},resetTransform:(t,e)=>{t.style.transform=void 0!==e?e:"none"},checkIsScrollRoot:t=>Boolean("fixed"===window.getComputedStyle(t).position)}),Wi={...Ao,...he,...vr,...Zr},_i=C(((t,e)=>function(t,{forwardMotionProps:e=!1},n,o,r){return{...M(t)?Vt:Mt,preloadedFeatures:n,useRender:vt(e),createVisualElement:o,projectionNodeConstructor:r,Component:t}}(t,e,Wi,Wr,zi)))},1741:(t,e,n)=>{"use strict";n.d(e,{j:()=>o});const o="undefined"!=typeof document},9304:(t,e,n)=>{"use strict";n.d(e,{O:()=>o});const o=("undefined"==typeof process||process.env,"production")},6681:(t,e,n)=>{"use strict";n.d(e,{h:()=>r});var o=n(7294);function r(t){const e=(0,o.useRef)(null);return null===e.current&&(e.current=t()),e.current}},8868:(t,e,n)=>{"use strict";n.d(e,{L:()=>r});var o=n(7294);const r=n(1741).j?o.useLayoutEffect:o.useEffect},5411:(t,e,n)=>{"use strict";n.d(e,{z:()=>r});var o=n(7294);function r(t){return(0,o.useEffect)((()=>()=>t()),[])}},6034:(t,e,n)=>{"use strict";n.d(e,{O:()=>r});const o=new Set;function r(t,e,n){t||o.has(e)||(console.warn(e),n&&console.warn(n),o.add(e))}},2396:(t,e,n)=>{"use strict";n.d(e,{qY:()=>p,ZP:()=>x,iW:()=>f,$B:()=>y});const o=1/60*1e3,r="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),i="undefined"!=typeof window?t=>window.requestAnimationFrame(t):t=>setTimeout((()=>t(r())),o);let s=!0,a=!1,l=!1;const u={delta:0,timestamp:0},c=["read","update","preRender","render","postRender"],d=c.reduce(((t,e)=>(t[e]=function(t){let e=[],n=[],o=0,r=!1,i=!1;const s=new WeakSet,a={schedule:(t,i=!1,a=!1)=>{const l=a&&r,u=l?e:n;return i&&s.add(t),-1===u.indexOf(t)&&(u.push(t),l&&r&&(o=e.length)),t},cancel:t=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1),s.delete(t)},process:l=>{if(r)i=!0;else{if(r=!0,[e,n]=[n,e],n.length=0,o=e.length,o)for(let n=0;n<o;n++){const o=e[n];o(l),s.has(o)&&(a.schedule(o),t())}r=!1,i&&(i=!1,a.process(l))}}};return a}((()=>a=!0)),t)),{}),h=c.reduce(((t,e)=>{const n=d[e];return t[e]=(t,e=!1,o=!1)=>(a||g(),n.schedule(t,e,o)),t}),{}),p=c.reduce(((t,e)=>(t[e]=d[e].cancel,t)),{}),f=c.reduce(((t,e)=>(t[e]=()=>d[e].process(u),t)),{}),m=t=>d[t].process(u),v=t=>{a=!1,u.delta=s?o:Math.max(Math.min(t-u.timestamp,40),1),u.timestamp=t,l=!0,c.forEach(m),l=!1,a&&(s=!1,i(v))},g=()=>{a=!0,s=!0,l||i(v)},y=()=>u,x=h}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQVc1cUQsUUFBTyxDQUFDNm1DLEVBQUtyeEMsS0FDakMsTUFBTTQxRCxFQUFPUCxFQUFNcjFELEdBTW5CLE9BTEFxeEMsRUFBSXJ4QyxHQUFPLENBQUNxMEQsRUFBU3dCLEdBQVksRUFBT0MsR0FBWSxLQUMzQ1osR0FDRGtCLElBQ0dSLEVBQUszd0QsU0FBU292RCxFQUFTd0IsRUFBV0MsSUFFdEN6a0IsQ0FBRyxHQUNYLENBQUMsR0FDRWdsQixFQUFhakIsRUFBVzVxRCxRQUFPLENBQUM2bUMsRUFBS3J4QyxLQUN2Q3F4QyxFQUFJcnhDLEdBQU9xMUQsRUFBTXIxRCxHQUFLd2EsT0FDZjYyQixJQUNSLENBQUMsR0FDRWlsQixFQUFZbEIsRUFBVzVxRCxRQUFPLENBQUM2bUMsRUFBS3J4QyxLQUN0Q3F4QyxFQUFJcnhDLEdBQU8sSUFBTXExRCxFQUFNcjFELEdBQUtxMEQsUUFBUSxHQUM3QmhqQixJQUNSLENBQUMsR0FDRWtsQixFQUFlQyxHQUFXbkIsRUFBTW1CLEdBQVFuQyxRQUFRLEdBQ2hEb0MsRUFBZ0J2cEIsSUFDbEJnb0IsR0FBZSxFQUNmLEVBQU1uNkIsTUFBUWs2QixFQUNSSixFQUNBcnpELEtBQUtzWCxJQUFJdFgsS0FBS3dYLElBQUlrMEIsRUFBWSxFQUFNQSxVQXpDM0IsSUF5Q21ELEdBQ2xFLEVBQU1BLFVBQVlBLEVBQ2xCaW9CLEdBQWUsRUFDZkMsRUFBV2pyRCxRQUFRb3NELEdBQ25CcEIsR0FBZSxFQUNYRCxJQUNBRCxHQUFvQixFQUNwQkQsRUFBWXlCLEdBQ2hCLEVBRUVMLEVBQVksS0FDZGxCLEdBQWUsRUFDZkQsR0FBb0IsRUFDZkUsR0FDREgsRUFBWXlCLEVBQWEsRUFFM0JDLEVBQWUsSUFBTSxFQUUzQiIsInNvdXJjZXMiOlsid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQHZpbWVvL3BsYXllci9kaXN0L3BsYXllci5lcy5qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL0B1LXdhdmUvcmVhY3QtdmltZW8vZGlzdC9yZWFjdC12aW1lby5lcy5qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRyaW0uanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RyaW1tZWRFbmRJbmRleC5qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm93LmpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3Rocm90dGxlLmpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pcy1tb3VudGVkLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb21wb25lbnRzL0FuaW1hdGVQcmVzZW5jZS9Qb3BDaGlsZC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29tcG9uZW50cy9BbmltYXRlUHJlc2VuY2UvUHJlc2VuY2VDaGlsZC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29tcG9uZW50cy9BbmltYXRlUHJlc2VuY2UvaW5kZXgubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1mb3JjZS11cGRhdGUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9Nb3Rpb25Db25maWdDb250ZXh0Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L01vdGlvbkNvbnRleHQvaW5kZXgubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTGF6eUNvbnRleHQubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9pcy12YXJpYW50LWxhYmVsLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0aW9uLWNvbnRyb2xzLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvaXMtY29udHJvbGxpbmctdmFyaWFudHMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC9jcmVhdGUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kZWZpbml0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL3N0YXRlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL25vZGUvaWQubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9WaXN1YWxFbGVtZW50SGFuZGxlci5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9zeW1ib2wubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2xvYWQtZmVhdHVyZXMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC91dGlscy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3VzZS12aXN1YWwtZWxlbWVudC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3VzZS1tb3Rpb24tcmVmLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL21vdGlvbi1wcm94eS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy9sb3dlcmNhc2UtZWxlbWVudHMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtc3ZnLWNvbXBvbmVudC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtY29ycmVjdGlvbi5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvaXMtZm9yY2VkLW1vdGlvbi12YWx1ZS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9idWlsZC10cmFuc2Zvcm0ubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2dldC1hcy10eXBlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXZhbHVlLXR5cGVzL2Rpc3QvZXMvdXRpbHMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3R5bGUtdmFsdWUtdHlwZXMvZGlzdC9lcy9udW1iZXJzL3VuaXRzLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXZhbHVlLXR5cGVzL2Rpc3QvZXMvbnVtYmVycy9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy90eXBlLWludC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9udW1iZXIubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXNlLXByb3BzLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvdmFsaWQtcHJvcC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9maWx0ZXItcHJvcHMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvdHJhbnNmb3JtLW9yaWdpbi5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9wYXRoLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2J1aWxkLWF0dHJzLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3VzZS1wcm9wcy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3VzZS1yZW5kZXIubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvcmVuZGVyLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2NhbWVsLWNhc2UtYXR0cnMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvcmVuZGVyLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3Jlc29sdmUtdmFyaWFudHMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9yZXNvbHZlLXZhbHVlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS91dGlscy9yZXNvbHZlLW1vdGlvbi12YWx1ZS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3VzZS12aXN1YWwtc3RhdGUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvY29uZmlnLW1vdGlvbi5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvY29uZmlnLW1vdGlvbi5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3R5cGVzLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvdXNlLWRvbS1ldmVudC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvdXRpbHMvZXZlbnQtdHlwZS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZXZlbnRzL2V2ZW50LWluZm8ubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy91c2UtcG9pbnRlci1ldmVudC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZXZlbnRzL3V0aWxzLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy9kcmFnL3V0aWxzL2xvY2subWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3VzZS1ob3Zlci1nZXN0dXJlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy91dGlscy9pcy1ub2RlLW9yLWNoaWxkLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL3V0aWxzL3BpcGUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy92aWV3cG9ydC9vYnNlcnZlcnMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy92aWV3cG9ydC91c2Utdmlld3BvcnQubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9tYWtlLXJlbmRlcmxlc3MtY29tcG9uZW50Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvZ2VzdHVyZXMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3VzZS10YXAtZ2VzdHVyZS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvdXNlLWZvY3VzLWdlc3R1cmUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL3VzZS1wcmVzZW5jZS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvc2hhbGxvdy1jb21wYXJlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL3V0aWxzL2NsYW1wLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbnMvdXRpbHMvZmluZC1zcHJpbmcubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9ucy9nZW5lcmF0b3JzL3NwcmluZy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy91dGlscy9wcm9ncmVzcy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy91dGlscy9taXgubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3R5bGUtdmFsdWUtdHlwZXMvZGlzdC9lcy9jb2xvci91dGlscy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9zdHlsZS12YWx1ZS10eXBlcy9kaXN0L2VzL2NvbG9yL3JnYmEubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3R5bGUtdmFsdWUtdHlwZXMvZGlzdC9lcy9jb2xvci9oZXgubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3R5bGUtdmFsdWUtdHlwZXMvZGlzdC9lcy9jb2xvci9oc2xhLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL3V0aWxzL2hzbGEtdG8tcmdiYS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy91dGlscy9taXgtY29sb3IubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3R5bGUtdmFsdWUtdHlwZXMvZGlzdC9lcy9jb2xvci9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9zdHlsZS12YWx1ZS10eXBlcy9kaXN0L2VzL2NvbXBsZXgvaW5kZXgubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvaW5jLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL3V0aWxzL21peC1jb21wbGV4Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL3V0aWxzL2ludGVycG9sYXRlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL2Vhc2luZy91dGlscy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy9lYXNpbmcvaW5kZXgubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9ucy9nZW5lcmF0b3JzL2tleWZyYW1lcy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy9hbmltYXRpb25zL3V0aWxzL2RldGVjdC1hbmltYXRpb24tZnJvbS1vcHRpb25zLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbnMvZ2VuZXJhdG9ycy9kZWNheS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy9hbmltYXRpb25zL3V0aWxzL2VsYXBzZWQubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9ucy9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy91dGlscy92ZWxvY2l0eS1wZXItc2Vjb25kLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy90aW1lLWNvbnZlcnNpb24ubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvZWFzaW5nL2N1YmljLWJlemllci5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2Vhc2luZy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2lzLWFuaW1hdGFibGUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9kZWZhdWx0LXRyYW5zaXRpb25zLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXZhbHVlLXR5cGVzL2Rpc3QvZXMvY29tcGxleC9maWx0ZXIubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZGVmYXVsdHMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvYW5pbWF0YWJsZS1ub25lLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvdHJhbnNpdGlvbnMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9ucy9pbmVydGlhLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9hcnJheS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvc3Vic2NyaXB0aW9uLW1hbmFnZXIubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL3Rlc3QubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZGltZW5zaW9ucy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy90eXBlLWF1dG8ubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZmluZC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3Jlc29sdmUtZHluYW1pYy12YXJpYW50cy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3NldHRlcnMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS13aWxsLWNoYW5nZS9pcy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL2FuaW1hdGlvbi5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL2FuaW1hdGlvbi1zdGF0ZS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2FuaW1hdGlvbnMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtcG9pbnQubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtcG9pbnQtM2QubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvZGlzdGFuY2UubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL1BhblNlc3Npb24ubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvZHJhZy91dGlscy9jb25zdHJhaW50cy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi91dGlscy9lYWNoLWF4aXMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29udmVyc2lvbi5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi91dGlscy9oYXMtdHJhbnNmb3JtLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLWFwcGx5Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3V0aWxzL21lYXN1cmUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9tb2RlbHMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kcmFnLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy91c2UtcGFuLWdlc3R1cmUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXNlLWRyYWcubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3JlZHVjZWQtbW90aW9uL3N0YXRlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvbGlmZWN5Y2xlcy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9yZWR1Y2VkLW1vdGlvbi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL21vdGlvbi12YWx1ZXMubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY3NzLXZhcmlhYmxlcy1jb252ZXJzaW9uLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL3VuaXQtY29udmVyc2lvbi5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9wYXJzZS1kb20tdmFyaWFudC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdmlzdWFsLWVsZW1lbnQubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLW51bWVyaWNhbC1zdHJpbmcubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLXplcm8tdmFsdWUtc3RyaW5nLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3Zpc3VhbC1lbGVtZW50Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL2NyZWF0ZS12aXN1YWwtZWxlbWVudC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtYm9yZGVyLXJhZGl1cy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtYm94LXNoYWRvdy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2xheW91dC9NZWFzdXJlTGF5b3V0Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvbGF5b3V0L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2FuaW1hdGlvbi9taXgtdmFsdWVzLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L2NvcHkubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtcmVtb3ZlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L3V0aWxzLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3NoYXJlZC9zdGFjay5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvdHJhbnNmb3JtLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvY29tcGFyZS1ieS1kZXB0aC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL2ZsYXQtdHJlZS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL2NyZWF0ZS1wcm9qZWN0aW9uLW5vZGUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL25vZGUvRG9jdW1lbnRQcm9qZWN0aW9uTm9kZS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL0hUTUxQcm9qZWN0aW9uTm9kZS5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS9tb3Rpb24ubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY3JlYXRlLWNvbmZpZy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtYnJvd3Nlci5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcHJvY2Vzcy5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvdXNlLWNvbnN0YW50Lm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtaXNvbW9ycGhpYy1lZmZlY3QubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS11bm1vdW50LWVmZmVjdC5tanMiLCJ3ZWJwYWNrOi8vTGlydWxlcy1mcm9udC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvd2Fybi1vbmNlLm1qcyIsIndlYnBhY2s6Ly9MaXJ1bGVzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lc3luYy9kaXN0L2VzL29uLW5leHQtZnJhbWUubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVzeW5jL2Rpc3QvZXMvaW5kZXgubWpzIiwid2VicGFjazovL0xpcnVsZXMtZnJvbnQvLi9ub2RlX21vZHVsZXMvZnJhbWVzeW5jL2Rpc3QvZXMvY3JlYXRlLXJlbmRlci1zdGVwLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQHZpbWVvL3BsYXllciB2Mi4xNy4xIHwgKGMpIDIwMjIgVmltZW8gfCBNSVQgTGljZW5zZSB8IGh0dHBzOi8vZ2l0aHViLmNvbS92aW1lby9wbGF5ZXIuanMgKi9cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuLyoqXG4gKiBAbW9kdWxlIGxpYi9mdW5jdGlvbnNcbiAqL1xuXG4vKipcbiAqIENoZWNrIHRvIHNlZSB0aGlzIGlzIGEgbm9kZSBlbnZpcm9ubWVudC5cbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cbi8qIGdsb2JhbCBnbG9iYWwgKi9cbnZhciBpc05vZGUgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiB7fS50b1N0cmluZy5jYWxsKGdsb2JhbCkgPT09ICdbb2JqZWN0IGdsb2JhbF0nO1xuLyoqXG4gKiBHZXQgdGhlIG5hbWUgb2YgdGhlIG1ldGhvZCBmb3IgYSBnaXZlbiBnZXR0ZXIgb3Igc2V0dGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEVpdGhlciDigJxnZXTigJ0gb3Ig4oCcc2V04oCdLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGdldE1ldGhvZE5hbWUocHJvcCwgdHlwZSkge1xuICBpZiAocHJvcC5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSkgPT09IDApIHtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdCh0eXBlLnRvTG93ZXJDYXNlKCkpLmNvbmNhdChwcm9wLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpKS5jb25jYXQocHJvcC5zdWJzdHIoMSkpO1xufVxuLyoqXG4gKiBDaGVjayB0byBzZWUgaWYgdGhlIG9iamVjdCBpcyBhIERPTSBFbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gZWxlbWVudCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc0RvbUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gQm9vbGVhbihlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEgJiYgJ25vZGVOYW1lJyBpbiBlbGVtZW50ICYmIGVsZW1lbnQub3duZXJEb2N1bWVudCAmJiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpO1xufVxuLyoqXG4gKiBDaGVjayB0byBzZWUgd2hldGhlciB0aGUgdmFsdWUgaXMgYSBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzM1MTQ2L2pzL3Rlc3RzL2lzTnVtYmVyLmh0bWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtib29sZWFufSBpbnRlZ2VyIENoZWNrIGlmIHRoZSB2YWx1ZSBpcyBhbiBpbnRlZ2VyLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT0gdmFsdWU7XG59XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiB0aGUgVVJMIGlzIGEgVmltZW8gdXJsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzVmltZW9VcmwodXJsKSB7XG4gIHJldHVybiAvXihodHRwcz86KT9cXC9cXC8oKHBsYXllcnx3d3cpXFwuKT92aW1lb1xcLmNvbSg/PSR8XFwvKS8udGVzdCh1cmwpO1xufVxuLyoqXG4gKiBDaGVjayB0byBzZWUgaWYgdGhlIFVSTCBpcyBmb3IgYSBWaW1lbyBlbWJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgc3RyaW5nLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc1ZpbWVvRW1iZWQodXJsKSB7XG4gIHZhciBleHByID0gL15odHRwczpcXC9cXC9wbGF5ZXJcXC52aW1lb1xcLmNvbVxcL3ZpZGVvXFwvXFxkKy87XG4gIHJldHVybiBleHByLnRlc3QodXJsKTtcbn1cbi8qKlxuICogR2V0IHRoZSBWaW1lbyBVUkwgZnJvbSBhbiBlbGVtZW50LlxuICogVGhlIGVsZW1lbnQgbXVzdCBoYXZlIGVpdGhlciBhIGRhdGEtdmltZW8taWQgb3IgZGF0YS12aW1lby11cmwgYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvRW1iZWRQYXJhbWV0ZXJzIFRoZSBvRW1iZWQgcGFyYW1ldGVycy5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBnZXRWaW1lb1VybCgpIHtcbiAgdmFyIG9FbWJlZFBhcmFtZXRlcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgaWQgPSBvRW1iZWRQYXJhbWV0ZXJzLmlkO1xuICB2YXIgdXJsID0gb0VtYmVkUGFyYW1ldGVycy51cmw7XG4gIHZhciBpZE9yVXJsID0gaWQgfHwgdXJsO1xuXG4gIGlmICghaWRPclVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQW4gaWQgb3IgdXJsIG11c3QgYmUgcGFzc2VkLCBlaXRoZXIgaW4gYW4gb3B0aW9ucyBvYmplY3Qgb3IgYXMgYSBkYXRhLXZpbWVvLWlkIG9yIGRhdGEtdmltZW8tdXJsIGF0dHJpYnV0ZS4nKTtcbiAgfVxuXG4gIGlmIChpc0ludGVnZXIoaWRPclVybCkpIHtcbiAgICByZXR1cm4gXCJodHRwczovL3ZpbWVvLmNvbS9cIi5jb25jYXQoaWRPclVybCk7XG4gIH1cblxuICBpZiAoaXNWaW1lb1VybChpZE9yVXJsKSkge1xuICAgIHJldHVybiBpZE9yVXJsLnJlcGxhY2UoJ2h0dHA6JywgJ2h0dHBzOicpO1xuICB9XG5cbiAgaWYgKGlkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlxcdTIwMUNcIi5jb25jYXQoaWQsIFwiXFx1MjAxRCBpcyBub3QgYSB2YWxpZCB2aWRlbyBpZC5cIikpO1xuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlxcdTIwMUNcIi5jb25jYXQoaWRPclVybCwgXCJcXHUyMDFEIGlzIG5vdCBhIHZpbWVvLmNvbSB1cmwuXCIpKTtcbn1cblxudmFyIGFycmF5SW5kZXhPZlN1cHBvcnQgPSB0eXBlb2YgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgIT09ICd1bmRlZmluZWQnO1xudmFyIHBvc3RNZXNzYWdlU3VwcG9ydCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cucG9zdE1lc3NhZ2UgIT09ICd1bmRlZmluZWQnO1xuXG5pZiAoIWlzTm9kZSAmJiAoIWFycmF5SW5kZXhPZlN1cHBvcnQgfHwgIXBvc3RNZXNzYWdlU3VwcG9ydCkpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdTb3JyeSwgdGhlIFZpbWVvIFBsYXllciBBUEkgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGJyb3dzZXIuJyk7XG59XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxuLyohXG4gKiB3ZWFrbWFwLXBvbHlmaWxsIHYyLjAuNCAtIEVDTUFTY3JpcHQ2IFdlYWtNYXAgcG9seWZpbGxcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wb2x5Z29ucGxhbmV0L3dlYWttYXAtcG9seWZpbGxcbiAqIENvcHlyaWdodCAoYykgMjAxNS0yMDIxIHBvbHlnb25wbGFuZXQgPHBvbHlnb24ucGxhbmV0LmFxdWFAZ21haWwuY29tPlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbihmdW5jdGlvbiAoc2VsZikge1xuXG4gIGlmIChzZWxmLldlYWtNYXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIHZhciBoYXNEZWZpbmUgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBBdm9pZCBJRTgncyBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5XG4gICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHtcbiAgICAgICAgdmFsdWU6IDFcbiAgICAgIH0pLnggPT09IDE7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSgpO1xuXG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGhhc0RlZmluZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmplY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgc2VsZi5XZWFrTWFwID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIEVDTUEtMjYyIDIzLjMgV2Vha01hcCBPYmplY3RzXG4gICAgZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICAgIGlmICh0aGlzID09PSB2b2lkIDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNvbnN0cnVjdG9yIFdlYWtNYXAgcmVxdWlyZXMgJ25ldydcIik7XG4gICAgICB9XG5cbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdfaWQnLCBnZW5JZCgnX1dlYWtNYXAnKSk7IC8vIEVDTUEtMjYyIDIzLjMuMS4xIFdlYWtNYXAoW2l0ZXJhYmxlXSlcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIEN1cnJlbnRseSwgV2Vha01hcCBgaXRlcmFibGVgIGFyZ3VtZW50IGlzIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignV2Vha01hcCBpdGVyYWJsZSBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgfSAvLyBFQ01BLTI2MiAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuXG5cbiAgICBkZWZpbmVQcm9wZXJ0eShXZWFrTWFwLnByb3RvdHlwZSwgJ2RlbGV0ZScsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGNoZWNrSW5zdGFuY2UodGhpcywgJ2RlbGV0ZScpO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5faWRdO1xuXG4gICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICBkZWxldGUga2V5W3RoaXMuX2lkXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTsgLy8gRUNNQS0yNjIgMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcblxuICAgIGRlZmluZVByb3BlcnR5KFdlYWtNYXAucHJvdG90eXBlLCAnZ2V0JywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgY2hlY2tJbnN0YW5jZSh0aGlzLCAnZ2V0Jyk7XG5cbiAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5faWRdO1xuXG4gICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICByZXR1cm4gZW50cnlbMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfSk7IC8vIEVDTUEtMjYyIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG5cbiAgICBkZWZpbmVQcm9wZXJ0eShXZWFrTWFwLnByb3RvdHlwZSwgJ2hhcycsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGNoZWNrSW5zdGFuY2UodGhpcywgJ2hhcycpO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5faWRdO1xuXG4gICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pOyAvLyBFQ01BLTI2MiAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcblxuICAgIGRlZmluZVByb3BlcnR5KFdlYWtNYXAucHJvdG90eXBlLCAnc2V0JywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGNoZWNrSW5zdGFuY2UodGhpcywgJ3NldCcpO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB2YWx1ZSB1c2VkIGFzIHdlYWsgbWFwIGtleScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5faWRdO1xuXG4gICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICBlbnRyeVsxXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgZGVmaW5lUHJvcGVydHkoa2V5LCB0aGlzLl9pZCwgW2tleSwgdmFsdWVdKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gY2hlY2tJbnN0YW5jZSh4LCBtZXRob2ROYW1lKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHgpIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfaWQnKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1ldGhvZE5hbWUgKyAnIG1ldGhvZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyICcgKyB0eXBlb2YgeCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuSWQocHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgJ18nICsgcmFuZCgpICsgJy4nICsgcmFuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJhbmQoKSB7XG4gICAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygpLnN1YnN0cmluZygyKTtcbiAgICB9XG5cbiAgICBkZWZpbmVQcm9wZXJ0eShXZWFrTWFwLCAnX3BvbHlmaWxsJywgdHJ1ZSk7XG4gICAgcmV0dXJuIFdlYWtNYXA7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBpc09iamVjdCh4KSB7XG4gICAgcmV0dXJuIE9iamVjdCh4KSA9PT0geDtcbiAgfVxufSkodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBjb21tb25qc0dsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBjb21tb25qc0dsb2JhbCA6IGNvbW1vbmpzR2xvYmFsKTtcblxudmFyIG5wb19zcmMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4vKiEgTmF0aXZlIFByb21pc2UgT25seVxuICAgIHYwLjguMSAoYykgS3lsZSBTaW1wc29uXG4gICAgTUlUIExpY2Vuc2U6IGh0dHA6Ly9nZXRpZnkubWl0LWxpY2Vuc2Uub3JnXG4qL1xuKGZ1bmN0aW9uIFVNRChuYW1lLCBjb250ZXh0LCBkZWZpbml0aW9uKSB7XG4gIC8vIHNwZWNpYWwgZm9ybSBvZiBVTUQgZm9yIHBvbHlmaWxsaW5nIGFjcm9zcyBldmlyb25tZW50c1xuICBjb250ZXh0W25hbWVdID0gY29udGV4dFtuYW1lXSB8fCBkZWZpbml0aW9uKCk7XG5cbiAgaWYgKCBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gY29udGV4dFtuYW1lXTtcbiAgfVxufSkoXCJQcm9taXNlXCIsIHR5cGVvZiBjb21tb25qc0dsb2JhbCAhPSBcInVuZGVmaW5lZFwiID8gY29tbW9uanNHbG9iYWwgOiBjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gREVGKCkge1xuXG4gIHZhciBidWlsdEluUHJvcCxcbiAgICAgIGN5Y2xlLFxuICAgICAgc2NoZWR1bGluZ19xdWV1ZSxcbiAgICAgIFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICAgIHRpbWVyID0gdHlwZW9mIHNldEltbWVkaWF0ZSAhPSBcInVuZGVmaW5lZFwiID8gZnVuY3Rpb24gdGltZXIoZm4pIHtcbiAgICByZXR1cm4gc2V0SW1tZWRpYXRlKGZuKTtcbiAgfSA6IHNldFRpbWVvdXQ7IC8vIGRhbW1pdCwgSUU4LlxuXG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBcInhcIiwge30pO1xuXG4gICAgYnVpbHRJblByb3AgPSBmdW5jdGlvbiBidWlsdEluUHJvcChvYmosIG5hbWUsIHZhbCwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBjb25maWcgIT09IGZhbHNlXG4gICAgICB9KTtcbiAgICB9O1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBidWlsdEluUHJvcCA9IGZ1bmN0aW9uIGJ1aWx0SW5Qcm9wKG9iaiwgbmFtZSwgdmFsKSB7XG4gICAgICBvYmpbbmFtZV0gPSB2YWw7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gIH0gLy8gTm90ZTogdXNpbmcgYSBxdWV1ZSBpbnN0ZWFkIG9mIGFycmF5IGZvciBlZmZpY2llbmN5XG5cblxuICBzY2hlZHVsaW5nX3F1ZXVlID0gZnVuY3Rpb24gUXVldWUoKSB7XG4gICAgdmFyIGZpcnN0LCBsYXN0LCBpdGVtO1xuXG4gICAgZnVuY3Rpb24gSXRlbShmbiwgc2VsZikge1xuICAgICAgdGhpcy5mbiA9IGZuO1xuICAgICAgdGhpcy5zZWxmID0gc2VsZjtcbiAgICAgIHRoaXMubmV4dCA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQoZm4sIHNlbGYpIHtcbiAgICAgICAgaXRlbSA9IG5ldyBJdGVtKGZuLCBzZWxmKTtcblxuICAgICAgICBpZiAobGFzdCkge1xuICAgICAgICAgIGxhc3QubmV4dCA9IGl0ZW07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBpdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdCA9IGl0ZW07XG4gICAgICAgIGl0ZW0gPSB2b2lkIDA7XG4gICAgICB9LFxuICAgICAgZHJhaW46IGZ1bmN0aW9uIGRyYWluKCkge1xuICAgICAgICB2YXIgZiA9IGZpcnN0O1xuICAgICAgICBmaXJzdCA9IGxhc3QgPSBjeWNsZSA9IHZvaWQgMDtcblxuICAgICAgICB3aGlsZSAoZikge1xuICAgICAgICAgIGYuZm4uY2FsbChmLnNlbGYpO1xuICAgICAgICAgIGYgPSBmLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZm4sIHNlbGYpIHtcbiAgICBzY2hlZHVsaW5nX3F1ZXVlLmFkZChmbiwgc2VsZik7XG5cbiAgICBpZiAoIWN5Y2xlKSB7XG4gICAgICBjeWNsZSA9IHRpbWVyKHNjaGVkdWxpbmdfcXVldWUuZHJhaW4pO1xuICAgIH1cbiAgfSAvLyBwcm9taXNlIGR1Y2sgdHlwaW5nXG5cblxuICBmdW5jdGlvbiBpc1RoZW5hYmxlKG8pIHtcbiAgICB2YXIgX3RoZW4sXG4gICAgICAgIG9fdHlwZSA9IHR5cGVvZiBvO1xuXG4gICAgaWYgKG8gIT0gbnVsbCAmJiAob190eXBlID09IFwib2JqZWN0XCIgfHwgb190eXBlID09IFwiZnVuY3Rpb25cIikpIHtcbiAgICAgIF90aGVuID0gby50aGVuO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgX3RoZW4gPT0gXCJmdW5jdGlvblwiID8gX3RoZW4gOiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hhaW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vdGlmeUlzb2xhdGVkKHRoaXMsIHRoaXMuc3RhdGUgPT09IDEgPyB0aGlzLmNoYWluW2ldLnN1Y2Nlc3MgOiB0aGlzLmNoYWluW2ldLmZhaWx1cmUsIHRoaXMuY2hhaW5baV0pO1xuICAgIH1cblxuICAgIHRoaXMuY2hhaW4ubGVuZ3RoID0gMDtcbiAgfSAvLyBOT1RFOiBUaGlzIGlzIGEgc2VwYXJhdGUgZnVuY3Rpb24gdG8gaXNvbGF0ZVxuICAvLyB0aGUgYHRyeS4uY2F0Y2hgIHNvIHRoYXQgb3RoZXIgY29kZSBjYW4gYmVcbiAgLy8gb3B0aW1pemVkIGJldHRlclxuXG5cbiAgZnVuY3Rpb24gbm90aWZ5SXNvbGF0ZWQoc2VsZiwgY2IsIGNoYWluKSB7XG4gICAgdmFyIHJldCwgX3RoZW47XG5cbiAgICB0cnkge1xuICAgICAgaWYgKGNiID09PSBmYWxzZSkge1xuICAgICAgICBjaGFpbi5yZWplY3Qoc2VsZi5tc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNiID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0ID0gc2VsZi5tc2c7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0ID0gY2IuY2FsbCh2b2lkIDAsIHNlbGYubXNnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXQgPT09IGNoYWluLnByb21pc2UpIHtcbiAgICAgICAgICBjaGFpbi5yZWplY3QoVHlwZUVycm9yKFwiUHJvbWlzZS1jaGFpbiBjeWNsZVwiKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoZW4gPSBpc1RoZW5hYmxlKHJldCkpIHtcbiAgICAgICAgICBfdGhlbi5jYWxsKHJldCwgY2hhaW4ucmVzb2x2ZSwgY2hhaW4ucmVqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFpbi5yZXNvbHZlKHJldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNoYWluLnJlamVjdChlcnIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmUobXNnKSB7XG4gICAgdmFyIF90aGVuLFxuICAgICAgICBzZWxmID0gdGhpczsgLy8gYWxyZWFkeSB0cmlnZ2VyZWQ/XG5cblxuICAgIGlmIChzZWxmLnRyaWdnZXJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGYudHJpZ2dlcmVkID0gdHJ1ZTsgLy8gdW53cmFwXG5cbiAgICBpZiAoc2VsZi5kZWYpIHtcbiAgICAgIHNlbGYgPSBzZWxmLmRlZjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKF90aGVuID0gaXNUaGVuYWJsZShtc2cpKSB7XG4gICAgICAgIHNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGVmX3dyYXBwZXIgPSBuZXcgTWFrZURlZldyYXBwZXIoc2VsZik7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgX3RoZW4uY2FsbChtc2csIGZ1bmN0aW9uICRyZXNvbHZlJCgpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZS5hcHBseShkZWZfd3JhcHBlciwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICRyZWplY3QkKCkge1xuICAgICAgICAgICAgICByZWplY3QuYXBwbHkoZGVmX3dyYXBwZXIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdC5jYWxsKGRlZl93cmFwcGVyLCBlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLm1zZyA9IG1zZztcbiAgICAgICAgc2VsZi5zdGF0ZSA9IDE7XG5cbiAgICAgICAgaWYgKHNlbGYuY2hhaW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNjaGVkdWxlKG5vdGlmeSwgc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJlamVjdC5jYWxsKG5ldyBNYWtlRGVmV3JhcHBlcihzZWxmKSwgZXJyKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWplY3QobXNnKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyBhbHJlYWR5IHRyaWdnZXJlZD9cblxuICAgIGlmIChzZWxmLnRyaWdnZXJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGYudHJpZ2dlcmVkID0gdHJ1ZTsgLy8gdW53cmFwXG5cbiAgICBpZiAoc2VsZi5kZWYpIHtcbiAgICAgIHNlbGYgPSBzZWxmLmRlZjtcbiAgICB9XG5cbiAgICBzZWxmLm1zZyA9IG1zZztcbiAgICBzZWxmLnN0YXRlID0gMjtcblxuICAgIGlmIChzZWxmLmNoYWluLmxlbmd0aCA+IDApIHtcbiAgICAgIHNjaGVkdWxlKG5vdGlmeSwgc2VsZik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZVByb21pc2VzKENvbnN0cnVjdG9yLCBhcnIsIHJlc29sdmVyLCByZWplY3Rlcikge1xuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGFyci5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAoZnVuY3Rpb24gSUlGRShpZHgpIHtcbiAgICAgICAgQ29uc3RydWN0b3IucmVzb2x2ZShhcnJbaWR4XSkudGhlbihmdW5jdGlvbiAkcmVzb2x2ZXIkKG1zZykge1xuICAgICAgICAgIHJlc29sdmVyKGlkeCwgbXNnKTtcbiAgICAgICAgfSwgcmVqZWN0ZXIpO1xuICAgICAgfSkoaWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBNYWtlRGVmV3JhcHBlcihzZWxmKSB7XG4gICAgdGhpcy5kZWYgPSBzZWxmO1xuICAgIHRoaXMudHJpZ2dlcmVkID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBNYWtlRGVmKHNlbGYpIHtcbiAgICB0aGlzLnByb21pc2UgPSBzZWxmO1xuICAgIHRoaXMuc3RhdGUgPSAwO1xuICAgIHRoaXMudHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgdGhpcy5jaGFpbiA9IFtdO1xuICAgIHRoaXMubXNnID0gdm9pZCAwO1xuICB9XG5cbiAgZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fX05QT19fICE9PSAwKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBwcm9taXNlXCIpO1xuICAgIH0gLy8gaW5zdGFuY2Ugc2hhZG93aW5nIHRoZSBpbmhlcml0ZWQgXCJicmFuZFwiXG4gICAgLy8gdG8gc2lnbmFsIGFuIGFscmVhZHkgXCJpbml0aWFsaXplZFwiIHByb21pc2VcblxuXG4gICAgdGhpcy5fX05QT19fID0gMTtcbiAgICB2YXIgZGVmID0gbmV3IE1ha2VEZWYodGhpcyk7XG5cbiAgICB0aGlzW1widGhlblwiXSA9IGZ1bmN0aW9uIHRoZW4oc3VjY2VzcywgZmFpbHVyZSkge1xuICAgICAgdmFyIG8gPSB7XG4gICAgICAgIHN1Y2Nlc3M6IHR5cGVvZiBzdWNjZXNzID09IFwiZnVuY3Rpb25cIiA/IHN1Y2Nlc3MgOiB0cnVlLFxuICAgICAgICBmYWlsdXJlOiB0eXBlb2YgZmFpbHVyZSA9PSBcImZ1bmN0aW9uXCIgPyBmYWlsdXJlIDogZmFsc2VcbiAgICAgIH07IC8vIE5vdGU6IGB0aGVuKC4uKWAgaXRzZWxmIGNhbiBiZSBib3Jyb3dlZCB0byBiZSB1c2VkIGFnYWluc3RcbiAgICAgIC8vIGEgZGlmZmVyZW50IHByb21pc2UgY29uc3RydWN0b3IgZm9yIG1ha2luZyB0aGUgY2hhaW5lZCBwcm9taXNlLFxuICAgICAgLy8gYnkgc3Vic3RpdHV0aW5nIGEgZGlmZmVyZW50IGB0aGlzYCBiaW5kaW5nLlxuXG4gICAgICBvLnByb21pc2UgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihmdW5jdGlvbiBleHRyYWN0Q2hhaW4ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzb2x2ZSAhPSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHJlamVjdCAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG8ucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIG8ucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgfSk7XG4gICAgICBkZWYuY2hhaW4ucHVzaChvKTtcblxuICAgICAgaWYgKGRlZi5zdGF0ZSAhPT0gMCkge1xuICAgICAgICBzY2hlZHVsZShub3RpZnksIGRlZik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvLnByb21pc2U7XG4gICAgfTtcblxuICAgIHRoaXNbXCJjYXRjaFwiXSA9IGZ1bmN0aW9uICRjYXRjaCQoZmFpbHVyZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih2b2lkIDAsIGZhaWx1cmUpO1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IuY2FsbCh2b2lkIDAsIGZ1bmN0aW9uIHB1YmxpY1Jlc29sdmUobXNnKSB7XG4gICAgICAgIHJlc29sdmUuY2FsbChkZWYsIG1zZyk7XG4gICAgICB9LCBmdW5jdGlvbiBwdWJsaWNSZWplY3QobXNnKSB7XG4gICAgICAgIHJlamVjdC5jYWxsKGRlZiwgbXNnKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmVqZWN0LmNhbGwoZGVmLCBlcnIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBQcm9taXNlUHJvdG90eXBlID0gYnVpbHRJblByb3Aoe30sIFwiY29uc3RydWN0b3JcIiwgUHJvbWlzZSxcbiAgLypjb25maWd1cmFibGU9Ki9cbiAgZmFsc2UpOyAvLyBOb3RlOiBBbmRyb2lkIDQgY2Fubm90IHVzZSBgT2JqZWN0LmRlZmluZVByb3BlcnR5KC4uKWAgaGVyZVxuXG4gIFByb21pc2UucHJvdG90eXBlID0gUHJvbWlzZVByb3RvdHlwZTsgLy8gYnVpbHQtaW4gXCJicmFuZFwiIHRvIHNpZ25hbCBhbiBcInVuaW5pdGlhbGl6ZWRcIiBwcm9taXNlXG5cbiAgYnVpbHRJblByb3AoUHJvbWlzZVByb3RvdHlwZSwgXCJfX05QT19fXCIsIDAsXG4gIC8qY29uZmlndXJhYmxlPSovXG4gIGZhbHNlKTtcbiAgYnVpbHRJblByb3AoUHJvbWlzZSwgXCJyZXNvbHZlXCIsIGZ1bmN0aW9uIFByb21pc2UkcmVzb2x2ZShtc2cpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzOyAvLyBzcGVjIG1hbmRhdGVkIGNoZWNrc1xuICAgIC8vIG5vdGU6IGJlc3QgXCJpc1Byb21pc2VcIiBjaGVjayB0aGF0J3MgcHJhY3RpY2FsIGZvciBub3dcblxuICAgIGlmIChtc2cgJiYgdHlwZW9mIG1zZyA9PSBcIm9iamVjdFwiICYmIG1zZy5fX05QT19fID09PSAxKSB7XG4gICAgICByZXR1cm4gbXNnO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIHJlc29sdmUgIT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiByZWplY3QgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIk5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgfVxuXG4gICAgICByZXNvbHZlKG1zZyk7XG4gICAgfSk7XG4gIH0pO1xuICBidWlsdEluUHJvcChQcm9taXNlLCBcInJlamVjdFwiLCBmdW5jdGlvbiBQcm9taXNlJHJlamVjdChtc2cpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIHJlc29sdmUgIT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiByZWplY3QgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIk5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobXNnKTtcbiAgICB9KTtcbiAgfSk7XG4gIGJ1aWx0SW5Qcm9wKFByb21pc2UsIFwiYWxsXCIsIGZ1bmN0aW9uIFByb21pc2UkYWxsKGFycikge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7IC8vIHNwZWMgbWFuZGF0ZWQgY2hlY2tzXG5cbiAgICBpZiAoVG9TdHJpbmcuY2FsbChhcnIpICE9IFwiW29iamVjdCBBcnJheV1cIikge1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yLnJlamVjdChUeXBlRXJyb3IoXCJOb3QgYW4gYXJyYXlcIikpO1xuICAgIH1cblxuICAgIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3IucmVzb2x2ZShbXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiBleGVjdXRvcihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVzb2x2ZSAhPSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHJlamVjdCAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiTm90IGEgZnVuY3Rpb25cIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoLFxuICAgICAgICAgIG1zZ3MgPSBBcnJheShsZW4pLFxuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgIGl0ZXJhdGVQcm9taXNlcyhDb25zdHJ1Y3RvciwgYXJyLCBmdW5jdGlvbiByZXNvbHZlcihpZHgsIG1zZykge1xuICAgICAgICBtc2dzW2lkeF0gPSBtc2c7XG5cbiAgICAgICAgaWYgKCsrY291bnQgPT09IGxlbikge1xuICAgICAgICAgIHJlc29sdmUobXNncyk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJlamVjdCk7XG4gICAgfSk7XG4gIH0pO1xuICBidWlsdEluUHJvcChQcm9taXNlLCBcInJhY2VcIiwgZnVuY3Rpb24gUHJvbWlzZSRyYWNlKGFycikge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7IC8vIHNwZWMgbWFuZGF0ZWQgY2hlY2tzXG5cbiAgICBpZiAoVG9TdHJpbmcuY2FsbChhcnIpICE9IFwiW29iamVjdCBBcnJheV1cIikge1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yLnJlamVjdChUeXBlRXJyb3IoXCJOb3QgYW4gYXJyYXlcIikpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIHJlc29sdmUgIT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiByZWplY3QgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIk5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgfVxuXG4gICAgICBpdGVyYXRlUHJvbWlzZXMoQ29uc3RydWN0b3IsIGFyciwgZnVuY3Rpb24gcmVzb2x2ZXIoaWR4LCBtc2cpIHtcbiAgICAgICAgcmVzb2x2ZShtc2cpO1xuICAgICAgfSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBQcm9taXNlO1xufSk7XG59KTtcblxuLyoqXG4gKiBAbW9kdWxlIGxpYi9jYWxsYmFja3NcbiAqL1xudmFyIGNhbGxiYWNrTWFwID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogU3RvcmUgYSBjYWxsYmFjayBmb3IgYSBtZXRob2Qgb3IgZXZlbnQgZm9yIGEgcGxheWVyLlxuICpcbiAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXIgVGhlIHBsYXllciBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbWV0aG9kIG9yIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0geyhmdW5jdGlvbih0aGlzOlBsYXllciwgKik6IHZvaWR8e3Jlc29sdmU6IGZ1bmN0aW9uLCByZWplY3Q6IGZ1bmN0aW9ufSl9IGNhbGxiYWNrXG4gKiAgICAgICAgVGhlIGNhbGxiYWNrIHRvIGNhbGwgb3IgYW4gb2JqZWN0IHdpdGggcmVzb2x2ZSBhbmQgcmVqZWN0IGZ1bmN0aW9ucyBmb3IgYSBwcm9taXNlLlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuXG5mdW5jdGlvbiBzdG9yZUNhbGxiYWNrKHBsYXllciwgbmFtZSwgY2FsbGJhY2spIHtcbiAgdmFyIHBsYXllckNhbGxiYWNrcyA9IGNhbGxiYWNrTWFwLmdldChwbGF5ZXIuZWxlbWVudCkgfHwge307XG5cbiAgaWYgKCEobmFtZSBpbiBwbGF5ZXJDYWxsYmFja3MpKSB7XG4gICAgcGxheWVyQ2FsbGJhY2tzW25hbWVdID0gW107XG4gIH1cblxuICBwbGF5ZXJDYWxsYmFja3NbbmFtZV0ucHVzaChjYWxsYmFjayk7XG4gIGNhbGxiYWNrTWFwLnNldChwbGF5ZXIuZWxlbWVudCwgcGxheWVyQ2FsbGJhY2tzKTtcbn1cbi8qKlxuICogR2V0IHRoZSBjYWxsYmFja3MgZm9yIGEgcGxheWVyIGFuZCBldmVudCBvciBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllciBUaGUgcGxheWVyIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBtZXRob2Qgb3IgZXZlbnQgbmFtZVxuICogQHJldHVybiB7ZnVuY3Rpb25bXX1cbiAqL1xuXG5mdW5jdGlvbiBnZXRDYWxsYmFja3MocGxheWVyLCBuYW1lKSB7XG4gIHZhciBwbGF5ZXJDYWxsYmFja3MgPSBjYWxsYmFja01hcC5nZXQocGxheWVyLmVsZW1lbnQpIHx8IHt9O1xuICByZXR1cm4gcGxheWVyQ2FsbGJhY2tzW25hbWVdIHx8IFtdO1xufVxuLyoqXG4gKiBSZW1vdmUgYSBzdG9yZWQgY2FsbGJhY2sgZm9yIGEgbWV0aG9kIG9yIGV2ZW50IGZvciBhIHBsYXllci5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyIFRoZSBwbGF5ZXIgb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG1ldGhvZCBvciBldmVudCBuYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBzcGVjaWZpYyBjYWxsYmFjayB0byByZW1vdmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXYXMgdGhpcyB0aGUgbGFzdCBjYWxsYmFjaz9cbiAqL1xuXG5mdW5jdGlvbiByZW1vdmVDYWxsYmFjayhwbGF5ZXIsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIHZhciBwbGF5ZXJDYWxsYmFja3MgPSBjYWxsYmFja01hcC5nZXQocGxheWVyLmVsZW1lbnQpIHx8IHt9O1xuXG4gIGlmICghcGxheWVyQ2FsbGJhY2tzW25hbWVdKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gSWYgbm8gY2FsbGJhY2sgaXMgcGFzc2VkLCByZW1vdmUgYWxsIGNhbGxiYWNrcyBmb3IgdGhlIGV2ZW50XG5cblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcGxheWVyQ2FsbGJhY2tzW25hbWVdID0gW107XG4gICAgY2FsbGJhY2tNYXAuc2V0KHBsYXllci5lbGVtZW50LCBwbGF5ZXJDYWxsYmFja3MpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gcGxheWVyQ2FsbGJhY2tzW25hbWVdLmluZGV4T2YoY2FsbGJhY2spO1xuXG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBwbGF5ZXJDYWxsYmFja3NbbmFtZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIGNhbGxiYWNrTWFwLnNldChwbGF5ZXIuZWxlbWVudCwgcGxheWVyQ2FsbGJhY2tzKTtcbiAgcmV0dXJuIHBsYXllckNhbGxiYWNrc1tuYW1lXSAmJiBwbGF5ZXJDYWxsYmFja3NbbmFtZV0ubGVuZ3RoID09PSAwO1xufVxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IHN0b3JlZCBjYWxsYmFjayBmb3IgYSBwbGF5ZXIgYW5kIGV2ZW50IG9yIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyIFRoZSBwbGF5ZXIgb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG1ldGhvZCBvciBldmVudCBuYW1lLlxuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBjYWxsYmFjaywgb3IgZmFsc2UgaWYgdGhlcmUgd2VyZSBub25lXG4gKi9cblxuZnVuY3Rpb24gc2hpZnRDYWxsYmFja3MocGxheWVyLCBuYW1lKSB7XG4gIHZhciBwbGF5ZXJDYWxsYmFja3MgPSBnZXRDYWxsYmFja3MocGxheWVyLCBuYW1lKTtcblxuICBpZiAocGxheWVyQ2FsbGJhY2tzLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgY2FsbGJhY2sgPSBwbGF5ZXJDYWxsYmFja3Muc2hpZnQoKTtcbiAgcmVtb3ZlQ2FsbGJhY2socGxheWVyLCBuYW1lLCBjYWxsYmFjayk7XG4gIHJldHVybiBjYWxsYmFjaztcbn1cbi8qKlxuICogTW92ZSBjYWxsYmFja3MgYXNzb2NpYXRlZCB3aXRoIGFuIGVsZW1lbnQgdG8gYW5vdGhlciBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG9sZEVsZW1lbnQgVGhlIG9sZCBlbGVtZW50LlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbmV3RWxlbWVudCBUaGUgbmV3IGVsZW1lbnQuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5cbmZ1bmN0aW9uIHN3YXBDYWxsYmFja3Mob2xkRWxlbWVudCwgbmV3RWxlbWVudCkge1xuICB2YXIgcGxheWVyQ2FsbGJhY2tzID0gY2FsbGJhY2tNYXAuZ2V0KG9sZEVsZW1lbnQpO1xuICBjYWxsYmFja01hcC5zZXQobmV3RWxlbWVudCwgcGxheWVyQ2FsbGJhY2tzKTtcbiAgY2FsbGJhY2tNYXAuZGVsZXRlKG9sZEVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEBtb2R1bGUgbGliL3Bvc3RtZXNzYWdlXG4gKi9cbi8qKlxuICogUGFyc2UgYSBtZXNzYWdlIHJlY2VpdmVkIGZyb20gcG9zdE1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHsqfSBkYXRhIFRoZSBkYXRhIHJlY2VpdmVkIGZyb20gcG9zdE1lc3NhZ2UuXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gcGFyc2VNZXNzYWdlRGF0YShkYXRhKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIElmIHRoZSBtZXNzYWdlIGNhbm5vdCBiZSBwYXJzZWQsIHRocm93IHRoZSBlcnJvciBhcyBhIHdhcm5pbmdcbiAgICAgIGNvbnNvbGUud2FybihlcnJvcik7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4vKipcbiAqIFBvc3QgYSBtZXNzYWdlIHRvIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXIgVGhlIHBsYXllciBvYmplY3QgdG8gdXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBUaGUgQVBJIG1ldGhvZCB0byBjYWxsLlxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyBUaGUgcGFyYW1ldGVycyB0byBzZW5kIHRvIHRoZSBwbGF5ZXIuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5cbmZ1bmN0aW9uIHBvc3RNZXNzYWdlKHBsYXllciwgbWV0aG9kLCBwYXJhbXMpIHtcbiAgaWYgKCFwbGF5ZXIuZWxlbWVudC5jb250ZW50V2luZG93IHx8ICFwbGF5ZXIuZWxlbWVudC5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgbWV0aG9kOiBtZXRob2RcbiAgfTtcblxuICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICBtZXNzYWdlLnZhbHVlID0gcGFyYW1zO1xuICB9IC8vIElFIDggYW5kIDkgZG8gbm90IHN1cHBvcnQgcGFzc2luZyBtZXNzYWdlcywgc28gc3RyaW5naWZ5IHRoZW1cblxuXG4gIHZhciBpZVZlcnNpb24gPSBwYXJzZUZsb2F0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9eLiptc2llIChcXGQrKS4qJC8sICckMScpKTtcblxuICBpZiAoaWVWZXJzaW9uID49IDggJiYgaWVWZXJzaW9uIDwgMTApIHtcbiAgICBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSk7XG4gIH1cblxuICBwbGF5ZXIuZWxlbWVudC5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHBsYXllci5vcmlnaW4pO1xufVxuLyoqXG4gKiBQYXJzZSB0aGUgZGF0YSByZWNlaXZlZCBmcm9tIGEgbWVzc2FnZSBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyIFRoZSBwbGF5ZXIgdGhhdCByZWNlaXZlZCB0aGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7KE9iamVjdHxzdHJpbmcpfSBkYXRhIFRoZSBtZXNzYWdlIGRhdGEuIFN0cmluZ3Mgd2lsbCBiZSBwYXJzZWQgaW50byBKU09OLlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuXG5mdW5jdGlvbiBwcm9jZXNzRGF0YShwbGF5ZXIsIGRhdGEpIHtcbiAgZGF0YSA9IHBhcnNlTWVzc2FnZURhdGEoZGF0YSk7XG4gIHZhciBjYWxsYmFja3MgPSBbXTtcbiAgdmFyIHBhcmFtO1xuXG4gIGlmIChkYXRhLmV2ZW50KSB7XG4gICAgaWYgKGRhdGEuZXZlbnQgPT09ICdlcnJvcicpIHtcbiAgICAgIHZhciBwcm9taXNlcyA9IGdldENhbGxiYWNrcyhwbGF5ZXIsIGRhdGEuZGF0YS5tZXRob2QpO1xuICAgICAgcHJvbWlzZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoZGF0YS5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICBlcnJvci5uYW1lID0gZGF0YS5kYXRhLm5hbWU7XG4gICAgICAgIHByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgcmVtb3ZlQ2FsbGJhY2socGxheWVyLCBkYXRhLmRhdGEubWV0aG9kLCBwcm9taXNlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNhbGxiYWNrcyA9IGdldENhbGxiYWNrcyhwbGF5ZXIsIFwiZXZlbnQ6XCIuY29uY2F0KGRhdGEuZXZlbnQpKTtcbiAgICBwYXJhbSA9IGRhdGEuZGF0YTtcbiAgfSBlbHNlIGlmIChkYXRhLm1ldGhvZCkge1xuICAgIHZhciBjYWxsYmFjayA9IHNoaWZ0Q2FsbGJhY2tzKHBsYXllciwgZGF0YS5tZXRob2QpO1xuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICBwYXJhbSA9IGRhdGEudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbChwbGF5ZXIsIHBhcmFtKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjay5yZXNvbHZlKHBhcmFtKTtcbiAgICB9IGNhdGNoIChlKSB7Ly8gZW1wdHlcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBtb2R1bGUgbGliL2VtYmVkXG4gKi9cbnZhciBvRW1iZWRQYXJhbWV0ZXJzID0gWydhdXRvcGF1c2UnLCAnYXV0b3BsYXknLCAnYmFja2dyb3VuZCcsICdieWxpbmUnLCAnY29sb3InLCAnY29udHJvbHMnLCAnZG50JywgJ2hlaWdodCcsICdpZCcsICdpbnRlcmFjdGl2ZV9wYXJhbXMnLCAna2V5Ym9hcmQnLCAnbG9vcCcsICdtYXhoZWlnaHQnLCAnbWF4d2lkdGgnLCAnbXV0ZWQnLCAncGxheXNpbmxpbmUnLCAncG9ydHJhaXQnLCAncmVzcG9uc2l2ZScsICdzcGVlZCcsICd0ZXh0dHJhY2snLCAndGl0bGUnLCAndHJhbnNwYXJlbnQnLCAndXJsJywgJ3dpZHRoJ107XG4vKipcbiAqIEdldCB0aGUgJ2RhdGEtdmltZW8nLXByZWZpeGVkIGF0dHJpYnV0ZXMgZnJvbSBhbiBlbGVtZW50IGFzIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50LlxuICogQHBhcmFtIHtPYmplY3R9IFtkZWZhdWx0cz17fV0gVGhlIGRlZmF1bHQgdmFsdWVzIHRvIHVzZS5cbiAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cblxuZnVuY3Rpb24gZ2V0T0VtYmVkUGFyYW1ldGVycyhlbGVtZW50KSB7XG4gIHZhciBkZWZhdWx0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHJldHVybiBvRW1iZWRQYXJhbWV0ZXJzLnJlZHVjZShmdW5jdGlvbiAocGFyYW1zLCBwYXJhbSkge1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS12aW1lby1cIi5jb25jYXQocGFyYW0pKTtcblxuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHBhcmFtc1twYXJhbV0gPSB2YWx1ZSA9PT0gJycgPyAxIDogdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfSwgZGVmYXVsdHMpO1xufVxuLyoqXG4gKiBDcmVhdGUgYW4gZW1iZWQgZnJvbSBvRW1iZWQgZGF0YSBpbnNpZGUgYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSBUaGUgb0VtYmVkIGRhdGEuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIHB1dCB0aGUgaWZyYW1lIGluLlxuICogQHJldHVybiB7SFRNTElGcmFtZUVsZW1lbnR9IFRoZSBpZnJhbWUgZW1iZWQuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRW1iZWQoX3JlZiwgZWxlbWVudCkge1xuICB2YXIgaHRtbCA9IF9yZWYuaHRtbDtcblxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbiBlbGVtZW50IG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgfVxuXG4gIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS12aW1lby1pbml0aWFsaXplZCcpICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XG4gIH1cblxuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5pbm5lckhUTUwgPSBodG1sO1xuICBlbGVtZW50LmFwcGVuZENoaWxkKGRpdi5maXJzdENoaWxkKTtcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmltZW8taW5pdGlhbGl6ZWQnLCAndHJ1ZScpO1xuICByZXR1cm4gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKTtcbn1cbi8qKlxuICogTWFrZSBhbiBvRW1iZWQgY2FsbCBmb3IgdGhlIHNwZWNpZmllZCBVUkwuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZpZGVvVXJsIFRoZSB2aW1lby5jb20gdXJsIGZvciB0aGUgdmlkZW8uXG4gKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtc10gUGFyYW1ldGVycyB0byBwYXNzIHRvIG9FbWJlZC5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQuXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICovXG5cbmZ1bmN0aW9uIGdldE9FbWJlZERhdGEodmlkZW9VcmwpIHtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBlbGVtZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKCFpc1ZpbWVvVXJsKHZpZGVvVXJsKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlxcdTIwMUNcIi5jb25jYXQodmlkZW9VcmwsIFwiXFx1MjAxRCBpcyBub3QgYSB2aW1lby5jb20gdXJsLlwiKSk7XG4gICAgfVxuXG4gICAgdmFyIHVybCA9IFwiaHR0cHM6Ly92aW1lby5jb20vYXBpL29lbWJlZC5qc29uP3VybD1cIi5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KHZpZGVvVXJsKSk7XG5cbiAgICBmb3IgKHZhciBwYXJhbSBpbiBwYXJhbXMpIHtcbiAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XG4gICAgICAgIHVybCArPSBcIiZcIi5jb25jYXQocGFyYW0sIFwiPVwiKS5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtc1twYXJhbV0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgeGhyID0gJ1hEb21haW5SZXF1ZXN0JyBpbiB3aW5kb3cgPyBuZXcgWERvbWFpblJlcXVlc3QoKSA6IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh4aHIuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlxcdTIwMUNcIi5jb25jYXQodmlkZW9VcmwsIFwiXFx1MjAxRCB3YXMgbm90IGZvdW5kLlwiKSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh4aHIuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlxcdTIwMUNcIi5jb25jYXQodmlkZW9VcmwsIFwiXFx1MjAxRCBpcyBub3QgZW1iZWRkYWJsZS5cIikpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7IC8vIENoZWNrIGFwaSByZXNwb25zZSBmb3IgNDAzIG9uIG9lbWJlZFxuXG4gICAgICAgIGlmIChqc29uLmRvbWFpbl9zdGF0dXNfY29kZSA9PT0gNDAzKSB7XG4gICAgICAgICAgLy8gV2Ugc3RpbGwgd2FudCB0byBjcmVhdGUgdGhlIGVtYmVkIHRvIGdpdmUgdXNlcnMgdmlzdWFsIGZlZWRiYWNrXG4gICAgICAgICAgY3JlYXRlRW1iZWQoanNvbiwgZWxlbWVudCk7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlxcdTIwMUNcIi5jb25jYXQodmlkZW9VcmwsIFwiXFx1MjAxRCBpcyBub3QgZW1iZWRkYWJsZS5cIikpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKGpzb24pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyA/IFwiIChcIi5jb25jYXQoeGhyLnN0YXR1cywgXCIpXCIpIDogJyc7XG4gICAgICByZWplY3QobmV3IEVycm9yKFwiVGhlcmUgd2FzIGFuIGVycm9yIGZldGNoaW5nIHRoZSBlbWJlZCBjb2RlIGZyb20gVmltZW9cIi5jb25jYXQoc3RhdHVzLCBcIi5cIikpKTtcbiAgICB9O1xuXG4gICAgeGhyLnNlbmQoKTtcbiAgfSk7XG59XG4vKipcbiAqIEluaXRpYWxpemUgYWxsIGVtYmVkcyB3aXRoaW4gYSBzcGVjaWZpYyBlbGVtZW50XG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW3BhcmVudD1kb2N1bWVudF0gVGhlIHBhcmVudCBlbGVtZW50LlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuXG5mdW5jdGlvbiBpbml0aWFsaXplRW1iZWRzKCkge1xuICB2YXIgcGFyZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudDtcbiAgdmFyIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdmltZW8taWRdLCBbZGF0YS12aW1lby11cmxdJykpO1xuXG4gIHZhciBoYW5kbGVFcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yKSB7XG4gICAgaWYgKCdjb25zb2xlJyBpbiB3aW5kb3cgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIlRoZXJlIHdhcyBhbiBlcnJvciBjcmVhdGluZyBhbiBlbWJlZDogXCIuY29uY2F0KGVycm9yKSk7XG4gICAgfVxuICB9O1xuXG4gIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgLy8gU2tpcCBhbnkgdGhhdCBoYXZlIGRhdGEtdmltZW8tZGVmZXJcbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS12aW1lby1kZWZlcicpICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhcmFtcyA9IGdldE9FbWJlZFBhcmFtZXRlcnMoZWxlbWVudCk7XG4gICAgICB2YXIgdXJsID0gZ2V0VmltZW9VcmwocGFyYW1zKTtcbiAgICAgIGdldE9FbWJlZERhdGEodXJsLCBwYXJhbXMsIGVsZW1lbnQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVtYmVkKGRhdGEsIGVsZW1lbnQpO1xuICAgICAgfSkuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnJvcik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogUmVzaXplIGVtYmVkcyB3aGVuIG1lc3NhZ2VkIGJ5IHRoZSBwbGF5ZXIuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW3BhcmVudD1kb2N1bWVudF0gVGhlIHBhcmVudCBlbGVtZW50LlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuXG5mdW5jdGlvbiByZXNpemVFbWJlZHMoKSB7XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGRvY3VtZW50O1xuXG4gIC8vIFByZXZlbnQgZXhlY3V0aW9uIGlmIHVzZXJzIGluY2x1ZGUgdGhlIHBsYXllci5qcyBzY3JpcHQgbXVsdGlwbGUgdGltZXMuXG4gIGlmICh3aW5kb3cuVmltZW9QbGF5ZXJSZXNpemVFbWJlZHNfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2luZG93LlZpbWVvUGxheWVyUmVzaXplRW1iZWRzXyA9IHRydWU7XG5cbiAgdmFyIG9uTWVzc2FnZSA9IGZ1bmN0aW9uIG9uTWVzc2FnZShldmVudCkge1xuICAgIGlmICghaXNWaW1lb1VybChldmVudC5vcmlnaW4pKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyAnc3BhY2VjaGFuZ2UnIGlzIGZpcmVkIG9ubHkgb24gZW1iZWRzIHdpdGggY2FyZHNcblxuXG4gICAgaWYgKCFldmVudC5kYXRhIHx8IGV2ZW50LmRhdGEuZXZlbnQgIT09ICdzcGFjZWNoYW5nZScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaWZyYW1lcyA9IHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCdpZnJhbWUnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGlmcmFtZXNbaV0uY29udGVudFdpbmRvdyAhPT0gZXZlbnQuc291cmNlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBDaGFuZ2UgcGFkZGluZy1ib3R0b20gb2YgdGhlIGVuY2xvc2luZyBkaXYgdG8gYWNjb21tb2RhdGVcbiAgICAgIC8vIGNhcmQgY2Fyb3VzZWwgd2l0aG91dCBkaXN0b3J0aW5nIGFzcGVjdCByYXRpb1xuXG5cbiAgICAgIHZhciBzcGFjZSA9IGlmcmFtZXNbaV0ucGFyZW50RWxlbWVudDtcbiAgICAgIHNwYWNlLnN0eWxlLnBhZGRpbmdCb3R0b20gPSBcIlwiLmNvbmNhdChldmVudC5kYXRhLmRhdGFbMF0uYm90dG9tLCBcInB4XCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9O1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25NZXNzYWdlKTtcbn1cbi8qKlxuICogQWRkIGNoYXB0ZXJzIHRvIGV4aXN0aW5nIG1ldGFkYXRhIGZvciBHb29nbGUgU0VPXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW3BhcmVudD1kb2N1bWVudF0gVGhlIHBhcmVudCBlbGVtZW50LlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuXG5mdW5jdGlvbiBpbml0QXBwZW5kVmlkZW9NZXRhZGF0YSgpIHtcbiAgdmFyIHBhcmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZG9jdW1lbnQ7XG5cbiAgLy8gIFByZXZlbnQgZXhlY3V0aW9uIGlmIHVzZXJzIGluY2x1ZGUgdGhlIHBsYXllci5qcyBzY3JpcHQgbXVsdGlwbGUgdGltZXMuXG4gIGlmICh3aW5kb3cuVmltZW9TZW9NZXRhZGF0YUFwcGVuZGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2luZG93LlZpbWVvU2VvTWV0YWRhdGFBcHBlbmRlZCA9IHRydWU7XG5cbiAgdmFyIG9uTWVzc2FnZSA9IGZ1bmN0aW9uIG9uTWVzc2FnZShldmVudCkge1xuICAgIGlmICghaXNWaW1lb1VybChldmVudC5vcmlnaW4pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBwYXJzZU1lc3NhZ2VEYXRhKGV2ZW50LmRhdGEpO1xuXG4gICAgaWYgKCFkYXRhIHx8IGRhdGEuZXZlbnQgIT09ICdyZWFkeScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaWZyYW1lcyA9IHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCdpZnJhbWUnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlmcmFtZSA9IGlmcmFtZXNbaV07IC8vIEluaXRpYXRlIGFwcGVuZFZpZGVvTWV0YWRhdGEgaWYgaWZyYW1lIGlzIGEgVmltZW8gZW1iZWRcblxuICAgICAgdmFyIGlzVmFsaWRNZXNzYWdlU291cmNlID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cgPT09IGV2ZW50LnNvdXJjZTtcblxuICAgICAgaWYgKGlzVmltZW9FbWJlZChpZnJhbWUuc3JjKSAmJiBpc1ZhbGlkTWVzc2FnZVNvdXJjZSkge1xuICAgICAgICB2YXIgcGxheWVyID0gbmV3IFBsYXllcihpZnJhbWUpO1xuICAgICAgICBwbGF5ZXIuY2FsbE1ldGhvZCgnYXBwZW5kVmlkZW9NZXRhZGF0YScsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBvbk1lc3NhZ2UpO1xufVxuXG4vKiBNSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIFNpbmRyZSBTb3JodXMgPHNpbmRyZXNvcmh1c0BnbWFpbC5jb20+IChzaW5kcmVzb3JodXMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5UZXJtcyAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZVNjcmVlbmZ1bGwoKSB7XG4gIHZhciBmbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsO1xuICAgIHZhciBmbk1hcCA9IFtbJ3JlcXVlc3RGdWxsc2NyZWVuJywgJ2V4aXRGdWxsc2NyZWVuJywgJ2Z1bGxzY3JlZW5FbGVtZW50JywgJ2Z1bGxzY3JlZW5FbmFibGVkJywgJ2Z1bGxzY3JlZW5jaGFuZ2UnLCAnZnVsbHNjcmVlbmVycm9yJ10sIC8vIE5ldyBXZWJLaXRcbiAgICBbJ3dlYmtpdFJlcXVlc3RGdWxsc2NyZWVuJywgJ3dlYmtpdEV4aXRGdWxsc2NyZWVuJywgJ3dlYmtpdEZ1bGxzY3JlZW5FbGVtZW50JywgJ3dlYmtpdEZ1bGxzY3JlZW5FbmFibGVkJywgJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCAnd2Via2l0ZnVsbHNjcmVlbmVycm9yJ10sIC8vIE9sZCBXZWJLaXRcbiAgICBbJ3dlYmtpdFJlcXVlc3RGdWxsU2NyZWVuJywgJ3dlYmtpdENhbmNlbEZ1bGxTY3JlZW4nLCAnd2Via2l0Q3VycmVudEZ1bGxTY3JlZW5FbGVtZW50JywgJ3dlYmtpdENhbmNlbEZ1bGxTY3JlZW4nLCAnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InXSwgWydtb3pSZXF1ZXN0RnVsbFNjcmVlbicsICdtb3pDYW5jZWxGdWxsU2NyZWVuJywgJ21vekZ1bGxTY3JlZW5FbGVtZW50JywgJ21vekZ1bGxTY3JlZW5FbmFibGVkJywgJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCAnbW96ZnVsbHNjcmVlbmVycm9yJ10sIFsnbXNSZXF1ZXN0RnVsbHNjcmVlbicsICdtc0V4aXRGdWxsc2NyZWVuJywgJ21zRnVsbHNjcmVlbkVsZW1lbnQnLCAnbXNGdWxsc2NyZWVuRW5hYmxlZCcsICdNU0Z1bGxzY3JlZW5DaGFuZ2UnLCAnTVNGdWxsc2NyZWVuRXJyb3InXV07XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsID0gZm5NYXAubGVuZ3RoO1xuICAgIHZhciByZXQgPSB7fTtcblxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YWwgPSBmbk1hcFtpXTtcblxuICAgICAgaWYgKHZhbCAmJiB2YWxbMV0gaW4gZG9jdW1lbnQpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJldFtmbk1hcFswXVtpXV0gPSB2YWxbaV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSgpO1xuXG4gIHZhciBldmVudE5hbWVNYXAgPSB7XG4gICAgZnVsbHNjcmVlbmNoYW5nZTogZm4uZnVsbHNjcmVlbmNoYW5nZSxcbiAgICBmdWxsc2NyZWVuZXJyb3I6IGZuLmZ1bGxzY3JlZW5lcnJvclxuICB9O1xuICB2YXIgc2NyZWVuZnVsbCA9IHtcbiAgICByZXF1ZXN0OiBmdW5jdGlvbiByZXF1ZXN0KGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBvbkZ1bGxTY3JlZW5FbnRlcmVkID0gZnVuY3Rpb24gb25GdWxsU2NyZWVuRW50ZXJlZCgpIHtcbiAgICAgICAgICBzY3JlZW5mdWxsLm9mZignZnVsbHNjcmVlbmNoYW5nZScsIG9uRnVsbFNjcmVlbkVudGVyZWQpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzY3JlZW5mdWxsLm9uKCdmdWxsc2NyZWVuY2hhbmdlJywgb25GdWxsU2NyZWVuRW50ZXJlZCk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIHJldHVyblByb21pc2UgPSBlbGVtZW50W2ZuLnJlcXVlc3RGdWxsc2NyZWVuXSgpO1xuXG4gICAgICAgIGlmIChyZXR1cm5Qcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgIHJldHVyblByb21pc2UudGhlbihvbkZ1bGxTY3JlZW5FbnRlcmVkKS5jYXRjaChyZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGV4aXQ6IGZ1bmN0aW9uIGV4aXQoKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoIXNjcmVlbmZ1bGwuaXNGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvbkZ1bGxTY3JlZW5FeGl0ID0gZnVuY3Rpb24gb25GdWxsU2NyZWVuRXhpdCgpIHtcbiAgICAgICAgICBzY3JlZW5mdWxsLm9mZignZnVsbHNjcmVlbmNoYW5nZScsIG9uRnVsbFNjcmVlbkV4aXQpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzY3JlZW5mdWxsLm9uKCdmdWxsc2NyZWVuY2hhbmdlJywgb25GdWxsU2NyZWVuRXhpdCk7XG4gICAgICAgIHZhciByZXR1cm5Qcm9taXNlID0gZG9jdW1lbnRbZm4uZXhpdEZ1bGxzY3JlZW5dKCk7XG5cbiAgICAgICAgaWYgKHJldHVyblByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgcmV0dXJuUHJvbWlzZS50aGVuKG9uRnVsbFNjcmVlbkV4aXQpLmNhdGNoKHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IGZ1bmN0aW9uIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50TmFtZU1hcFtldmVudF07XG5cbiAgICAgIGlmIChldmVudE5hbWUpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50TmFtZU1hcFtldmVudF07XG5cbiAgICAgIGlmIChldmVudE5hbWUpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNjcmVlbmZ1bGwsIHtcbiAgICBpc0Z1bGxzY3JlZW46IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihkb2N1bWVudFtmbi5mdWxsc2NyZWVuRWxlbWVudF0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgZWxlbWVudDoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVsZW1lbnRdO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXNFbmFibGVkOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIC8vIENvZXJjZSB0byBib29sZWFuIGluIGNhc2Ugb2Ygb2xkIFdlYktpdFxuICAgICAgICByZXR1cm4gQm9vbGVhbihkb2N1bWVudFtmbi5mdWxsc2NyZWVuRW5hYmxlZF0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzY3JlZW5mdWxsO1xufVxuXG52YXIgcGxheWVyTWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciByZWFkeU1hcCA9IG5ldyBXZWFrTWFwKCk7XG52YXIgc2NyZWVuZnVsbCA9IHt9O1xuXG52YXIgUGxheWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIFBsYXllci5cbiAgICpcbiAgICogQHBhcmFtIHsoSFRNTElGcmFtZUVsZW1lbnR8SFRNTEVsZW1lbnR8c3RyaW5nfGpRdWVyeSl9IGVsZW1lbnQgQSByZWZlcmVuY2UgdG8gdGhlIFZpbWVvXG4gICAqICAgICAgICBwbGF5ZXIgaWZyYW1lLCBhbmQgaWQsIG9yIGEgalF1ZXJ5IG9iamVjdC5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBvRW1iZWQgcGFyYW1ldGVycyB0byB1c2Ugd2hlbiBjcmVhdGluZyBhbiBlbWJlZCBpbiB0aGUgZWxlbWVudC5cbiAgICogQHJldHVybiB7UGxheWVyfVxuICAgKi9cbiAgZnVuY3Rpb24gUGxheWVyKGVsZW1lbnQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBsYXllcik7XG5cbiAgICAvKiBnbG9iYWwgalF1ZXJ5ICovXG4gICAgaWYgKHdpbmRvdy5qUXVlcnkgJiYgZWxlbWVudCBpbnN0YW5jZW9mIGpRdWVyeSkge1xuICAgICAgaWYgKGVsZW1lbnQubGVuZ3RoID4gMSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdBIGpRdWVyeSBvYmplY3Qgd2l0aCBtdWx0aXBsZSBlbGVtZW50cyB3YXMgcGFzc2VkLCB1c2luZyB0aGUgZmlyc3QgZWxlbWVudC4nKTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudCA9IGVsZW1lbnRbMF07XG4gICAgfSAvLyBGaW5kIGFuIGVsZW1lbnQgYnkgSURcblxuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudCk7XG4gICAgfSAvLyBOb3QgYW4gZWxlbWVudCFcblxuXG4gICAgaWYgKCFpc0RvbUVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgZWl0aGVyIGEgdmFsaWQgZWxlbWVudCBvciBhIHZhbGlkIGlkLicpO1xuICAgIH0gLy8gQWxyZWFkeSBpbml0aWFsaXplZCBhbiBlbWJlZCBpbiB0aGlzIGRpdiwgc28gZ3JhYiB0aGUgaWZyYW1lXG5cblxuICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lICE9PSAnSUZSQU1FJykge1xuICAgICAgdmFyIGlmcmFtZSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XG5cbiAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgZWxlbWVudCA9IGlmcmFtZTtcbiAgICAgIH1cbiAgICB9IC8vIGlmcmFtZSB1cmwgaXMgbm90IGEgVmltZW8gdXJsXG5cblxuICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSUZSQU1FJyAmJiAhaXNWaW1lb1VybChlbGVtZW50LmdldEF0dHJpYnV0ZSgnc3JjJykgfHwgJycpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwbGF5ZXIgZWxlbWVudCBwYXNzZWQgaXNu4oCZdCBhIFZpbWVvIGVtYmVkLicpO1xuICAgIH0gLy8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhIHBsYXllciBvYmplY3QgaW4gdGhlIG1hcCwgcmV0dXJuIHRoYXRcblxuXG4gICAgaWYgKHBsYXllck1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBwbGF5ZXJNYXAuZ2V0KGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHRoaXMuX3dpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3JpZ2luID0gJyonO1xuICAgIHZhciByZWFkeVByb21pc2UgPSBuZXcgbnBvX3NyYyhmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5fb25NZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghaXNWaW1lb1VybChldmVudC5vcmlnaW4pIHx8IF90aGlzLmVsZW1lbnQuY29udGVudFdpbmRvdyAhPT0gZXZlbnQuc291cmNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90aGlzLm9yaWdpbiA9PT0gJyonKSB7XG4gICAgICAgICAgX3RoaXMub3JpZ2luID0gZXZlbnQub3JpZ2luO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGEgPSBwYXJzZU1lc3NhZ2VEYXRhKGV2ZW50LmRhdGEpO1xuICAgICAgICB2YXIgaXNFcnJvciA9IGRhdGEgJiYgZGF0YS5ldmVudCA9PT0gJ2Vycm9yJztcbiAgICAgICAgdmFyIGlzUmVhZHlFcnJvciA9IGlzRXJyb3IgJiYgZGF0YS5kYXRhICYmIGRhdGEuZGF0YS5tZXRob2QgPT09ICdyZWFkeSc7XG5cbiAgICAgICAgaWYgKGlzUmVhZHlFcnJvcikge1xuICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihkYXRhLmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgZXJyb3IubmFtZSA9IGRhdGEuZGF0YS5uYW1lO1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzUmVhZHlFdmVudCA9IGRhdGEgJiYgZGF0YS5ldmVudCA9PT0gJ3JlYWR5JztcbiAgICAgICAgdmFyIGlzUGluZ1Jlc3BvbnNlID0gZGF0YSAmJiBkYXRhLm1ldGhvZCA9PT0gJ3BpbmcnO1xuXG4gICAgICAgIGlmIChpc1JlYWR5RXZlbnQgfHwgaXNQaW5nUmVzcG9uc2UpIHtcbiAgICAgICAgICBfdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1yZWFkeScsICd0cnVlJyk7XG5cbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvY2Vzc0RhdGEoX3RoaXMsIGRhdGEpO1xuICAgICAgfTtcblxuICAgICAgX3RoaXMuX3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgX3RoaXMuX29uTWVzc2FnZSk7XG5cbiAgICAgIGlmIChfdGhpcy5lbGVtZW50Lm5vZGVOYW1lICE9PSAnSUZSQU1FJykge1xuICAgICAgICB2YXIgcGFyYW1zID0gZ2V0T0VtYmVkUGFyYW1ldGVycyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgdmFyIHVybCA9IGdldFZpbWVvVXJsKHBhcmFtcyk7XG4gICAgICAgIGdldE9FbWJlZERhdGEodXJsLCBwYXJhbXMsIGVsZW1lbnQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICB2YXIgaWZyYW1lID0gY3JlYXRlRW1iZWQoZGF0YSwgZWxlbWVudCk7IC8vIE92ZXJ3cml0ZSBlbGVtZW50IHdpdGggdGhlIG5ldyBpZnJhbWUsXG4gICAgICAgICAgLy8gYnV0IHN0b3JlIHJlZmVyZW5jZSB0byB0aGUgb3JpZ2luYWwgZWxlbWVudFxuXG4gICAgICAgICAgX3RoaXMuZWxlbWVudCA9IGlmcmFtZTtcbiAgICAgICAgICBfdGhpcy5fb3JpZ2luYWxFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICBzd2FwQ2FsbGJhY2tzKGVsZW1lbnQsIGlmcmFtZSk7XG4gICAgICAgICAgcGxheWVyTWFwLnNldChfdGhpcy5lbGVtZW50LCBfdGhpcyk7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7IC8vIFN0b3JlIGEgY29weSBvZiB0aGlzIFBsYXllciBpbiB0aGUgbWFwXG5cbiAgICByZWFkeU1hcC5zZXQodGhpcywgcmVhZHlQcm9taXNlKTtcbiAgICBwbGF5ZXJNYXAuc2V0KHRoaXMuZWxlbWVudCwgdGhpcyk7IC8vIFNlbmQgYSBwaW5nIHRvIHRoZSBpZnJhbWUgc28gdGhlIHJlYWR5IHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCBpZlxuICAgIC8vIHRoZSBwbGF5ZXIgaXMgYWxyZWFkeSByZWFkeS5cblxuICAgIGlmICh0aGlzLmVsZW1lbnQubm9kZU5hbWUgPT09ICdJRlJBTUUnKSB7XG4gICAgICBwb3N0TWVzc2FnZSh0aGlzLCAncGluZycpO1xuICAgIH1cblxuICAgIGlmIChzY3JlZW5mdWxsLmlzRW5hYmxlZCkge1xuICAgICAgdmFyIGV4aXRGdWxsc2NyZWVuID0gZnVuY3Rpb24gZXhpdEZ1bGxzY3JlZW4oKSB7XG4gICAgICAgIHJldHVybiBzY3JlZW5mdWxsLmV4aXQoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzY3JlZW5mdWxsLmlzRnVsbHNjcmVlbikge1xuICAgICAgICAgIHN0b3JlQ2FsbGJhY2soX3RoaXMsICdldmVudDpleGl0RnVsbHNjcmVlbicsIGV4aXRGdWxsc2NyZWVuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVDYWxsYmFjayhfdGhpcywgJ2V2ZW50OmV4aXRGdWxsc2NyZWVuJywgZXhpdEZ1bGxzY3JlZW4pO1xuICAgICAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5cbiAgICAgICAgX3RoaXMucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwb3N0TWVzc2FnZShfdGhpcywgJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBzY3JlZW5mdWxsLmlzRnVsbHNjcmVlbik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgc2NyZWVuZnVsbC5vbignZnVsbHNjcmVlbmNoYW5nZScsIHRoaXMuZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBwcm9taXNlIGZvciBhIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIEFQSSBtZXRob2QgdG8gY2FsbC5cbiAgICogQHBhcmFtIHtPYmplY3R9IFthcmdzPXt9XSBBcmd1bWVudHMgdG8gc2VuZCB2aWEgcG9zdE1lc3NhZ2UuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFBsYXllciwgW3tcbiAgICBrZXk6IFwiY2FsbE1ldGhvZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxsTWV0aG9kKG5hbWUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICByZXR1cm4gbmV3IG5wb19zcmMoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAvLyBXZSBhcmUgc3RvcmluZyB0aGUgcmVzb2x2ZS9yZWplY3QgaGFuZGxlcnMgdG8gY2FsbCBsYXRlciwgc28gd2VcbiAgICAgICAgLy8gY2Fu4oCZdCByZXR1cm4gaGVyZS5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvYWx3YXlzLXJldHVyblxuICAgICAgICByZXR1cm4gX3RoaXMyLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RvcmVDYWxsYmFjayhfdGhpczIsIG5hbWUsIHtcbiAgICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgICByZWplY3Q6IHJlamVjdFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHBvc3RNZXNzYWdlKF90aGlzMiwgbmFtZSwgYXJncyk7XG4gICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgcHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mIGEgcGxheWVyIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIHByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgcmV0dXJuIG5ldyBucG9fc3JjKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbmFtZSA9IGdldE1ldGhvZE5hbWUobmFtZSwgJ2dldCcpOyAvLyBXZSBhcmUgc3RvcmluZyB0aGUgcmVzb2x2ZS9yZWplY3QgaGFuZGxlcnMgdG8gY2FsbCBsYXRlciwgc28gd2VcbiAgICAgICAgLy8gY2Fu4oCZdCByZXR1cm4gaGVyZS5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvYWx3YXlzLXJldHVyblxuXG4gICAgICAgIHJldHVybiBfdGhpczMucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdG9yZUNhbGxiYWNrKF90aGlzMywgbmFtZSwge1xuICAgICAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIHJlamVjdDogcmVqZWN0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoX3RoaXMzLCBuYW1lKTtcbiAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBwcm9taXNlIGZvciBzZXR0aW5nIHRoZSB2YWx1ZSBvZiBhIHBsYXllciBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBBUEkgbWV0aG9kIHRvIGNhbGwuXG4gICAgICogQHBhcmFtIHttaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBuZXcgbnBvX3NyYyhmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG5hbWUgPSBnZXRNZXRob2ROYW1lKG5hbWUsICdzZXQnKTtcblxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZXJlIG11c3QgYmUgYSB2YWx1ZSB0byBzZXQuJyk7XG4gICAgICAgIH0gLy8gV2UgYXJlIHN0b3JpbmcgdGhlIHJlc29sdmUvcmVqZWN0IGhhbmRsZXJzIHRvIGNhbGwgbGF0ZXIsIHNvIHdlXG4gICAgICAgIC8vIGNhbuKAmXQgcmV0dXJuIGhlcmUuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL2Fsd2F5cy1yZXR1cm5cblxuXG4gICAgICAgIHJldHVybiBfdGhpczQucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdG9yZUNhbGxiYWNrKF90aGlzNCwgbmFtZSwge1xuICAgICAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIHJlamVjdDogcmVqZWN0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoX3RoaXM0LCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LiBXaWxsIGNhbGwgdGhlXG4gICAgICogY2FsbGJhY2sgd2l0aCBhIHNpbmdsZSBwYXJhbWV0ZXIsIGBkYXRhYCwgdGhhdCBjb250YWlucyB0aGUgZGF0YSBmb3JcbiAgICAgKiB0aGF0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigqKX0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgZmlyZXMuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmICghZXZlbnROYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gZXZlbnQgbmFtZS4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgY2FsbGJhY2sgZnVuY3Rpb24uJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGxiYWNrcyA9IGdldENhbGxiYWNrcyh0aGlzLCBcImV2ZW50OlwiLmNvbmNhdChldmVudE5hbWUpKTtcblxuICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5jYWxsTWV0aG9kKCdhZGRFdmVudExpc3RlbmVyJywgZXZlbnROYW1lKS5jYXRjaChmdW5jdGlvbiAoKSB7Ly8gSWdub3JlIHRoZSBlcnJvci4gVGhlcmUgd2lsbCBiZSBhbiBlcnJvciBldmVudCBmaXJlZCB0aGF0XG4gICAgICAgICAgLy8gd2lsbCB0cmlnZ2VyIHRoZSBlcnJvciBjYWxsYmFjayBpZiB0aGV5IGFyZSBsaXN0ZW5pbmcuXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzdG9yZUNhbGxiYWNrKHRoaXMsIFwiZXZlbnQ6XCIuY29uY2F0KGV2ZW50TmFtZSksIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LiBXaWxsIHJlbW92ZSBhbGxcbiAgICAgKiBsaXN0ZW5lcnMgZm9yIHRoYXQgZXZlbnQgaWYgYSBgY2FsbGJhY2tgIGlzbuKAmXQgcGFzc2VkLCBvciBvbmx5IHRoYXRcbiAgICAgKiBzcGVjaWZpYyBjYWxsYmFjayBpZiBpdCBpcyBwYXNzZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBzcGVjaWZpYyBjYWxsYmFjayB0byByZW1vdmUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9mZlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgaWYgKCFldmVudE5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBldmVudCBuYW1lLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBsYXN0Q2FsbGJhY2sgPSByZW1vdmVDYWxsYmFjayh0aGlzLCBcImV2ZW50OlwiLmNvbmNhdChldmVudE5hbWUpLCBjYWxsYmFjayk7IC8vIElmIHRoZXJlIGFyZSBubyBjYWxsYmFja3MgbGVmdCwgcmVtb3ZlIHRoZSBsaXN0ZW5lclxuXG4gICAgICBpZiAobGFzdENhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2FsbE1ldGhvZCgncmVtb3ZlRXZlbnRMaXN0ZW5lcicsIGV2ZW50TmFtZSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsvLyBJZ25vcmUgdGhlIGVycm9yLiBUaGVyZSB3aWxsIGJlIGFuIGVycm9yIGV2ZW50IGZpcmVkIHRoYXRcbiAgICAgICAgICAvLyB3aWxsIHRyaWdnZXIgdGhlIGVycm9yIGNhbGxiYWNrIGlmIHRoZXkgYXJlIGxpc3RlbmluZy5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBsb2FkIGEgbmV3IHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgTG9hZFZpZGVvUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSB2aWRlbyB3aXRoIHRoaXMgaWQgb3IgdXJsIHN1Y2Nlc3NmdWxseSBsb2FkZWQuXG4gICAgICogQHJlamVjdCB7VHlwZUVycm9yfSBUaGUgaWQgd2FzIG5vdCBhIG51bWJlci5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIExvYWQgYSBuZXcgdmlkZW8gaW50byB0aGlzIGVtYmVkLiBUaGUgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIGlmXG4gICAgICogdGhlIHZpZGVvIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWQsIG9yIGl0IHdpbGwgYmUgcmVqZWN0ZWQgaWYgaXQgY291bGRcbiAgICAgKiBub3QgYmUgbG9hZGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfG9iamVjdH0gb3B0aW9ucyBUaGUgaWQgb2YgdGhlIHZpZGVvLCB0aGUgdXJsIG9mIHRoZSB2aWRlbywgb3IgYW4gb2JqZWN0IHdpdGggZW1iZWQgb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHtMb2FkVmlkZW9Qcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFZpZGVvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRWaWRlbyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdsb2FkVmlkZW8nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHBlcmZvcm0gYW4gYWN0aW9uIHdoZW4gdGhlIFBsYXllciBpcyByZWFkeS5cbiAgICAgKlxuICAgICAqIEB0b2RvIGRvY3VtZW50IGVycm9yc1xuICAgICAqIEBwcm9taXNlIExvYWRWaWRlb1Byb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7dm9pZH1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgYSBmdW5jdGlvbiB3aGVuIHRoZSBwbGF5ZXIgaWZyYW1lIGhhcyBpbml0aWFsaXplZC4gWW91IGRvIG5vdFxuICAgICAqIG5lZWQgdG8gd2FpdCBmb3IgYHJlYWR5YCB0byB0cmlnZ2VyIHRvIGJlZ2luIGFkZGluZyBldmVudCBsaXN0ZW5lcnNcbiAgICAgKiBvciBjYWxsaW5nIG90aGVyIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtSZWFkeVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZWFkeVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkeSgpIHtcbiAgICAgIHZhciByZWFkeVByb21pc2UgPSByZWFkeU1hcC5nZXQodGhpcykgfHwgbmV3IG5wb19zcmMoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKCdVbmtub3duIHBsYXllci4gUHJvYmFibHkgdW5sb2FkZWQuJykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbnBvX3NyYy5yZXNvbHZlKHJlYWR5UHJvbWlzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBhZGQgYSBjdWUgcG9pbnQgdG8gdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEFkZEN1ZVBvaW50UHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtzdHJpbmd9IFRoZSBpZCBvZiB0aGUgY3VlIHBvaW50IHRvIHVzZSBmb3IgcmVtb3ZlQ3VlUG9pbnQuXG4gICAgICogQHJlamVjdCB7UmFuZ2VFcnJvcn0gdGhlIHRpbWUgd2FzIGxlc3MgdGhhbiAwIG9yIGdyZWF0ZXIgdGhhbiB0aGVcbiAgICAgKiAgICAgICAgIHZpZGVv4oCZcyBkdXJhdGlvbi5cbiAgICAgKiBAcmVqZWN0IHtVbnN1cHBvcnRlZEVycm9yfSBDdWUgcG9pbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGhlIGN1cnJlbnRcbiAgICAgKiAgICAgICAgIHBsYXllciBvciBicm93c2VyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY3VlIHBvaW50IHRvIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZSBUaGUgdGltZSBmb3IgdGhlIGN1ZSBwb2ludC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2RhdGFdIEFyYml0cmFyeSBkYXRhIHRvIGJlIHJldHVybmVkIHdpdGggdGhlIGN1ZSBwb2ludC5cbiAgICAgKiBAcmV0dXJuIHtBZGRDdWVQb2ludFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhZGRDdWVQb2ludFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDdWVQb2ludCh0aW1lKSB7XG4gICAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdhZGRDdWVQb2ludCcsIHtcbiAgICAgICAgdGltZTogdGltZSxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byByZW1vdmUgYSBjdWUgcG9pbnQgZnJvbSB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgQWRkQ3VlUG9pbnRQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge3N0cmluZ30gVGhlIGlkIG9mIHRoZSBjdWUgcG9pbnQgdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKiBAcmVqZWN0IHtJbnZhbGlkQ3VlUG9pbnR9IFRoZSBjdWUgcG9pbnQgd2l0aCB0aGUgc3BlY2lmaWVkIGlkIHdhcyBub3RcbiAgICAgKiAgICAgICAgIGZvdW5kLlxuICAgICAqIEByZWplY3Qge1Vuc3VwcG9ydGVkRXJyb3J9IEN1ZSBwb2ludHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0aGUgY3VycmVudFxuICAgICAqICAgICAgICAgcGxheWVyIG9yIGJyb3dzZXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBjdWUgcG9pbnQgZnJvbSB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBjdWUgcG9pbnQgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm4ge1JlbW92ZUN1ZVBvaW50UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZUN1ZVBvaW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUN1ZVBvaW50KGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdyZW1vdmVDdWVQb2ludCcsIGlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSByZXByZXNlbnRhdGlvbiBvZiBhIHRleHQgdHJhY2sgb24gYSB2aWRlby5cbiAgICAgKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFZpbWVvVGV4dFRyYWNrXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGxhbmd1YWdlIFRoZSBJU08gbGFuZ3VhZ2UgY29kZS5cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30ga2luZCBUaGUga2luZCBvZiB0cmFjayBpdCBpcyAoY2FwdGlvbnMgb3Igc3VidGl0bGVzKS5cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gbGFiZWwgVGhlIGh1bWFu4oCQcmVhZGFibGUgbGFiZWwgZm9yIHRoZSB0cmFjay5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBlbmFibGUgYSB0ZXh0IHRyYWNrLlxuICAgICAqXG4gICAgICogQHByb21pc2UgRW5hYmxlVGV4dFRyYWNrUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtWaW1lb1RleHRUcmFja30gVGhlIHRleHQgdHJhY2sgdGhhdCB3YXMgZW5hYmxlZC5cbiAgICAgKiBAcmVqZWN0IHtJbnZhbGlkVHJhY2tMYW5ndWFnZUVycm9yfSBObyB0cmFjayB3YXMgYXZhaWxhYmxlIHdpdGggdGhlXG4gICAgICogICAgICAgICBzcGVjaWZpZWQgbGFuZ3VhZ2UuXG4gICAgICogQHJlamVjdCB7SW52YWxpZFRyYWNrRXJyb3J9IE5vIHRyYWNrIHdhcyBhdmFpbGFibGUgd2l0aCB0aGUgc3BlY2lmaWVkXG4gICAgICogICAgICAgICBsYW5ndWFnZSBhbmQga2luZC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSB0aGUgdGV4dCB0cmFjayB3aXRoIHRoZSBzcGVjaWZpZWQgbGFuZ3VhZ2UsIGFuZCBvcHRpb25hbGx5IHRoZVxuICAgICAqIHNwZWNpZmllZCBraW5kIChjYXB0aW9ucyBvciBzdWJ0aXRsZXMpLlxuICAgICAqXG4gICAgICogV2hlbiBzZXQgdmlhIHRoZSBBUEksIHRoZSB0cmFjayBsYW5ndWFnZSB3aWxsIG5vdCBjaGFuZ2UgdGhlIHZpZXdlcuKAmXNcbiAgICAgKiBzdG9yZWQgcHJlZmVyZW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSBUaGUgdHdv4oCQbGV0dGVyIGxhbmd1YWdlIGNvZGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtraW5kXSBUaGUga2luZCBvZiB0cmFjayB0byBlbmFibGUgKGNhcHRpb25zIG9yIHN1YnRpdGxlcykuXG4gICAgICogQHJldHVybiB7RW5hYmxlVGV4dFRyYWNrUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImVuYWJsZVRleHRUcmFja1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVUZXh0VHJhY2sobGFuZ3VhZ2UsIGtpbmQpIHtcbiAgICAgIGlmICghbGFuZ3VhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhIGxhbmd1YWdlLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdlbmFibGVUZXh0VHJhY2snLCB7XG4gICAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZSxcbiAgICAgICAga2luZDoga2luZFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBkaXNhYmxlIHRoZSBhY3RpdmUgdGV4dCB0cmFjay5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIERpc2FibGVUZXh0VHJhY2tQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge3ZvaWR9IFRoZSB0cmFjayB3YXMgZGlzYWJsZWQuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIHRoZSBjdXJyZW50bHktYWN0aXZlIHRleHQgdHJhY2suXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtEaXNhYmxlVGV4dFRyYWNrUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRpc2FibGVUZXh0VHJhY2tcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZVRleHRUcmFjaygpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2Rpc2FibGVUZXh0VHJhY2snKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHBhdXNlIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFBhdXNlUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHt2b2lkfSBUaGUgdmlkZW8gd2FzIHBhdXNlZC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFBhdXNlIHRoZSB2aWRlbyBpZiBpdOKAmXMgcGxheWluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BhdXNlUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInBhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgncGF1c2UnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHBsYXkgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgUGxheVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7dm9pZH0gVGhlIHZpZGVvIHdhcyBwbGF5ZWQuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBQbGF5IHRoZSB2aWRlbyBpZiBpdOKAmXMgcGF1c2VkLiAqKk5vdGU6Kiogb24gaU9TIGFuZCBzb21lIG90aGVyXG4gICAgICogbW9iaWxlIGRldmljZXMsIHlvdSBjYW5ub3QgcHJvZ3JhbW1hdGljYWxseSB0cmlnZ2VyIHBsYXkuIE9uY2UgdGhlXG4gICAgICogdmlld2VyIGhhcyB0YXBwZWQgb24gdGhlIHBsYXkgYnV0dG9uIGluIHRoZSBwbGF5ZXIsIGhvd2V2ZXIsIHlvdVxuICAgICAqIHdpbGwgYmUgYWJsZSB0byB1c2UgdGhpcyBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BsYXlQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicGxheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgncGxheScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IHRoYXQgdGhlIHBsYXllciBlbnRlcnMgZnVsbHNjcmVlbi5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVxdWVzdEZ1bGxzY3JlZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWVzdEZ1bGxzY3JlZW4oKSB7XG4gICAgICBpZiAoc2NyZWVuZnVsbC5pc0VuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHNjcmVlbmZ1bGwucmVxdWVzdCh0aGlzLmVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdyZXF1ZXN0RnVsbHNjcmVlbicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IHRoYXQgdGhlIHBsYXllciBleGl0cyBmdWxsc2NyZWVuLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleGl0RnVsbHNjcmVlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleGl0RnVsbHNjcmVlbigpIHtcbiAgICAgIGlmIChzY3JlZW5mdWxsLmlzRW5hYmxlZCkge1xuICAgICAgICByZXR1cm4gc2NyZWVuZnVsbC5leGl0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2V4aXRGdWxsc2NyZWVuJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGxheWVyIGlzIGN1cnJlbnRseSBmdWxsc2NyZWVuLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRGdWxsc2NyZWVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZ1bGxzY3JlZW4oKSB7XG4gICAgICBpZiAoc2NyZWVuZnVsbC5pc0VuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIG5wb19zcmMucmVzb2x2ZShzY3JlZW5mdWxsLmlzRnVsbHNjcmVlbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmdldCgnZnVsbHNjcmVlbicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IHRoYXQgdGhlIHBsYXllciBlbnRlcnMgcGljdHVyZS1pbi1waWN0dXJlLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZXF1ZXN0UGljdHVyZUluUGljdHVyZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0UGljdHVyZUluUGljdHVyZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ3JlcXVlc3RQaWN0dXJlSW5QaWN0dXJlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgdGhhdCB0aGUgcGxheWVyIGV4aXRzIHBpY3R1cmUtaW4tcGljdHVyZS5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZXhpdFBpY3R1cmVJblBpY3R1cmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhpdFBpY3R1cmVJblBpY3R1cmUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdleGl0UGljdHVyZUluUGljdHVyZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBsYXllciBpcyBjdXJyZW50bHkgcGljdHVyZS1pbi1waWN0dXJlLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRQaWN0dXJlSW5QaWN0dXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBpY3R1cmVJblBpY3R1cmUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3BpY3R1cmVJblBpY3R1cmUnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHVubG9hZCB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBVbmxvYWRQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge3ZvaWR9IFRoZSB2aWRlbyB3YXMgdW5sb2FkZWQuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHBsYXllciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1VubG9hZFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1bmxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5sb2FkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgndW5sb2FkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFudXAgdGhlIHBsYXllciBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIERPTVxuICAgICAqXG4gICAgICogSXQgd29uJ3QgYmUgdXNhYmxlIGFuZCBhIG5ldyBvbmUgc2hvdWxkIGJlIGNvbnN0cnVjdGVkXG4gICAgICogIGluIG9yZGVyIHRvIGRvIGFueSBvcGVyYXRpb25zLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IG5wb19zcmMoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgcmVhZHlNYXAuZGVsZXRlKF90aGlzNSk7XG4gICAgICAgIHBsYXllck1hcC5kZWxldGUoX3RoaXM1LmVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChfdGhpczUuX29yaWdpbmFsRWxlbWVudCkge1xuICAgICAgICAgIHBsYXllck1hcC5kZWxldGUoX3RoaXM1Ll9vcmlnaW5hbEVsZW1lbnQpO1xuXG4gICAgICAgICAgX3RoaXM1Ll9vcmlnaW5hbEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZpbWVvLWluaXRpYWxpemVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXM1LmVsZW1lbnQgJiYgX3RoaXM1LmVsZW1lbnQubm9kZU5hbWUgPT09ICdJRlJBTUUnICYmIF90aGlzNS5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAvLyBJZiB3ZSd2ZSBhZGRlZCBhbiBhZGRpdGlvbmFsIHdyYXBwZXIgZGl2LCByZW1vdmUgdGhhdCBmcm9tIHRoZSBET00uXG4gICAgICAgICAgLy8gSWYgbm90LCBqdXN0IHJlbW92ZSB0aGUgaWZyYW1lIGVsZW1lbnQuXG4gICAgICAgICAgaWYgKF90aGlzNS5lbGVtZW50LnBhcmVudE5vZGUucGFyZW50Tm9kZSAmJiBfdGhpczUuX29yaWdpbmFsRWxlbWVudCAmJiBfdGhpczUuX29yaWdpbmFsRWxlbWVudCAhPT0gX3RoaXM1LmVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgX3RoaXM1LmVsZW1lbnQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF90aGlzNS5lbGVtZW50LnBhcmVudE5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczUuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF90aGlzNS5lbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gSWYgdGhlIGNsaXAgaXMgcHJpdmF0ZSB0aGVyZSBpcyBhIGNhc2Ugd2hlcmUgdGhlIGVsZW1lbnQgc3RheXMgdGhlXG4gICAgICAgIC8vIGRpdiBlbGVtZW50LiBEZXN0cm95IHNob3VsZCByZXNldCB0aGUgZGl2IGFuZCByZW1vdmUgdGhlIGlmcmFtZSBjaGlsZC5cblxuXG4gICAgICAgIGlmIChfdGhpczUuZWxlbWVudCAmJiBfdGhpczUuZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0RJVicgJiYgX3RoaXM1LmVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgIF90aGlzNS5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12aW1lby1pbml0aWFsaXplZCcpO1xuXG4gICAgICAgICAgdmFyIGlmcmFtZSA9IF90aGlzNS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpO1xuXG4gICAgICAgICAgaWYgKGlmcmFtZSAmJiBpZnJhbWUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgLy8gSWYgd2UndmUgYWRkZWQgYW4gYWRkaXRpb25hbCB3cmFwcGVyIGRpdiwgcmVtb3ZlIHRoYXQgZnJvbSB0aGUgRE9NLlxuICAgICAgICAgICAgLy8gSWYgbm90LCBqdXN0IHJlbW92ZSB0aGUgaWZyYW1lIGVsZW1lbnQuXG4gICAgICAgICAgICBpZiAoaWZyYW1lLnBhcmVudE5vZGUucGFyZW50Tm9kZSAmJiBfdGhpczUuX29yaWdpbmFsRWxlbWVudCAmJiBfdGhpczUuX29yaWdpbmFsRWxlbWVudCAhPT0gaWZyYW1lLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgaWZyYW1lLnBhcmVudE5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpZnJhbWUucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNS5fd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBfdGhpczUuX29uTWVzc2FnZSk7XG5cbiAgICAgICAgaWYgKHNjcmVlbmZ1bGwuaXNFbmFibGVkKSB7XG4gICAgICAgICAgc2NyZWVuZnVsbC5vZmYoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBfdGhpczUuZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIGF1dG9wYXVzZSBiZWhhdmlvciBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRBdXRvcGF1c2VQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge2Jvb2xlYW59IFdoZXRoZXIgYXV0b3BhdXNlIGlzIHR1cm5lZCBvbiBvciBvZmYuXG4gICAgICogQHJlamVjdCB7VW5zdXBwb3J0ZWRFcnJvcn0gQXV0b3BhdXNlIGlzIG5vdCBzdXBwb3J0ZWQgd2l0aCB0aGUgY3VycmVudFxuICAgICAqICAgICAgICAgcGxheWVyIG9yIGJyb3dzZXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGF1dG9wYXVzZSBiZWhhdmlvciBmb3IgdGhpcyBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRBdXRvcGF1c2VQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0QXV0b3BhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF1dG9wYXVzZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnYXV0b3BhdXNlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBzZXQgdGhlIGF1dG9wYXVzZSBiZWhhdmlvciBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBTZXRBdXRvcGF1c2VQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge2Jvb2xlYW59IFdoZXRoZXIgYXV0b3BhdXNlIGlzIHR1cm5lZCBvbiBvciBvZmYuXG4gICAgICogQHJlamVjdCB7VW5zdXBwb3J0ZWRFcnJvcn0gQXV0b3BhdXNlIGlzIG5vdCBzdXBwb3J0ZWQgd2l0aCB0aGUgY3VycmVudFxuICAgICAqICAgICAgICAgcGxheWVyIG9yIGJyb3dzZXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgYXV0b3BhdXNlIGJlaGF2aW9yIG9mIHRoaXMgcGxheWVyLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgd2hlbiBhbm90aGVyIHZpZGVvIGlzIHBsYXllZCBpbiB0aGUgc2FtZSBicm93c2VyLCB0aGlzXG4gICAgICogcGxheWVyIHdpbGwgYXV0b21hdGljYWxseSBwYXVzZS4gVW5sZXNzIHlvdSBoYXZlIGEgc3BlY2lmaWMgcmVhc29uXG4gICAgICogZm9yIGRvaW5nIHNvLCB3ZSByZWNvbW1lbmQgdGhhdCB5b3UgbGVhdmUgYXV0b3BhdXNlIHNldCB0byB0aGVcbiAgICAgKiBkZWZhdWx0IChgdHJ1ZWApLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBhdXRvcGF1c2VcbiAgICAgKiBAcmV0dXJuIHtTZXRBdXRvcGF1c2VQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0QXV0b3BhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEF1dG9wYXVzZShhdXRvcGF1c2UpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldCgnYXV0b3BhdXNlJywgYXV0b3BhdXNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgYnVmZmVyZWQgcHJvcGVydHkgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0QnVmZmVyZWRQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge0FycmF5fSBCdWZmZXJlZCBUaW1lcmFuZ2VzIGNvbnZlcnRlZCB0byBhbiBBcnJheS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYnVmZmVyZWQgcHJvcGVydHkgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0QnVmZmVyZWRQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0QnVmZmVyZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QnVmZmVyZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ2J1ZmZlcmVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IENhbWVyYVByb3BlcnRpZXNcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwcm9wcy55YXcgLSBOdW1iZXIgYmV0d2VlbiAwIGFuZCAzNjAuXG4gICAgICogQHByb3Age251bWJlcn0gcHJvcHMucGl0Y2ggLSBOdW1iZXIgYmV0d2VlbiAtOTAgYW5kIDkwLlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHByb3BzLnJvbGwgLSBOdW1iZXIgYmV0d2VlbiAtMTgwIGFuZCAxODAuXG4gICAgICogQHByb3Age251bWJlcn0gcHJvcHMuZm92IC0gVGhlIGZpZWxkIG9mIHZpZXcgaW4gZGVncmVlcy5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIGNhbWVyYSBwcm9wZXJ0aWVzIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRDYW1lcmFQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge0NhbWVyYVByb3BlcnRpZXN9IFRoZSBjYW1lcmEgcHJvcGVydGllcy5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEZvciAzNjDCsCB2aWRlb3MgZ2V0IHRoZSBjYW1lcmEgcHJvcGVydGllcyBmb3IgdGhpcyBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRDYW1lcmFQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q2FtZXJhUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2FtZXJhUHJvcHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ2NhbWVyYVByb3BzJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBzZXQgdGhlIGNhbWVyYSBwcm9wZXJ0aWVzIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBTZXRDYW1lcmFQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge09iamVjdH0gVGhlIGNhbWVyYSB3YXMgc3VjY2Vzc2Z1bGx5IHNldC5cbiAgICAgKiBAcmVqZWN0IHtSYW5nZUVycm9yfSBUaGUgcmFuZ2Ugd2FzIG91dCBvZiBib3VuZHMuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBGb3IgMzYwwrAgdmlkZW9zIHNldCB0aGUgY2FtZXJhIHByb3BlcnRpZXMgZm9yIHRoaXMgcGxheWVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtDYW1lcmFQcm9wZXJ0aWVzfSBjYW1lcmEgVGhlIGNhbWVyYSBwcm9wZXJ0aWVzXG4gICAgICogQHJldHVybiB7U2V0Q2FtZXJhUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldENhbWVyYVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldENhbWVyYVByb3BzKGNhbWVyYSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KCdjYW1lcmFQcm9wcycsIGNhbWVyYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBjaGFwdGVyLlxuICAgICAqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gVmltZW9DaGFwdGVyXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHN0YXJ0VGltZSBUaGUgc3RhcnQgdGltZSBvZiB0aGUgY2hhcHRlci5cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gdGl0bGUgVGhlIHRpdGxlIG9mIHRoZSBjaGFwdGVyLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbmRleCBUaGUgcGxhY2UgaW4gdGhlIG9yZGVyIG9mIENoYXB0ZXJzLiBTdGFydHMgYXQgMS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgY2hhcHRlcnMgZm9yIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldENoYXB0ZXJzUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtWaW1lb0NoYXB0ZXJbXX0gVGhlIGNoYXB0ZXJzIGZvciB0aGUgdmlkZW8uXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYXJyYXkgb2YgYWxsIHRoZSBjaGFwdGVycyBmb3IgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0Q2hhcHRlcnNQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q2hhcHRlcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hhcHRlcnMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ2NoYXB0ZXJzJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgY2hhcHRlci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldEN1cnJlbnRDaGFwdGVyc1Byb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7VmltZW9DaGFwdGVyfHVuZGVmaW5lZH0gVGhlIGN1cnJlbnQgY2hhcHRlciBmb3IgdGhlIHZpZGVvLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50bHkgYWN0aXZlIGNoYXB0ZXIgZm9yIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldEN1cnJlbnRDaGFwdGVyc1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDdXJyZW50Q2hhcHRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50Q2hhcHRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnY3VycmVudENoYXB0ZXInKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgY29sb3Igb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldENvbG9yUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtzdHJpbmd9IFRoZSBoZXggY29sb3Igb2YgdGhlIHBsYXllci5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY29sb3IgZm9yIHRoaXMgcGxheWVyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0Q29sb3JQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q29sb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29sb3IoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ2NvbG9yJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBzZXQgdGhlIGNvbG9yIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBTZXRDb2xvclByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7c3RyaW5nfSBUaGUgY29sb3Igd2FzIHN1Y2Nlc3NmdWxseSBzZXQuXG4gICAgICogQHJlamVjdCB7VHlwZUVycm9yfSBUaGUgc3RyaW5nIHdhcyBub3QgYSB2YWxpZCBoZXggb3IgcmdiIGNvbG9yLlxuICAgICAqIEByZWplY3Qge0NvbnRyYXN0RXJyb3J9IFRoZSBjb2xvciB3YXMgc2V0LCBidXQgdGhlIGNvbnRyYXN0IGlzXG4gICAgICogICAgICAgICBvdXRzaWRlIG9mIHRoZSBhY2NlcHRhYmxlIHJhbmdlLlxuICAgICAqIEByZWplY3Qge0VtYmVkU2V0dGluZ3NFcnJvcn0gVGhlIG93bmVyIG9mIHRoZSBwbGF5ZXIgaGFzIGNob3NlbiB0b1xuICAgICAqICAgICAgICAgdXNlIGEgc3BlY2lmaWMgY29sb3IuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNvbG9yIG9mIHRoaXMgcGxheWVyIHRvIGEgaGV4IG9yIHJnYiBzdHJpbmcuIFNldHRpbmcgdGhlXG4gICAgICogY29sb3IgbWF5IGZhaWwgaWYgdGhlIG93bmVyIG9mIHRoZSB2aWRlbyBoYXMgc2V0IHRoZWlyIGVtYmVkXG4gICAgICogcHJlZmVyZW5jZXMgdG8gZm9yY2UgYSBzcGVjaWZpYyBjb2xvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciBUaGUgaGV4IG9yIHJnYiBjb2xvciBzdHJpbmcgdG8gc2V0LlxuICAgICAqIEByZXR1cm4ge1NldENvbG9yUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldENvbG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvbG9yKGNvbG9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoJ2NvbG9yJywgY29sb3IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgY3VlIHBvaW50LlxuICAgICAqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gVmltZW9DdWVQb2ludFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lIFRoZSB0aW1lIG9mIHRoZSBjdWUgcG9pbnQuXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IGRhdGEgVGhlIGRhdGEgcGFzc2VkIHdoZW4gYWRkaW5nIHRoZSBjdWUgcG9pbnQuXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGlkIFRoZSB1bmlxdWUgaWQgZm9yIHVzZSB3aXRoIHJlbW92ZUN1ZVBvaW50LlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgY3VlIHBvaW50cyBvZiBhIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0Q3VlUG9pbnRzUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtWaW1lb0N1ZVBvaW50W119IFRoZSBjdWUgcG9pbnRzIGFkZGVkIHRvIHRoZSB2aWRlby5cbiAgICAgKiBAcmVqZWN0IHtVbnN1cHBvcnRlZEVycm9yfSBDdWUgcG9pbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGhlIGN1cnJlbnRcbiAgICAgKiAgICAgICAgIHBsYXllciBvciBicm93c2VyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IGFuIGFycmF5IG9mIHRoZSBjdWUgcG9pbnRzIGFkZGVkIHRvIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldEN1ZVBvaW50c1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDdWVQb2ludHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VlUG9pbnRzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdjdWVQb2ludHMnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgY3VycmVudCB0aW1lIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldEN1cnJlbnRUaW1lUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSBjdXJyZW50IHRpbWUgaW4gc2Vjb25kcy5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBpbiBzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0Q3VycmVudFRpbWVQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q3VycmVudFRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ2N1cnJlbnRUaW1lJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBzZXQgdGhlIGN1cnJlbnQgdGltZSBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBTZXRDdXJyZW50VGltZVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7bnVtYmVyfSBUaGUgYWN0dWFsIGN1cnJlbnQgdGltZSB0aGF0IHdhcyBzZXQuXG4gICAgICogQHJlamVjdCB7UmFuZ2VFcnJvcn0gdGhlIHRpbWUgd2FzIGxlc3MgdGhhbiAwIG9yIGdyZWF0ZXIgdGhhbiB0aGVcbiAgICAgKiAgICAgICAgIHZpZGVv4oCZcyBkdXJhdGlvbi5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBpbiBzZWNvbmRzLiBJZiB0aGUgcGxheWVyIHdhc1xuICAgICAqIHBhdXNlZCwgaXQgd2lsbCByZW1haW4gcGF1c2VkLiBMaWtld2lzZSwgaWYgdGhlIHBsYXllciB3YXMgcGxheWluZyxcbiAgICAgKiBpdCB3aWxsIHJlc3VtZSBwbGF5aW5nIG9uY2UgdGhlIHZpZGVvIGhhcyBidWZmZXJlZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gcHJvdmlkZSBhbiBhY2N1cmF0ZSB0aW1lIGFuZCB0aGUgcGxheWVyIHdpbGwgYXR0ZW1wdCB0byBzZWVrXG4gICAgICogdG8gYXMgY2xvc2UgdG8gdGhhdCB0aW1lIGFzIHBvc3NpYmxlLiBUaGUgZXhhY3QgdGltZSB3aWxsIGJlIHRoZVxuICAgICAqIGZ1bGZpbGxlZCB2YWx1ZSBvZiB0aGUgcHJvbWlzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50VGltZVxuICAgICAqIEByZXR1cm4ge1NldEN1cnJlbnRUaW1lUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldEN1cnJlbnRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRUaW1lKGN1cnJlbnRUaW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoJ2N1cnJlbnRUaW1lJywgY3VycmVudFRpbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBkdXJhdGlvbiBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXREdXJhdGlvblByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7bnVtYmVyfSBUaGUgZHVyYXRpb24gaW4gc2Vjb25kcy5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZHVyYXRpb24gb2YgdGhlIHZpZGVvIGluIHNlY29uZHMuIEl0IHdpbGwgYmUgcm91bmRlZCB0byB0aGVcbiAgICAgKiBuZWFyZXN0IHNlY29uZCBiZWZvcmUgcGxheWJhY2sgYmVnaW5zLCBhbmQgdG8gdGhlIG5lYXJlc3QgdGhvdXNhbmR0aFxuICAgICAqIG9mIGEgc2Vjb25kIGFmdGVyIHBsYXliYWNrIGJlZ2lucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldER1cmF0aW9uUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldER1cmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdkdXJhdGlvbicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBlbmRlZCBzdGF0ZSBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRFbmRlZFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIHZpZGVvIGhhcyBlbmRlZC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZW5kZWQgc3RhdGUgb2YgdGhlIHZpZGVvLiBUaGUgdmlkZW8gaGFzIGVuZGVkIGlmXG4gICAgICogYGN1cnJlbnRUaW1lID09PSBkdXJhdGlvbmAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRFbmRlZFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRFbmRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbmRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnZW5kZWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgbG9vcCBzdGF0ZSBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0TG9vcFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIHBsYXllciBpcyBzZXQgdG8gbG9vcC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbG9vcCBzdGF0ZSBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0TG9vcFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRMb29wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExvb3AoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ2xvb3AnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHNldCB0aGUgbG9vcCBzdGF0ZSBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgU2V0TG9vcFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7Ym9vbGVhbn0gVGhlIGxvb3Agc3RhdGUgdGhhdCB3YXMgc2V0LlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsb29wIHN0YXRlIG9mIHRoZSBwbGF5ZXIuIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIHBsYXllclxuICAgICAqIHdpbGwgc3RhcnQgb3ZlciBpbW1lZGlhdGVseSBvbmNlIHBsYXliYWNrIGVuZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxvb3BcbiAgICAgKiBAcmV0dXJuIHtTZXRMb29wUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldExvb3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TG9vcChsb29wKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoJ2xvb3AnLCBsb29wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHNldCB0aGUgbXV0ZWQgc3RhdGUgb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFNldE11dGVkUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtib29sZWFufSBUaGUgbXV0ZWQgc3RhdGUgdGhhdCB3YXMgc2V0LlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBtdXRlZCBzdGF0ZSBvZiB0aGUgcGxheWVyLiBXaGVuIHNldCB0byBgdHJ1ZWAsIHRoZSBwbGF5ZXJcbiAgICAgKiB2b2x1bWUgd2lsbCBiZSBtdXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbXV0ZWRcbiAgICAgKiBAcmV0dXJuIHtTZXRNdXRlZFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRNdXRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNdXRlZChtdXRlZCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KCdtdXRlZCcsIG11dGVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgbXV0ZWQgc3RhdGUgb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldE11dGVkUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgcGxheWVyIGlzIG11dGVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtdXRlZCBzdGF0ZSBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0TXV0ZWRQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TXV0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TXV0ZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ211dGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIHBhdXNlZCBzdGF0ZSBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0TG9vcFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIHZpZGVvIGlzIHBhdXNlZC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcGF1c2VkIHN0YXRlIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRMb29wUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFBhdXNlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYXVzZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3BhdXNlZCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBwbGF5YmFjayByYXRlIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRQbGF5YmFja1JhdGVQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIHBsYXliYWNrIHJhdGUgb2YgdGhlIHBsYXllciBvbiBhIHNjYWxlIGZyb20gMC41IHRvIDIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHBsYXliYWNrIHJhdGUgb2YgdGhlIHBsYXllciBvbiBhIHNjYWxlIGZyb20gYDAuNWAgdG8gYDJgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0UGxheWJhY2tSYXRlUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFBsYXliYWNrUmF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQbGF5YmFja1JhdGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3BsYXliYWNrUmF0ZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gc2V0IHRoZSBwbGF5YmFja3JhdGUgb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFNldFBsYXliYWNrUmF0ZVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7bnVtYmVyfSBUaGUgcGxheWJhY2sgcmF0ZSB3YXMgc2V0LlxuICAgICAqIEByZWplY3Qge1JhbmdlRXJyb3J9IFRoZSBwbGF5YmFjayByYXRlIHdhcyBsZXNzIHRoYW4gMC41IG9yIGdyZWF0ZXIgdGhhbiAyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBwbGF5YmFjayByYXRlIG9mIHRoZSBwbGF5ZXIgb24gYSBzY2FsZSBmcm9tIGAwLjVgIHRvIGAyYC4gV2hlbiBzZXRcbiAgICAgKiB2aWEgdGhlIEFQSSwgdGhlIHBsYXliYWNrIHJhdGUgd2lsbCBub3QgYmUgc3luY2hyb25pemVkIHRvIG90aGVyXG4gICAgICogcGxheWVycyBvciBzdG9yZWQgYXMgdGhlIHZpZXdlcidzIHByZWZlcmVuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGxheWJhY2tSYXRlXG4gICAgICogQHJldHVybiB7U2V0UGxheWJhY2tSYXRlUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFBsYXliYWNrUmF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQbGF5YmFja1JhdGUocGxheWJhY2tSYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoJ3BsYXliYWNrUmF0ZScsIHBsYXliYWNrUmF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIHBsYXllZCBwcm9wZXJ0eSBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRQbGF5ZWRQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge0FycmF5fSBQbGF5ZWQgVGltZXJhbmdlcyBjb252ZXJ0ZWQgdG8gYW4gQXJyYXkuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHBsYXllZCBwcm9wZXJ0eSBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRQbGF5ZWRQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGxheWVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBsYXllZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgncGxheWVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIHF1YWxpdGllcyBhdmFpbGFibGUgb2YgdGhlIGN1cnJlbnQgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRRdWFsaXRpZXNQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge0FycmF5fSBUaGUgcXVhbGl0aWVzIG9mIHRoZSB2aWRlby5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcXVhbGl0aWVzIG9mIHRoZSBjdXJyZW50IHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0UXVhbGl0aWVzUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFF1YWxpdGllc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRRdWFsaXRpZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3F1YWxpdGllcycpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBjdXJyZW50IHNldCBxdWFsaXR5IG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFF1YWxpdHlQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge3N0cmluZ30gVGhlIGN1cnJlbnQgc2V0IHF1YWxpdHkuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgc2V0IHF1YWxpdHkgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0UXVhbGl0eVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRRdWFsaXR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFF1YWxpdHkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3F1YWxpdHknKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHNldCB0aGUgdmlkZW8gcXVhbGl0eS5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFNldFF1YWxpdHlQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIHF1YWxpdHkgd2FzIHNldC5cbiAgICAgKiBAcmVqZWN0IHtSYW5nZUVycm9yfSBUaGUgcXVhbGl0eSBpcyBub3QgYXZhaWxhYmxlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogU2V0IGEgdmlkZW8gcXVhbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxdWFsaXR5XG4gICAgICogQHJldHVybiB7U2V0UXVhbGl0eVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRRdWFsaXR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFF1YWxpdHkocXVhbGl0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KCdxdWFsaXR5JywgcXVhbGl0eSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIHNlZWthYmxlIHByb3BlcnR5IG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFNlZWthYmxlUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtBcnJheX0gU2Vla2FibGUgVGltZXJhbmdlcyBjb252ZXJ0ZWQgdG8gYW4gQXJyYXkuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNlZWthYmxlIHByb3BlcnR5IG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFNlZWthYmxlUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFNlZWthYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlZWthYmxlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdzZWVrYWJsZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBzZWVraW5nIHByb3BlcnR5IG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRTZWVraW5nUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgcGxheWVyIGlzIGN1cnJlbnRseSBzZWVraW5nLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IGlmIHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IHNlZWtpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRTZWVraW5nUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFNlZWtpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vla2luZygpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnc2Vla2luZycpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSB0ZXh0IHRyYWNrcyBvZiBhIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0VGV4dFRyYWNrc1Byb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7VmltZW9UZXh0VHJhY2tbXX0gVGhlIHRleHQgdHJhY2tzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdmlkZW8uXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYXJyYXkgb2YgdGhlIHRleHQgdHJhY2tzIHRoYXQgZXhpc3QgZm9yIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFRleHRUcmFja3NQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VGV4dFRyYWNrc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUZXh0VHJhY2tzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd0ZXh0VHJhY2tzJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIGVtYmVkIGNvZGUgZm9yIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFZpZGVvRW1iZWRDb2RlUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtzdHJpbmd9IFRoZSBgPGlmcmFtZT5gIGVtYmVkIGNvZGUgZm9yIHRoZSB2aWRlby5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYDxpZnJhbWU+YCBlbWJlZCBjb2RlIGZvciB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRWaWRlb0VtYmVkQ29kZVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRWaWRlb0VtYmVkQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWRlb0VtYmVkQ29kZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgndmlkZW9FbWJlZENvZGUnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgaWQgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0VmlkZW9JZFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7bnVtYmVyfSBUaGUgaWQgb2YgdGhlIHZpZGVvLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBpZCBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRWaWRlb0lkUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFZpZGVvSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmlkZW9JZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgndmlkZW9JZCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSB0aXRsZSBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRWaWRlb1RpdGxlUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSB0aXRsZSBvZiB0aGUgdmlkZW8uXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRpdGxlIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFZpZGVvVGl0bGVQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VmlkZW9UaXRsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWRlb1RpdGxlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd2aWRlb1RpdGxlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIG5hdGl2ZSB3aWR0aCBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRWaWRlb1dpZHRoUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSBuYXRpdmUgd2lkdGggb2YgdGhlIHZpZGVvLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBuYXRpdmUgd2lkdGggb2YgdGhlIGN1cnJlbnRseeKAkHBsYXlpbmcgdmlkZW8uIFRoZSB3aWR0aCBvZlxuICAgICAqIHRoZSBoaWdoZXN04oCQcmVzb2x1dGlvbiBhdmFpbGFibGUgd2lsbCBiZSB1c2VkIGJlZm9yZSBwbGF5YmFjayBiZWdpbnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRWaWRlb1dpZHRoUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFZpZGVvV2lkdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmlkZW9XaWR0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgndmlkZW9XaWR0aCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBuYXRpdmUgaGVpZ2h0IG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFZpZGVvSGVpZ2h0UHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSBuYXRpdmUgaGVpZ2h0IG9mIHRoZSB2aWRlby5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbmF0aXZlIGhlaWdodCBvZiB0aGUgY3VycmVudGx54oCQcGxheWluZyB2aWRlby4gVGhlIGhlaWdodCBvZlxuICAgICAqIHRoZSBoaWdoZXN04oCQcmVzb2x1dGlvbiBhdmFpbGFibGUgd2lsbCBiZSB1c2VkIGJlZm9yZSBwbGF5YmFjayBiZWdpbnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRWaWRlb0hlaWdodFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRWaWRlb0hlaWdodFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWRlb0hlaWdodCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgndmlkZW9IZWlnaHQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgdmltZW8uY29tIHVybCBmb3IgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0VmlkZW9VcmxQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIHZpbWVvLmNvbSB1cmwgZm9yIHRoZSB2aWRlby5cbiAgICAgKiBAcmVqZWN0IHtQcml2YWN5RXJyb3J9IFRoZSB1cmwgaXNu4oCZdCBhdmFpbGFibGUgYmVjYXVzZSBvZiB0aGUgdmlkZW/igJlzIHByaXZhY3kgc2V0dGluZy5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmltZW8uY29tIHVybCBmb3IgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0VmlkZW9VcmxQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VmlkZW9VcmxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmlkZW9VcmwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3ZpZGVvVXJsJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIHZvbHVtZSBsZXZlbCBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0Vm9sdW1lUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSB2b2x1bWUgbGV2ZWwgb2YgdGhlIHBsYXllciBvbiBhIHNjYWxlIGZyb20gMCB0byAxLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHZvbHVtZSBsZXZlbCBvZiB0aGUgcGxheWVyIG9uIGEgc2NhbGUgZnJvbSBgMGAgdG8gYDFgLlxuICAgICAqXG4gICAgICogTW9zdCBtb2JpbGUgZGV2aWNlcyBkbyBub3Qgc3VwcG9ydCBhbiBpbmRlcGVuZGVudCB2b2x1bWUgZnJvbSB0aGVcbiAgICAgKiBzeXN0ZW0gdm9sdW1lLiBJbiB0aG9zZSBjYXNlcywgdGhpcyBtZXRob2Qgd2lsbCBhbHdheXMgcmV0dXJuIGAxYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFZvbHVtZVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRWb2x1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Vm9sdW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd2b2x1bWUnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHNldCB0aGUgdm9sdW1lIGxldmVsIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBTZXRWb2x1bWVQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIHZvbHVtZSB3YXMgc2V0LlxuICAgICAqIEByZWplY3Qge1JhbmdlRXJyb3J9IFRoZSB2b2x1bWUgd2FzIGxlc3MgdGhhbiAwIG9yIGdyZWF0ZXIgdGhhbiAxLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB2b2x1bWUgb2YgdGhlIHBsYXllciBvbiBhIHNjYWxlIGZyb20gYDBgIHRvIGAxYC4gV2hlbiBzZXRcbiAgICAgKiB2aWEgdGhlIEFQSSwgdGhlIHZvbHVtZSBsZXZlbCB3aWxsIG5vdCBiZSBzeW5jaHJvbml6ZWQgdG8gb3RoZXJcbiAgICAgKiBwbGF5ZXJzIG9yIHN0b3JlZCBhcyB0aGUgdmlld2Vy4oCZcyBwcmVmZXJlbmNlLlxuICAgICAqXG4gICAgICogTW9zdCBtb2JpbGUgZGV2aWNlcyBkbyBub3Qgc3VwcG9ydCBzZXR0aW5nIHRoZSB2b2x1bWUuIEFuIGVycm9yIHdpbGxcbiAgICAgKiAqbm90KiBiZSB0cmlnZ2VyZWQgaW4gdGhhdCBzaXR1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdm9sdW1lXG4gICAgICogQHJldHVybiB7U2V0Vm9sdW1lUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUodm9sdW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoJ3ZvbHVtZScsIHZvbHVtZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBsYXllcjtcbn0oKTsgLy8gU2V0dXAgZW1iZWQgb25seSBpZiB0aGlzIGlzIG5vdCBhIG5vZGUgZW52aXJvbm1lbnRcblxuXG5pZiAoIWlzTm9kZSkge1xuICBzY3JlZW5mdWxsID0gaW5pdGlhbGl6ZVNjcmVlbmZ1bGwoKTtcbiAgaW5pdGlhbGl6ZUVtYmVkcygpO1xuICByZXNpemVFbWJlZHMoKTtcbiAgaW5pdEFwcGVuZFZpZGVvTWV0YWRhdGEoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxheWVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUGxheWVyIGZyb20gJ0B2aW1lby9wbGF5ZXInO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG5cbiAgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbnZhciBldmVudE5hbWVzID0ge1xuICBwbGF5OiAnb25QbGF5JyxcbiAgcGF1c2U6ICdvblBhdXNlJyxcbiAgZW5kZWQ6ICdvbkVuZCcsXG4gIHRpbWV1cGRhdGU6ICdvblRpbWVVcGRhdGUnLFxuICBwcm9ncmVzczogJ29uUHJvZ3Jlc3MnLFxuICBzZWVrZWQ6ICdvblNlZWtlZCcsXG4gIHRleHR0cmFja2NoYW5nZTogJ29uVGV4dFRyYWNrQ2hhbmdlJyxcbiAgY3VlY2hhbmdlOiAnb25DdWVDaGFuZ2UnLFxuICBjdWVwb2ludDogJ29uQ3VlUG9pbnQnLFxuICB2b2x1bWVjaGFuZ2U6ICdvblZvbHVtZUNoYW5nZScsXG4gIHBsYXliYWNrcmF0ZWNoYW5nZTogJ29uUGxheWJhY2tSYXRlQ2hhbmdlJyxcbiAgZXJyb3I6ICdvbkVycm9yJyxcbiAgbG9hZGVkOiAnb25Mb2FkZWQnXG59O1xuXG52YXIgVmltZW8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVmltZW8sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFZpbWVvKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMucmVmQ29udGFpbmVyID0gX3RoaXMucmVmQ29udGFpbmVyLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBWaW1lby5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5jcmVhdGVQbGF5ZXIoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Rlc3RydWN0dXJpbmctYXNzaWdubWVudFxuICAgIHZhciBjaGFuZ2VzID0gT2JqZWN0LmtleXModGhpcy5wcm9wcykuZmlsdGVyKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLnByb3BzW25hbWVdICE9PSBwcmV2UHJvcHNbbmFtZV07XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGVQcm9wcyhjaGFuZ2VzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnBsYXllci5kZXN0cm95KCk7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldEluaXRpYWxPcHRpb25zID0gZnVuY3Rpb24gZ2V0SW5pdGlhbE9wdGlvbnMoKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QvZGVzdHJ1Y3R1cmluZy1hc3NpZ25tZW50ICovXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB0aGlzLnByb3BzLnZpZGVvLFxuICAgICAgd2lkdGg6IHRoaXMucHJvcHMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMucHJvcHMuaGVpZ2h0LFxuICAgICAgYXV0b3BhdXNlOiB0aGlzLnByb3BzLmF1dG9wYXVzZSxcbiAgICAgIGF1dG9wbGF5OiB0aGlzLnByb3BzLmF1dG9wbGF5LFxuICAgICAgYnlsaW5lOiB0aGlzLnByb3BzLnNob3dCeWxpbmUsXG4gICAgICBjb2xvcjogdGhpcy5wcm9wcy5jb2xvcixcbiAgICAgIGNvbnRyb2xzOiB0aGlzLnByb3BzLmNvbnRyb2xzLFxuICAgICAgbG9vcDogdGhpcy5wcm9wcy5sb29wLFxuICAgICAgcG9ydHJhaXQ6IHRoaXMucHJvcHMuc2hvd1BvcnRyYWl0LFxuICAgICAgdGl0bGU6IHRoaXMucHJvcHMuc2hvd1RpdGxlLFxuICAgICAgbXV0ZWQ6IHRoaXMucHJvcHMubXV0ZWQsXG4gICAgICBiYWNrZ3JvdW5kOiB0aGlzLnByb3BzLmJhY2tncm91bmQsXG4gICAgICByZXNwb25zaXZlOiB0aGlzLnByb3BzLnJlc3BvbnNpdmUsXG4gICAgICBkbnQ6IHRoaXMucHJvcHMuZG50LFxuICAgICAgc3BlZWQ6IHRoaXMucHJvcHMuc3BlZWQsXG4gICAgICBrZXlib2FyZDogdGhpcy5wcm9wcy5rZXlib2FyZCxcbiAgICAgIHBpcDogdGhpcy5wcm9wcy5waXAsXG4gICAgICBwbGF5c2lubGluZTogdGhpcy5wcm9wcy5wbGF5c0lubGluZSxcbiAgICAgIHF1YWxpdHk6IHRoaXMucHJvcHMucXVhbGl0eSxcbiAgICAgIHRleHR0cmFjazogdGhpcy5wcm9wcy50ZXh0VHJhY2ssXG4gICAgICB0cmFuc3BhcmVudDogdGhpcy5wcm9wcy50cmFuc3BhcmVudFxuICAgIH07XG4gICAgLyogZXNsaW50LWVuYWJsZSByZWFjdC9kZXN0cnVjdHVyaW5nLWFzc2lnbm1lbnQgKi9cbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlUHJvcHMgPSBmdW5jdGlvbiB1cGRhdGVQcm9wcyhwcm9wTmFtZXMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBwbGF5ZXIgPSB0aGlzLnBsYXllcjtcbiAgICBwcm9wTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Rlc3RydWN0dXJpbmctYXNzaWdubWVudFxuICAgICAgdmFyIHZhbHVlID0gX3RoaXMzLnByb3BzW25hbWVdO1xuXG4gICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgY2FzZSAnYXV0b3BhdXNlJzpcbiAgICAgICAgICBwbGF5ZXIuc2V0QXV0b3BhdXNlKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjb2xvcic6XG4gICAgICAgICAgcGxheWVyLnNldENvbG9yKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdsb29wJzpcbiAgICAgICAgICBwbGF5ZXIuc2V0TG9vcCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAndm9sdW1lJzpcbiAgICAgICAgICBwbGF5ZXIuc2V0Vm9sdW1lKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdwYXVzZWQnOlxuICAgICAgICAgIHBsYXllci5nZXRQYXVzZWQoKS50aGVuKGZ1bmN0aW9uIChwYXVzZWQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiAhcGF1c2VkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwbGF5ZXIucGF1c2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF2YWx1ZSAmJiBwYXVzZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBsYXllci5wbGF5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3dpZHRoJzpcbiAgICAgICAgY2FzZSAnaGVpZ2h0JzpcbiAgICAgICAgICBwbGF5ZXIuZWxlbWVudFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IF90aGlzMy5wcm9wcy5zdGFydDtcbiAgICAgICAgICAgIHZhciBsb2FkZWQgPSBwbGF5ZXIubG9hZFZpZGVvKHZhbHVlKTsgLy8gU2V0IHRoZSBzdGFydCB0aW1lIG9ubHkgd2hlbiBsb2FkaW5nIGEgbmV3IHZpZGVvLlxuICAgICAgICAgICAgLy8gSXQgc2VlbXMgbGlrZSB0aGlzIGhhcyB0byBiZSBkb25lIGFmdGVyIHRoZSB2aWRlbyBoYXMgbG9hZGVkLCBlbHNlIGl0IGp1c3Qgc3RhcnRzIGF0XG4gICAgICAgICAgICAvLyB0aGUgYmVnaW5uaW5nIVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICBsb2FkZWQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldEN1cnJlbnRUaW1lKHN0YXJ0KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsYXllci51bmxvYWQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVQbGF5ZXIgPSBmdW5jdGlvbiBjcmVhdGVQbGF5ZXIoKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydCA9IF90aGlzJHByb3BzLnN0YXJ0LFxuICAgICAgICB2b2x1bWUgPSBfdGhpcyRwcm9wcy52b2x1bWU7XG4gICAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKHRoaXMuY29udGFpbmVyLCB0aGlzLmdldEluaXRpYWxPcHRpb25zKCkpO1xuICAgIE9iamVjdC5rZXlzKGV2ZW50TmFtZXMpLmZvckVhY2goZnVuY3Rpb24gKGRtTmFtZSkge1xuICAgICAgdmFyIHJlYWN0TmFtZSA9IGV2ZW50TmFtZXNbZG1OYW1lXTtcblxuICAgICAgX3RoaXM0LnBsYXllci5vbihkbU5hbWUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGVzdHJ1Y3R1cmluZy1hc3NpZ25tZW50XG4gICAgICAgIHZhciBoYW5kbGVyID0gX3RoaXM0LnByb3BzW3JlYWN0TmFtZV07XG5cbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBoYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uRXJyb3IgPSBfdGhpcyRwcm9wczIub25FcnJvcixcbiAgICAgICAgb25SZWFkeSA9IF90aGlzJHByb3BzMi5vblJlYWR5O1xuICAgIHRoaXMucGxheWVyLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAob25SZWFkeSkge1xuICAgICAgICBvblJlYWR5KF90aGlzNC5wbGF5ZXIpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLnBsYXllci5zZXRDdXJyZW50VGltZShzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2b2x1bWUgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLnVwZGF0ZVByb3BzKFsndm9sdW1lJ10pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVmQ29udGFpbmVyID0gZnVuY3Rpb24gcmVmQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHMzLmlkLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzMy5zdHlsZTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgaWQ6IGlkLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICByZWY6IHRoaXMucmVmQ29udGFpbmVyXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFZpbWVvO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBWaW1lby5wcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogQSBWaW1lbyB2aWRlbyBJRCBvciBVUkwuXG4gICAgICovXG4gICAgdmlkZW86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAgIC8qKlxuICAgICAqIERPTSBJRCBmb3IgdGhlIHBsYXllciBlbGVtZW50LlxuICAgICAqL1xuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogQ1NTIGNsYXNzTmFtZSBmb3IgdGhlIHBsYXllciBlbGVtZW50LlxuICAgICAqL1xuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIElubGluZSBzdHlsZSBmb3IgY29udGFpbmVyIGVsZW1lbnQuXG4gICAgICovXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9mb3JiaWQtcHJvcC10eXBlc1xuXG4gICAgLyoqXG4gICAgICogV2lkdGggb2YgdGhlIHBsYXllciBlbGVtZW50LlxuICAgICAqL1xuICAgIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgICAvKipcbiAgICAgKiBIZWlnaHQgb2YgdGhlIHBsYXllciBlbGVtZW50LlxuICAgICAqL1xuICAgIGhlaWdodDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gICAgLyoqXG4gICAgICogUGF1c2UgdGhlIHZpZGVvLlxuICAgICAqL1xuICAgIHBhdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby11bnVzZWQtcHJvcC10eXBlc1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBsYXliYWNrIHZvbHVtZSBhcyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICovXG4gICAgdm9sdW1lOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgaW4gc2Vjb25kcyBhdCB3aGljaCB0byBzdGFydCBwbGF5aW5nIHRoZSB2aWRlby5cbiAgICAgKi9cbiAgICBzdGFydDogUHJvcFR5cGVzLm51bWJlcixcbiAgICAvLyBQbGF5ZXIgcGFyYW1ldGVyc1xuXG4gICAgLyoqXG4gICAgICogUGF1c2UgdGhpcyB2aWRlbyBhdXRvbWF0aWNhbGx5IHdoZW4gYW5vdGhlciBvbmUgcGxheXMuXG4gICAgICovXG4gICAgYXV0b3BhdXNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIEF1dG9tYXRpY2FsbHkgc3RhcnQgcGxheWJhY2sgb2YgdGhlIHZpZGVvLiBOb3RlIHRoYXQgdGhpcyB3b27igJl0IHdvcmsgb25cbiAgICAgKiBzb21lIGRldmljZXMuXG4gICAgICovXG4gICAgYXV0b3BsYXk6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgYnlsaW5lIG9uIHRoZSB2aWRlby5cbiAgICAgKi9cbiAgICBzaG93QnlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIGNvbG9yIG9mIHRoZSB2aWRlbyBjb250cm9scy4gQ29sb3JzIG1heSBiZSBvdmVycmlkZGVuIGJ5IHRoZVxuICAgICAqIGVtYmVkIHNldHRpbmdzIG9mIHRoZSB2aWRlby4gXyhFeDogXCJlZjJmOWZcIilfXG4gICAgICovXG4gICAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBCbG9ja3MgdGhlIHBsYXllciBmcm9tIHRyYWNraW5nIGFueSBzZXNzaW9uIGRhdGEsIGluY2x1ZGluZyBhbGwgY29va2llcyBhbmQgYW5hbHl0aWNzLlxuICAgICAqL1xuICAgIGRudDogUHJvcFR5cGVzLmJvb2wsXG4gICAgLy8gUGxheWVyIGNvbnRyb2xzXG5cbiAgICAvKipcbiAgICAgKiBIaWRlIGFsbCBlbGVtZW50cyBpbiB0aGUgcGxheWVyIChwbGF5IGJhciwgc2hhcmluZyBidXR0b25zLCBldGMpLlxuICAgICAqL1xuICAgIGNvbnRyb2xzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFBsYXkgdGhlIHZpZGVvIGFnYWluIHdoZW4gaXQgcmVhY2hlcyB0aGUgZW5kLlxuICAgICAqL1xuICAgIGxvb3A6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgcG9ydHJhaXQgb24gdGhlIHZpZGVvLlxuICAgICAqL1xuICAgIHNob3dQb3J0cmFpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSB0aXRsZSBvbiB0aGUgdmlkZW8uXG4gICAgICovXG4gICAgc2hvd1RpdGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBpbiBhIG11dGVkIHN0YXRlIHRvIGhlbHAgd2l0aCBhdXRvcGxheVxuICAgICAqL1xuICAgIG11dGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBpbiBhIGJhY2tncm91bmQgc3RhdGUgd2l0aCBubyBjb250cm9scyB0byBoZWxwIHdpdGggYXV0b3BsYXlcbiAgICAgKi9cbiAgICBiYWNrZ3JvdW5kOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSByZXNwb25zaXZlIG1vZGUgYW5kIHJlc2l6ZSBhY2NvcmRpbmcgdG8gcGFyZW50IGVsZW1lbnQgKGV4cGVyaW1lbnRhbClcbiAgICAgKi9cbiAgICByZXNwb25zaXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSBwbGF5YmFjayByYXRlIGNvbnRyb2xzIChyZXF1aXJlcyBWaW1lbyBQUk8gLyBCdXNpbmVzcyBhY2NvdW50KVxuICAgICAqL1xuICAgIHNwZWVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBmb3Iga2V5Ym9hcmQgaW5wdXQgdG8gdHJpZ2dlciBwbGF5ZXIgZXZlbnRzLlxuICAgICAqL1xuICAgIGtleWJvYXJkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIHBpY3R1cmUtaW4tcGljdHVyZSBidXR0b24gaW4gdGhlIGNvbnRyb2xiYXJcbiAgICAgKiBhbmQgZW5hYmxlIHRoZSBwaWN0dXJlLWluLXBpY3R1cmUgQVBJLlxuICAgICAqL1xuICAgIHBpcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBQbGF5IHZpZGVvIGlubGluZSBvbiBtb2JpbGUgZGV2aWNlcywgdG8gYXV0b21hdGljYWxseVxuICAgICAqIGdvIGZ1bGxzY3JlZW4gb24gcGxheWJhY2sgc2V0IHRoaXMgcGFyYW1ldGVyIHRvIGZhbHNlLlxuICAgICAqL1xuICAgIHBsYXlzSW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFZpbWVvIFBsdXMsIFBSTywgYW5kIEJ1c2luZXNzIG1lbWJlcnMgY2FuIGRlZmF1bHRcbiAgICAgKiBhbiBlbWJlZGRlZCB2aWRlbyB0byBhIHNwZWNpZmljIHF1YWxpdHkgb24gZGVza3RvcC5cbiAgICAgKi9cbiAgICBxdWFsaXR5OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogVHVybiBjYXB0aW9ucy9zdWJ0aXRsZXMgb24gZm9yIGEgc3BlY2lmaWMgbGFuZ3VhZ2UgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICB0ZXh0VHJhY2s6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzcG9uc2l2ZSBwbGF5ZXIgYW5kIHRyYW5zcGFyZW50IGJhY2tncm91bmQgYXJlIGVuYWJsZWRcbiAgICAgKiBieSBkZWZhdWx0LCB0byBkaXNhYmxlIHNldCB0aGlzIHBhcmFtZXRlciB0byBmYWxzZS5cbiAgICAgKi9cbiAgICB0cmFuc3BhcmVudDogUHJvcFR5cGVzLmJvb2wsXG4gICAgLy8gRXZlbnRzXG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby11bnVzZWQtcHJvcC10eXBlcyAqL1xuXG4gICAgLyoqXG4gICAgICogU2VudCB3aGVuIHRoZSBWaW1lbyBwbGF5ZXIgQVBJIGhhcyBsb2FkZWQuXG4gICAgICogUmVjZWl2ZXMgdGhlIFZpbWVvIHBsYXllciBvYmplY3QgaW4gdGhlIGZpcnN0IHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBvblJlYWR5OiBQcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIFNlbnQgd2hlbiB0aGUgcGxheWVyIHRyaWdnZXJzIGFuIGVycm9yLlxuICAgICAqL1xuICAgIG9uRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhlIHZpZGVvIHBsYXlzLlxuICAgICAqL1xuICAgIG9uUGxheTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgdmlkZW8gcGF1c2VzLlxuICAgICAqL1xuICAgIG9uUGF1c2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFueSB0aW1lIHRoZSB2aWRlbyBwbGF5YmFjayByZWFjaGVzIHRoZSBlbmQuXG4gICAgICogTm90ZTogd2hlbiBgbG9vcGAgaXMgdHVybmVkIG9uLCB0aGUgZW5kZWQgZXZlbnQgd2lsbCBub3QgZmlyZS5cbiAgICAgKi9cbiAgICBvbkVuZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYXMgdGhlIGBjdXJyZW50VGltZWAgb2YgdGhlIHZpZGVvIHVwZGF0ZXMuIEl0IGdlbmVyYWxseSBmaXJlc1xuICAgICAqIGV2ZXJ5IDI1MG1zLCBidXQgaXQgbWF5IHZhcnkgZGVwZW5kaW5nIG9uIHRoZSBicm93c2VyLlxuICAgICAqL1xuICAgIG9uVGltZVVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYXMgdGhlIHZpZGVvIGlzIGxvYWRlZC4gUmVwb3J0cyBiYWNrIHRoZSBhbW91bnQgb2YgdGhlIHZpZGVvXG4gICAgICogdGhhdCBoYXMgYmVlbiBidWZmZXJlZC5cbiAgICAgKi9cbiAgICBvblByb2dyZXNzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB3aGVuIHRoZSBwbGF5ZXIgc2Vla3MgdG8gYSBzcGVjaWZpYyB0aW1lLiBBbiBgb25UaW1lVXBkYXRlYFxuICAgICAqIGV2ZW50IHdpbGwgYWxzbyBiZSBmaXJlZCBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAqL1xuICAgIG9uU2Vla2VkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB3aGVuIHRoZSBhY3RpdmUgdGV4dCB0cmFjayAoY2FwdGlvbnMvc3VidGl0bGVzKSBjaGFuZ2VzLiBUaGVcbiAgICAgKiB2YWx1ZXMgd2lsbCBiZSBgbnVsbGAgaWYgdGV4dCB0cmFja3MgYXJlIHR1cm5lZCBvZmYuXG4gICAgICovXG4gICAgb25UZXh0VHJhY2tDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhlIGFjdGl2ZSBjdWUgZm9yIHRoZSBjdXJyZW50IHRleHQgdHJhY2sgY2hhbmdlcy4gSXQgYWxzb1xuICAgICAqIGZpcmVzIHdoZW4gdGhlIGFjdGl2ZSB0ZXh0IHRyYWNrIGNoYW5nZXMuIFRoZXJlIG1heSBiZSBtdWx0aXBsZSBjdWVzXG4gICAgICogYWN0aXZlLlxuICAgICAqL1xuICAgIG9uQ3VlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB3aGVuIHRoZSBjdXJyZW50IHRpbWUgaGl0cyBhIHJlZ2lzdGVyZWQgY3VlIHBvaW50LlxuICAgICAqL1xuICAgIG9uQ3VlUG9pbnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhlIHZvbHVtZSBpbiB0aGUgcGxheWVyIGNoYW5nZXMuIFNvbWUgZGV2aWNlcyBkbyBub3RcbiAgICAgKiBzdXBwb3J0IHNldHRpbmcgdGhlIHZvbHVtZSBvZiB0aGUgdmlkZW8gaW5kZXBlbmRlbnRseSBmcm9tIHRoZSBzeXN0ZW1cbiAgICAgKiB2b2x1bWUsIHNvIHRoaXMgZXZlbnQgd2lsbCBuZXZlciBmaXJlIG9uIHRob3NlIGRldmljZXMuXG4gICAgICovXG4gICAgb25Wb2x1bWVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhlIHBsYXliYWNrIHJhdGUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBvblBsYXliYWNrUmF0ZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhIG5ldyB2aWRlbyBpcyBsb2FkZWQgaW4gdGhlIHBsYXllci5cbiAgICAgKi9cbiAgICBvbkxvYWRlZDogUHJvcFR5cGVzLmZ1bmNcbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzICovXG5cbiAgfTtcbn1cblxuVmltZW8uZGVmYXVsdFByb3BzID0ge1xuICBhdXRvcGF1c2U6IHRydWUsXG4gIGF1dG9wbGF5OiBmYWxzZSxcbiAgc2hvd0J5bGluZTogdHJ1ZSxcbiAgY29udHJvbHM6IHRydWUsXG4gIGxvb3A6IGZhbHNlLFxuICBzaG93UG9ydHJhaXQ6IHRydWUsXG4gIHNob3dUaXRsZTogdHJ1ZSxcbiAgbXV0ZWQ6IGZhbHNlLFxuICBiYWNrZ3JvdW5kOiBmYWxzZSxcbiAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gIGRudDogZmFsc2UsXG4gIHNwZWVkOiBmYWxzZSxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIHBpcDogZmFsc2UsXG4gIHBsYXlzSW5saW5lOiB0cnVlLFxuICB0cmFuc3BhcmVudDogdHJ1ZVxufTtcblxuZXhwb3J0IHsgVmltZW8gYXMgZGVmYXVsdCB9O1xuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGlmIChhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0aWYgKGFyZy50b1N0cmluZyA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykge1xuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChhcmcudG9TdHJpbmcoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciB0cmltbWVkRW5kSW5kZXggPSByZXF1aXJlKCcuL190cmltbWVkRW5kSW5kZXgnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbVN0YXJ0ID0gL15cXHMrLztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50cmltYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRyaW0oc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdcbiAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKVxuICAgIDogc3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUcmltO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbnZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICByZXR1cm4gaW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJpbW1lZEVuZEluZGV4O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIG5vdyA9IHJlcXVpcmUoJy4vbm93JyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmdcbiAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgIDogdGltZVdhaXRpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCJ2YXIgZGVib3VuY2UgPSByZXF1aXJlKCcuL2RlYm91bmNlJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG4iLCJ2YXIgYmFzZVRyaW0gPSByZXF1aXJlKCcuL19iYXNlVHJpbScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsImltcG9ydCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMnO1xuXG5mdW5jdGlvbiB1c2VJc01vdW50ZWQoKSB7XG4gICAgY29uc3QgaXNNb3VudGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGlzTW91bnRlZDtcbn1cblxuZXhwb3J0IHsgdXNlSXNNb3VudGVkIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VJZCwgdXNlUmVmLCB1c2VJbnNlcnRpb25FZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogTWVhc3VyZW1lbnQgZnVuY3Rpb25hbGl0eSBoYXMgdG8gYmUgd2l0aGluIGEgc2VwYXJhdGUgY29tcG9uZW50XG4gKiB0byBsZXZlcmFnZSBzbmFwc2hvdCBsaWZlY3ljbGUuXG4gKi9cbmNsYXNzIFBvcENoaWxkTWVhc3VyZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnByb3BzLmNoaWxkUmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChlbGVtZW50ICYmIHByZXZQcm9wcy5pc1ByZXNlbnQgJiYgIXRoaXMucHJvcHMuaXNQcmVzZW50KSB7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5wcm9wcy5zaXplUmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICBzaXplLmhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDA7XG4gICAgICAgICAgICBzaXplLndpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAwO1xuICAgICAgICAgICAgc2l6ZS50b3AgPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgICAgIHNpemUubGVmdCA9IGVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVxdWlyZWQgd2l0aCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB0byBzdG9wIFJlYWN0IGNvbXBsYWluaW5nLlxuICAgICAqL1xuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHsgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxufVxuZnVuY3Rpb24gUG9wQ2hpbGQoeyBjaGlsZHJlbiwgaXNQcmVzZW50IH0pIHtcbiAgICBjb25zdCBpZCA9IHVzZUlkKCk7XG4gICAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IHNpemUgPSB1c2VSZWYoe1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogV2UgY3JlYXRlIGFuZCBpbmplY3QgYSBzdHlsZSBibG9jayBzbyB3ZSBjYW4gYXBwbHkgdGhpcyBleHBsaWNpdFxuICAgICAqIHNpemluZyBpbiBhIG5vbi1kZXN0cnVjdGl2ZSBtYW5uZXIgYnkganVzdCBkZWxldGluZyB0aGUgc3R5bGUgYmxvY2suXG4gICAgICpcbiAgICAgKiBXZSBjYW4ndCBhcHBseSBzaXplIHZpYSByZW5kZXIgYXMgdGhlIG1lYXN1cmVtZW50IGhhcHBlbnNcbiAgICAgKiBpbiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAocG9zdC1yZW5kZXIpLCBsaWtld2lzZSBpZiB3ZSBhcHBseSB0aGVcbiAgICAgKiBzdHlsZXMgZGlyZWN0bHkgb24gdGhlIERPTSBub2RlLCB3ZSBtaWdodCBiZSBvdmVyd3JpdGluZ1xuICAgICAqIHN0eWxlcyBzZXQgdmlhIHRoZSBzdHlsZSBwcm9wLlxuICAgICAqL1xuICAgIHVzZUluc2VydGlvbkVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgdG9wLCBsZWZ0IH0gPSBzaXplLmN1cnJlbnQ7XG4gICAgICAgIGlmIChpc1ByZXNlbnQgfHwgIXJlZi5jdXJyZW50IHx8ICF3aWR0aCB8fCAhaGVpZ2h0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByZWYuY3VycmVudC5kYXRhc2V0Lm1vdGlvblBvcElkID0gaWQ7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgICAgaWYgKHN0eWxlLnNoZWV0KSB7XG4gICAgICAgICAgICBzdHlsZS5zaGVldC5pbnNlcnRSdWxlKGBcbiAgICAgICAgICBbZGF0YS1tb3Rpb24tcG9wLWlkPVwiJHtpZH1cIl0ge1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICB3aWR0aDogJHt3aWR0aH1weCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgaGVpZ2h0OiAke2hlaWdodH1weCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgdG9wOiAke3RvcH1weCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgbGVmdDogJHtsZWZ0fXB4ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgfVxuICAgICAgICBgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgICAgIH07XG4gICAgfSwgW2lzUHJlc2VudF0pO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQb3BDaGlsZE1lYXN1cmUsIHsgaXNQcmVzZW50OiBpc1ByZXNlbnQsIGNoaWxkUmVmOiByZWYsIHNpemVSZWY6IHNpemUgfSwgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7IHJlZiB9KSkpO1xufVxuXG5leHBvcnQgeyBQb3BDaGlsZCB9O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSWQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuLi8uLi91dGlscy91c2UtY29uc3RhbnQubWpzJztcbmltcG9ydCB7IFBvcENoaWxkIH0gZnJvbSAnLi9Qb3BDaGlsZC5tanMnO1xuXG5jb25zdCBQcmVzZW5jZUNoaWxkID0gKHsgY2hpbGRyZW4sIGluaXRpYWwsIGlzUHJlc2VudCwgb25FeGl0Q29tcGxldGUsIGN1c3RvbSwgcHJlc2VuY2VBZmZlY3RzTGF5b3V0LCBtb2RlLCB9KSA9PiB7XG4gICAgY29uc3QgcHJlc2VuY2VDaGlsZHJlbiA9IHVzZUNvbnN0YW50KG5ld0NoaWxkcmVuTWFwKTtcbiAgICBjb25zdCBpZCA9IHVzZUlkKCk7XG4gICAgY29uc3QgY29udGV4dCA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICAgICAgaWQsXG4gICAgICAgIGluaXRpYWwsXG4gICAgICAgIGlzUHJlc2VudCxcbiAgICAgICAgY3VzdG9tLFxuICAgICAgICBvbkV4aXRDb21wbGV0ZTogKGNoaWxkSWQpID0+IHtcbiAgICAgICAgICAgIHByZXNlbmNlQ2hpbGRyZW4uc2V0KGNoaWxkSWQsIHRydWUpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpc0NvbXBsZXRlIG9mIHByZXNlbmNlQ2hpbGRyZW4udmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQ29tcGxldGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gY2FuIHN0b3Agc2VhcmNoaW5nIHdoZW4gYW55IGlzIGluY29tcGxldGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uRXhpdENvbXBsZXRlICYmIG9uRXhpdENvbXBsZXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lzdGVyOiAoY2hpbGRJZCkgPT4ge1xuICAgICAgICAgICAgcHJlc2VuY2VDaGlsZHJlbi5zZXQoY2hpbGRJZCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHByZXNlbmNlQ2hpbGRyZW4uZGVsZXRlKGNoaWxkSWQpO1xuICAgICAgICB9LFxuICAgIH0pLCBcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcHJlc2VuY2Ugb2YgYSBjaGlsZCBhZmZlY3RzIHRoZSBsYXlvdXQgb2YgdGhlIGNvbXBvbmVudHMgYXJvdW5kIGl0LFxuICAgICAqIHdlIHdhbnQgdG8gbWFrZSBhIG5ldyBjb250ZXh0IHZhbHVlIHRvIGVuc3VyZSB0aGV5IGdldCByZS1yZW5kZXJlZFxuICAgICAqIHNvIHRoZXkgY2FuIGRldGVjdCB0aGF0IGxheW91dCBjaGFuZ2UuXG4gICAgICovXG4gICAgcHJlc2VuY2VBZmZlY3RzTGF5b3V0ID8gdW5kZWZpbmVkIDogW2lzUHJlc2VudF0pO1xuICAgIHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBwcmVzZW5jZUNoaWxkcmVuLmZvckVhY2goKF8sIGtleSkgPT4gcHJlc2VuY2VDaGlsZHJlbi5zZXQoa2V5LCBmYWxzZSkpO1xuICAgIH0sIFtpc1ByZXNlbnRdKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGVyZSdzIG5vIGBtb3Rpb25gIGNvbXBvbmVudHMgdG8gZmlyZSBleGl0IGFuaW1hdGlvbnMsIHdlIHdhbnQgdG8gcmVtb3ZlIHRoaXNcbiAgICAgKiBjb21wb25lbnQgaW1tZWRpYXRlbHkuXG4gICAgICovXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgIWlzUHJlc2VudCAmJlxuICAgICAgICAgICAgIXByZXNlbmNlQ2hpbGRyZW4uc2l6ZSAmJlxuICAgICAgICAgICAgb25FeGl0Q29tcGxldGUgJiZcbiAgICAgICAgICAgIG9uRXhpdENvbXBsZXRlKCk7XG4gICAgfSwgW2lzUHJlc2VudF0pO1xuICAgIGlmIChtb2RlID09PSBcInBvcExheW91dFwiKSB7XG4gICAgICAgIGNoaWxkcmVuID0gUmVhY3QuY3JlYXRlRWxlbWVudChQb3BDaGlsZCwgeyBpc1ByZXNlbnQ6IGlzUHJlc2VudCB9LCBjaGlsZHJlbik7XG4gICAgfVxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQcmVzZW5jZUNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IGNvbnRleHQgfSwgY2hpbGRyZW4pKTtcbn07XG5mdW5jdGlvbiBuZXdDaGlsZHJlbk1hcCgpIHtcbiAgICByZXR1cm4gbmV3IE1hcCgpO1xufVxuXG5leHBvcnQgeyBQcmVzZW5jZUNoaWxkIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VSZWYsIGNsb25lRWxlbWVudCwgQ2hpbGRyZW4sIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJvY2Vzcy5tanMnO1xuaW1wb3J0IHsgdXNlRm9yY2VVcGRhdGUgfSBmcm9tICcuLi8uLi91dGlscy91c2UtZm9yY2UtdXBkYXRlLm1qcyc7XG5pbXBvcnQgeyB1c2VJc01vdW50ZWQgfSBmcm9tICcuLi8uLi91dGlscy91c2UtaXMtbW91bnRlZC5tanMnO1xuaW1wb3J0IHsgUHJlc2VuY2VDaGlsZCB9IGZyb20gJy4vUHJlc2VuY2VDaGlsZC5tanMnO1xuaW1wb3J0IHsgTGF5b3V0R3JvdXBDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9MYXlvdXRHcm91cENvbnRleHQubWpzJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi8uLi91dGlscy91c2UtaXNvbW9ycGhpYy1lZmZlY3QubWpzJztcbmltcG9ydCB7IHVzZVVubW91bnRFZmZlY3QgfSBmcm9tICcuLi8uLi91dGlscy91c2UtdW5tb3VudC1lZmZlY3QubWpzJztcbmltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Fybi1vbmNlLm1qcyc7XG5cbmNvbnN0IGdldENoaWxkS2V5ID0gKGNoaWxkKSA9PiBjaGlsZC5rZXkgfHwgXCJcIjtcbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkTG9va3VwKGNoaWxkcmVuLCBhbGxDaGlsZHJlbikge1xuICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldENoaWxkS2V5KGNoaWxkKTtcbiAgICAgICAgYWxsQ2hpbGRyZW4uc2V0KGtleSwgY2hpbGQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gb25seUVsZW1lbnRzKGNoaWxkcmVuKSB7XG4gICAgY29uc3QgZmlsdGVyZWQgPSBbXTtcbiAgICAvLyBXZSB1c2UgZm9yRWFjaCBoZXJlIGluc3RlYWQgb2YgbWFwIGFzIG1hcCBtdXRhdGVzIHRoZSBjb21wb25lbnQga2V5IGJ5IHByZXByZW5kaW5nIGAuJGBcbiAgICBDaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoY2hpbGQpID0+IHtcbiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSlcbiAgICAgICAgICAgIGZpbHRlcmVkLnB1c2goY2hpbGQpO1xuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXJlZDtcbn1cbi8qKlxuICogYEFuaW1hdGVQcmVzZW5jZWAgZW5hYmxlcyB0aGUgYW5pbWF0aW9uIG9mIGNvbXBvbmVudHMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSB0cmVlLlxuICpcbiAqIFdoZW4gYWRkaW5nL3JlbW92aW5nIG1vcmUgdGhhbiBhIHNpbmdsZSBjaGlsZCwgZXZlcnkgY2hpbGQgKiptdXN0KiogYmUgZ2l2ZW4gYSB1bmlxdWUgYGtleWAgcHJvcC5cbiAqXG4gKiBBbnkgYG1vdGlvbmAgY29tcG9uZW50cyB0aGF0IGhhdmUgYW4gYGV4aXRgIHByb3BlcnR5IGRlZmluZWQgd2lsbCBhbmltYXRlIG91dCB3aGVuIHJlbW92ZWQgZnJvbVxuICogdGhlIHRyZWUuXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBtb3Rpb24sIEFuaW1hdGVQcmVzZW5jZSB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nXG4gKlxuICogZXhwb3J0IGNvbnN0IEl0ZW1zID0gKHsgaXRlbXMgfSkgPT4gKFxuICogICA8QW5pbWF0ZVByZXNlbmNlPlxuICogICAgIHtpdGVtcy5tYXAoaXRlbSA9PiAoXG4gKiAgICAgICA8bW90aW9uLmRpdlxuICogICAgICAgICBrZXk9e2l0ZW0uaWR9XG4gKiAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCB9fVxuICogICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEgfX1cbiAqICAgICAgICAgZXhpdD17eyBvcGFjaXR5OiAwIH19XG4gKiAgICAgICAvPlxuICogICAgICkpfVxuICogICA8L0FuaW1hdGVQcmVzZW5jZT5cbiAqIClcbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gc2VxdWVuY2UgZXhpdCBhbmltYXRpb25zIHRocm91Z2hvdXQgYSB0cmVlIHVzaW5nIHZhcmlhbnRzLlxuICpcbiAqIElmIGEgY2hpbGQgY29udGFpbnMgbXVsdGlwbGUgYG1vdGlvbmAgY29tcG9uZW50cyB3aXRoIGBleGl0YCBwcm9wcywgaXQgd2lsbCBvbmx5IHVubW91bnQgdGhlIGNoaWxkXG4gKiBvbmNlIGFsbCBgbW90aW9uYCBjb21wb25lbnRzIGhhdmUgZmluaXNoZWQgYW5pbWF0aW5nIG91dC4gTGlrZXdpc2UsIGFueSBjb21wb25lbnRzIHVzaW5nXG4gKiBgdXNlUHJlc2VuY2VgIGFsbCBuZWVkIHRvIGNhbGwgYHNhZmVUb1JlbW92ZWAuXG4gKlxuICogQHB1YmxpY1xuICovXG5jb25zdCBBbmltYXRlUHJlc2VuY2UgPSAoeyBjaGlsZHJlbiwgY3VzdG9tLCBpbml0aWFsID0gdHJ1ZSwgb25FeGl0Q29tcGxldGUsIGV4aXRCZWZvcmVFbnRlciwgcHJlc2VuY2VBZmZlY3RzTGF5b3V0ID0gdHJ1ZSwgbW9kZSA9IFwic3luY1wiLCB9KSA9PiB7XG4gICAgLy8gU3VwcG9ydCBkZXByZWNhdGVkIGV4aXRCZWZvcmVFbnRlciBwcm9wXG4gICAgaWYgKGV4aXRCZWZvcmVFbnRlcikge1xuICAgICAgICBtb2RlID0gXCJ3YWl0XCI7XG4gICAgICAgIHdhcm5PbmNlKGZhbHNlLCBcIlJlcGxhY2UgZXhpdEJlZm9yZUVudGVyIHdpdGggbW9kZT0nd2FpdCdcIik7XG4gICAgfVxuICAgIC8vIFdlIHdhbnQgdG8gZm9yY2UgYSByZS1yZW5kZXIgb25jZSBhbGwgZXhpdGluZyBhbmltYXRpb25zIGhhdmUgZmluaXNoZWQuIFdlXG4gICAgLy8gZWl0aGVyIHVzZSBhIGxvY2FsIGZvcmNlUmVuZGVyIGZ1bmN0aW9uLCBvciBvbmUgZnJvbSBhIHBhcmVudCBjb250ZXh0IGlmIGl0IGV4aXN0cy5cbiAgICBsZXQgW2ZvcmNlUmVuZGVyXSA9IHVzZUZvcmNlVXBkYXRlKCk7XG4gICAgY29uc3QgZm9yY2VSZW5kZXJMYXlvdXRHcm91cCA9IHVzZUNvbnRleHQoTGF5b3V0R3JvdXBDb250ZXh0KS5mb3JjZVJlbmRlcjtcbiAgICBpZiAoZm9yY2VSZW5kZXJMYXlvdXRHcm91cClcbiAgICAgICAgZm9yY2VSZW5kZXIgPSBmb3JjZVJlbmRlckxheW91dEdyb3VwO1xuICAgIGNvbnN0IGlzTW91bnRlZCA9IHVzZUlzTW91bnRlZCgpO1xuICAgIC8vIEZpbHRlciBvdXQgYW55IGNoaWxkcmVuIHRoYXQgYXJlbid0IFJlYWN0RWxlbWVudHMuIFdlIGNhbiBvbmx5IHRyYWNrIFJlYWN0RWxlbWVudHMgd2l0aCBhIHByb3BzLmtleVxuICAgIGNvbnN0IGZpbHRlcmVkQ2hpbGRyZW4gPSBvbmx5RWxlbWVudHMoY2hpbGRyZW4pO1xuICAgIGxldCBjaGlsZHJlblRvUmVuZGVyID0gZmlsdGVyZWRDaGlsZHJlbjtcbiAgICBjb25zdCBleGl0aW5nID0gbmV3IFNldCgpO1xuICAgIC8vIEtlZXAgYSBsaXZpbmcgcmVjb3JkIG9mIHRoZSBjaGlsZHJlbiB3ZSdyZSBhY3R1YWxseSByZW5kZXJpbmcgc28gd2VcbiAgICAvLyBjYW4gZGlmZiB0byBmaWd1cmUgb3V0IHdoaWNoIGFyZSBlbnRlcmluZyBhbmQgZXhpdGluZ1xuICAgIGNvbnN0IHByZXNlbnRDaGlsZHJlbiA9IHVzZVJlZihjaGlsZHJlblRvUmVuZGVyKTtcbiAgICAvLyBBIGxvb2t1cCB0YWJsZSB0byBxdWlja2x5IHJlZmVyZW5jZSBjb21wb25lbnRzIGJ5IGtleVxuICAgIGNvbnN0IGFsbENoaWxkcmVuID0gdXNlUmVmKG5ldyBNYXAoKSkuY3VycmVudDtcbiAgICAvLyBJZiB0aGlzIGlzIHRoZSBpbml0aWFsIGNvbXBvbmVudCByZW5kZXIsIGp1c3QgZGVhbCB3aXRoIGxvZ2ljIHN1cnJvdW5kaW5nIHdoZXRoZXJcbiAgICAvLyB3ZSBwbGF5IG9uTW91bnQgYW5pbWF0aW9ucyBvciBub3QuXG4gICAgY29uc3QgaXNJbml0aWFsUmVuZGVyID0gdXNlUmVmKHRydWUpO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpc0luaXRpYWxSZW5kZXIuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB1cGRhdGVDaGlsZExvb2t1cChmaWx0ZXJlZENoaWxkcmVuLCBhbGxDaGlsZHJlbik7XG4gICAgICAgIHByZXNlbnRDaGlsZHJlbi5jdXJyZW50ID0gY2hpbGRyZW5Ub1JlbmRlcjtcbiAgICB9KTtcbiAgICB1c2VVbm1vdW50RWZmZWN0KCgpID0+IHtcbiAgICAgICAgaXNJbml0aWFsUmVuZGVyLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBhbGxDaGlsZHJlbi5jbGVhcigpO1xuICAgICAgICBleGl0aW5nLmNsZWFyKCk7XG4gICAgfSk7XG4gICAgaWYgKGlzSW5pdGlhbFJlbmRlci5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW5Ub1JlbmRlci5tYXAoKGNoaWxkKSA9PiAoUmVhY3QuY3JlYXRlRWxlbWVudChQcmVzZW5jZUNoaWxkLCB7IGtleTogZ2V0Q2hpbGRLZXkoY2hpbGQpLCBpc1ByZXNlbnQ6IHRydWUsIGluaXRpYWw6IGluaXRpYWwgPyB1bmRlZmluZWQgOiBmYWxzZSwgcHJlc2VuY2VBZmZlY3RzTGF5b3V0OiBwcmVzZW5jZUFmZmVjdHNMYXlvdXQsIG1vZGU6IG1vZGUgfSwgY2hpbGQpKSkpKTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyBpcyBhIHN1YnNlcXVlbnQgcmVuZGVyLCBkZWFsIHdpdGggZW50ZXJpbmcgYW5kIGV4aXRpbmcgY2hpbGRyZW5cbiAgICBjaGlsZHJlblRvUmVuZGVyID0gWy4uLmNoaWxkcmVuVG9SZW5kZXJdO1xuICAgIC8vIERpZmYgdGhlIGtleXMgb2YgdGhlIGN1cnJlbnRseS1wcmVzZW50IGFuZCB0YXJnZXQgY2hpbGRyZW4gdG8gdXBkYXRlIG91clxuICAgIC8vIGV4aXRpbmcgbGlzdC5cbiAgICBjb25zdCBwcmVzZW50S2V5cyA9IHByZXNlbnRDaGlsZHJlbi5jdXJyZW50Lm1hcChnZXRDaGlsZEtleSk7XG4gICAgY29uc3QgdGFyZ2V0S2V5cyA9IGZpbHRlcmVkQ2hpbGRyZW4ubWFwKGdldENoaWxkS2V5KTtcbiAgICAvLyBEaWZmIHRoZSBwcmVzZW50IGNoaWxkcmVuIHdpdGggb3VyIHRhcmdldCBjaGlsZHJlbiBhbmQgbWFyayB0aG9zZSB0aGF0IGFyZSBleGl0aW5nXG4gICAgY29uc3QgbnVtUHJlc2VudCA9IHByZXNlbnRLZXlzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVByZXNlbnQ7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBwcmVzZW50S2V5c1tpXTtcbiAgICAgICAgaWYgKHRhcmdldEtleXMuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgZXhpdGluZy5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiB3ZSBjdXJyZW50bHkgaGF2ZSBleGl0aW5nIGNoaWxkcmVuLCBhbmQgd2UncmUgZGVmZXJyaW5nIHJlbmRlcmluZyBpbmNvbWluZyBjaGlsZHJlblxuICAgIC8vIHVudGlsIGFmdGVyIGFsbCBjdXJyZW50IGNoaWxkcmVuIGhhdmUgZXhpdGluZywgZW1wdHkgdGhlIGNoaWxkcmVuVG9SZW5kZXIgYXJyYXlcbiAgICBpZiAobW9kZSA9PT0gXCJ3YWl0XCIgJiYgZXhpdGluZy5zaXplKSB7XG4gICAgICAgIGNoaWxkcmVuVG9SZW5kZXIgPSBbXTtcbiAgICB9XG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBjdXJyZW50bHkgZXhpdGluZyBjb21wb25lbnRzIGFuZCBjbG9uZSB0aGVtIHRvIG92ZXJ3cml0ZSBgYW5pbWF0ZWBcbiAgICAvLyB3aXRoIGFueSBgZXhpdGAgcHJvcCB0aGV5IG1pZ2h0IGhhdmUgZGVmaW5lZC5cbiAgICBleGl0aW5nLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBhY3R1YWxseSBlbnRlcmluZyBhZ2FpbiwgZWFybHkgcmV0dXJuXG4gICAgICAgIGlmICh0YXJnZXRLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNoaWxkID0gYWxsQ2hpbGRyZW4uZ2V0KGtleSk7XG4gICAgICAgIGlmICghY2hpbGQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGluc2VydGlvbkluZGV4ID0gcHJlc2VudEtleXMuaW5kZXhPZihrZXkpO1xuICAgICAgICBjb25zdCBvbkV4aXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBhbGxDaGlsZHJlbi5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIGV4aXRpbmcuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhpcyBjaGlsZCBmcm9tIHRoZSBwcmVzZW50IGNoaWxkcmVuXG4gICAgICAgICAgICBjb25zdCByZW1vdmVJbmRleCA9IHByZXNlbnRDaGlsZHJlbi5jdXJyZW50LmZpbmRJbmRleCgocHJlc2VudENoaWxkKSA9PiBwcmVzZW50Q2hpbGQua2V5ID09PSBrZXkpO1xuICAgICAgICAgICAgcHJlc2VudENoaWxkcmVuLmN1cnJlbnQuc3BsaWNlKHJlbW92ZUluZGV4LCAxKTtcbiAgICAgICAgICAgIC8vIERlZmVyIHJlLXJlbmRlcmluZyB1bnRpbCBhbGwgZXhpdGluZyBjaGlsZHJlbiBoYXZlIGluZGVlZCBsZWZ0XG4gICAgICAgICAgICBpZiAoIWV4aXRpbmcuc2l6ZSkge1xuICAgICAgICAgICAgICAgIHByZXNlbnRDaGlsZHJlbi5jdXJyZW50ID0gZmlsdGVyZWRDaGlsZHJlbjtcbiAgICAgICAgICAgICAgICBpZiAoaXNNb3VudGVkLmN1cnJlbnQgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICBvbkV4aXRDb21wbGV0ZSAmJiBvbkV4aXRDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjaGlsZHJlblRvUmVuZGVyLnNwbGljZShpbnNlcnRpb25JbmRleCwgMCwgUmVhY3QuY3JlYXRlRWxlbWVudChQcmVzZW5jZUNoaWxkLCB7IGtleTogZ2V0Q2hpbGRLZXkoY2hpbGQpLCBpc1ByZXNlbnQ6IGZhbHNlLCBvbkV4aXRDb21wbGV0ZTogb25FeGl0LCBjdXN0b206IGN1c3RvbSwgcHJlc2VuY2VBZmZlY3RzTGF5b3V0OiBwcmVzZW5jZUFmZmVjdHNMYXlvdXQsIG1vZGU6IG1vZGUgfSwgY2hpbGQpKTtcbiAgICB9KTtcbiAgICAvLyBBZGQgYE1vdGlvbkNvbnRleHRgIGV2ZW4gdG8gY2hpbGRyZW4gdGhhdCBkb24ndCBuZWVkIGl0IHRvIGVuc3VyZSB3ZSdyZSByZW5kZXJpbmdcbiAgICAvLyB0aGUgc2FtZSB0cmVlIGJldHdlZW4gcmVuZGVyc1xuICAgIGNoaWxkcmVuVG9SZW5kZXIgPSBjaGlsZHJlblRvUmVuZGVyLm1hcCgoY2hpbGQpID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gY2hpbGQua2V5O1xuICAgICAgICByZXR1cm4gZXhpdGluZy5oYXMoa2V5KSA/IChjaGlsZCkgOiAoUmVhY3QuY3JlYXRlRWxlbWVudChQcmVzZW5jZUNoaWxkLCB7IGtleTogZ2V0Q2hpbGRLZXkoY2hpbGQpLCBpc1ByZXNlbnQ6IHRydWUsIHByZXNlbmNlQWZmZWN0c0xheW91dDogcHJlc2VuY2VBZmZlY3RzTGF5b3V0LCBtb2RlOiBtb2RlIH0sIGNoaWxkKSk7XG4gICAgfSk7XG4gICAgaWYgKGVudiAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgbW9kZSA9PT0gXCJ3YWl0XCIgJiZcbiAgICAgICAgY2hpbGRyZW5Ub1JlbmRlci5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgWW91J3JlIGF0dGVtcHRpbmcgdG8gYW5pbWF0ZSBtdWx0aXBsZSBjaGlsZHJlbiB3aXRoaW4gQW5pbWF0ZVByZXNlbmNlLCBidXQgaXRzIG1vZGUgaXMgc2V0IHRvIFwid2FpdFwiLiBUaGlzIHdpbGwgbGVhZCB0byBvZGQgdmlzdWFsIGJlaGF2aW91ci5gKTtcbiAgICB9XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBleGl0aW5nLnNpemVcbiAgICAgICAgPyBjaGlsZHJlblRvUmVuZGVyXG4gICAgICAgIDogY2hpbGRyZW5Ub1JlbmRlci5tYXAoKGNoaWxkKSA9PiBjbG9uZUVsZW1lbnQoY2hpbGQpKSkpO1xufTtcblxuZXhwb3J0IHsgQW5pbWF0ZVByZXNlbmNlIH07XG4iLCJpbXBvcnQgc3luYyBmcm9tICdmcmFtZXN5bmMnO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSXNNb3VudGVkIH0gZnJvbSAnLi91c2UtaXMtbW91bnRlZC5tanMnO1xuXG5mdW5jdGlvbiB1c2VGb3JjZVVwZGF0ZSgpIHtcbiAgICBjb25zdCBpc01vdW50ZWQgPSB1c2VJc01vdW50ZWQoKTtcbiAgICBjb25zdCBbZm9yY2VkUmVuZGVyQ291bnQsIHNldEZvcmNlZFJlbmRlckNvdW50XSA9IHVzZVN0YXRlKDApO1xuICAgIGNvbnN0IGZvcmNlUmVuZGVyID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpc01vdW50ZWQuY3VycmVudCAmJiBzZXRGb3JjZWRSZW5kZXJDb3VudChmb3JjZWRSZW5kZXJDb3VudCArIDEpO1xuICAgIH0sIFtmb3JjZWRSZW5kZXJDb3VudF0pO1xuICAgIC8qKlxuICAgICAqIERlZmVyIHRoaXMgdG8gdGhlIGVuZCBvZiB0aGUgbmV4dCBhbmltYXRpb24gZnJhbWUgaW4gY2FzZSB0aGVyZSBhcmUgbXVsdGlwbGVcbiAgICAgKiBzeW5jaHJvbm91cyBjYWxscy5cbiAgICAgKi9cbiAgICBjb25zdCBkZWZlcnJlZEZvcmNlUmVuZGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gc3luYy5wb3N0UmVuZGVyKGZvcmNlUmVuZGVyKSwgW2ZvcmNlUmVuZGVyXSk7XG4gICAgcmV0dXJuIFtkZWZlcnJlZEZvcmNlUmVuZGVyLCBmb3JjZWRSZW5kZXJDb3VudF07XG59XG5cbmV4cG9ydCB7IHVzZUZvcmNlVXBkYXRlIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBMYXlvdXRHcm91cENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcblxuZXhwb3J0IHsgTGF5b3V0R3JvdXBDb250ZXh0IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgUHJlc2VuY2VDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcblxuZXhwb3J0IHsgUHJlc2VuY2VDb250ZXh0IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgTW90aW9uQ29uZmlnQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe1xuICAgIHRyYW5zZm9ybVBhZ2VQb2ludDogKHApID0+IHAsXG4gICAgaXNTdGF0aWM6IGZhbHNlLFxuICAgIHJlZHVjZWRNb3Rpb246IFwibmV2ZXJcIixcbn0pO1xuXG5leHBvcnQgeyBNb3Rpb25Db25maWdDb250ZXh0IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBNb3Rpb25Db250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG5mdW5jdGlvbiB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChNb3Rpb25Db250ZXh0KS52aXN1YWxFbGVtZW50O1xufVxuXG5leHBvcnQgeyBNb3Rpb25Db250ZXh0LCB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgTGF6eUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHsgc3RyaWN0OiBmYWxzZSB9KTtcblxuZXhwb3J0IHsgTGF6eUNvbnRleHQgfTtcbiIsImZ1bmN0aW9uIGlzUmVmT2JqZWN0KHJlZikge1xuICAgIHJldHVybiAodHlwZW9mIHJlZiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVmLCBcImN1cnJlbnRcIikpO1xufVxuXG5leHBvcnQgeyBpc1JlZk9iamVjdCB9O1xuIiwiLyoqXG4gKiBEZWNpZGVzIGlmIHRoZSBzdXBwbGllZCB2YXJpYWJsZSBpcyB2YXJpYW50IGxhYmVsXG4gKi9cbmZ1bmN0aW9uIGlzVmFyaWFudExhYmVsKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSh2KTtcbn1cblxuZXhwb3J0IHsgaXNWYXJpYW50TGFiZWwgfTtcbiIsImZ1bmN0aW9uIGlzQW5pbWF0aW9uQ29udHJvbHModikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygdi5zdGFydCA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5leHBvcnQgeyBpc0FuaW1hdGlvbkNvbnRyb2xzIH07XG4iLCJpbXBvcnQgeyBpc0FuaW1hdGlvbkNvbnRyb2xzIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL3V0aWxzL2lzLWFuaW1hdGlvbi1jb250cm9scy5tanMnO1xuaW1wb3J0IHsgaXNWYXJpYW50TGFiZWwgfSBmcm9tICcuL2lzLXZhcmlhbnQtbGFiZWwubWpzJztcblxuY29uc3QgdmFyaWFudFByb3BzID0gW1xuICAgIFwiaW5pdGlhbFwiLFxuICAgIFwiYW5pbWF0ZVwiLFxuICAgIFwiZXhpdFwiLFxuICAgIFwid2hpbGVIb3ZlclwiLFxuICAgIFwid2hpbGVEcmFnXCIsXG4gICAgXCJ3aGlsZVRhcFwiLFxuICAgIFwid2hpbGVGb2N1c1wiLFxuICAgIFwid2hpbGVJblZpZXdcIixcbl07XG5mdW5jdGlvbiBpc0NvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpIHtcbiAgICByZXR1cm4gKGlzQW5pbWF0aW9uQ29udHJvbHMocHJvcHMuYW5pbWF0ZSkgfHxcbiAgICAgICAgdmFyaWFudFByb3BzLnNvbWUoKG5hbWUpID0+IGlzVmFyaWFudExhYmVsKHByb3BzW25hbWVdKSkpO1xufVxuZnVuY3Rpb24gaXNWYXJpYW50Tm9kZShwcm9wcykge1xuICAgIHJldHVybiBCb29sZWFuKGlzQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcykgfHwgcHJvcHMudmFyaWFudHMpO1xufVxuXG5leHBvcnQgeyBpc0NvbnRyb2xsaW5nVmFyaWFudHMsIGlzVmFyaWFudE5vZGUgfTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNb3Rpb25Db250ZXh0IH0gZnJvbSAnLi9pbmRleC5tanMnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudFRyZWVWYXJpYW50cyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gdXNlQ3JlYXRlTW90aW9uQ29udGV4dChwcm9wcykge1xuICAgIGNvbnN0IHsgaW5pdGlhbCwgYW5pbWF0ZSB9ID0gZ2V0Q3VycmVudFRyZWVWYXJpYW50cyhwcm9wcywgdXNlQ29udGV4dChNb3Rpb25Db250ZXh0KSk7XG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gKHsgaW5pdGlhbCwgYW5pbWF0ZSB9KSwgW3ZhcmlhbnRMYWJlbHNBc0RlcGVuZGVuY3koaW5pdGlhbCksIHZhcmlhbnRMYWJlbHNBc0RlcGVuZGVuY3koYW5pbWF0ZSldKTtcbn1cbmZ1bmN0aW9uIHZhcmlhbnRMYWJlbHNBc0RlcGVuZGVuY3kocHJvcCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHByb3ApID8gcHJvcC5qb2luKFwiIFwiKSA6IHByb3A7XG59XG5cbmV4cG9ydCB7IHVzZUNyZWF0ZU1vdGlvbkNvbnRleHQgfTtcbiIsImNvbnN0IGNyZWF0ZURlZmluaXRpb24gPSAocHJvcE5hbWVzKSA9PiAoe1xuICAgIGlzRW5hYmxlZDogKHByb3BzKSA9PiBwcm9wTmFtZXMuc29tZSgobmFtZSkgPT4gISFwcm9wc1tuYW1lXSksXG59KTtcbmNvbnN0IGZlYXR1cmVEZWZpbml0aW9ucyA9IHtcbiAgICBtZWFzdXJlTGF5b3V0OiBjcmVhdGVEZWZpbml0aW9uKFtcImxheW91dFwiLCBcImxheW91dElkXCIsIFwiZHJhZ1wiXSksXG4gICAgYW5pbWF0aW9uOiBjcmVhdGVEZWZpbml0aW9uKFtcbiAgICAgICAgXCJhbmltYXRlXCIsXG4gICAgICAgIFwiZXhpdFwiLFxuICAgICAgICBcInZhcmlhbnRzXCIsXG4gICAgICAgIFwid2hpbGVIb3ZlclwiLFxuICAgICAgICBcIndoaWxlVGFwXCIsXG4gICAgICAgIFwid2hpbGVGb2N1c1wiLFxuICAgICAgICBcIndoaWxlRHJhZ1wiLFxuICAgICAgICBcIndoaWxlSW5WaWV3XCIsXG4gICAgXSksXG4gICAgZXhpdDogY3JlYXRlRGVmaW5pdGlvbihbXCJleGl0XCJdKSxcbiAgICBkcmFnOiBjcmVhdGVEZWZpbml0aW9uKFtcImRyYWdcIiwgXCJkcmFnQ29udHJvbHNcIl0pLFxuICAgIGZvY3VzOiBjcmVhdGVEZWZpbml0aW9uKFtcIndoaWxlRm9jdXNcIl0pLFxuICAgIGhvdmVyOiBjcmVhdGVEZWZpbml0aW9uKFtcIndoaWxlSG92ZXJcIiwgXCJvbkhvdmVyU3RhcnRcIiwgXCJvbkhvdmVyRW5kXCJdKSxcbiAgICB0YXA6IGNyZWF0ZURlZmluaXRpb24oW1wid2hpbGVUYXBcIiwgXCJvblRhcFwiLCBcIm9uVGFwU3RhcnRcIiwgXCJvblRhcENhbmNlbFwiXSksXG4gICAgcGFuOiBjcmVhdGVEZWZpbml0aW9uKFtcbiAgICAgICAgXCJvblBhblwiLFxuICAgICAgICBcIm9uUGFuU3RhcnRcIixcbiAgICAgICAgXCJvblBhblNlc3Npb25TdGFydFwiLFxuICAgICAgICBcIm9uUGFuRW5kXCIsXG4gICAgXSksXG4gICAgaW5WaWV3OiBjcmVhdGVEZWZpbml0aW9uKFtcbiAgICAgICAgXCJ3aGlsZUluVmlld1wiLFxuICAgICAgICBcIm9uVmlld3BvcnRFbnRlclwiLFxuICAgICAgICBcIm9uVmlld3BvcnRMZWF2ZVwiLFxuICAgIF0pLFxufTtcblxuZXhwb3J0IHsgZmVhdHVyZURlZmluaXRpb25zIH07XG4iLCIvKipcbiAqIFRoaXMgc2hvdWxkIG9ubHkgZXZlciBiZSBtb2RpZmllZCBvbiB0aGUgY2xpZW50IG90aGVyd2lzZSBpdCdsbFxuICogcGVyc2lzdCB0aHJvdWdoIHNlcnZlciByZXF1ZXN0cy4gSWYgd2UgbmVlZCBpbnN0YW5jZWQgc3RhdGVzIHdlXG4gKiBjb3VsZCBsYXp5LWluaXQgdmlhIHJvb3QuXG4gKi9cbmNvbnN0IGdsb2JhbFByb2plY3Rpb25TdGF0ZSA9IHtcbiAgICAvKipcbiAgICAgKiBHbG9iYWwgZmxhZyBhcyB0byB3aGV0aGVyIHRoZSB0cmVlIGhhcyBhbmltYXRlZCBzaW5jZSB0aGUgbGFzdCB0aW1lXG4gICAgICogd2UgcmVzaXplZCB0aGUgd2luZG93XG4gICAgICovXG4gICAgaGFzQW5pbWF0ZWRTaW5jZVJlc2l6ZTogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBXZSBzZXQgdGhpcyB0byB0cnVlIG9uY2UsIG9uIHRoZSBmaXJzdCB1cGRhdGUuIEFueSBub2RlcyBhZGRlZCB0byB0aGUgdHJlZSBiZXlvbmQgdGhhdFxuICAgICAqIHVwZGF0ZSB3aWxsIGJlIGdpdmVuIGEgYGRhdGEtcHJvamVjdGlvbi1pZGAgYXR0cmlidXRlLlxuICAgICAqL1xuICAgIGhhc0V2ZXJVcGRhdGVkOiBmYWxzZSxcbn07XG5cbmV4cG9ydCB7IGdsb2JhbFByb2plY3Rpb25TdGF0ZSB9O1xuIiwiaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuLi8uLi91dGlscy91c2UtY29uc3RhbnQubWpzJztcbmltcG9ydCB7IGdsb2JhbFByb2plY3Rpb25TdGF0ZSB9IGZyb20gJy4vc3RhdGUubWpzJztcblxubGV0IGlkID0gMTtcbmZ1bmN0aW9uIHVzZVByb2plY3Rpb25JZCgpIHtcbiAgICByZXR1cm4gdXNlQ29uc3RhbnQoKCkgPT4ge1xuICAgICAgICBpZiAoZ2xvYmFsUHJvamVjdGlvblN0YXRlLmhhc0V2ZXJVcGRhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQrKztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5leHBvcnQgeyB1c2VQcm9qZWN0aW9uSWQgfTtcbiIsImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5cbmNsYXNzIFZpc3VhbEVsZW1lbnRIYW5kbGVyIGV4dGVuZHMgUmVhY3RfX2RlZmF1bHQuQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdmlzdWFsIGVsZW1lbnQgcHJvcHMgYXMgc29vbiBhcyB3ZSBrbm93IHRoaXMgdXBkYXRlIGlzIGdvaW5nIHRvIGJlIGNvbW1pdGVkLlxuICAgICAqL1xuICAgIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7IHZpc3VhbEVsZW1lbnQsIHByb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAodmlzdWFsRWxlbWVudClcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuc2V0UHJvcHMocHJvcHMpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkgeyB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFZpc3VhbEVsZW1lbnRIYW5kbGVyIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsLCBleHBvcnRlZCBvbmx5IGZvciB1c2FnZSBpbiBGcmFtZXJcbiAqL1xuY29uc3QgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG5cbmV4cG9ydCB7IFN3aXRjaExheW91dEdyb3VwQ29udGV4dCB9O1xuIiwiY29uc3QgbW90aW9uQ29tcG9uZW50U3ltYm9sID0gU3ltYm9sLmZvcihcIm1vdGlvbkNvbXBvbmVudFN5bWJvbFwiKTtcblxuZXhwb3J0IHsgbW90aW9uQ29tcG9uZW50U3ltYm9sIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmb3J3YXJkUmVmLCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTW90aW9uQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvTW90aW9uQ29uZmlnQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgTW90aW9uQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlVmlzdWFsRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvdXNlLXZpc3VhbC1lbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyB1c2VNb3Rpb25SZWYgfSBmcm9tICcuL3V0aWxzL3VzZS1tb3Rpb24tcmVmLm1qcyc7XG5pbXBvcnQgeyB1c2VDcmVhdGVNb3Rpb25Db250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Nb3Rpb25Db250ZXh0L2NyZWF0ZS5tanMnO1xuaW1wb3J0IHsgZmVhdHVyZURlZmluaXRpb25zIH0gZnJvbSAnLi9mZWF0dXJlcy9kZWZpbml0aW9ucy5tanMnO1xuaW1wb3J0IHsgbG9hZEZlYXR1cmVzIH0gZnJvbSAnLi9mZWF0dXJlcy9sb2FkLWZlYXR1cmVzLm1qcyc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi91dGlscy9pcy1icm93c2VyLm1qcyc7XG5pbXBvcnQgeyB1c2VQcm9qZWN0aW9uSWQgfSBmcm9tICcuLi9wcm9qZWN0aW9uL25vZGUvaWQubWpzJztcbmltcG9ydCB7IExheW91dEdyb3VwQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBWaXN1YWxFbGVtZW50SGFuZGxlciB9IGZyb20gJy4vdXRpbHMvVmlzdWFsRWxlbWVudEhhbmRsZXIubWpzJztcbmltcG9ydCB7IExhenlDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9MYXp5Q29udGV4dC5tanMnO1xuaW1wb3J0IHsgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQubWpzJztcbmltcG9ydCB7IG1vdGlvbkNvbXBvbmVudFN5bWJvbCB9IGZyb20gJy4vdXRpbHMvc3ltYm9sLm1qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGEgYG1vdGlvbmAgY29tcG9uZW50LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhIENvbXBvbmVudCBhcmd1bWVudCwgd2hpY2ggY2FuIGJlIGVpdGhlciBhIHN0cmluZyAoaWUgXCJkaXZcIlxuICogZm9yIGBtb3Rpb24uZGl2YCksIG9yIGFuIGFjdHVhbCBSZWFjdCBjb21wb25lbnQuXG4gKlxuICogQWxvbmdzaWRlIHRoaXMgaXMgYSBjb25maWcgb3B0aW9uIHdoaWNoIHByb3ZpZGVzIGEgd2F5IG9mIHJlbmRlcmluZyB0aGUgcHJvdmlkZWRcbiAqIGNvbXBvbmVudCBcIm9mZmxpbmVcIiwgb3Igb3V0c2lkZSB0aGUgUmVhY3QgcmVuZGVyIGN5Y2xlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNb3Rpb25Db21wb25lbnQoeyBwcmVsb2FkZWRGZWF0dXJlcywgY3JlYXRlVmlzdWFsRWxlbWVudCwgcHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciwgdXNlUmVuZGVyLCB1c2VWaXN1YWxTdGF0ZSwgQ29tcG9uZW50LCB9KSB7XG4gICAgcHJlbG9hZGVkRmVhdHVyZXMgJiYgbG9hZEZlYXR1cmVzKHByZWxvYWRlZEZlYXR1cmVzKTtcbiAgICBmdW5jdGlvbiBNb3Rpb25Db21wb25lbnQocHJvcHMsIGV4dGVybmFsUmVmKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ0FuZFByb3BzID0ge1xuICAgICAgICAgICAgLi4udXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KSxcbiAgICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgICAgbGF5b3V0SWQ6IHVzZUxheW91dElkKHByb3BzKSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBpc1N0YXRpYyB9ID0gY29uZmlnQW5kUHJvcHM7XG4gICAgICAgIGxldCBmZWF0dXJlcyA9IG51bGw7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDcmVhdGVNb3Rpb25Db250ZXh0KHByb3BzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIHVuaXF1ZSBwcm9qZWN0aW9uIElEIGZvciB0aGlzIGNvbXBvbmVudC4gSWYgYSBuZXcgY29tcG9uZW50IGlzIGFkZGVkXG4gICAgICAgICAqIGR1cmluZyBhIGxheW91dCBhbmltYXRpb24gd2UnbGwgdXNlIHRoaXMgdG8gcXVlcnkgdGhlIERPTSBhbmQgaHlkcmF0ZSBpdHMgcmVmIGVhcmx5LCBhbGxvd2luZ1xuICAgICAgICAgKiB1cyB0byBtZWFzdXJlIGl0IGFzIHNvb24gYXMgYW55IGxheW91dCBlZmZlY3QgZmx1c2hlcyBwZW5kaW5nIGxheW91dCBhbmltYXRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiBQZXJmb3JtYW5jZSBub3RlOiBJdCdkIGJlIGJldHRlciBub3QgdG8gaGF2ZSB0byBzZWFyY2ggdGhlIERPTSBmb3IgdGhlc2UgZWxlbWVudHMuXG4gICAgICAgICAqIEZvciBuZXdseS1lbnRlcmluZyBjb21wb25lbnRzIGl0IGNvdWxkIGJlIGVub3VnaCB0byBvbmx5IGNvcnJlY3QgdHJlZVNjYWxlLCBpbiB3aGljaFxuICAgICAgICAgKiBjYXNlIHdlIGNvdWxkIG1vdW50IGluIGEgc2NhbGUtY29ycmVjdGlvbiBtb2RlLiBUaGlzIHdvdWxkbid0IGJlIGVub3VnaCBmb3JcbiAgICAgICAgICogc2hhcmVkIGVsZW1lbnQgdHJhbnNpdGlvbnMgaG93ZXZlci4gUGVyaGFwcyBmb3IgdGhvc2Ugd2UgY291bGQgcmV2ZXJ0IHRvIGEgcm9vdCBub2RlXG4gICAgICAgICAqIHRoYXQgZ2V0cyBmb3JjZVJlbmRlcmVkIGFuZCBsYXlvdXQgYW5pbWF0aW9ucyBhcmUgdHJpZ2dlcmVkIG9uIGl0cyBsYXlvdXQgZWZmZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgcHJvamVjdGlvbklkID0gaXNTdGF0aWMgPyB1bmRlZmluZWQgOiB1c2VQcm9qZWN0aW9uSWQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCB2aXN1YWxTdGF0ZSA9IHVzZVZpc3VhbFN0YXRlKHByb3BzLCBpc1N0YXRpYyk7XG4gICAgICAgIGlmICghaXNTdGF0aWMgJiYgaXNCcm93c2VyKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZSBhIFZpc3VhbEVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50LiBBIFZpc3VhbEVsZW1lbnQgcHJvdmlkZXMgYSBjb21tb25cbiAgICAgICAgICAgICAqIGludGVyZmFjZSB0byByZW5kZXJlci1zcGVjaWZpYyBBUElzIChpZSBET00vVGhyZWUuanMgZXRjKSBhcyB3ZWxsIGFzXG4gICAgICAgICAgICAgKiBwcm92aWRpbmcgYSB3YXkgb2YgcmVuZGVyaW5nIHRvIHRoZXNlIEFQSXMgb3V0c2lkZSBvZiB0aGUgUmVhY3QgcmVuZGVyIGxvb3BcbiAgICAgICAgICAgICAqIGZvciBtb3JlIHBlcmZvcm1hbnQgYW5pbWF0aW9ucyBhbmQgaW50ZXJhY3Rpb25zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnRleHQudmlzdWFsRWxlbWVudCA9IHVzZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB2aXN1YWxTdGF0ZSwgY29uZmlnQW5kUHJvcHMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMb2FkIE1vdGlvbiBnZXN0dXJlIGFuZCBhbmltYXRpb24gZmVhdHVyZXMuIFRoZXNlIGFyZSByZW5kZXJlZCBhcyByZW5kZXJsZXNzXG4gICAgICAgICAgICAgKiBjb21wb25lbnRzIHNvIGVhY2ggZmVhdHVyZSBjYW4gb3B0aW9uYWxseSBtYWtlIHVzZSBvZiBSZWFjdCBsaWZlY3ljbGUgbWV0aG9kcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgbGF6eVN0cmljdE1vZGUgPSB1c2VDb250ZXh0KExhenlDb250ZXh0KS5zdHJpY3Q7XG4gICAgICAgICAgICBjb25zdCBpbml0aWFsTGF5b3V0R3JvdXBDb25maWcgPSB1c2VDb250ZXh0KFN3aXRjaExheW91dEdyb3VwQ29udGV4dCk7XG4gICAgICAgICAgICBpZiAoY29udGV4dC52aXN1YWxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXMgPSBjb250ZXh0LnZpc3VhbEVsZW1lbnQubG9hZEZlYXR1cmVzKHByb3BzLCBsYXp5U3RyaWN0TW9kZSwgcHJlbG9hZGVkRmVhdHVyZXMsIHByb2plY3Rpb25JZCwgcHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciB8fFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlRGVmaW5pdGlvbnMucHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciwgaW5pdGlhbExheW91dEdyb3VwQ29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1vdW50IG9yZGVyIGFuZCBoaWVyYXJjaHkgaXMgc3BlY2lmaWMgdG8gZW5zdXJlIG91ciBlbGVtZW50IHJlZlxuICAgICAgICAgKiBpcyBoeWRyYXRlZCBieSB0aGUgdGltZSBmZWF0dXJlcyBmaXJlIHRoZWlyIGVmZmVjdHMuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmlzdWFsRWxlbWVudEhhbmRsZXIsIHsgdmlzdWFsRWxlbWVudDogY29udGV4dC52aXN1YWxFbGVtZW50LCBwcm9wczogY29uZmlnQW5kUHJvcHMgfSxcbiAgICAgICAgICAgIGZlYXR1cmVzLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNb3Rpb25Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjb250ZXh0IH0sIHVzZVJlbmRlcihDb21wb25lbnQsIHByb3BzLCBwcm9qZWN0aW9uSWQsIHVzZU1vdGlvblJlZih2aXN1YWxTdGF0ZSwgY29udGV4dC52aXN1YWxFbGVtZW50LCBleHRlcm5hbFJlZiksIHZpc3VhbFN0YXRlLCBpc1N0YXRpYywgY29udGV4dC52aXN1YWxFbGVtZW50KSkpKTtcbiAgICB9XG4gICAgY29uc3QgRm9yd2FyZFJlZkNvbXBvbmVudCA9IGZvcndhcmRSZWYoTW90aW9uQ29tcG9uZW50KTtcbiAgICBGb3J3YXJkUmVmQ29tcG9uZW50W21vdGlvbkNvbXBvbmVudFN5bWJvbF0gPSBDb21wb25lbnQ7XG4gICAgcmV0dXJuIEZvcndhcmRSZWZDb21wb25lbnQ7XG59XG5mdW5jdGlvbiB1c2VMYXlvdXRJZCh7IGxheW91dElkIH0pIHtcbiAgICBjb25zdCBsYXlvdXRHcm91cElkID0gdXNlQ29udGV4dChMYXlvdXRHcm91cENvbnRleHQpLmlkO1xuICAgIHJldHVybiBsYXlvdXRHcm91cElkICYmIGxheW91dElkICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBsYXlvdXRHcm91cElkICsgXCItXCIgKyBsYXlvdXRJZFxuICAgICAgICA6IGxheW91dElkO1xufVxuXG5leHBvcnQgeyBjcmVhdGVNb3Rpb25Db21wb25lbnQgfTtcbiIsImltcG9ydCB7IGZlYXR1cmVEZWZpbml0aW9ucyB9IGZyb20gJy4vZGVmaW5pdGlvbnMubWpzJztcblxuZnVuY3Rpb24gbG9hZEZlYXR1cmVzKGZlYXR1cmVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZmVhdHVyZXMpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgICAgIGZlYXR1cmVEZWZpbml0aW9ucy5wcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yID0gZmVhdHVyZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZlYXR1cmVEZWZpbml0aW9uc1trZXldLkNvbXBvbmVudCA9IGZlYXR1cmVzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IGxvYWRGZWF0dXJlcyB9O1xuIiwiaW1wb3J0IHsgaXNWYXJpYW50TGFiZWwgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvaXMtdmFyaWFudC1sYWJlbC5tanMnO1xuaW1wb3J0IHsgaXNDb250cm9sbGluZ1ZhcmlhbnRzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL2lzLWNvbnRyb2xsaW5nLXZhcmlhbnRzLm1qcyc7XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRUcmVlVmFyaWFudHMocHJvcHMsIGNvbnRleHQpIHtcbiAgICBpZiAoaXNDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKSkge1xuICAgICAgICBjb25zdCB7IGluaXRpYWwsIGFuaW1hdGUgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5pdGlhbDogaW5pdGlhbCA9PT0gZmFsc2UgfHwgaXNWYXJpYW50TGFiZWwoaW5pdGlhbClcbiAgICAgICAgICAgICAgICA/IGluaXRpYWxcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFuaW1hdGU6IGlzVmFyaWFudExhYmVsKGFuaW1hdGUpID8gYW5pbWF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzLmluaGVyaXQgIT09IGZhbHNlID8gY29udGV4dCA6IHt9O1xufVxuXG5leHBvcnQgeyBnZXRDdXJyZW50VHJlZVZhcmlhbnRzIH07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFByZXNlbmNlQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvUHJlc2VuY2VDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMnO1xuaW1wb3J0IHsgTGF6eUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0xhenlDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBNb3Rpb25Db25maWdDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9Nb3Rpb25Db25maWdDb250ZXh0Lm1qcyc7XG5cbmZ1bmN0aW9uIHVzZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB2aXN1YWxTdGF0ZSwgcHJvcHMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQpIHtcbiAgICBjb25zdCBwYXJlbnQgPSB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCgpO1xuICAgIGNvbnN0IGxhenlDb250ZXh0ID0gdXNlQ29udGV4dChMYXp5Q29udGV4dCk7XG4gICAgY29uc3QgcHJlc2VuY2VDb250ZXh0ID0gdXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgIGNvbnN0IHJlZHVjZWRNb3Rpb25Db25maWcgPSB1c2VDb250ZXh0KE1vdGlvbkNvbmZpZ0NvbnRleHQpLnJlZHVjZWRNb3Rpb247XG4gICAgY29uc3QgdmlzdWFsRWxlbWVudFJlZiA9IHVzZVJlZih1bmRlZmluZWQpO1xuICAgIC8qKlxuICAgICAqIElmIHdlIGhhdmVuJ3QgcHJlbG9hZGVkIGEgcmVuZGVyZXIsIGNoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIG9uZSBsYXp5LWxvYWRlZFxuICAgICAqL1xuICAgIGNyZWF0ZVZpc3VhbEVsZW1lbnQgPSBjcmVhdGVWaXN1YWxFbGVtZW50IHx8IGxhenlDb250ZXh0LnJlbmRlcmVyO1xuICAgIGlmICghdmlzdWFsRWxlbWVudFJlZi5jdXJyZW50ICYmIGNyZWF0ZVZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudFJlZi5jdXJyZW50ID0gY3JlYXRlVmlzdWFsRWxlbWVudChDb21wb25lbnQsIHtcbiAgICAgICAgICAgIHZpc3VhbFN0YXRlLFxuICAgICAgICAgICAgcGFyZW50LFxuICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICBwcmVzZW5jZUlkOiBwcmVzZW5jZUNvbnRleHQgPyBwcmVzZW5jZUNvbnRleHQuaWQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBibG9ja0luaXRpYWxBbmltYXRpb246IHByZXNlbmNlQ29udGV4dFxuICAgICAgICAgICAgICAgID8gcHJlc2VuY2VDb250ZXh0LmluaXRpYWwgPT09IGZhbHNlXG4gICAgICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHJlZHVjZWRNb3Rpb25Db25maWcsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB2aXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudFJlZi5jdXJyZW50O1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICB2aXN1YWxFbGVtZW50ICYmIHZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICh2aXN1YWxFbGVtZW50ICYmIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUuYW5pbWF0ZUNoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4gKCkgPT4gdmlzdWFsRWxlbWVudCAmJiB2aXN1YWxFbGVtZW50Lm5vdGlmeVVubW91bnQoKSwgW10pO1xuICAgIHJldHVybiB2aXN1YWxFbGVtZW50O1xufVxuXG5leHBvcnQgeyB1c2VWaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzUmVmT2JqZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvaXMtcmVmLW9iamVjdC5tanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZWYgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGh5ZHJhdGVzIHRoZSBwcm92aWRlZFxuICogZXh0ZXJuYWwgcmVmIGFuZCBWaXN1YWxFbGVtZW50LlxuICovXG5mdW5jdGlvbiB1c2VNb3Rpb25SZWYodmlzdWFsU3RhdGUsIHZpc3VhbEVsZW1lbnQsIGV4dGVybmFsUmVmKSB7XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKChpbnN0YW5jZSkgPT4ge1xuICAgICAgICBpbnN0YW5jZSAmJiB2aXN1YWxTdGF0ZS5tb3VudCAmJiB2aXN1YWxTdGF0ZS5tb3VudChpbnN0YW5jZSk7XG4gICAgICAgIGlmICh2aXN1YWxFbGVtZW50KSB7XG4gICAgICAgICAgICBpbnN0YW5jZVxuICAgICAgICAgICAgICAgID8gdmlzdWFsRWxlbWVudC5tb3VudChpbnN0YW5jZSlcbiAgICAgICAgICAgICAgICA6IHZpc3VhbEVsZW1lbnQudW5tb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHRlcm5hbFJlZikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBleHRlcm5hbFJlZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxSZWYoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWZPYmplY3QoZXh0ZXJuYWxSZWYpKSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxSZWYuY3VycmVudCA9IGluc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogT25seSBwYXNzIGEgbmV3IHJlZiBjYWxsYmFjayB0byBSZWFjdCBpZiB3ZSd2ZSByZWNlaXZlZCBhIHZpc3VhbCBlbGVtZW50XG4gICAgICogZmFjdG9yeS4gT3RoZXJ3aXNlIHdlJ2xsIGJlIG1vdW50aW5nL3JlbW91bnRpbmcgZXZlcnkgdGltZSBleHRlcm5hbFJlZlxuICAgICAqIG9yIG90aGVyIGRlcGVuZGVuY2llcyBjaGFuZ2UuXG4gICAgICovXG4gICAgW3Zpc3VhbEVsZW1lbnRdKTtcbn1cblxuZXhwb3J0IHsgdXNlTW90aW9uUmVmIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVNb3Rpb25Db21wb25lbnQgfSBmcm9tICcuLi8uLi9tb3Rpb24vaW5kZXgubWpzJztcblxuLyoqXG4gKiBDb252ZXJ0IGFueSBSZWFjdCBjb21wb25lbnQgaW50byBhIGBtb3Rpb25gIGNvbXBvbmVudC4gVGhlIHByb3ZpZGVkIGNvbXBvbmVudFxuICogKiptdXN0KiogdXNlIGBSZWFjdC5mb3J3YXJkUmVmYCB0byB0aGUgdW5kZXJseWluZyBET00gY29tcG9uZW50IHlvdSB3YW50IHRvIGFuaW1hdGUuXG4gKlxuICogYGBganN4XG4gKiBjb25zdCBDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gKiAgIHJldHVybiA8ZGl2IHJlZj17cmVmfSAvPlxuICogfSlcbiAqXG4gKiBjb25zdCBNb3Rpb25Db21wb25lbnQgPSBtb3Rpb24oQ29tcG9uZW50KVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjcmVhdGVNb3Rpb25Qcm94eShjcmVhdGVDb25maWcpIHtcbiAgICBmdW5jdGlvbiBjdXN0b20oQ29tcG9uZW50LCBjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcgPSB7fSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTW90aW9uQ29tcG9uZW50KGNyZWF0ZUNvbmZpZyhDb21wb25lbnQsIGN1c3RvbU1vdGlvbkNvbXBvbmVudENvbmZpZykpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFByb3h5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBjdXN0b207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgY2FjaGUgb2YgZ2VuZXJhdGVkIGBtb3Rpb25gIGNvbXBvbmVudHMsIGUuZyBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgKiBSYXRoZXIgdGhhbiBnZW5lcmF0aW5nIHRoZW0gYW5ldyBldmVyeSByZW5kZXIuXG4gICAgICovXG4gICAgY29uc3QgY29tcG9uZW50Q2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIG5ldyBQcm94eShjdXN0b20sIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCB3aGVuIGBtb3Rpb25gIGlzIHJlZmVyZW5jZWQgd2l0aCBhIHByb3A6IGBtb3Rpb24uZGl2YCwgYG1vdGlvbi5pbnB1dGAgZXRjLlxuICAgICAgICAgKiBUaGUgcHJvcCBuYW1lIGlzIHBhc3NlZCB0aHJvdWdoIGFzIGBrZXlgIGFuZCB3ZSBjYW4gdXNlIHRoYXQgdG8gZ2VuZXJhdGUgYSBgbW90aW9uYFxuICAgICAgICAgKiBET00gY29tcG9uZW50IHdpdGggdGhhdCBuYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiAoX3RhcmdldCwga2V5KSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgZWxlbWVudCBkb2Vzbid0IGV4aXN0IGluIHRoZSBjb21wb25lbnQgY2FjaGUsIGNyZWF0ZSBpdCBhbmQgY2FjaGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghY29tcG9uZW50Q2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRDYWNoZS5zZXQoa2V5LCBjdXN0b20oa2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50Q2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZU1vdGlvblByb3h5IH07XG4iLCIvKipcbiAqIFdlIGtlZXAgdGhlc2UgbGlzdGVkIHNlcGVyYXRlbHkgYXMgd2UgdXNlIHRoZSBsb3dlcmNhc2UgdGFnIG5hbWVzIGFzIHBhcnRcbiAqIG9mIHRoZSBydW50aW1lIGJ1bmRsZSB0byBkZXRlY3QgU1ZHIGNvbXBvbmVudHNcbiAqL1xuY29uc3QgbG93ZXJjYXNlU1ZHRWxlbWVudHMgPSBbXG4gICAgXCJhbmltYXRlXCIsXG4gICAgXCJjaXJjbGVcIixcbiAgICBcImRlZnNcIixcbiAgICBcImRlc2NcIixcbiAgICBcImVsbGlwc2VcIixcbiAgICBcImdcIixcbiAgICBcImltYWdlXCIsXG4gICAgXCJsaW5lXCIsXG4gICAgXCJmaWx0ZXJcIixcbiAgICBcIm1hcmtlclwiLFxuICAgIFwibWFza1wiLFxuICAgIFwibWV0YWRhdGFcIixcbiAgICBcInBhdGhcIixcbiAgICBcInBhdHRlcm5cIixcbiAgICBcInBvbHlnb25cIixcbiAgICBcInBvbHlsaW5lXCIsXG4gICAgXCJyZWN0XCIsXG4gICAgXCJzdG9wXCIsXG4gICAgXCJzdmdcIixcbiAgICBcInN3aXRjaFwiLFxuICAgIFwic3ltYm9sXCIsXG4gICAgXCJ0ZXh0XCIsXG4gICAgXCJ0c3BhblwiLFxuICAgIFwidXNlXCIsXG4gICAgXCJ2aWV3XCIsXG5dO1xuXG5leHBvcnQgeyBsb3dlcmNhc2VTVkdFbGVtZW50cyB9O1xuIiwiaW1wb3J0IHsgbG93ZXJjYXNlU1ZHRWxlbWVudHMgfSBmcm9tICcuLi8uLi9zdmcvbG93ZXJjYXNlLWVsZW1lbnRzLm1qcyc7XG5cbmZ1bmN0aW9uIGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudCkge1xuICAgIGlmIChcbiAgICAvKipcbiAgICAgKiBJZiBpdCdzIG5vdCBhIHN0cmluZywgaXQncyBhIGN1c3RvbSBSZWFjdCBjb21wb25lbnQuIEN1cnJlbnRseSB3ZSBvbmx5IHN1cHBvcnRcbiAgICAgKiBIVE1MIGN1c3RvbSBSZWFjdCBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIHR5cGVvZiBDb21wb25lbnQgIT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGl0IGNvbnRhaW5zIGEgZGFzaCwgdGhlIGVsZW1lbnQgaXMgYSBjdXN0b20gSFRNTCB3ZWJjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBDb21wb25lbnQuaW5jbHVkZXMoXCItXCIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoXG4gICAgLyoqXG4gICAgICogSWYgaXQncyBpbiBvdXIgbGlzdCBvZiBsb3dlcmNhc2UgU1ZHIHRhZ3MsIGl0J3MgYW4gU1ZHIGNvbXBvbmVudFxuICAgICAqL1xuICAgIGxvd2VyY2FzZVNWR0VsZW1lbnRzLmluZGV4T2YoQ29tcG9uZW50KSA+IC0xIHx8XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBpdCBjb250YWlucyBhIGNhcGl0YWwgbGV0dGVyLCBpdCdzIGFuIFNWRyBjb21wb25lbnRcbiAgICAgICAgICovXG4gICAgICAgIC9bQS1aXS8udGVzdChDb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCB7IGlzU1ZHQ29tcG9uZW50IH07XG4iLCJjb25zdCBzY2FsZUNvcnJlY3RvcnMgPSB7fTtcbmZ1bmN0aW9uIGFkZFNjYWxlQ29ycmVjdG9yKGNvcnJlY3RvcnMpIHtcbiAgICBPYmplY3QuYXNzaWduKHNjYWxlQ29ycmVjdG9ycywgY29ycmVjdG9ycyk7XG59XG5cbmV4cG9ydCB7IGFkZFNjYWxlQ29ycmVjdG9yLCBzY2FsZUNvcnJlY3RvcnMgfTtcbiIsIi8qKlxuICogR2VuZXJhdGUgYSBsaXN0IG9mIGV2ZXJ5IHBvc3NpYmxlIHRyYW5zZm9ybSBrZXkuXG4gKi9cbmNvbnN0IHRyYW5zZm9ybVByb3BPcmRlciA9IFtcbiAgICBcInRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsXG4gICAgXCJ4XCIsXG4gICAgXCJ5XCIsXG4gICAgXCJ6XCIsXG4gICAgXCJ0cmFuc2xhdGVYXCIsXG4gICAgXCJ0cmFuc2xhdGVZXCIsXG4gICAgXCJ0cmFuc2xhdGVaXCIsXG4gICAgXCJzY2FsZVwiLFxuICAgIFwic2NhbGVYXCIsXG4gICAgXCJzY2FsZVlcIixcbiAgICBcInJvdGF0ZVwiLFxuICAgIFwicm90YXRlWFwiLFxuICAgIFwicm90YXRlWVwiLFxuICAgIFwicm90YXRlWlwiLFxuICAgIFwic2tld1wiLFxuICAgIFwic2tld1hcIixcbiAgICBcInNrZXdZXCIsXG5dO1xuLyoqXG4gKiBBIHF1aWNrIGxvb2t1cCBmb3IgdHJhbnNmb3JtIHByb3BzLlxuICovXG5jb25zdCB0cmFuc2Zvcm1Qcm9wcyA9IG5ldyBTZXQodHJhbnNmb3JtUHJvcE9yZGVyKTtcblxuZXhwb3J0IHsgdHJhbnNmb3JtUHJvcE9yZGVyLCB0cmFuc2Zvcm1Qcm9wcyB9O1xuIiwiaW1wb3J0IHsgc2NhbGVDb3JyZWN0b3JzIH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtY29ycmVjdGlvbi5tanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvaHRtbC91dGlscy90cmFuc2Zvcm0ubWpzJztcblxuZnVuY3Rpb24gaXNGb3JjZWRNb3Rpb25WYWx1ZShrZXksIHsgbGF5b3V0LCBsYXlvdXRJZCB9KSB7XG4gICAgcmV0dXJuICh0cmFuc2Zvcm1Qcm9wcy5oYXMoa2V5KSB8fFxuICAgICAgICBrZXkuc3RhcnRzV2l0aChcIm9yaWdpblwiKSB8fFxuICAgICAgICAoKGxheW91dCB8fCBsYXlvdXRJZCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgKCEhc2NhbGVDb3JyZWN0b3JzW2tleV0gfHwga2V5ID09PSBcIm9wYWNpdHlcIikpKTtcbn1cblxuZXhwb3J0IHsgaXNGb3JjZWRNb3Rpb25WYWx1ZSB9O1xuIiwiY29uc3QgaXNNb3Rpb25WYWx1ZSA9ICh2YWx1ZSkgPT4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogISF2YWx1ZS5nZXRWZWxvY2l0eTtcblxuZXhwb3J0IHsgaXNNb3Rpb25WYWx1ZSB9O1xuIiwiaW1wb3J0IHsgdHJhbnNmb3JtUHJvcE9yZGVyIH0gZnJvbSAnLi90cmFuc2Zvcm0ubWpzJztcblxuY29uc3QgdHJhbnNsYXRlQWxpYXMgPSB7XG4gICAgeDogXCJ0cmFuc2xhdGVYXCIsXG4gICAgeTogXCJ0cmFuc2xhdGVZXCIsXG4gICAgejogXCJ0cmFuc2xhdGVaXCIsXG4gICAgdHJhbnNmb3JtUGVyc3BlY3RpdmU6IFwicGVyc3BlY3RpdmVcIixcbn07XG4vKipcbiAqIEEgZnVuY3Rpb24gdG8gdXNlIHdpdGggQXJyYXkuc29ydCB0byBzb3J0IHRyYW5zZm9ybSBrZXlzIGJ5IHRoZWlyIGRlZmF1bHQgb3JkZXIuXG4gKi9cbmNvbnN0IHNvcnRUcmFuc2Zvcm1Qcm9wcyA9IChhLCBiKSA9PiB0cmFuc2Zvcm1Qcm9wT3JkZXIuaW5kZXhPZihhKSAtIHRyYW5zZm9ybVByb3BPcmRlci5pbmRleE9mKGIpO1xuLyoqXG4gKiBCdWlsZCBhIENTUyB0cmFuc2Zvcm0gc3R5bGUgZnJvbSBpbmRpdmlkdWFsIHgveS9zY2FsZSBldGMgcHJvcGVydGllcy5cbiAqXG4gKiBUaGlzIG91dHB1dHMgd2l0aCBhIGRlZmF1bHQgb3JkZXIgb2YgdHJhbnNmb3Jtcy9zY2FsZXMvcm90YXRpb25zLCB0aGlzIGNhbiBiZSBjdXN0b21pc2VkIGJ5XG4gKiBwcm92aWRpbmcgYSB0cmFuc2Zvcm1UZW1wbGF0ZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYnVpbGRUcmFuc2Zvcm0oeyB0cmFuc2Zvcm0sIHRyYW5zZm9ybUtleXMgfSwgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiA9IHRydWUsIGFsbG93VHJhbnNmb3JtTm9uZSA9IHRydWUsIH0sIHRyYW5zZm9ybUlzRGVmYXVsdCwgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAvLyBUaGUgdHJhbnNmb3JtIHN0cmluZyB3ZSdyZSBnb2luZyB0byBidWlsZCBpbnRvLlxuICAgIGxldCB0cmFuc2Zvcm1TdHJpbmcgPSBcIlwiO1xuICAgIC8vIFRyYW5zZm9ybSBrZXlzIGludG8gdGhlaXIgZGVmYXVsdCBvcmRlciAtIHRoaXMgd2lsbCBkZXRlcm1pbmUgdGhlIG91dHB1dCBvcmRlci5cbiAgICB0cmFuc2Zvcm1LZXlzLnNvcnQoc29ydFRyYW5zZm9ybVByb3BzKTtcbiAgICAvLyBMb29wIG92ZXIgZWFjaCB0cmFuc2Zvcm0gYW5kIGJ1aWxkIHRoZW0gaW50byB0cmFuc2Zvcm1TdHJpbmdcbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0cmFuc2Zvcm1LZXlzKSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyArPSBgJHt0cmFuc2xhdGVBbGlhc1trZXldIHx8IGtleX0oJHt0cmFuc2Zvcm1ba2V5XX0pIGA7XG4gICAgfVxuICAgIGlmIChlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiAmJiAhdHJhbnNmb3JtLnopIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nICs9IFwidHJhbnNsYXRlWigwKVwiO1xuICAgIH1cbiAgICB0cmFuc2Zvcm1TdHJpbmcgPSB0cmFuc2Zvcm1TdHJpbmcudHJpbSgpO1xuICAgIC8vIElmIHdlIGhhdmUgYSBjdXN0b20gYHRyYW5zZm9ybWAgdGVtcGxhdGUsIHBhc3Mgb3VyIHRyYW5zZm9ybSB2YWx1ZXMgYW5kXG4gICAgLy8gZ2VuZXJhdGVkIHRyYW5zZm9ybVN0cmluZyB0byB0aGF0IGJlZm9yZSByZXR1cm5pbmdcbiAgICBpZiAodHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nID0gdHJhbnNmb3JtVGVtcGxhdGUodHJhbnNmb3JtLCB0cmFuc2Zvcm1Jc0RlZmF1bHQgPyBcIlwiIDogdHJhbnNmb3JtU3RyaW5nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYWxsb3dUcmFuc2Zvcm1Ob25lICYmIHRyYW5zZm9ybUlzRGVmYXVsdCkge1xuICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybVN0cmluZztcbn1cblxuZXhwb3J0IHsgYnVpbGRUcmFuc2Zvcm0gfTtcbiIsIi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBrZXkgaXMgYSBDU1MgdmFyaWFibGVcbiAqL1xuZnVuY3Rpb24gaXNDU1NWYXJpYWJsZShrZXkpIHtcbiAgICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoXCItLVwiKTtcbn1cblxuZXhwb3J0IHsgaXNDU1NWYXJpYWJsZSB9O1xuIiwiLyoqXG4gKiBQcm92aWRlZCBhIHZhbHVlIGFuZCBhIFZhbHVlVHlwZSwgcmV0dXJucyB0aGUgdmFsdWUgYXMgdGhhdCB2YWx1ZSB0eXBlLlxuICovXG5jb25zdCBnZXRWYWx1ZUFzVHlwZSA9ICh2YWx1ZSwgdHlwZSkgPT4ge1xuICAgIHJldHVybiB0eXBlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IHR5cGUudHJhbnNmb3JtKHZhbHVlKVxuICAgICAgICA6IHZhbHVlO1xufTtcblxuZXhwb3J0IHsgZ2V0VmFsdWVBc1R5cGUgfTtcbiIsImNvbnN0IGNsYW1wID0gKG1pbiwgbWF4KSA9PiAodikgPT4gTWF0aC5tYXgoTWF0aC5taW4odiwgbWF4KSwgbWluKTtcbmNvbnN0IHNhbml0aXplID0gKHYpID0+ICh2ICUgMSA/IE51bWJlcih2LnRvRml4ZWQoNSkpIDogdik7XG5jb25zdCBmbG9hdFJlZ2V4ID0gLygtKT8oW1xcZF0qXFwuP1tcXGRdKSsvZztcbmNvbnN0IGNvbG9yUmVnZXggPSAvKCNbMC05YS1mXXs2fXwjWzAtOWEtZl17M318Iyg/OlswLTlhLWZdezJ9KXsyLDR9fChyZ2J8aHNsKWE/XFwoKC0/W1xcZFxcLl0rJT9bLFxcc10rKXsyfSgtP1tcXGRcXC5dKyU/KVxccypbXFwsXFwvXT9cXHMqW1xcZFxcLl0qJT9cXCkpL2dpO1xuY29uc3Qgc2luZ2xlQ29sb3JSZWdleCA9IC9eKCNbMC05YS1mXXszfXwjKD86WzAtOWEtZl17Mn0pezIsNH18KHJnYnxoc2wpYT9cXCgoLT9bXFxkXFwuXSslP1ssXFxzXSspezJ9KC0/W1xcZFxcLl0rJT8pXFxzKltcXCxcXC9dP1xccypbXFxkXFwuXSolP1xcKSkkL2k7XG5mdW5jdGlvbiBpc1N0cmluZyh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IHsgY2xhbXAsIGNvbG9yUmVnZXgsIGZsb2F0UmVnZXgsIGlzU3RyaW5nLCBzYW5pdGl6ZSwgc2luZ2xlQ29sb3JSZWdleCB9O1xuIiwiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy5tanMnO1xuXG5jb25zdCBjcmVhdGVVbml0VHlwZSA9ICh1bml0KSA9PiAoe1xuICAgIHRlc3Q6ICh2KSA9PiBpc1N0cmluZyh2KSAmJiB2LmVuZHNXaXRoKHVuaXQpICYmIHYuc3BsaXQoJyAnKS5sZW5ndGggPT09IDEsXG4gICAgcGFyc2U6IHBhcnNlRmxvYXQsXG4gICAgdHJhbnNmb3JtOiAodikgPT4gYCR7dn0ke3VuaXR9YCxcbn0pO1xuY29uc3QgZGVncmVlcyA9IGNyZWF0ZVVuaXRUeXBlKCdkZWcnKTtcbmNvbnN0IHBlcmNlbnQgPSBjcmVhdGVVbml0VHlwZSgnJScpO1xuY29uc3QgcHggPSBjcmVhdGVVbml0VHlwZSgncHgnKTtcbmNvbnN0IHZoID0gY3JlYXRlVW5pdFR5cGUoJ3ZoJyk7XG5jb25zdCB2dyA9IGNyZWF0ZVVuaXRUeXBlKCd2dycpO1xuY29uc3QgcHJvZ3Jlc3NQZXJjZW50YWdlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwZXJjZW50KSwgeyBwYXJzZTogKHYpID0+IHBlcmNlbnQucGFyc2UodikgLyAxMDAsIHRyYW5zZm9ybTogKHYpID0+IHBlcmNlbnQudHJhbnNmb3JtKHYgKiAxMDApIH0pO1xuXG5leHBvcnQgeyBkZWdyZWVzLCBwZXJjZW50LCBwcm9ncmVzc1BlcmNlbnRhZ2UsIHB4LCB2aCwgdncgfTtcbiIsImltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcblxuY29uc3QgbnVtYmVyID0ge1xuICAgIHRlc3Q6ICh2KSA9PiB0eXBlb2YgdiA9PT0gJ251bWJlcicsXG4gICAgcGFyc2U6IHBhcnNlRmxvYXQsXG4gICAgdHJhbnNmb3JtOiAodikgPT4gdixcbn07XG5jb25zdCBhbHBoYSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbnVtYmVyKSwgeyB0cmFuc2Zvcm06IGNsYW1wKDAsIDEpIH0pO1xuY29uc3Qgc2NhbGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG51bWJlciksIHsgZGVmYXVsdDogMSB9KTtcblxuZXhwb3J0IHsgYWxwaGEsIG51bWJlciwgc2NhbGUgfTtcbiIsImltcG9ydCB7IG51bWJlciB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcblxuY29uc3QgaW50ID0ge1xuICAgIC4uLm51bWJlcixcbiAgICB0cmFuc2Zvcm06IE1hdGgucm91bmQsXG59O1xuXG5leHBvcnQgeyBpbnQgfTtcbiIsImltcG9ydCB7IHB4LCBkZWdyZWVzLCBzY2FsZSwgYWxwaGEsIHByb2dyZXNzUGVyY2VudGFnZSB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IGludCB9IGZyb20gJy4vdHlwZS1pbnQubWpzJztcblxuY29uc3QgbnVtYmVyVmFsdWVUeXBlcyA9IHtcbiAgICAvLyBCb3JkZXIgcHJvcHNcbiAgICBib3JkZXJXaWR0aDogcHgsXG4gICAgYm9yZGVyVG9wV2lkdGg6IHB4LFxuICAgIGJvcmRlclJpZ2h0V2lkdGg6IHB4LFxuICAgIGJvcmRlckJvdHRvbVdpZHRoOiBweCxcbiAgICBib3JkZXJMZWZ0V2lkdGg6IHB4LFxuICAgIGJvcmRlclJhZGl1czogcHgsXG4gICAgcmFkaXVzOiBweCxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBweCxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogcHgsXG4gICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IHB4LFxuICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHB4LFxuICAgIC8vIFBvc2l0aW9uaW5nIHByb3BzXG4gICAgd2lkdGg6IHB4LFxuICAgIG1heFdpZHRoOiBweCxcbiAgICBoZWlnaHQ6IHB4LFxuICAgIG1heEhlaWdodDogcHgsXG4gICAgc2l6ZTogcHgsXG4gICAgdG9wOiBweCxcbiAgICByaWdodDogcHgsXG4gICAgYm90dG9tOiBweCxcbiAgICBsZWZ0OiBweCxcbiAgICAvLyBTcGFjaW5nIHByb3BzXG4gICAgcGFkZGluZzogcHgsXG4gICAgcGFkZGluZ1RvcDogcHgsXG4gICAgcGFkZGluZ1JpZ2h0OiBweCxcbiAgICBwYWRkaW5nQm90dG9tOiBweCxcbiAgICBwYWRkaW5nTGVmdDogcHgsXG4gICAgbWFyZ2luOiBweCxcbiAgICBtYXJnaW5Ub3A6IHB4LFxuICAgIG1hcmdpblJpZ2h0OiBweCxcbiAgICBtYXJnaW5Cb3R0b206IHB4LFxuICAgIG1hcmdpbkxlZnQ6IHB4LFxuICAgIC8vIFRyYW5zZm9ybSBwcm9wc1xuICAgIHJvdGF0ZTogZGVncmVlcyxcbiAgICByb3RhdGVYOiBkZWdyZWVzLFxuICAgIHJvdGF0ZVk6IGRlZ3JlZXMsXG4gICAgcm90YXRlWjogZGVncmVlcyxcbiAgICBzY2FsZSxcbiAgICBzY2FsZVg6IHNjYWxlLFxuICAgIHNjYWxlWTogc2NhbGUsXG4gICAgc2NhbGVaOiBzY2FsZSxcbiAgICBza2V3OiBkZWdyZWVzLFxuICAgIHNrZXdYOiBkZWdyZWVzLFxuICAgIHNrZXdZOiBkZWdyZWVzLFxuICAgIGRpc3RhbmNlOiBweCxcbiAgICB0cmFuc2xhdGVYOiBweCxcbiAgICB0cmFuc2xhdGVZOiBweCxcbiAgICB0cmFuc2xhdGVaOiBweCxcbiAgICB4OiBweCxcbiAgICB5OiBweCxcbiAgICB6OiBweCxcbiAgICBwZXJzcGVjdGl2ZTogcHgsXG4gICAgdHJhbnNmb3JtUGVyc3BlY3RpdmU6IHB4LFxuICAgIG9wYWNpdHk6IGFscGhhLFxuICAgIG9yaWdpblg6IHByb2dyZXNzUGVyY2VudGFnZSxcbiAgICBvcmlnaW5ZOiBwcm9ncmVzc1BlcmNlbnRhZ2UsXG4gICAgb3JpZ2luWjogcHgsXG4gICAgLy8gTWlzY1xuICAgIHpJbmRleDogaW50LFxuICAgIC8vIFNWR1xuICAgIGZpbGxPcGFjaXR5OiBhbHBoYSxcbiAgICBzdHJva2VPcGFjaXR5OiBhbHBoYSxcbiAgICBudW1PY3RhdmVzOiBpbnQsXG59O1xuXG5leHBvcnQgeyBudW1iZXJWYWx1ZVR5cGVzIH07XG4iLCJpbXBvcnQgeyBidWlsZFRyYW5zZm9ybSB9IGZyb20gJy4vYnVpbGQtdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBpc0NTU1ZhcmlhYmxlIH0gZnJvbSAnLi4vLi4vZG9tL3V0aWxzL2lzLWNzcy12YXJpYWJsZS5tanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgZ2V0VmFsdWVBc1R5cGUgfSBmcm9tICcuLi8uLi9kb20vdmFsdWUtdHlwZXMvZ2V0LWFzLXR5cGUubWpzJztcbmltcG9ydCB7IG51bWJlclZhbHVlVHlwZXMgfSBmcm9tICcuLi8uLi9kb20vdmFsdWUtdHlwZXMvbnVtYmVyLm1qcyc7XG5cbmZ1bmN0aW9uIGJ1aWxkSFRNTFN0eWxlcyhzdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCB0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgIGNvbnN0IHsgc3R5bGUsIHZhcnMsIHRyYW5zZm9ybSwgdHJhbnNmb3JtS2V5cywgdHJhbnNmb3JtT3JpZ2luIH0gPSBzdGF0ZTtcbiAgICB0cmFuc2Zvcm1LZXlzLmxlbmd0aCA9IDA7XG4gICAgLy8gVHJhY2sgd2hldGhlciB3ZSBlbmNvdW50ZXIgYW55IHRyYW5zZm9ybSBvciB0cmFuc2Zvcm1PcmlnaW4gdmFsdWVzLlxuICAgIGxldCBoYXNUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgICBsZXQgaGFzVHJhbnNmb3JtT3JpZ2luID0gZmFsc2U7XG4gICAgLy8gRG9lcyB0aGUgY2FsY3VsYXRlZCB0cmFuc2Zvcm0gZXNzZW50aWFsbHkgZXF1YWwgXCJub25lXCI/XG4gICAgbGV0IHRyYW5zZm9ybUlzTm9uZSA9IHRydWU7XG4gICAgLyoqXG4gICAgICogTG9vcCBvdmVyIGFsbCBvdXIgbGF0ZXN0IGFuaW1hdGVkIHZhbHVlcyBhbmQgZGVjaWRlIHdoZXRoZXIgdG8gaGFuZGxlIHRoZW1cbiAgICAgKiBhcyBhIHN0eWxlIG9yIENTUyB2YXJpYWJsZS5cbiAgICAgKlxuICAgICAqIFRyYW5zZm9ybXMgYW5kIHRyYW5zZm9ybSBvcmlnaW5zIGFyZSBrZXB0IHNlcGVyYXRlbHkgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZy5cbiAgICAgKi9cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBsYXRlc3RWYWx1ZXMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBsYXRlc3RWYWx1ZXNba2V5XTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoaXMgaXMgYSBDU1MgdmFyaWFibGUgd2UgZG9uJ3QgZG8gYW55IGZ1cnRoZXIgcHJvY2Vzc2luZy5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpc0NTU1ZhcmlhYmxlKGtleSkpIHtcbiAgICAgICAgICAgIHZhcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCB0aGUgdmFsdWUgdG8gaXRzIGRlZmF1bHQgdmFsdWUgdHlwZSwgaWUgMCAtPiBcIjBweFwiXG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IG51bWJlclZhbHVlVHlwZXNba2V5XTtcbiAgICAgICAgY29uc3QgdmFsdWVBc1R5cGUgPSBnZXRWYWx1ZUFzVHlwZSh2YWx1ZSwgdmFsdWVUeXBlKTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybVByb3BzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgdHJhbnNmb3JtLCBmbGFnIHRvIGVuYWJsZSBmdXJ0aGVyIHRyYW5zZm9ybSBwcm9jZXNzaW5nXG4gICAgICAgICAgICBoYXNUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgdHJhbnNmb3JtW2tleV0gPSB2YWx1ZUFzVHlwZTtcbiAgICAgICAgICAgIHRyYW5zZm9ybUtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBrbm93IHdlIGhhdmUgYSBub24tZGVmYXVsdCB0cmFuc2Zvcm0sIGVhcmx5IHJldHVyblxuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Jc05vbmUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgY2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYSBkZWZhdWx0IHRyYW5zZm9ybVxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAodmFsdWVUeXBlLmRlZmF1bHQgfHwgMCkpXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtSXNOb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvcmlnaW5cIikpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSB0cmFuc2Zvcm0gb3JpZ2luLCBmbGFnIGFuZCBlbmFibGUgZnVydGhlciB0cmFuc2Zvcm0tb3JpZ2luIHByb2Nlc3NpbmdcbiAgICAgICAgICAgIGhhc1RyYW5zZm9ybU9yaWdpbiA9IHRydWU7XG4gICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW5ba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNUcmFuc2Zvcm0gfHwgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gYnVpbGRUcmFuc2Zvcm0oc3RhdGUsIG9wdGlvbnMsIHRyYW5zZm9ybUlzTm9uZSwgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICghbGF0ZXN0VmFsdWVzLnRyYW5zZm9ybSAmJiBzdHlsZS50cmFuc2Zvcm0pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlIGhhdmUgcHJldmlvdXNseSBjcmVhdGVkIGEgdHJhbnNmb3JtIGJ1dCBjdXJyZW50bHkgZG9uJ3QgaGF2ZSBhbnksXG4gICAgICAgICAqIHJlc2V0IHRyYW5zZm9ybSBzdHlsZSB0byBub25lLlxuICAgICAgICAgKi9cbiAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gXCJub25lXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1aWxkIGEgdHJhbnNmb3JtT3JpZ2luIHN0eWxlLiBVc2VzIHRoZSBzYW1lIGRlZmF1bHRzIGFzIHRoZSBicm93c2VyIGZvclxuICAgICAqIHVuZGVmaW5lZCBvcmlnaW5zLlxuICAgICAqL1xuICAgIGlmIChoYXNUcmFuc2Zvcm1PcmlnaW4pIHtcbiAgICAgICAgY29uc3QgeyBvcmlnaW5YID0gXCI1MCVcIiwgb3JpZ2luWSA9IFwiNTAlXCIsIG9yaWdpblogPSAwLCB9ID0gdHJhbnNmb3JtT3JpZ2luO1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgJHtvcmlnaW5YfSAke29yaWdpbll9ICR7b3JpZ2luWn1gO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgYnVpbGRIVE1MU3R5bGVzIH07XG4iLCJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGb3JjZWRNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL21vdGlvbi91dGlscy9pcy1mb3JjZWQtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBidWlsZEhUTUxTdHlsZXMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlSHRtbFJlbmRlclN0YXRlIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5cbmZ1bmN0aW9uIGNvcHlSYXdWYWx1ZXNPbmx5KHRhcmdldCwgc291cmNlLCBwcm9wcykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoIWlzTW90aW9uVmFsdWUoc291cmNlW2tleV0pICYmICFpc0ZvcmNlZE1vdGlvblZhbHVlKGtleSwgcHJvcHMpKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdXNlSW5pdGlhbE1vdGlvblZhbHVlcyh7IHRyYW5zZm9ybVRlbXBsYXRlIH0sIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykge1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBjcmVhdGVIdG1sUmVuZGVyU3RhdGUoKTtcbiAgICAgICAgYnVpbGRIVE1MU3R5bGVzKHN0YXRlLCB2aXN1YWxTdGF0ZSwgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogIWlzU3RhdGljIH0sIHRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnZhcnMsIHN0YXRlLnN0eWxlKTtcbiAgICB9LCBbdmlzdWFsU3RhdGVdKTtcbn1cbmZ1bmN0aW9uIHVzZVN0eWxlKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICBjb25zdCBzdHlsZVByb3AgPSBwcm9wcy5zdHlsZSB8fCB7fTtcbiAgICBjb25zdCBzdHlsZSA9IHt9O1xuICAgIC8qKlxuICAgICAqIENvcHkgbm9uLU1vdGlvbiBWYWx1ZXMgc3RyYWlnaHQgaW50byBzdHlsZVxuICAgICAqL1xuICAgIGNvcHlSYXdWYWx1ZXNPbmx5KHN0eWxlLCBzdHlsZVByb3AsIHByb3BzKTtcbiAgICBPYmplY3QuYXNzaWduKHN0eWxlLCB1c2VJbml0aWFsTW90aW9uVmFsdWVzKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpKTtcbiAgICByZXR1cm4gcHJvcHMudHJhbnNmb3JtVmFsdWVzID8gcHJvcHMudHJhbnNmb3JtVmFsdWVzKHN0eWxlKSA6IHN0eWxlO1xufVxuZnVuY3Rpb24gdXNlSFRNTFByb3BzKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICAvLyBUaGUgYGFueWAgaXNuJ3QgaWRlYWwgYnV0IGl0IGlzIHRoZSB0eXBlIG9mIGNyZWF0ZUVsZW1lbnQgcHJvcHMgYXJndW1lbnRcbiAgICBjb25zdCBodG1sUHJvcHMgPSB7fTtcbiAgICBjb25zdCBzdHlsZSA9IHVzZVN0eWxlKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpO1xuICAgIGlmIChwcm9wcy5kcmFnICYmIHByb3BzLmRyYWdMaXN0ZW5lciAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgZ2hvc3QgZWxlbWVudCB3aGVuIGEgdXNlciBkcmFnc1xuICAgICAgICBodG1sUHJvcHMuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIC8vIERpc2FibGUgdGV4dCBzZWxlY3Rpb25cbiAgICAgICAgc3R5bGUudXNlclNlbGVjdCA9XG4gICAgICAgICAgICBzdHlsZS5XZWJraXRVc2VyU2VsZWN0ID1cbiAgICAgICAgICAgICAgICBzdHlsZS5XZWJraXRUb3VjaENhbGxvdXQgPVxuICAgICAgICAgICAgICAgICAgICBcIm5vbmVcIjtcbiAgICAgICAgLy8gRGlzYWJsZSBzY3JvbGxpbmcgb24gdGhlIGRyYWdnYWJsZSBkaXJlY3Rpb25cbiAgICAgICAgc3R5bGUudG91Y2hBY3Rpb24gPVxuICAgICAgICAgICAgcHJvcHMuZHJhZyA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgID8gXCJub25lXCJcbiAgICAgICAgICAgICAgICA6IGBwYW4tJHtwcm9wcy5kcmFnID09PSBcInhcIiA/IFwieVwiIDogXCJ4XCJ9YDtcbiAgICB9XG4gICAgaHRtbFByb3BzLnN0eWxlID0gc3R5bGU7XG4gICAgcmV0dXJuIGh0bWxQcm9wcztcbn1cblxuZXhwb3J0IHsgY29weVJhd1ZhbHVlc09ubHksIHVzZUhUTUxQcm9wcyB9O1xuIiwiY29uc3QgY3JlYXRlSHRtbFJlbmRlclN0YXRlID0gKCkgPT4gKHtcbiAgICBzdHlsZToge30sXG4gICAgdHJhbnNmb3JtOiB7fSxcbiAgICB0cmFuc2Zvcm1LZXlzOiBbXSxcbiAgICB0cmFuc2Zvcm1PcmlnaW46IHt9LFxuICAgIHZhcnM6IHt9LFxufSk7XG5cbmV4cG9ydCB7IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSB9O1xuIiwiY29uc3QgYW5pbWF0aW9uUHJvcHMgPSBbXG4gICAgXCJhbmltYXRlXCIsXG4gICAgXCJleGl0XCIsXG4gICAgXCJ2YXJpYW50c1wiLFxuICAgIFwid2hpbGVIb3ZlclwiLFxuICAgIFwid2hpbGVUYXBcIixcbiAgICBcIndoaWxlRm9jdXNcIixcbiAgICBcIndoaWxlRHJhZ1wiLFxuICAgIFwid2hpbGVJblZpZXdcIixcbl07XG5jb25zdCB0YXBQcm9wcyA9IFtcIndoaWxlVGFwXCIsIFwib25UYXBcIiwgXCJvblRhcFN0YXJ0XCIsIFwib25UYXBDYW5jZWxcIl07XG5jb25zdCBwYW5Qcm9wcyA9IFtcIm9uUGFuXCIsIFwib25QYW5TdGFydFwiLCBcIm9uUGFuU2Vzc2lvblN0YXJ0XCIsIFwib25QYW5FbmRcIl07XG5jb25zdCBpblZpZXdQcm9wcyA9IFtcbiAgICBcIndoaWxlSW5WaWV3XCIsXG4gICAgXCJvblZpZXdwb3J0RW50ZXJcIixcbiAgICBcIm9uVmlld3BvcnRMZWF2ZVwiLFxuICAgIFwidmlld3BvcnRcIixcbl07XG4vKipcbiAqIEEgbGlzdCBvZiBhbGwgdmFsaWQgTW90aW9uUHJvcHMuXG4gKlxuICogQHByaXZhdGVSZW1hcmtzXG4gKiBUaGlzIGRvZXNuJ3QgdGhyb3cgaWYgYSBgTW90aW9uUHJvcGAgbmFtZSBpcyBtaXNzaW5nIC0gaXQgc2hvdWxkLlxuICovXG5jb25zdCB2YWxpZE1vdGlvblByb3BzID0gbmV3IFNldChbXG4gICAgXCJpbml0aWFsXCIsXG4gICAgXCJzdHlsZVwiLFxuICAgIFwidmFyaWFudHNcIixcbiAgICBcInRyYW5zaXRpb25cIixcbiAgICBcInRyYW5zZm9ybVRlbXBsYXRlXCIsXG4gICAgXCJ0cmFuc2Zvcm1WYWx1ZXNcIixcbiAgICBcImN1c3RvbVwiLFxuICAgIFwiaW5oZXJpdFwiLFxuICAgIFwibGF5b3V0XCIsXG4gICAgXCJsYXlvdXRJZFwiLFxuICAgIFwibGF5b3V0RGVwZW5kZW5jeVwiLFxuICAgIFwib25MYXlvdXRBbmltYXRpb25TdGFydFwiLFxuICAgIFwib25MYXlvdXRBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwib25MYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJvbkJlZm9yZUxheW91dE1lYXN1cmVcIixcbiAgICBcIm9uQW5pbWF0aW9uU3RhcnRcIixcbiAgICBcIm9uQW5pbWF0aW9uQ29tcGxldGVcIixcbiAgICBcIm9uVXBkYXRlXCIsXG4gICAgXCJvbkRyYWdTdGFydFwiLFxuICAgIFwib25EcmFnXCIsXG4gICAgXCJvbkRyYWdFbmRcIixcbiAgICBcIm9uTWVhc3VyZURyYWdDb25zdHJhaW50c1wiLFxuICAgIFwib25EaXJlY3Rpb25Mb2NrXCIsXG4gICAgXCJvbkRyYWdUcmFuc2l0aW9uRW5kXCIsXG4gICAgXCJkcmFnXCIsXG4gICAgXCJkcmFnQ29udHJvbHNcIixcbiAgICBcImRyYWdMaXN0ZW5lclwiLFxuICAgIFwiZHJhZ0NvbnN0cmFpbnRzXCIsXG4gICAgXCJkcmFnRGlyZWN0aW9uTG9ja1wiLFxuICAgIFwiZHJhZ1NuYXBUb09yaWdpblwiLFxuICAgIFwiX2RyYWdYXCIsXG4gICAgXCJfZHJhZ1lcIixcbiAgICBcImRyYWdFbGFzdGljXCIsXG4gICAgXCJkcmFnTW9tZW50dW1cIixcbiAgICBcImRyYWdQcm9wYWdhdGlvblwiLFxuICAgIFwiZHJhZ1RyYW5zaXRpb25cIixcbiAgICBcIm9uSG92ZXJTdGFydFwiLFxuICAgIFwib25Ib3ZlckVuZFwiLFxuICAgIFwibGF5b3V0U2Nyb2xsXCIsXG4gICAgLi4uaW5WaWV3UHJvcHMsXG4gICAgLi4udGFwUHJvcHMsXG4gICAgLi4uYW5pbWF0aW9uUHJvcHMsXG4gICAgLi4ucGFuUHJvcHMsXG5dKTtcbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIHByb3AgbmFtZSBpcyBhIHZhbGlkIGBNb3Rpb25Qcm9wYCBrZXkuXG4gKlxuICogQHBhcmFtIGtleSAtIE5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGNoZWNrXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaXMga2V5IGlzIGEgdmFsaWQgYE1vdGlvblByb3BgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZE1vdGlvblByb3Aoa2V5KSB7XG4gICAgcmV0dXJuIHZhbGlkTW90aW9uUHJvcHMuaGFzKGtleSk7XG59XG5cbmV4cG9ydCB7IGlzVmFsaWRNb3Rpb25Qcm9wIH07XG4iLCJpbXBvcnQgeyBpc1ZhbGlkTW90aW9uUHJvcCB9IGZyb20gJy4uLy4uLy4uL21vdGlvbi91dGlscy92YWxpZC1wcm9wLm1qcyc7XG5cbmxldCBzaG91bGRGb3J3YXJkID0gKGtleSkgPT4gIWlzVmFsaWRNb3Rpb25Qcm9wKGtleSk7XG5mdW5jdGlvbiBsb2FkRXh0ZXJuYWxJc1ZhbGlkUHJvcChpc1ZhbGlkUHJvcCkge1xuICAgIGlmICghaXNWYWxpZFByb3ApXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBFeHBsaWNpdGx5IGZpbHRlciBvdXIgZXZlbnRzXG4gICAgc2hvdWxkRm9yd2FyZCA9IChrZXkpID0+IGtleS5zdGFydHNXaXRoKFwib25cIikgPyAhaXNWYWxpZE1vdGlvblByb3Aoa2V5KSA6IGlzVmFsaWRQcm9wKGtleSk7XG59XG4vKipcbiAqIEVtb3Rpb24gYW5kIFN0eWxlZCBDb21wb25lbnRzIGJvdGggYWxsb3cgdXNlcnMgdG8gcGFzcyB0aHJvdWdoIGFyYml0cmFyeSBwcm9wcyB0byB0aGVpciBjb21wb25lbnRzXG4gKiB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBDU1MuIFRoZXkgYm90aCB1c2UgdGhlIGBAZW1vdGlvbi9pcy1wcm9wLXZhbGlkYCBwYWNrYWdlIHRvIGRldGVybWluZSB3aGljaFxuICogb2YgdGhlc2Ugc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgdW5kZXJseWluZyBET00gbm9kZS5cbiAqXG4gKiBIb3dldmVyLCB3aGVuIHN0eWxpbmcgYSBNb3Rpb24gY29tcG9uZW50IGBzdHlsZWQobW90aW9uLmRpdilgLCBib3RoIHBhY2thZ2VzIHBhc3MgdGhyb3VnaCAqYWxsKiBwcm9wc1xuICogYXMgaXQncyBzZWVuIGFzIGFuIGFyYml0cmFyeSBjb21wb25lbnQgcmF0aGVyIHRoYW4gYSBET00gbm9kZS4gTW90aW9uIG9ubHkgYWxsb3dzIGFyYml0cmFyeSBwcm9wc1xuICogcGFzc2VkIHRocm91Z2ggdGhlIGBjdXN0b21gIHByb3Agc28gaXQgZG9lc24ndCAqbmVlZCogdGhlIHBheWxvYWQgb3IgY29tcHV0YXRpb25hbCBvdmVyaGVhZCBvZlxuICogYEBlbW90aW9uL2lzLXByb3AtdmFsaWRgLCBob3dldmVyIHRvIGZpeCB0aGlzIHByb2JsZW0gd2UgbmVlZCB0byB1c2UgaXQuXG4gKlxuICogQnkgbWFraW5nIGl0IGFuIG9wdGlvbmFsRGVwZW5kZW5jeSB3ZSBjYW4gb2ZmZXIgdGhpcyBmdW5jdGlvbmFsaXR5IG9ubHkgaW4gdGhlIHNpdHVhdGlvbnMgd2hlcmUgaXQnc1xuICogYWN0dWFsbHkgcmVxdWlyZWQuXG4gKi9cbnRyeSB7XG4gICAgLyoqXG4gICAgICogV2UgYXR0ZW1wdCB0byBpbXBvcnQgdGhpcyBwYWNrYWdlIGJ1dCByZXF1aXJlIHdvbid0IGJlIGRlZmluZWQgaW4gZXNtIGVudmlyb25tZW50cywgaW4gdGhhdCBjYXNlXG4gICAgICogaXNQcm9wVmFsaWQgd2lsbCBoYXZlIHRvIGJlIHByb3ZpZGVkIHZpYSBgTW90aW9uQ29udGV4dGAuIEluIGEgNi4wLjAgdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgcmVtb3ZlZFxuICAgICAqIGluIGZhdm91ciBvZiBleHBsaWNpdCBpbmplY3Rpb24uXG4gICAgICovXG4gICAgbG9hZEV4dGVybmFsSXNWYWxpZFByb3AocmVxdWlyZShcIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIikuZGVmYXVsdCk7XG59XG5jYXRjaCAoX2EpIHtcbiAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGFjdHVhbGx5IGRvIGFueXRoaW5nIGhlcmUgLSB0aGUgZmFsbGJhY2sgaXMgdGhlIGV4aXN0aW5nIGBpc1Byb3BWYWxpZGAuXG59XG5mdW5jdGlvbiBmaWx0ZXJQcm9wcyhwcm9wcywgaXNEb20sIGZvcndhcmRNb3Rpb25Qcm9wcykge1xuICAgIGNvbnN0IGZpbHRlcmVkUHJvcHMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2hvdWxkRm9yd2FyZChrZXkpIHx8XG4gICAgICAgICAgICAoZm9yd2FyZE1vdGlvblByb3BzID09PSB0cnVlICYmIGlzVmFsaWRNb3Rpb25Qcm9wKGtleSkpIHx8XG4gICAgICAgICAgICAoIWlzRG9tICYmICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpKSB8fFxuICAgICAgICAgICAgLy8gSWYgdHJ5aW5nIHRvIHVzZSBuYXRpdmUgSFRNTCBkcmFnIGV2ZW50cywgZm9yd2FyZCBkcmFnIGxpc3RlbmVyc1xuICAgICAgICAgICAgKHByb3BzW1wiZHJhZ2dhYmxlXCJdICYmIGtleS5zdGFydHNXaXRoKFwib25EcmFnXCIpKSkge1xuICAgICAgICAgICAgZmlsdGVyZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRQcm9wcztcbn1cblxuZXhwb3J0IHsgZmlsdGVyUHJvcHMsIGxvYWRFeHRlcm5hbElzVmFsaWRQcm9wIH07XG4iLCJpbXBvcnQgeyBweCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcblxuZnVuY3Rpb24gY2FsY09yaWdpbihvcmlnaW4sIG9mZnNldCwgc2l6ZSkge1xuICAgIHJldHVybiB0eXBlb2Ygb3JpZ2luID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gb3JpZ2luXG4gICAgICAgIDogcHgudHJhbnNmb3JtKG9mZnNldCArIHNpemUgKiBvcmlnaW4pO1xufVxuLyoqXG4gKiBUaGUgU1ZHIHRyYW5zZm9ybSBvcmlnaW4gZGVmYXVsdHMgYXJlIGRpZmZlcmVudCB0byBDU1MgYW5kIGlzIGxlc3MgaW50dWl0aXZlLFxuICogc28gd2UgdXNlIHRoZSBtZWFzdXJlZCBkaW1lbnNpb25zIG9mIHRoZSBTVkcgdG8gcmVjb25jaWxlIHRoZXNlLlxuICovXG5mdW5jdGlvbiBjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luKGRpbWVuc2lvbnMsIG9yaWdpblgsIG9yaWdpblkpIHtcbiAgICBjb25zdCBweE9yaWdpblggPSBjYWxjT3JpZ2luKG9yaWdpblgsIGRpbWVuc2lvbnMueCwgZGltZW5zaW9ucy53aWR0aCk7XG4gICAgY29uc3QgcHhPcmlnaW5ZID0gY2FsY09yaWdpbihvcmlnaW5ZLCBkaW1lbnNpb25zLnksIGRpbWVuc2lvbnMuaGVpZ2h0KTtcbiAgICByZXR1cm4gYCR7cHhPcmlnaW5YfSAke3B4T3JpZ2luWX1gO1xufVxuXG5leHBvcnQgeyBjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luIH07XG4iLCJpbXBvcnQgeyBweCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcblxuY29uc3QgZGFzaEtleXMgPSB7XG4gICAgb2Zmc2V0OiBcInN0cm9rZS1kYXNob2Zmc2V0XCIsXG4gICAgYXJyYXk6IFwic3Ryb2tlLWRhc2hhcnJheVwiLFxufTtcbmNvbnN0IGNhbWVsS2V5cyA9IHtcbiAgICBvZmZzZXQ6IFwic3Ryb2tlRGFzaG9mZnNldFwiLFxuICAgIGFycmF5OiBcInN0cm9rZURhc2hhcnJheVwiLFxufTtcbi8qKlxuICogQnVpbGQgU1ZHIHBhdGggcHJvcGVydGllcy4gVXNlcyB0aGUgcGF0aCdzIG1lYXN1cmVkIGxlbmd0aCB0byBjb252ZXJ0XG4gKiBvdXIgY3VzdG9tIHBhdGhMZW5ndGgsIHBhdGhTcGFjaW5nIGFuZCBwYXRoT2Zmc2V0IGludG8gc3Ryb2tlLWRhc2hvZmZzZXRcbiAqIGFuZCBzdHJva2UtZGFzaGFycmF5IGF0dHJpYnV0ZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBtdXRhdGl2ZSB0byByZWR1Y2UgcGVyLWZyYW1lIEdDLlxuICovXG5mdW5jdGlvbiBidWlsZFNWR1BhdGgoYXR0cnMsIGxlbmd0aCwgc3BhY2luZyA9IDEsIG9mZnNldCA9IDAsIHVzZURhc2hDYXNlID0gdHJ1ZSkge1xuICAgIC8vIE5vcm1hbGlzZSBwYXRoIGxlbmd0aCBieSBzZXR0aW5nIFNWRyBhdHRyaWJ1dGUgcGF0aExlbmd0aCB0byAxXG4gICAgYXR0cnMucGF0aExlbmd0aCA9IDE7XG4gICAgLy8gV2UgdXNlIGRhc2ggY2FzZSB3aGVuIHNldHRpbmcgYXR0cmlidXRlcyBkaXJlY3RseSB0byB0aGUgRE9NIG5vZGUgYW5kIGNhbWVsIGNhc2VcbiAgICAvLyB3aGVuIGRlZmluaW5nIHByb3BzIG9uIGEgUmVhY3QgY29tcG9uZW50LlxuICAgIGNvbnN0IGtleXMgPSB1c2VEYXNoQ2FzZSA/IGRhc2hLZXlzIDogY2FtZWxLZXlzO1xuICAgIC8vIEJ1aWxkIHRoZSBkYXNoIG9mZnNldFxuICAgIGF0dHJzW2tleXMub2Zmc2V0XSA9IHB4LnRyYW5zZm9ybSgtb2Zmc2V0KTtcbiAgICAvLyBCdWlsZCB0aGUgZGFzaCBhcnJheVxuICAgIGNvbnN0IHBhdGhMZW5ndGggPSBweC50cmFuc2Zvcm0obGVuZ3RoKTtcbiAgICBjb25zdCBwYXRoU3BhY2luZyA9IHB4LnRyYW5zZm9ybShzcGFjaW5nKTtcbiAgICBhdHRyc1trZXlzLmFycmF5XSA9IGAke3BhdGhMZW5ndGh9ICR7cGF0aFNwYWNpbmd9YDtcbn1cblxuZXhwb3J0IHsgYnVpbGRTVkdQYXRoIH07XG4iLCJpbXBvcnQgeyBidWlsZEhUTUxTdHlsZXMgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMnO1xuaW1wb3J0IHsgY2FsY1NWR1RyYW5zZm9ybU9yaWdpbiB9IGZyb20gJy4vdHJhbnNmb3JtLW9yaWdpbi5tanMnO1xuaW1wb3J0IHsgYnVpbGRTVkdQYXRoIH0gZnJvbSAnLi9wYXRoLm1qcyc7XG5cbi8qKlxuICogQnVpbGQgU1ZHIHZpc3VhbCBhdHRyYnV0ZXMsIGxpa2UgY3ggYW5kIHN0eWxlLnRyYW5zZm9ybVxuICovXG5mdW5jdGlvbiBidWlsZFNWR0F0dHJzKHN0YXRlLCB7IGF0dHJYLCBhdHRyWSwgb3JpZ2luWCwgb3JpZ2luWSwgcGF0aExlbmd0aCwgcGF0aFNwYWNpbmcgPSAxLCBwYXRoT2Zmc2V0ID0gMCwgXG4vLyBUaGlzIGlzIG9iamVjdCBjcmVhdGlvbiwgd2hpY2ggd2UgdHJ5IHRvIGF2b2lkIHBlci1mcmFtZS5cbi4uLmxhdGVzdCB9LCBvcHRpb25zLCB0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgIGJ1aWxkSFRNTFN0eWxlcyhzdGF0ZSwgbGF0ZXN0LCBvcHRpb25zLCB0cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgc3RhdGUuYXR0cnMgPSBzdGF0ZS5zdHlsZTtcbiAgICBzdGF0ZS5zdHlsZSA9IHt9O1xuICAgIGNvbnN0IHsgYXR0cnMsIHN0eWxlLCBkaW1lbnNpb25zIH0gPSBzdGF0ZTtcbiAgICAvKipcbiAgICAgKiBIb3dldmVyLCB3ZSBhcHBseSB0cmFuc2Zvcm1zIGFzIENTUyB0cmFuc2Zvcm1zLiBTbyBpZiB3ZSBkZXRlY3QgYSB0cmFuc2Zvcm0gd2UgdGFrZSBpdCBmcm9tIGF0dHJzXG4gICAgICogYW5kIGNvcHkgaXQgaW50byBzdHlsZS5cbiAgICAgKi9cbiAgICBpZiAoYXR0cnMudHJhbnNmb3JtKSB7XG4gICAgICAgIGlmIChkaW1lbnNpb25zKVxuICAgICAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gYXR0cnMudHJhbnNmb3JtO1xuICAgICAgICBkZWxldGUgYXR0cnMudHJhbnNmb3JtO1xuICAgIH1cbiAgICAvLyBQYXJzZSB0cmFuc2Zvcm1PcmlnaW5cbiAgICBpZiAoZGltZW5zaW9ucyAmJlxuICAgICAgICAob3JpZ2luWCAhPT0gdW5kZWZpbmVkIHx8IG9yaWdpblkgIT09IHVuZGVmaW5lZCB8fCBzdHlsZS50cmFuc2Zvcm0pKSB7XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4oZGltZW5zaW9ucywgb3JpZ2luWCAhPT0gdW5kZWZpbmVkID8gb3JpZ2luWCA6IDAuNSwgb3JpZ2luWSAhPT0gdW5kZWZpbmVkID8gb3JpZ2luWSA6IDAuNSk7XG4gICAgfVxuICAgIC8vIFRyZWF0IHgveSBub3QgYXMgc2hvcnRjdXRzIGJ1dCBhcyBhY3R1YWwgYXR0cmlidXRlc1xuICAgIGlmIChhdHRyWCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBhdHRycy54ID0gYXR0clg7XG4gICAgaWYgKGF0dHJZICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGF0dHJzLnkgPSBhdHRyWTtcbiAgICAvLyBCdWlsZCBTVkcgcGF0aCBpZiBvbmUgaGFzIGJlZW4gZGVmaW5lZFxuICAgIGlmIChwYXRoTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYnVpbGRTVkdQYXRoKGF0dHJzLCBwYXRoTGVuZ3RoLCBwYXRoU3BhY2luZywgcGF0aE9mZnNldCwgZmFsc2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgYnVpbGRTVkdBdHRycyB9O1xuIiwiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvcHlSYXdWYWx1ZXNPbmx5IH0gZnJvbSAnLi4vaHRtbC91c2UtcHJvcHMubWpzJztcbmltcG9ydCB7IGJ1aWxkU1ZHQXR0cnMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLWF0dHJzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdmdSZW5kZXJTdGF0ZSB9IGZyb20gJy4vdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuXG5mdW5jdGlvbiB1c2VTVkdQcm9wcyhwcm9wcywgdmlzdWFsU3RhdGUpIHtcbiAgICBjb25zdCB2aXN1YWxQcm9wcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGNyZWF0ZVN2Z1JlbmRlclN0YXRlKCk7XG4gICAgICAgIGJ1aWxkU1ZHQXR0cnMoc3RhdGUsIHZpc3VhbFN0YXRlLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9LCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdGF0ZS5hdHRycyxcbiAgICAgICAgICAgIHN0eWxlOiB7IC4uLnN0YXRlLnN0eWxlIH0sXG4gICAgICAgIH07XG4gICAgfSwgW3Zpc3VhbFN0YXRlXSk7XG4gICAgaWYgKHByb3BzLnN0eWxlKSB7XG4gICAgICAgIGNvbnN0IHJhd1N0eWxlcyA9IHt9O1xuICAgICAgICBjb3B5UmF3VmFsdWVzT25seShyYXdTdHlsZXMsIHByb3BzLnN0eWxlLCBwcm9wcyk7XG4gICAgICAgIHZpc3VhbFByb3BzLnN0eWxlID0geyAuLi5yYXdTdHlsZXMsIC4uLnZpc3VhbFByb3BzLnN0eWxlIH07XG4gICAgfVxuICAgIHJldHVybiB2aXN1YWxQcm9wcztcbn1cblxuZXhwb3J0IHsgdXNlU1ZHUHJvcHMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuXG5jb25zdCBjcmVhdGVTdmdSZW5kZXJTdGF0ZSA9ICgpID0+ICh7XG4gICAgLi4uY3JlYXRlSHRtbFJlbmRlclN0YXRlKCksXG4gICAgYXR0cnM6IHt9LFxufSk7XG5cbmV4cG9ydCB7IGNyZWF0ZVN2Z1JlbmRlclN0YXRlIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSFRNTFByb3BzIH0gZnJvbSAnLi4vaHRtbC91c2UtcHJvcHMubWpzJztcbmltcG9ydCB7IGZpbHRlclByb3BzIH0gZnJvbSAnLi91dGlscy9maWx0ZXItcHJvcHMubWpzJztcbmltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi91dGlscy9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5pbXBvcnQgeyB1c2VTVkdQcm9wcyB9IGZyb20gJy4uL3N2Zy91c2UtcHJvcHMubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlVXNlUmVuZGVyKGZvcndhcmRNb3Rpb25Qcm9wcyA9IGZhbHNlKSB7XG4gICAgY29uc3QgdXNlUmVuZGVyID0gKENvbXBvbmVudCwgcHJvcHMsIHByb2plY3Rpb25JZCwgcmVmLCB7IGxhdGVzdFZhbHVlcyB9LCBpc1N0YXRpYykgPT4ge1xuICAgICAgICBjb25zdCB1c2VWaXN1YWxQcm9wcyA9IGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgICAgID8gdXNlU1ZHUHJvcHNcbiAgICAgICAgICAgIDogdXNlSFRNTFByb3BzO1xuICAgICAgICBjb25zdCB2aXN1YWxQcm9wcyA9IHVzZVZpc3VhbFByb3BzKHByb3BzLCBsYXRlc3RWYWx1ZXMsIGlzU3RhdGljKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRQcm9wcyA9IGZpbHRlclByb3BzKHByb3BzLCB0eXBlb2YgQ29tcG9uZW50ID09PSBcInN0cmluZ1wiLCBmb3J3YXJkTW90aW9uUHJvcHMpO1xuICAgICAgICBjb25zdCBlbGVtZW50UHJvcHMgPSB7XG4gICAgICAgICAgICAuLi5maWx0ZXJlZFByb3BzLFxuICAgICAgICAgICAgLi4udmlzdWFsUHJvcHMsXG4gICAgICAgICAgICByZWYsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChwcm9qZWN0aW9uSWQpIHtcbiAgICAgICAgICAgIGVsZW1lbnRQcm9wc1tcImRhdGEtcHJvamVjdGlvbi1pZFwiXSA9IHByb2plY3Rpb25JZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChDb21wb25lbnQsIGVsZW1lbnRQcm9wcyk7XG4gICAgfTtcbiAgICByZXR1cm4gdXNlUmVuZGVyO1xufVxuXG5leHBvcnQgeyBjcmVhdGVVc2VSZW5kZXIgfTtcbiIsIi8qKlxuICogQ29udmVydCBjYW1lbENhc2UgdG8gZGFzaC1jYXNlIHByb3BlcnRpZXMuXG4gKi9cbmNvbnN0IGNhbWVsVG9EYXNoID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKTtcblxuZXhwb3J0IHsgY2FtZWxUb0Rhc2ggfTtcbiIsImZ1bmN0aW9uIHJlbmRlckhUTUwoZWxlbWVudCwgeyBzdHlsZSwgdmFycyB9LCBzdHlsZVByb3AsIHByb2plY3Rpb24pIHtcbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlLCBwcm9qZWN0aW9uICYmIHByb2plY3Rpb24uZ2V0UHJvamVjdGlvblN0eWxlcyhzdHlsZVByb3ApKTtcbiAgICAvLyBMb29wIG92ZXIgYW55IENTUyB2YXJpYWJsZXMgYW5kIGFzc2lnbiB0aG9zZS5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YXJzKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YXJzW2tleV0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgcmVuZGVySFRNTCB9O1xuIiwiLyoqXG4gKiBBIHNldCBvZiBhdHRyaWJ1dGUgbmFtZXMgdGhhdCBhcmUgYWx3YXlzIHJlYWQvd3JpdHRlbiBhcyBjYW1lbCBjYXNlLlxuICovXG5jb25zdCBjYW1lbENhc2VBdHRyaWJ1dGVzID0gbmV3IFNldChbXG4gICAgXCJiYXNlRnJlcXVlbmN5XCIsXG4gICAgXCJkaWZmdXNlQ29uc3RhbnRcIixcbiAgICBcImtlcm5lbE1hdHJpeFwiLFxuICAgIFwia2VybmVsVW5pdExlbmd0aFwiLFxuICAgIFwia2V5U3BsaW5lc1wiLFxuICAgIFwia2V5VGltZXNcIixcbiAgICBcImxpbWl0aW5nQ29uZUFuZ2xlXCIsXG4gICAgXCJtYXJrZXJIZWlnaHRcIixcbiAgICBcIm1hcmtlcldpZHRoXCIsXG4gICAgXCJudW1PY3RhdmVzXCIsXG4gICAgXCJ0YXJnZXRYXCIsXG4gICAgXCJ0YXJnZXRZXCIsXG4gICAgXCJzdXJmYWNlU2NhbGVcIixcbiAgICBcInNwZWN1bGFyQ29uc3RhbnRcIixcbiAgICBcInNwZWN1bGFyRXhwb25lbnRcIixcbiAgICBcInN0ZERldmlhdGlvblwiLFxuICAgIFwidGFibGVWYWx1ZXNcIixcbiAgICBcInZpZXdCb3hcIixcbiAgICBcImdyYWRpZW50VHJhbnNmb3JtXCIsXG4gICAgXCJwYXRoTGVuZ3RoXCIsXG5dKTtcblxuZXhwb3J0IHsgY2FtZWxDYXNlQXR0cmlidXRlcyB9O1xuIiwiaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tICcuLi8uLi9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMnO1xuaW1wb3J0IHsgcmVuZGVySFRNTCB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBjYW1lbENhc2VBdHRyaWJ1dGVzIH0gZnJvbSAnLi9jYW1lbC1jYXNlLWF0dHJzLm1qcyc7XG5cbmZ1bmN0aW9uIHJlbmRlclNWRyhlbGVtZW50LCByZW5kZXJTdGF0ZSwgX3N0eWxlUHJvcCwgcHJvamVjdGlvbikge1xuICAgIHJlbmRlckhUTUwoZWxlbWVudCwgcmVuZGVyU3RhdGUsIHVuZGVmaW5lZCwgcHJvamVjdGlvbik7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmVuZGVyU3RhdGUuYXR0cnMpIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoIWNhbWVsQ2FzZUF0dHJpYnV0ZXMuaGFzKGtleSkgPyBjYW1lbFRvRGFzaChrZXkpIDoga2V5LCByZW5kZXJTdGF0ZS5hdHRyc1trZXldKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IHJlbmRlclNWRyB9O1xuIiwiaW1wb3J0IHsgaXNGb3JjZWRNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uLy4uL21vdGlvbi91dGlscy9pcy1mb3JjZWQtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcykge1xuICAgIGNvbnN0IHsgc3R5bGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IG5ld1ZhbHVlcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHN0eWxlW2tleV0pIHx8IGlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCBwcm9wcykpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlc1trZXldID0gc3R5bGVba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWVzO1xufVxuXG5leHBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfTtcbiIsImltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyBhcyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMkMSB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcblxuZnVuY3Rpb24gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzKSB7XG4gICAgY29uc3QgbmV3VmFsdWVzID0gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzJDEocHJvcHMpO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHByb3BzW2tleV0pKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRLZXkgPSBrZXkgPT09IFwieFwiIHx8IGtleSA9PT0gXCJ5XCIgPyBcImF0dHJcIiArIGtleS50b1VwcGVyQ2FzZSgpIDoga2V5O1xuICAgICAgICAgICAgbmV3VmFsdWVzW3RhcmdldEtleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZXM7XG59XG5cbmV4cG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIiwiZnVuY3Rpb24gcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMocHJvcHMsIGRlZmluaXRpb24sIGN1c3RvbSwgY3VycmVudFZhbHVlcyA9IHt9LCBjdXJyZW50VmVsb2NpdHkgPSB7fSkge1xuICAgIC8qKlxuICAgICAqIElmIHRoZSB2YXJpYW50IGRlZmluaXRpb24gaXMgYSBmdW5jdGlvbiwgcmVzb2x2ZS5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbihjdXN0b20gIT09IHVuZGVmaW5lZCA/IGN1c3RvbSA6IHByb3BzLmN1c3RvbSwgY3VycmVudFZhbHVlcywgY3VycmVudFZlbG9jaXR5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHZhcmlhbnQgZGVmaW5pdGlvbiBpcyBhIHZhcmlhbnQgbGFiZWwsIG9yXG4gICAgICogdGhlIGZ1bmN0aW9uIHJldHVybmVkIGEgdmFyaWFudCBsYWJlbCwgcmVzb2x2ZS5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IHByb3BzLnZhcmlhbnRzICYmIHByb3BzLnZhcmlhbnRzW2RlZmluaXRpb25dO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdCB0aGlzIHBvaW50IHdlJ3ZlIHJlc29sdmVkIGJvdGggZnVuY3Rpb25zIGFuZCB2YXJpYW50IGxhYmVscyxcbiAgICAgKiBidXQgdGhlIHJlc29sdmVkIHZhcmlhbnQgbGFiZWwgbWlnaHQgaXRzZWxmIGhhdmUgYmVlbiBhIGZ1bmN0aW9uLlxuICAgICAqIElmIHNvLCByZXNvbHZlLiBUaGlzIGNhbiBvbmx5IGhhdmUgcmV0dXJuZWQgYSB2YWxpZCB0YXJnZXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGRlZmluaXRpb24gPSBkZWZpbml0aW9uKGN1c3RvbSAhPT0gdW5kZWZpbmVkID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBjdXJyZW50VmFsdWVzLCBjdXJyZW50VmVsb2NpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMgfTtcbiIsImNvbnN0IGlzS2V5ZnJhbWVzVGFyZ2V0ID0gKHYpID0+IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbn07XG5cbmV4cG9ydCB7IGlzS2V5ZnJhbWVzVGFyZ2V0IH07XG4iLCJpbXBvcnQgeyBpc0tleWZyYW1lc1RhcmdldCB9IGZyb20gJy4uL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcyc7XG5cbmNvbnN0IGlzQ3VzdG9tVmFsdWUgPSAodikgPT4ge1xuICAgIHJldHVybiBCb29sZWFuKHYgJiYgdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdi5taXggJiYgdi50b1ZhbHVlKTtcbn07XG5jb25zdCByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzID0gKHYpID0+IHtcbiAgICAvLyBUT0RPIG1heWJlIHRocm93IGlmIHYubGVuZ3RoIC0gMSBpcyBwbGFjZWhvbGRlciB0b2tlbj9cbiAgICByZXR1cm4gaXNLZXlmcmFtZXNUYXJnZXQodikgPyB2W3YubGVuZ3RoIC0gMV0gfHwgMCA6IHY7XG59O1xuXG5leHBvcnQgeyBpc0N1c3RvbVZhbHVlLCByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzIH07XG4iLCJpbXBvcnQgeyBpc0N1c3RvbVZhbHVlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4vaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbi8qKlxuICogSWYgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGEgTW90aW9uVmFsdWUsIHRoaXMgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlLCBvdGhlcndpc2UganVzdCB0aGUgdmFsdWUgaXRzZWxmXG4gKlxuICogVE9ETzogUmVtb3ZlIGFuZCBtb3ZlIHRvIGxpYnJhcnlcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZU1vdGlvblZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgdW53cmFwcGVkVmFsdWUgPSBpc01vdGlvblZhbHVlKHZhbHVlKSA/IHZhbHVlLmdldCgpIDogdmFsdWU7XG4gICAgcmV0dXJuIGlzQ3VzdG9tVmFsdWUodW53cmFwcGVkVmFsdWUpXG4gICAgICAgID8gdW53cmFwcGVkVmFsdWUudG9WYWx1ZSgpXG4gICAgICAgIDogdW53cmFwcGVkVmFsdWU7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVNb3Rpb25WYWx1ZSB9O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzQW5pbWF0aW9uQ29udHJvbHMgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0aW9uLWNvbnRyb2xzLm1qcyc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvcmVzb2x2ZS12YXJpYW50cy5tanMnO1xuaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuLi8uLi91dGlscy91c2UtY29uc3RhbnQubWpzJztcbmltcG9ydCB7IHJlc29sdmVNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3V0aWxzL3Jlc29sdmUtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBNb3Rpb25Db250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9Nb3Rpb25Db250ZXh0L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc0NvbnRyb2xsaW5nVmFyaWFudHMsIGlzVmFyaWFudE5vZGUgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvaXMtY29udHJvbGxpbmctdmFyaWFudHMubWpzJztcblxuZnVuY3Rpb24gbWFrZVN0YXRlKHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLCBjcmVhdGVSZW5kZXJTdGF0ZSwgb25Nb3VudCwgfSwgcHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCkge1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBsYXRlc3RWYWx1ZXM6IG1ha2VMYXRlc3RWYWx1ZXMocHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCwgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKSxcbiAgICAgICAgcmVuZGVyU3RhdGU6IGNyZWF0ZVJlbmRlclN0YXRlKCksXG4gICAgfTtcbiAgICBpZiAob25Nb3VudCkge1xuICAgICAgICBzdGF0ZS5tb3VudCA9IChpbnN0YW5jZSkgPT4gb25Nb3VudChwcm9wcywgaW5zdGFuY2UsIHN0YXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuY29uc3QgbWFrZVVzZVZpc3VhbFN0YXRlID0gKGNvbmZpZykgPT4gKHByb3BzLCBpc1N0YXRpYykgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KE1vdGlvbkNvbnRleHQpO1xuICAgIGNvbnN0IHByZXNlbmNlQ29udGV4dCA9IHVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KTtcbiAgICBjb25zdCBtYWtlID0gKCkgPT4gbWFrZVN0YXRlKGNvbmZpZywgcHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCk7XG4gICAgcmV0dXJuIGlzU3RhdGljID8gbWFrZSgpIDogdXNlQ29uc3RhbnQobWFrZSk7XG59O1xuZnVuY3Rpb24gbWFrZUxhdGVzdFZhbHVlcyhwcm9wcywgY29udGV4dCwgcHJlc2VuY2VDb250ZXh0LCBzY3JhcGVNb3Rpb25WYWx1ZXMpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fTtcbiAgICBjb25zdCBtb3Rpb25WYWx1ZXMgPSBzY3JhcGVNb3Rpb25WYWx1ZXMocHJvcHMpO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG1vdGlvblZhbHVlcykge1xuICAgICAgICB2YWx1ZXNba2V5XSA9IHJlc29sdmVNb3Rpb25WYWx1ZShtb3Rpb25WYWx1ZXNba2V5XSk7XG4gICAgfVxuICAgIGxldCB7IGluaXRpYWwsIGFuaW1hdGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IGlzQ29udHJvbGxpbmdWYXJpYW50cyQxID0gaXNDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKTtcbiAgICBjb25zdCBpc1ZhcmlhbnROb2RlJDEgPSBpc1ZhcmlhbnROb2RlKHByb3BzKTtcbiAgICBpZiAoY29udGV4dCAmJlxuICAgICAgICBpc1ZhcmlhbnROb2RlJDEgJiZcbiAgICAgICAgIWlzQ29udHJvbGxpbmdWYXJpYW50cyQxICYmXG4gICAgICAgIHByb3BzLmluaGVyaXQgIT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChpbml0aWFsID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBpbml0aWFsID0gY29udGV4dC5pbml0aWFsO1xuICAgICAgICBpZiAoYW5pbWF0ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgYW5pbWF0ZSA9IGNvbnRleHQuYW5pbWF0ZTtcbiAgICB9XG4gICAgbGV0IGlzSW5pdGlhbEFuaW1hdGlvbkJsb2NrZWQgPSBwcmVzZW5jZUNvbnRleHRcbiAgICAgICAgPyBwcmVzZW5jZUNvbnRleHQuaW5pdGlhbCA9PT0gZmFsc2VcbiAgICAgICAgOiBmYWxzZTtcbiAgICBpc0luaXRpYWxBbmltYXRpb25CbG9ja2VkID0gaXNJbml0aWFsQW5pbWF0aW9uQmxvY2tlZCB8fCBpbml0aWFsID09PSBmYWxzZTtcbiAgICBjb25zdCB2YXJpYW50VG9TZXQgPSBpc0luaXRpYWxBbmltYXRpb25CbG9ja2VkID8gYW5pbWF0ZSA6IGluaXRpYWw7XG4gICAgaWYgKHZhcmlhbnRUb1NldCAmJlxuICAgICAgICB0eXBlb2YgdmFyaWFudFRvU2V0ICE9PSBcImJvb2xlYW5cIiAmJlxuICAgICAgICAhaXNBbmltYXRpb25Db250cm9scyh2YXJpYW50VG9TZXQpKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBBcnJheS5pc0FycmF5KHZhcmlhbnRUb1NldCkgPyB2YXJpYW50VG9TZXQgOiBbdmFyaWFudFRvU2V0XTtcbiAgICAgICAgbGlzdC5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVWYXJpYW50RnJvbVByb3BzKHByb3BzLCBkZWZpbml0aW9uKTtcbiAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgeyB0cmFuc2l0aW9uRW5kLCB0cmFuc2l0aW9uLCAuLi50YXJnZXQgfSA9IHJlc29sdmVkO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlVGFyZ2V0ID0gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVUYXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBUYWtlIGZpbmFsIGtleWZyYW1lIGlmIHRoZSBpbml0aWFsIGFuaW1hdGlvbiBpcyBibG9ja2VkIGJlY2F1c2VcbiAgICAgICAgICAgICAgICAgICAgICogd2Ugd2FudCB0byBpbml0aWFsaXNlIGF0IHRoZSBlbmQgb2YgdGhhdCBibG9ja2VkIGFuaW1hdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaXNJbml0aWFsQW5pbWF0aW9uQmxvY2tlZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVRhcmdldC5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVGFyZ2V0ID0gdmFsdWVUYXJnZXRbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsdWVUYXJnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2tleV0gPSB2YWx1ZVRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0cmFuc2l0aW9uRW5kKVxuICAgICAgICAgICAgICAgIHZhbHVlc1trZXldID0gdHJhbnNpdGlvbkVuZFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cblxuZXhwb3J0IHsgbWFrZVVzZVZpc3VhbFN0YXRlIH07XG4iLCJpbXBvcnQgeyByZW5kZXJTVkcgfSBmcm9tICcuL3V0aWxzL3JlbmRlci5tanMnO1xuaW1wb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH0gZnJvbSAnLi91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgbWFrZVVzZVZpc3VhbFN0YXRlIH0gZnJvbSAnLi4vLi4vbW90aW9uL3V0aWxzL3VzZS12aXN1YWwtc3RhdGUubWpzJztcbmltcG9ydCB7IGNyZWF0ZVN2Z1JlbmRlclN0YXRlIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBidWlsZFNWR0F0dHJzIH0gZnJvbSAnLi91dGlscy9idWlsZC1hdHRycy5tanMnO1xuXG5jb25zdCBzdmdNb3Rpb25Db25maWcgPSB7XG4gICAgdXNlVmlzdWFsU3RhdGU6IG1ha2VVc2VWaXN1YWxTdGF0ZSh7XG4gICAgICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wczogc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLFxuICAgICAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlU3ZnUmVuZGVyU3RhdGUsXG4gICAgICAgIG9uTW91bnQ6IChwcm9wcywgaW5zdGFuY2UsIHsgcmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcyB9KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlbmRlclN0YXRlLmRpbWVuc2lvbnMgPVxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaW5zdGFuY2UuZ2V0QkJveCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgPyBpbnN0YW5jZS5nZXRCQm94KClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaW5zdGFuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIE1vc3QgbGlrZWx5IHRyeWluZyB0byBtZWFzdXJlIGFuIHVucmVuZGVyZWQgZWxlbWVudCB1bmRlciBGaXJlZm94XG4gICAgICAgICAgICAgICAgcmVuZGVyU3RhdGUuZGltZW5zaW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVpbGRTVkdBdHRycyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9LCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgICAgICByZW5kZXJTVkcoaW5zdGFuY2UsIHJlbmRlclN0YXRlKTtcbiAgICAgICAgfSxcbiAgICB9KSxcbn07XG5cbmV4cG9ydCB7IHN2Z01vdGlvbkNvbmZpZyB9O1xuIiwiaW1wb3J0IHsgbWFrZVVzZVZpc3VhbFN0YXRlIH0gZnJvbSAnLi4vLi4vbW90aW9uL3V0aWxzL3VzZS12aXN1YWwtc3RhdGUubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSB9IGZyb20gJy4vdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuXG5jb25zdCBodG1sTW90aW9uQ29uZmlnID0ge1xuICAgIHVzZVZpc3VhbFN0YXRlOiBtYWtlVXNlVmlzdWFsU3RhdGUoe1xuICAgICAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMsXG4gICAgICAgIGNyZWF0ZVJlbmRlclN0YXRlOiBjcmVhdGVIdG1sUmVuZGVyU3RhdGUsXG4gICAgfSksXG59O1xuXG5leHBvcnQgeyBodG1sTW90aW9uQ29uZmlnIH07XG4iLCJ2YXIgQW5pbWF0aW9uVHlwZTtcbihmdW5jdGlvbiAoQW5pbWF0aW9uVHlwZSkge1xuICAgIEFuaW1hdGlvblR5cGVbXCJBbmltYXRlXCJdID0gXCJhbmltYXRlXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkhvdmVyXCJdID0gXCJ3aGlsZUhvdmVyXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIlRhcFwiXSA9IFwid2hpbGVUYXBcIjtcbiAgICBBbmltYXRpb25UeXBlW1wiRHJhZ1wiXSA9IFwid2hpbGVEcmFnXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkZvY3VzXCJdID0gXCJ3aGlsZUZvY3VzXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkluVmlld1wiXSA9IFwid2hpbGVJblZpZXdcIjtcbiAgICBBbmltYXRpb25UeXBlW1wiRXhpdFwiXSA9IFwiZXhpdFwiO1xufSkoQW5pbWF0aW9uVHlwZSB8fCAoQW5pbWF0aW9uVHlwZSA9IHt9KSk7XG5cbmV4cG9ydCB7IEFuaW1hdGlvblR5cGUgfTtcbiIsImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gYWRkRG9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMgPSB7IHBhc3NpdmU6IHRydWUgfSkge1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG59XG4vKipcbiAqIEF0dGFjaGVzIGFuIGV2ZW50IGxpc3RlbmVyIGRpcmVjdGx5IHRvIHRoZSBwcm92aWRlZCBET00gZWxlbWVudC5cbiAqXG4gKiBCeXBhc3NpbmcgUmVhY3QncyBldmVudCBzeXN0ZW0gY2FuIGJlIGRlc2lyYWJsZSwgZm9yIGluc3RhbmNlIHdoZW4gYXR0YWNoaW5nIG5vbi1wYXNzaXZlXG4gKiBldmVudCBoYW5kbGVycy5cbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKVxuICpcbiAqIHVzZURvbUV2ZW50KHJlZiwgJ3doZWVsJywgb25XaGVlbCwgeyBwYXNzaXZlOiBmYWxzZSB9KVxuICpcbiAqIHJldHVybiA8ZGl2IHJlZj17cmVmfSAvPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHJlZiAtIFJlYWN0LlJlZk9iamVjdCB0aGF0J3MgYmVlbiBwcm92aWRlZCB0byB0aGUgZWxlbWVudCB5b3Ugd2FudCB0byBiaW5kIHRoZSBsaXN0ZW5lciB0by5cbiAqIEBwYXJhbSBldmVudE5hbWUgLSBOYW1lIG9mIHRoZSBldmVudCB5b3Ugd2FudCBsaXN0ZW4gZm9yLlxuICogQHBhcmFtIGhhbmRsZXIgLSBGdW5jdGlvbiB0byBmaXJlIHdoZW4gcmVjZWl2aW5nIHRoZSBldmVudC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBwYXNzIHRvIGBFdmVudC5hZGRFdmVudExpc3RlbmVyYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZURvbUV2ZW50KHJlZiwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHJlZi5jdXJyZW50O1xuICAgICAgICBpZiAoaGFuZGxlciAmJiBlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gYWRkRG9tRXZlbnQoZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sIFtyZWYsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9uc10pO1xufVxuXG5leHBvcnQgeyBhZGREb21FdmVudCwgdXNlRG9tRXZlbnQgfTtcbiIsImZ1bmN0aW9uIGlzTW91c2VFdmVudChldmVudCkge1xuICAgIC8vIFBvaW50ZXJFdmVudCBpbmhlcml0cyBmcm9tIE1vdXNlRXZlbnQgc28gd2UgY2FuJ3QgdXNlIGEgc3RyYWlnaHQgaW5zdGFuY2VvZiBjaGVjay5cbiAgICBpZiAodHlwZW9mIFBvaW50ZXJFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBldmVudCBpbnN0YW5jZW9mIFBvaW50ZXJFdmVudCkge1xuICAgICAgICByZXR1cm4gISEoZXZlbnQucG9pbnRlclR5cGUgPT09IFwibW91c2VcIik7XG4gICAgfVxuICAgIHJldHVybiBldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQ7XG59XG5mdW5jdGlvbiBpc1RvdWNoRXZlbnQoZXZlbnQpIHtcbiAgICBjb25zdCBoYXNUb3VjaGVzID0gISFldmVudC50b3VjaGVzO1xuICAgIHJldHVybiBoYXNUb3VjaGVzO1xufVxuXG5leHBvcnQgeyBpc01vdXNlRXZlbnQsIGlzVG91Y2hFdmVudCB9O1xuIiwiaW1wb3J0IHsgaXNUb3VjaEV2ZW50IH0gZnJvbSAnLi4vZ2VzdHVyZXMvdXRpbHMvZXZlbnQtdHlwZS5tanMnO1xuXG4vKipcbiAqIEZpbHRlcnMgb3V0IGV2ZW50cyBub3QgYXR0YWNoZWQgdG8gdGhlIHByaW1hcnkgcG9pbnRlciAoY3VycmVudGx5IGxlZnQgbW91c2UgYnV0dG9uKVxuICogQHBhcmFtIGV2ZW50SGFuZGxlclxuICovXG5mdW5jdGlvbiBmaWx0ZXJQcmltYXJ5UG9pbnRlcihldmVudEhhbmRsZXIpIHtcbiAgICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGlzTW91c2VFdmVudCA9IGV2ZW50IGluc3RhbmNlb2YgTW91c2VFdmVudDtcbiAgICAgICAgY29uc3QgaXNQcmltYXJ5UG9pbnRlciA9ICFpc01vdXNlRXZlbnQgfHxcbiAgICAgICAgICAgIChpc01vdXNlRXZlbnQgJiYgZXZlbnQuYnV0dG9uID09PSAwKTtcbiAgICAgICAgaWYgKGlzUHJpbWFyeVBvaW50ZXIpIHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcihldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuY29uc3QgZGVmYXVsdFBhZ2VQb2ludCA9IHsgcGFnZVg6IDAsIHBhZ2VZOiAwIH07XG5mdW5jdGlvbiBwb2ludEZyb21Ub3VjaChlLCBwb2ludFR5cGUgPSBcInBhZ2VcIikge1xuICAgIGNvbnN0IHByaW1hcnlUb3VjaCA9IGUudG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgIGNvbnN0IHBvaW50ID0gcHJpbWFyeVRvdWNoIHx8IGRlZmF1bHRQYWdlUG9pbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcG9pbnRbcG9pbnRUeXBlICsgXCJYXCJdLFxuICAgICAgICB5OiBwb2ludFtwb2ludFR5cGUgKyBcIllcIl0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBvaW50RnJvbU1vdXNlKHBvaW50LCBwb2ludFR5cGUgPSBcInBhZ2VcIikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHBvaW50W3BvaW50VHlwZSArIFwiWFwiXSxcbiAgICAgICAgeTogcG9pbnRbcG9pbnRUeXBlICsgXCJZXCJdLFxuICAgIH07XG59XG5mdW5jdGlvbiBleHRyYWN0RXZlbnRJbmZvKGV2ZW50LCBwb2ludFR5cGUgPSBcInBhZ2VcIikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50OiBpc1RvdWNoRXZlbnQoZXZlbnQpXG4gICAgICAgICAgICA/IHBvaW50RnJvbVRvdWNoKGV2ZW50LCBwb2ludFR5cGUpXG4gICAgICAgICAgICA6IHBvaW50RnJvbU1vdXNlKGV2ZW50LCBwb2ludFR5cGUpLFxuICAgIH07XG59XG5jb25zdCB3cmFwSGFuZGxlciA9IChoYW5kbGVyLCBzaG91bGRGaWx0ZXJQcmltYXJ5UG9pbnRlciA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoZXZlbnQpID0+IGhhbmRsZXIoZXZlbnQsIGV4dHJhY3RFdmVudEluZm8oZXZlbnQpKTtcbiAgICByZXR1cm4gc2hvdWxkRmlsdGVyUHJpbWFyeVBvaW50ZXJcbiAgICAgICAgPyBmaWx0ZXJQcmltYXJ5UG9pbnRlcihsaXN0ZW5lcilcbiAgICAgICAgOiBsaXN0ZW5lcjtcbn07XG5cbmV4cG9ydCB7IGV4dHJhY3RFdmVudEluZm8sIHdyYXBIYW5kbGVyIH07XG4iLCJpbXBvcnQgeyBhZGREb21FdmVudCwgdXNlRG9tRXZlbnQgfSBmcm9tICcuL3VzZS1kb20tZXZlbnQubWpzJztcbmltcG9ydCB7IHdyYXBIYW5kbGVyIH0gZnJvbSAnLi9ldmVudC1pbmZvLm1qcyc7XG5pbXBvcnQgeyBzdXBwb3J0c1BvaW50ZXJFdmVudHMsIHN1cHBvcnRzVG91Y2hFdmVudHMsIHN1cHBvcnRzTW91c2VFdmVudHMgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNvbnN0IG1vdXNlRXZlbnROYW1lcyA9IHtcbiAgICBwb2ludGVyZG93bjogXCJtb3VzZWRvd25cIixcbiAgICBwb2ludGVybW92ZTogXCJtb3VzZW1vdmVcIixcbiAgICBwb2ludGVydXA6IFwibW91c2V1cFwiLFxuICAgIHBvaW50ZXJjYW5jZWw6IFwibW91c2VjYW5jZWxcIixcbiAgICBwb2ludGVyb3ZlcjogXCJtb3VzZW92ZXJcIixcbiAgICBwb2ludGVyb3V0OiBcIm1vdXNlb3V0XCIsXG4gICAgcG9pbnRlcmVudGVyOiBcIm1vdXNlZW50ZXJcIixcbiAgICBwb2ludGVybGVhdmU6IFwibW91c2VsZWF2ZVwiLFxufTtcbmNvbnN0IHRvdWNoRXZlbnROYW1lcyA9IHtcbiAgICBwb2ludGVyZG93bjogXCJ0b3VjaHN0YXJ0XCIsXG4gICAgcG9pbnRlcm1vdmU6IFwidG91Y2htb3ZlXCIsXG4gICAgcG9pbnRlcnVwOiBcInRvdWNoZW5kXCIsXG4gICAgcG9pbnRlcmNhbmNlbDogXCJ0b3VjaGNhbmNlbFwiLFxufTtcbmZ1bmN0aW9uIGdldFBvaW50ZXJFdmVudE5hbWUobmFtZSkge1xuICAgIGlmIChzdXBwb3J0c1BvaW50ZXJFdmVudHMoKSkge1xuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3VwcG9ydHNUb3VjaEV2ZW50cygpKSB7XG4gICAgICAgIHJldHVybiB0b3VjaEV2ZW50TmFtZXNbbmFtZV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHN1cHBvcnRzTW91c2VFdmVudHMoKSkge1xuICAgICAgICByZXR1cm4gbW91c2VFdmVudE5hbWVzW25hbWVdO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIGFkZFBvaW50ZXJFdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIHJldHVybiBhZGREb21FdmVudCh0YXJnZXQsIGdldFBvaW50ZXJFdmVudE5hbWUoZXZlbnROYW1lKSwgd3JhcEhhbmRsZXIoaGFuZGxlciwgZXZlbnROYW1lID09PSBcInBvaW50ZXJkb3duXCIpLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHVzZVBvaW50ZXJFdmVudChyZWYsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIHJldHVybiB1c2VEb21FdmVudChyZWYsIGdldFBvaW50ZXJFdmVudE5hbWUoZXZlbnROYW1lKSwgaGFuZGxlciAmJiB3cmFwSGFuZGxlcihoYW5kbGVyLCBldmVudE5hbWUgPT09IFwicG9pbnRlcmRvd25cIiksIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgeyBhZGRQb2ludGVyRXZlbnQsIHVzZVBvaW50ZXJFdmVudCB9O1xuIiwiaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnLi4vdXRpbHMvaXMtYnJvd3Nlci5tanMnO1xuXG4vLyBXZSBjaGVjayBmb3IgZXZlbnQgc3VwcG9ydCB2aWEgZnVuY3Rpb25zIGluIGNhc2UgdGhleSd2ZSBiZWVuIG1vY2tlZCBieSBhIHRlc3Rpbmcgc3VpdGUuXG5jb25zdCBzdXBwb3J0c1BvaW50ZXJFdmVudHMgPSAoKSA9PiBpc0Jyb3dzZXIgJiYgd2luZG93Lm9ucG9pbnRlcmRvd24gPT09IG51bGw7XG5jb25zdCBzdXBwb3J0c1RvdWNoRXZlbnRzID0gKCkgPT4gaXNCcm93c2VyICYmIHdpbmRvdy5vbnRvdWNoc3RhcnQgPT09IG51bGw7XG5jb25zdCBzdXBwb3J0c01vdXNlRXZlbnRzID0gKCkgPT4gaXNCcm93c2VyICYmIHdpbmRvdy5vbm1vdXNlZG93biA9PT0gbnVsbDtcblxuZXhwb3J0IHsgc3VwcG9ydHNNb3VzZUV2ZW50cywgc3VwcG9ydHNQb2ludGVyRXZlbnRzLCBzdXBwb3J0c1RvdWNoRXZlbnRzIH07XG4iLCJmdW5jdGlvbiBjcmVhdGVMb2NrKG5hbWUpIHtcbiAgICBsZXQgbG9jayA9IG51bGw7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3BlbkxvY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBsb2NrID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGxvY2sgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxvY2sgPSBuYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG9wZW5Mb2NrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuY29uc3QgZ2xvYmFsSG9yaXpvbnRhbExvY2sgPSBjcmVhdGVMb2NrKFwiZHJhZ0hvcml6b250YWxcIik7XG5jb25zdCBnbG9iYWxWZXJ0aWNhbExvY2sgPSBjcmVhdGVMb2NrKFwiZHJhZ1ZlcnRpY2FsXCIpO1xuZnVuY3Rpb24gZ2V0R2xvYmFsTG9jayhkcmFnKSB7XG4gICAgbGV0IGxvY2sgPSBmYWxzZTtcbiAgICBpZiAoZHJhZyA9PT0gXCJ5XCIpIHtcbiAgICAgICAgbG9jayA9IGdsb2JhbFZlcnRpY2FsTG9jaygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkcmFnID09PSBcInhcIikge1xuICAgICAgICBsb2NrID0gZ2xvYmFsSG9yaXpvbnRhbExvY2soKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG9wZW5Ib3Jpem9udGFsID0gZ2xvYmFsSG9yaXpvbnRhbExvY2soKTtcbiAgICAgICAgY29uc3Qgb3BlblZlcnRpY2FsID0gZ2xvYmFsVmVydGljYWxMb2NrKCk7XG4gICAgICAgIGlmIChvcGVuSG9yaXpvbnRhbCAmJiBvcGVuVmVydGljYWwpIHtcbiAgICAgICAgICAgIGxvY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgb3Blbkhvcml6b250YWwoKTtcbiAgICAgICAgICAgICAgICBvcGVuVmVydGljYWwoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSZWxlYXNlIHRoZSBsb2NrcyBiZWNhdXNlIHdlIGRvbid0IHVzZSB0aGVtXG4gICAgICAgICAgICBpZiAob3Blbkhvcml6b250YWwpXG4gICAgICAgICAgICAgICAgb3Blbkhvcml6b250YWwoKTtcbiAgICAgICAgICAgIGlmIChvcGVuVmVydGljYWwpXG4gICAgICAgICAgICAgICAgb3BlblZlcnRpY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvY2s7XG59XG5mdW5jdGlvbiBpc0RyYWdBY3RpdmUoKSB7XG4gICAgLy8gQ2hlY2sgdGhlIGdlc3R1cmUgbG9jayAtIGlmIHdlIGdldCBpdCwgaXQgbWVhbnMgbm8gZHJhZyBnZXN0dXJlIGlzIGFjdGl2ZVxuICAgIC8vIGFuZCB3ZSBjYW4gc2FmZWx5IGZpcmUgdGhlIHRhcCBnZXN0dXJlLlxuICAgIGNvbnN0IG9wZW5HZXN0dXJlTG9jayA9IGdldEdsb2JhbExvY2sodHJ1ZSk7XG4gICAgaWYgKCFvcGVuR2VzdHVyZUxvY2spXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIG9wZW5HZXN0dXJlTG9jaygpO1xuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlTG9jaywgZ2V0R2xvYmFsTG9jaywgaXNEcmFnQWN0aXZlIH07XG4iLCJpbXBvcnQgeyBpc01vdXNlRXZlbnQgfSBmcm9tICcuL3V0aWxzL2V2ZW50LXR5cGUubWpzJztcbmltcG9ydCB7IEFuaW1hdGlvblR5cGUgfSBmcm9tICcuLi9yZW5kZXIvdXRpbHMvdHlwZXMubWpzJztcbmltcG9ydCB7IHVzZVBvaW50ZXJFdmVudCB9IGZyb20gJy4uL2V2ZW50cy91c2UtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgaXNEcmFnQWN0aXZlIH0gZnJvbSAnLi9kcmFnL3V0aWxzL2xvY2subWpzJztcblxuZnVuY3Rpb24gY3JlYXRlSG92ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBpc0FjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgIGlmICghaXNNb3VzZUV2ZW50KGV2ZW50KSB8fCBpc0RyYWdBY3RpdmUoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuc3VyZSB3ZSB0cmlnZ2VyIGFuaW1hdGlvbnMgYmVmb3JlIGZpcmluZyBldmVudCBjYWxsYmFja1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuSG92ZXIsIGlzQWN0aXZlKTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhldmVudCwgaW5mbyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHVzZUhvdmVyR2VzdHVyZSh7IG9uSG92ZXJTdGFydCwgb25Ib3ZlckVuZCwgd2hpbGVIb3ZlciwgdmlzdWFsRWxlbWVudCwgfSkge1xuICAgIHVzZVBvaW50ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBcInBvaW50ZXJlbnRlclwiLCBvbkhvdmVyU3RhcnQgfHwgd2hpbGVIb3ZlclxuICAgICAgICA/IGNyZWF0ZUhvdmVyRXZlbnQodmlzdWFsRWxlbWVudCwgdHJ1ZSwgb25Ib3ZlclN0YXJ0KVxuICAgICAgICA6IHVuZGVmaW5lZCwgeyBwYXNzaXZlOiAhb25Ib3ZlclN0YXJ0IH0pO1xuICAgIHVzZVBvaW50ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBcInBvaW50ZXJsZWF2ZVwiLCBvbkhvdmVyRW5kIHx8IHdoaWxlSG92ZXJcbiAgICAgICAgPyBjcmVhdGVIb3ZlckV2ZW50KHZpc3VhbEVsZW1lbnQsIGZhbHNlLCBvbkhvdmVyRW5kKVxuICAgICAgICA6IHVuZGVmaW5lZCwgeyBwYXNzaXZlOiAhb25Ib3ZlckVuZCB9KTtcbn1cblxuZXhwb3J0IHsgdXNlSG92ZXJHZXN0dXJlIH07XG4iLCIvKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIHVwIHRoZSB0cmVlIHRvIGNoZWNrIHdoZXRoZXIgdGhlIHByb3ZpZGVkIGNoaWxkIG5vZGVcbiAqIGlzIHRoZSBwYXJlbnQgb3IgYSBkZXNjZW5kYW50IG9mIGl0LlxuICpcbiAqIEBwYXJhbSBwYXJlbnQgLSBFbGVtZW50IHRvIGZpbmRcbiAqIEBwYXJhbSBjaGlsZCAtIEVsZW1lbnQgdG8gdGVzdCBhZ2FpbnN0IHBhcmVudFxuICovXG5jb25zdCBpc05vZGVPckNoaWxkID0gKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGFyZW50ID09PSBjaGlsZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBpc05vZGVPckNoaWxkKHBhcmVudCwgY2hpbGQucGFyZW50RWxlbWVudCk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgaXNOb2RlT3JDaGlsZCB9O1xuIiwiY29uc3QgY29tYmluZUZ1bmN0aW9ucyA9IChhLCBiKSA9PiAodikgPT4gYihhKHYpKTtcbmNvbnN0IHBpcGUgPSAoLi4udHJhbnNmb3JtZXJzKSA9PiB0cmFuc2Zvcm1lcnMucmVkdWNlKGNvbWJpbmVGdW5jdGlvbnMpO1xuXG5leHBvcnQgeyBwaXBlIH07XG4iLCIvKipcbiAqIE1hcCBhbiBJbnRlcnNlY3Rpb25IYW5kbGVyIGNhbGxiYWNrIHRvIGFuIGVsZW1lbnQuIFdlIG9ubHkgZXZlciBtYWtlIG9uZSBoYW5kbGVyIGZvciBvbmVcbiAqIGVsZW1lbnQsIHNvIGV2ZW4gdGhvdWdoIHRoZXNlIGhhbmRsZXJzIG1pZ2h0IGFsbCBiZSB0cmlnZ2VyZWQgYnkgZGlmZmVyZW50XG4gKiBvYnNlcnZlcnMsIHdlIGNhbiBrZWVwIHRoZW0gaW4gdGhlIHNhbWUgbWFwLlxuICovXG5jb25zdCBvYnNlcnZlckNhbGxiYWNrcyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIE11bHRpcGxlIG9ic2VydmVycyBjYW4gYmUgY3JlYXRlZCBmb3IgbXVsdGlwbGUgZWxlbWVudC9kb2N1bWVudCByb290cy4gRWFjaCB3aXRoXG4gKiBkaWZmZXJlbnQgc2V0dGluZ3MuIFNvIGhlcmUgd2Ugc3RvcmUgZGljdGlvbmFyaWVzIG9mIG9ic2VydmVycyB0byBlYWNoIHJvb3QsXG4gKiB1c2luZyBzZXJpYWxpc2VkIHNldHRpbmdzICh0aHJlc2hvbGQvbWFyZ2luKSBhcyBsb29rdXAga2V5cy5cbiAqL1xuY29uc3Qgb2JzZXJ2ZXJzID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGZpcmVPYnNlcnZlckNhbGxiYWNrID0gKGVudHJ5KSA9PiB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBvYnNlcnZlckNhbGxiYWNrcy5nZXQoZW50cnkudGFyZ2V0KTtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlbnRyeSk7XG59O1xuY29uc3QgZmlyZUFsbE9ic2VydmVyQ2FsbGJhY2tzID0gKGVudHJpZXMpID0+IHtcbiAgICBlbnRyaWVzLmZvckVhY2goZmlyZU9ic2VydmVyQ2FsbGJhY2spO1xufTtcbmZ1bmN0aW9uIGluaXRJbnRlcnNlY3Rpb25PYnNlcnZlcih7IHJvb3QsIC4uLm9wdGlvbnMgfSkge1xuICAgIGNvbnN0IGxvb2t1cFJvb3QgPSByb290IHx8IGRvY3VtZW50O1xuICAgIC8qKlxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgYW4gb2JzZXJ2ZXIgbG9va3VwIG1hcCBmb3IgdGhpcyByb290LCBjcmVhdGUgb25lLlxuICAgICAqL1xuICAgIGlmICghb2JzZXJ2ZXJzLmhhcyhsb29rdXBSb290KSkge1xuICAgICAgICBvYnNlcnZlcnMuc2V0KGxvb2t1cFJvb3QsIHt9KTtcbiAgICB9XG4gICAgY29uc3Qgcm9vdE9ic2VydmVycyA9IG9ic2VydmVycy5nZXQobG9va3VwUm9vdCk7XG4gICAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgLyoqXG4gICAgICogSWYgd2UgZG9uJ3QgaGF2ZSBhbiBvYnNlcnZlciBmb3IgdGhpcyBjb21iaW5hdGlvbiBvZiByb290IGFuZCBzZXR0aW5ncyxcbiAgICAgKiBjcmVhdGUgb25lLlxuICAgICAqL1xuICAgIGlmICghcm9vdE9ic2VydmVyc1trZXldKSB7XG4gICAgICAgIHJvb3RPYnNlcnZlcnNba2V5XSA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmaXJlQWxsT2JzZXJ2ZXJDYWxsYmFja3MsIHsgcm9vdCwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3RPYnNlcnZlcnNba2V5XTtcbn1cbmZ1bmN0aW9uIG9ic2VydmVJbnRlcnNlY3Rpb24oZWxlbWVudCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBjb25zdCByb290SW50ZXJlc2VjdGlvbk9ic2VydmVyID0gaW5pdEludGVyc2VjdGlvbk9ic2VydmVyKG9wdGlvbnMpO1xuICAgIG9ic2VydmVyQ2FsbGJhY2tzLnNldChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgcm9vdEludGVyZXNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIG9ic2VydmVyQ2FsbGJhY2tzLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgcm9vdEludGVyZXNlY3Rpb25PYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgb2JzZXJ2ZUludGVyc2VjdGlvbiB9O1xuIiwiaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcHJvY2Vzcy5tanMnO1xuaW1wb3J0IHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbmltYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyL3V0aWxzL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyB3YXJuT25jZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3dhcm4tb25jZS5tanMnO1xuaW1wb3J0IHsgb2JzZXJ2ZUludGVyc2VjdGlvbiB9IGZyb20gJy4vb2JzZXJ2ZXJzLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZVZpZXdwb3J0KHsgdmlzdWFsRWxlbWVudCwgd2hpbGVJblZpZXcsIG9uVmlld3BvcnRFbnRlciwgb25WaWV3cG9ydExlYXZlLCB2aWV3cG9ydCA9IHt9LCB9KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB1c2VSZWYoe1xuICAgICAgICBoYXNFbnRlcmVkVmlldzogZmFsc2UsXG4gICAgICAgIGlzSW5WaWV3OiBmYWxzZSxcbiAgICB9KTtcbiAgICBsZXQgc2hvdWxkT2JzZXJ2ZSA9IEJvb2xlYW4od2hpbGVJblZpZXcgfHwgb25WaWV3cG9ydEVudGVyIHx8IG9uVmlld3BvcnRMZWF2ZSk7XG4gICAgaWYgKHZpZXdwb3J0Lm9uY2UgJiYgc3RhdGUuY3VycmVudC5oYXNFbnRlcmVkVmlldylcbiAgICAgICAgc2hvdWxkT2JzZXJ2ZSA9IGZhbHNlO1xuICAgIGNvbnN0IHVzZU9ic2VydmVyID0gdHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gdXNlTWlzc2luZ0ludGVyc2VjdGlvbk9ic2VydmVyXG4gICAgICAgIDogdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG4gICAgdXNlT2JzZXJ2ZXIoc2hvdWxkT2JzZXJ2ZSwgc3RhdGUuY3VycmVudCwgdmlzdWFsRWxlbWVudCwgdmlld3BvcnQpO1xufVxuY29uc3QgdGhyZXNob2xkTmFtZXMgPSB7XG4gICAgc29tZTogMCxcbiAgICBhbGw6IDEsXG59O1xuZnVuY3Rpb24gdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoc2hvdWxkT2JzZXJ2ZSwgc3RhdGUsIHZpc3VhbEVsZW1lbnQsIHsgcm9vdCwgbWFyZ2luOiByb290TWFyZ2luLCBhbW91bnQgPSBcInNvbWVcIiwgb25jZSB9KSB7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFzaG91bGRPYnNlcnZlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgcm9vdDogcm9vdCA9PT0gbnVsbCB8fCByb290ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByb290LmN1cnJlbnQsXG4gICAgICAgICAgICByb290TWFyZ2luLFxuICAgICAgICAgICAgdGhyZXNob2xkOiB0eXBlb2YgYW1vdW50ID09PSBcIm51bWJlclwiID8gYW1vdW50IDogdGhyZXNob2xkTmFtZXNbYW1vdW50XSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uQ2FsbGJhY2sgPSAoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaXNJbnRlcnNlY3RpbmcgfSA9IGVudHJ5O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGVyZSdzIGJlZW4gbm8gY2hhbmdlIGluIHRoZSB2aWV3cG9ydCBzdGF0ZSwgZWFybHkgcmV0dXJuLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNJblZpZXcgPT09IGlzSW50ZXJzZWN0aW5nKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHN0YXRlLmlzSW5WaWV3ID0gaXNJbnRlcnNlY3Rpbmc7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEhhbmRsZSBoYXNFbnRlcmVkVmlldy4gSWYgdGhpcyBpcyBvbmx5IG1lYW50IHRvIHJ1biBvbmNlLCBhbmRcbiAgICAgICAgICAgICAqIGVsZW1lbnQgaXNuJ3QgdmlzaWJsZSwgZWFybHkgcmV0dXJuLiBPdGhlcndpc2Ugc2V0IGhhc0VudGVyZWRWaWV3IHRvIHRydWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChvbmNlICYmICFpc0ludGVyc2VjdGluZyAmJiBzdGF0ZS5oYXNFbnRlcmVkVmlldykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuaGFzRW50ZXJlZFZpZXcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkluVmlldywgaXNJbnRlcnNlY3RpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2UgdGhlIGxhdGVzdCBjb21taXR0ZWQgcHJvcHMgcmF0aGVyIHRoYW4gdGhlIG9uZXMgaW4gc2NvcGVcbiAgICAgICAgICAgICAqIHdoZW4gdGhpcyBvYnNlcnZlciBpcyBjcmVhdGVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBpc0ludGVyc2VjdGluZ1xuICAgICAgICAgICAgICAgID8gcHJvcHMub25WaWV3cG9ydEVudGVyXG4gICAgICAgICAgICAgICAgOiBwcm9wcy5vblZpZXdwb3J0TGVhdmU7XG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlbnRyeSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvYnNlcnZlSW50ZXJzZWN0aW9uKHZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKSwgb3B0aW9ucywgaW50ZXJzZWN0aW9uQ2FsbGJhY2spO1xuICAgIH0sIFtzaG91bGRPYnNlcnZlLCByb290LCByb290TWFyZ2luLCBhbW91bnRdKTtcbn1cbi8qKlxuICogSWYgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaXMgbWlzc2luZywgd2UgYWN0aXZhdGUgaW5WaWV3IGFuZCBmaXJlIG9uVmlld3BvcnRFbnRlclxuICogb24gbW91bnQuIFRoaXMgd2F5LCB0aGUgcGFnZSB3aWxsIGJlIGluIHRoZSBzdGF0ZSB0aGUgYXV0aG9yIGV4cGVjdHMgdXNlcnNcbiAqIHRvIHNlZSBpdCBpbiBmb3IgZXZlcnlvbmUuXG4gKi9cbmZ1bmN0aW9uIHVzZU1pc3NpbmdJbnRlcnNlY3Rpb25PYnNlcnZlcihzaG91bGRPYnNlcnZlLCBzdGF0ZSwgdmlzdWFsRWxlbWVudCwgeyBmYWxsYmFjayA9IHRydWUgfSkge1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghc2hvdWxkT2JzZXJ2ZSB8fCAhZmFsbGJhY2spXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChlbnYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICB3YXJuT25jZShmYWxzZSwgXCJJbnRlcnNlY3Rpb25PYnNlcnZlciBub3QgYXZhaWxhYmxlIG9uIHRoaXMgZGV2aWNlLiB3aGlsZUluVmlldyBhbmltYXRpb25zIHdpbGwgdHJpZ2dlciBvbiBtb3VudC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmUgdGhpcyBpbiBhbiByQUYgYmVjYXVzZSwgYXQgdGhpcyBwb2ludCwgdGhlIGFuaW1hdGlvbiBzdGF0ZVxuICAgICAgICAgKiB3b24ndCBoYXZlIGZsdXNoZWQgZm9yIHRoZSBmaXJzdCB0aW1lIGFuZCB0aGVyZSdzIGNlcnRhaW4gbG9naWMgaW5cbiAgICAgICAgICogdGhlcmUgdGhhdCBiZWhhdmVzIGRpZmZlcmVudGx5IG9uIHRoZSBpbml0aWFsIGFuaW1hdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBob29rIHNob3VsZCBiZSBxdWl0ZSByYXJlbHkgY2FsbGVkIHNvIHNldHRpbmcgdGhpcyBpbiBhbiByQUZcbiAgICAgICAgICogaXMgcHJlZmVycmVkIHRvIGNoYW5naW5nIHRoZSBiZWhhdmlvdXIgb2YgdGhlIGFuaW1hdGlvbiBzdGF0ZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5oYXNFbnRlcmVkVmlldyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCB7IG9uVmlld3BvcnRFbnRlciB9ID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgICAgICAgICAgb25WaWV3cG9ydEVudGVyICYmIG9uVmlld3BvcnRFbnRlcihudWxsKTtcbiAgICAgICAgICAgIGlmICh2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5JblZpZXcsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LCBbc2hvdWxkT2JzZXJ2ZV0pO1xufVxuXG5leHBvcnQgeyB1c2VWaWV3cG9ydCB9O1xuIiwiY29uc3QgbWFrZVJlbmRlcmxlc3NDb21wb25lbnQgPSAoaG9vaykgPT4gKHByb3BzKSA9PiB7XG4gICAgaG9vayhwcm9wcyk7XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgeyBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCB9O1xuIiwiaW1wb3J0IHsgdXNlRm9jdXNHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvdXNlLWZvY3VzLWdlc3R1cmUubWpzJztcbmltcG9ydCB7IHVzZUhvdmVyR2VzdHVyZSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL3VzZS1ob3Zlci1nZXN0dXJlLm1qcyc7XG5pbXBvcnQgeyB1c2VUYXBHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvdXNlLXRhcC1nZXN0dXJlLm1qcyc7XG5pbXBvcnQgeyB1c2VWaWV3cG9ydCB9IGZyb20gJy4vdmlld3BvcnQvdXNlLXZpZXdwb3J0Lm1qcyc7XG5pbXBvcnQgeyBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCB9IGZyb20gJy4uL3V0aWxzL21ha2UtcmVuZGVybGVzcy1jb21wb25lbnQubWpzJztcblxuY29uc3QgZ2VzdHVyZUFuaW1hdGlvbnMgPSB7XG4gICAgaW5WaWV3OiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCh1c2VWaWV3cG9ydCksXG4gICAgdGFwOiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCh1c2VUYXBHZXN0dXJlKSxcbiAgICBmb2N1czogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlRm9jdXNHZXN0dXJlKSxcbiAgICBob3ZlcjogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlSG92ZXJHZXN0dXJlKSxcbn07XG5cbmV4cG9ydCB7IGdlc3R1cmVBbmltYXRpb25zIH07XG4iLCJpbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc05vZGVPckNoaWxkIH0gZnJvbSAnLi91dGlscy9pcy1ub2RlLW9yLWNoaWxkLm1qcyc7XG5pbXBvcnQgeyB1c2VQb2ludGVyRXZlbnQsIGFkZFBvaW50ZXJFdmVudCB9IGZyb20gJy4uL2V2ZW50cy91c2UtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgdXNlVW5tb3VudEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZS11bm1vdW50LWVmZmVjdC5tanMnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJ3BvcG1vdGlvbic7XG5pbXBvcnQgeyBBbmltYXRpb25UeXBlIH0gZnJvbSAnLi4vcmVuZGVyL3V0aWxzL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBpc0RyYWdBY3RpdmUgfSBmcm9tICcuL2RyYWcvdXRpbHMvbG9jay5tanMnO1xuXG4vKipcbiAqIEBwYXJhbSBoYW5kbGVycyAtXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdXNlVGFwR2VzdHVyZSh7IG9uVGFwLCBvblRhcFN0YXJ0LCBvblRhcENhbmNlbCwgd2hpbGVUYXAsIHZpc3VhbEVsZW1lbnQsIH0pIHtcbiAgICBjb25zdCBoYXNQcmVzc0xpc3RlbmVycyA9IG9uVGFwIHx8IG9uVGFwU3RhcnQgfHwgb25UYXBDYW5jZWwgfHwgd2hpbGVUYXA7XG4gICAgY29uc3QgaXNQcmVzc2luZyA9IHVzZVJlZihmYWxzZSk7XG4gICAgY29uc3QgY2FuY2VsUG9pbnRlckVuZExpc3RlbmVycyA9IHVzZVJlZihudWxsKTtcbiAgICAvKipcbiAgICAgKiBPbmx5IHNldCBsaXN0ZW5lciB0byBwYXNzaXZlIGlmIHRoZXJlIGFyZSBubyBleHRlcm5hbCBsaXN0ZW5lcnMuXG4gICAgICovXG4gICAgY29uc3QgZXZlbnRPcHRpb25zID0ge1xuICAgICAgICBwYXNzaXZlOiAhKG9uVGFwU3RhcnQgfHwgb25UYXAgfHwgb25UYXBDYW5jZWwgfHwgb25Qb2ludGVyRG93biksXG4gICAgfTtcbiAgICBmdW5jdGlvbiByZW1vdmVQb2ludGVyRW5kTGlzdGVuZXIoKSB7XG4gICAgICAgIGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMuY3VycmVudCAmJiBjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzLmN1cnJlbnQoKTtcbiAgICAgICAgY2FuY2VsUG9pbnRlckVuZExpc3RlbmVycy5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tQb2ludGVyRW5kKCkge1xuICAgICAgICByZW1vdmVQb2ludGVyRW5kTGlzdGVuZXIoKTtcbiAgICAgICAgaXNQcmVzc2luZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUgJiZcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuVGFwLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiAhaXNEcmFnQWN0aXZlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUG9pbnRlclVwKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIGlmICghY2hlY2tQb2ludGVyRW5kKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBvbmx5IGNvdW50IHRoaXMgYXMgYSB0YXAgZ2VzdHVyZSBpZiB0aGUgZXZlbnQudGFyZ2V0IGlzIHRoZSBzYW1lXG4gICAgICAgICAqIGFzLCBvciBhIGNoaWxkIG9mLCB0aGlzIGNvbXBvbmVudCdzIGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgICFpc05vZGVPckNoaWxkKHZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKSwgZXZlbnQudGFyZ2V0KVxuICAgICAgICAgICAgPyBvblRhcENhbmNlbCAmJiBvblRhcENhbmNlbChldmVudCwgaW5mbylcbiAgICAgICAgICAgIDogb25UYXAgJiYgb25UYXAoZXZlbnQsIGluZm8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJDYW5jZWwoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgaWYgKCFjaGVja1BvaW50ZXJFbmQoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb25UYXBDYW5jZWwgJiYgb25UYXBDYW5jZWwoZXZlbnQsIGluZm8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIHJlbW92ZVBvaW50ZXJFbmRMaXN0ZW5lcigpO1xuICAgICAgICBpZiAoaXNQcmVzc2luZy5jdXJyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpc1ByZXNzaW5nLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzLmN1cnJlbnQgPSBwaXBlKGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcnVwXCIsIG9uUG9pbnRlclVwLCBldmVudE9wdGlvbnMpLCBhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJjYW5jZWxcIiwgb25Qb2ludGVyQ2FuY2VsLCBldmVudE9wdGlvbnMpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuc3VyZSB3ZSB0cmlnZ2VyIGFuaW1hdGlvbnMgYmVmb3JlIGZpcmluZyBldmVudCBjYWxsYmFja1xuICAgICAgICAgKi9cbiAgICAgICAgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSAmJlxuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5UYXAsIHRydWUpO1xuICAgICAgICBvblRhcFN0YXJ0ICYmIG9uVGFwU3RhcnQoZXZlbnQsIGluZm8pO1xuICAgIH1cbiAgICB1c2VQb2ludGVyRXZlbnQodmlzdWFsRWxlbWVudCwgXCJwb2ludGVyZG93blwiLCBoYXNQcmVzc0xpc3RlbmVycyA/IG9uUG9pbnRlckRvd24gOiB1bmRlZmluZWQsIGV2ZW50T3B0aW9ucyk7XG4gICAgdXNlVW5tb3VudEVmZmVjdChyZW1vdmVQb2ludGVyRW5kTGlzdGVuZXIpO1xufVxuXG5leHBvcnQgeyB1c2VUYXBHZXN0dXJlIH07XG4iLCJpbXBvcnQgeyBBbmltYXRpb25UeXBlIH0gZnJvbSAnLi4vcmVuZGVyL3V0aWxzL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyB1c2VEb21FdmVudCB9IGZyb20gJy4uL2V2ZW50cy91c2UtZG9tLWV2ZW50Lm1qcyc7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBwcm9wc1xuICogQHBhcmFtIHJlZlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVzZUZvY3VzR2VzdHVyZSh7IHdoaWxlRm9jdXMsIHZpc3VhbEVsZW1lbnQgfSkge1xuICAgIGNvbnN0IHsgYW5pbWF0aW9uU3RhdGUgfSA9IHZpc3VhbEVsZW1lbnQ7XG4gICAgY29uc3Qgb25Gb2N1cyA9ICgpID0+IHtcbiAgICAgICAgYW5pbWF0aW9uU3RhdGUgJiYgYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuRm9jdXMsIHRydWUpO1xuICAgIH07XG4gICAgY29uc3Qgb25CbHVyID0gKCkgPT4ge1xuICAgICAgICBhbmltYXRpb25TdGF0ZSAmJiBhbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5Gb2N1cywgZmFsc2UpO1xuICAgIH07XG4gICAgdXNlRG9tRXZlbnQodmlzdWFsRWxlbWVudCwgXCJmb2N1c1wiLCB3aGlsZUZvY3VzID8gb25Gb2N1cyA6IHVuZGVmaW5lZCk7XG4gICAgdXNlRG9tRXZlbnQodmlzdWFsRWxlbWVudCwgXCJibHVyXCIsIHdoaWxlRm9jdXMgPyBvbkJsdXIgOiB1bmRlZmluZWQpO1xufVxuXG5leHBvcnQgeyB1c2VGb2N1c0dlc3R1cmUgfTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZUlkLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuXG4vKipcbiAqIFdoZW4gYSBjb21wb25lbnQgaXMgdGhlIGNoaWxkIG9mIGBBbmltYXRlUHJlc2VuY2VgLCBpdCBjYW4gdXNlIGB1c2VQcmVzZW5jZWBcbiAqIHRvIGFjY2VzcyBpbmZvcm1hdGlvbiBhYm91dCB3aGV0aGVyIGl0J3Mgc3RpbGwgcHJlc2VudCBpbiB0aGUgUmVhY3QgdHJlZS5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZVByZXNlbmNlIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIlxuICpcbiAqIGV4cG9ydCBjb25zdCBDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IFtpc1ByZXNlbnQsIHNhZmVUb1JlbW92ZV0gPSB1c2VQcmVzZW5jZSgpXG4gKlxuICogICB1c2VFZmZlY3QoKCkgPT4ge1xuICogICAgICFpc1ByZXNlbnQgJiYgc2V0VGltZW91dChzYWZlVG9SZW1vdmUsIDEwMDApXG4gKiAgIH0sIFtpc1ByZXNlbnRdKVxuICpcbiAqICAgcmV0dXJuIDxkaXYgLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIElmIGBpc1ByZXNlbnRgIGlzIGBmYWxzZWAsIGl0IG1lYW5zIHRoYXQgYSBjb21wb25lbnQgaGFzIGJlZW4gcmVtb3ZlZCB0aGUgdHJlZSwgYnV0XG4gKiBgQW5pbWF0ZVByZXNlbmNlYCB3b24ndCByZWFsbHkgcmVtb3ZlIGl0IHVudGlsIGBzYWZlVG9SZW1vdmVgIGhhcyBiZWVuIGNhbGxlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZVByZXNlbmNlKCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCk7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBbdHJ1ZSwgbnVsbF07XG4gICAgY29uc3QgeyBpc1ByZXNlbnQsIG9uRXhpdENvbXBsZXRlLCByZWdpc3RlciB9ID0gY29udGV4dDtcbiAgICAvLyBJdCdzIHNhZmUgdG8gY2FsbCB0aGUgZm9sbG93aW5nIGhvb2tzIGNvbmRpdGlvbmFsbHkgKGFmdGVyIGFuIGVhcmx5IHJldHVybikgYmVjYXVzZSB0aGUgY29udGV4dCB3aWxsIGFsd2F5c1xuICAgIC8vIGVpdGhlciBiZSBudWxsIG9yIG5vbi1udWxsIGZvciB0aGUgbGlmZXNwYW4gb2YgdGhlIGNvbXBvbmVudC5cbiAgICAvLyBSZXBsYWNlIHdpdGggdXNlSWQgd2hlbiByZWxlYXNlZCBpbiBSZWFjdFxuICAgIGNvbnN0IGlkID0gdXNlSWQoKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4gcmVnaXN0ZXIoaWQpLCBbXSk7XG4gICAgY29uc3Qgc2FmZVRvUmVtb3ZlID0gKCkgPT4gb25FeGl0Q29tcGxldGUgJiYgb25FeGl0Q29tcGxldGUoaWQpO1xuICAgIHJldHVybiAhaXNQcmVzZW50ICYmIG9uRXhpdENvbXBsZXRlID8gW2ZhbHNlLCBzYWZlVG9SZW1vdmVdIDogW3RydWVdO1xufVxuLyoqXG4gKiBTaW1pbGFyIHRvIGB1c2VQcmVzZW5jZWAsIGV4Y2VwdCBgdXNlSXNQcmVzZW50YCBzaW1wbHkgcmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgY29tcG9uZW50IGlzIHByZXNlbnQuXG4gKiBUaGVyZSBpcyBubyBgc2FmZVRvUmVtb3ZlYCBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZUlzUHJlc2VudCB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBleHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBpc1ByZXNlbnQgPSB1c2VJc1ByZXNlbnQoKVxuICpcbiAqICAgdXNlRWZmZWN0KCgpID0+IHtcbiAqICAgICAhaXNQcmVzZW50ICYmIGNvbnNvbGUubG9nKFwiSSd2ZSBiZWVuIHJlbW92ZWQhXCIpXG4gKiAgIH0sIFtpc1ByZXNlbnRdKVxuICpcbiAqICAgcmV0dXJuIDxkaXYgLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlSXNQcmVzZW50KCkge1xuICAgIHJldHVybiBpc1ByZXNlbnQodXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpKTtcbn1cbmZ1bmN0aW9uIGlzUHJlc2VudChjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQgPT09IG51bGwgPyB0cnVlIDogY29udGV4dC5pc1ByZXNlbnQ7XG59XG5cbmV4cG9ydCB7IGlzUHJlc2VudCwgdXNlSXNQcmVzZW50LCB1c2VQcmVzZW5jZSB9O1xuIiwiZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcmV2KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHByZXZMZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgICBpZiAocHJldkxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocHJldltpXSAhPT0gbmV4dFtpXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCB7IHNoYWxsb3dDb21wYXJlIH07XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcclxuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XHJcbiAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbn1cclxuIiwiY29uc3QgY2xhbXAgPSAobWluLCBtYXgsIHYpID0+IE1hdGgubWluKE1hdGgubWF4KHYsIG1pbiksIG1heCk7XG5cbmV4cG9ydCB7IGNsYW1wIH07XG4iLCJpbXBvcnQgeyB3YXJuaW5nIH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uLy4uL3V0aWxzL2NsYW1wLm1qcyc7XG5cbmNvbnN0IHNhZmVNaW4gPSAwLjAwMTtcbmNvbnN0IG1pbkR1cmF0aW9uID0gMC4wMTtcbmNvbnN0IG1heER1cmF0aW9uID0gMTAuMDtcbmNvbnN0IG1pbkRhbXBpbmcgPSAwLjA1O1xuY29uc3QgbWF4RGFtcGluZyA9IDE7XG5mdW5jdGlvbiBmaW5kU3ByaW5nKHsgZHVyYXRpb24gPSA4MDAsIGJvdW5jZSA9IDAuMjUsIHZlbG9jaXR5ID0gMCwgbWFzcyA9IDEsIH0pIHtcbiAgICBsZXQgZW52ZWxvcGU7XG4gICAgbGV0IGRlcml2YXRpdmU7XG4gICAgd2FybmluZyhkdXJhdGlvbiA8PSBtYXhEdXJhdGlvbiAqIDEwMDAsIFwiU3ByaW5nIGR1cmF0aW9uIG11c3QgYmUgMTAgc2Vjb25kcyBvciBsZXNzXCIpO1xuICAgIGxldCBkYW1waW5nUmF0aW8gPSAxIC0gYm91bmNlO1xuICAgIGRhbXBpbmdSYXRpbyA9IGNsYW1wKG1pbkRhbXBpbmcsIG1heERhbXBpbmcsIGRhbXBpbmdSYXRpbyk7XG4gICAgZHVyYXRpb24gPSBjbGFtcChtaW5EdXJhdGlvbiwgbWF4RHVyYXRpb24sIGR1cmF0aW9uIC8gMTAwMCk7XG4gICAgaWYgKGRhbXBpbmdSYXRpbyA8IDEpIHtcbiAgICAgICAgZW52ZWxvcGUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBleHBvbmVudGlhbERlY2F5ID0gdW5kYW1wZWRGcmVxICogZGFtcGluZ1JhdGlvO1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBleHBvbmVudGlhbERlY2F5ICogZHVyYXRpb247XG4gICAgICAgICAgICBjb25zdCBhID0gZXhwb25lbnRpYWxEZWNheSAtIHZlbG9jaXR5O1xuICAgICAgICAgICAgY29uc3QgYiA9IGNhbGNBbmd1bGFyRnJlcSh1bmRhbXBlZEZyZXEsIGRhbXBpbmdSYXRpbyk7XG4gICAgICAgICAgICBjb25zdCBjID0gTWF0aC5leHAoLWRlbHRhKTtcbiAgICAgICAgICAgIHJldHVybiBzYWZlTWluIC0gKGEgLyBiKSAqIGM7XG4gICAgICAgIH07XG4gICAgICAgIGRlcml2YXRpdmUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBleHBvbmVudGlhbERlY2F5ID0gdW5kYW1wZWRGcmVxICogZGFtcGluZ1JhdGlvO1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBleHBvbmVudGlhbERlY2F5ICogZHVyYXRpb247XG4gICAgICAgICAgICBjb25zdCBkID0gZGVsdGEgKiB2ZWxvY2l0eSArIHZlbG9jaXR5O1xuICAgICAgICAgICAgY29uc3QgZSA9IE1hdGgucG93KGRhbXBpbmdSYXRpbywgMikgKiBNYXRoLnBvdyh1bmRhbXBlZEZyZXEsIDIpICogZHVyYXRpb247XG4gICAgICAgICAgICBjb25zdCBmID0gTWF0aC5leHAoLWRlbHRhKTtcbiAgICAgICAgICAgIGNvbnN0IGcgPSBjYWxjQW5ndWxhckZyZXEoTWF0aC5wb3codW5kYW1wZWRGcmVxLCAyKSwgZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvciA9IC1lbnZlbG9wZSh1bmRhbXBlZEZyZXEpICsgc2FmZU1pbiA+IDAgPyAtMSA6IDE7XG4gICAgICAgICAgICByZXR1cm4gKGZhY3RvciAqICgoZCAtIGUpICogZikpIC8gZztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVudmVsb3BlID0gKHVuZGFtcGVkRnJlcSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IE1hdGguZXhwKC11bmRhbXBlZEZyZXEgKiBkdXJhdGlvbik7XG4gICAgICAgICAgICBjb25zdCBiID0gKHVuZGFtcGVkRnJlcSAtIHZlbG9jaXR5KSAqIGR1cmF0aW9uICsgMTtcbiAgICAgICAgICAgIHJldHVybiAtc2FmZU1pbiArIGEgKiBiO1xuICAgICAgICB9O1xuICAgICAgICBkZXJpdmF0aXZlID0gKHVuZGFtcGVkRnJlcSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IE1hdGguZXhwKC11bmRhbXBlZEZyZXEgKiBkdXJhdGlvbik7XG4gICAgICAgICAgICBjb25zdCBiID0gKHZlbG9jaXR5IC0gdW5kYW1wZWRGcmVxKSAqIChkdXJhdGlvbiAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBhICogYjtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaW5pdGlhbEd1ZXNzID0gNSAvIGR1cmF0aW9uO1xuICAgIGNvbnN0IHVuZGFtcGVkRnJlcSA9IGFwcHJveGltYXRlUm9vdChlbnZlbG9wZSwgZGVyaXZhdGl2ZSwgaW5pdGlhbEd1ZXNzKTtcbiAgICBkdXJhdGlvbiA9IGR1cmF0aW9uICogMTAwMDtcbiAgICBpZiAoaXNOYU4odW5kYW1wZWRGcmVxKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RpZmZuZXNzOiAxMDAsXG4gICAgICAgICAgICBkYW1waW5nOiAxMCxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3RpZmZuZXNzID0gTWF0aC5wb3codW5kYW1wZWRGcmVxLCAyKSAqIG1hc3M7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGlmZm5lc3MsXG4gICAgICAgICAgICBkYW1waW5nOiBkYW1waW5nUmF0aW8gKiAyICogTWF0aC5zcXJ0KG1hc3MgKiBzdGlmZm5lc3MpLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIH07XG4gICAgfVxufVxuY29uc3Qgcm9vdEl0ZXJhdGlvbnMgPSAxMjtcbmZ1bmN0aW9uIGFwcHJveGltYXRlUm9vdChlbnZlbG9wZSwgZGVyaXZhdGl2ZSwgaW5pdGlhbEd1ZXNzKSB7XG4gICAgbGV0IHJlc3VsdCA9IGluaXRpYWxHdWVzcztcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHJvb3RJdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0IC0gZW52ZWxvcGUocmVzdWx0KSAvIGRlcml2YXRpdmUocmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNhbGNBbmd1bGFyRnJlcSh1bmRhbXBlZEZyZXEsIGRhbXBpbmdSYXRpbykge1xuICAgIHJldHVybiB1bmRhbXBlZEZyZXEgKiBNYXRoLnNxcnQoMSAtIGRhbXBpbmdSYXRpbyAqIGRhbXBpbmdSYXRpbyk7XG59XG5cbmV4cG9ydCB7IGNhbGNBbmd1bGFyRnJlcSwgZmluZFNwcmluZywgbWF4RGFtcGluZywgbWF4RHVyYXRpb24sIG1pbkRhbXBpbmcsIG1pbkR1cmF0aW9uIH07XG4iLCJpbXBvcnQgeyBfX3Jlc3QgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBmaW5kU3ByaW5nLCBjYWxjQW5ndWxhckZyZXEgfSBmcm9tICcuLi91dGlscy9maW5kLXNwcmluZy5tanMnO1xuXG5jb25zdCBkdXJhdGlvbktleXMgPSBbXCJkdXJhdGlvblwiLCBcImJvdW5jZVwiXTtcbmNvbnN0IHBoeXNpY3NLZXlzID0gW1wic3RpZmZuZXNzXCIsIFwiZGFtcGluZ1wiLCBcIm1hc3NcIl07XG5mdW5jdGlvbiBpc1NwcmluZ1R5cGUob3B0aW9ucywga2V5cykge1xuICAgIHJldHVybiBrZXlzLnNvbWUoKGtleSkgPT4gb3B0aW9uc1trZXldICE9PSB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gZ2V0U3ByaW5nT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgbGV0IHNwcmluZ09wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgdmVsb2NpdHk6IDAuMCwgc3RpZmZuZXNzOiAxMDAsIGRhbXBpbmc6IDEwLCBtYXNzOiAxLjAsIGlzUmVzb2x2ZWRGcm9tRHVyYXRpb246IGZhbHNlIH0sIG9wdGlvbnMpO1xuICAgIGlmICghaXNTcHJpbmdUeXBlKG9wdGlvbnMsIHBoeXNpY3NLZXlzKSAmJlxuICAgICAgICBpc1NwcmluZ1R5cGUob3B0aW9ucywgZHVyYXRpb25LZXlzKSkge1xuICAgICAgICBjb25zdCBkZXJpdmVkID0gZmluZFNwcmluZyhvcHRpb25zKTtcbiAgICAgICAgc3ByaW5nT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzcHJpbmdPcHRpb25zKSwgZGVyaXZlZCksIHsgdmVsb2NpdHk6IDAuMCwgbWFzczogMS4wIH0pO1xuICAgICAgICBzcHJpbmdPcHRpb25zLmlzUmVzb2x2ZWRGcm9tRHVyYXRpb24gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gc3ByaW5nT3B0aW9ucztcbn1cbmZ1bmN0aW9uIHNwcmluZyhfYSkge1xuICAgIHZhciB7IGZyb20gPSAwLjAsIHRvID0gMS4wLCByZXN0U3BlZWQgPSAyLCByZXN0RGVsdGEgfSA9IF9hLCBvcHRpb25zID0gX19yZXN0KF9hLCBbXCJmcm9tXCIsIFwidG9cIiwgXCJyZXN0U3BlZWRcIiwgXCJyZXN0RGVsdGFcIl0pO1xuICAgIGNvbnN0IHN0YXRlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IGZyb20gfTtcbiAgICBsZXQgeyBzdGlmZm5lc3MsIGRhbXBpbmcsIG1hc3MsIHZlbG9jaXR5LCBkdXJhdGlvbiwgaXNSZXNvbHZlZEZyb21EdXJhdGlvbiwgfSA9IGdldFNwcmluZ09wdGlvbnMob3B0aW9ucyk7XG4gICAgbGV0IHJlc29sdmVTcHJpbmcgPSB6ZXJvO1xuICAgIGxldCByZXNvbHZlVmVsb2NpdHkgPSB6ZXJvO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVNwcmluZygpIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFZlbG9jaXR5ID0gdmVsb2NpdHkgPyAtKHZlbG9jaXR5IC8gMTAwMCkgOiAwLjA7XG4gICAgICAgIGNvbnN0IGluaXRpYWxEZWx0YSA9IHRvIC0gZnJvbTtcbiAgICAgICAgY29uc3QgZGFtcGluZ1JhdGlvID0gZGFtcGluZyAvICgyICogTWF0aC5zcXJ0KHN0aWZmbmVzcyAqIG1hc3MpKTtcbiAgICAgICAgY29uc3QgdW5kYW1wZWRBbmd1bGFyRnJlcSA9IE1hdGguc3FydChzdGlmZm5lc3MgLyBtYXNzKSAvIDEwMDA7XG4gICAgICAgIGlmIChyZXN0RGVsdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdERlbHRhID0gTWF0aC5taW4oTWF0aC5hYnModG8gLSBmcm9tKSAvIDEwMCwgMC40KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGFtcGluZ1JhdGlvIDwgMSkge1xuICAgICAgICAgICAgY29uc3QgYW5ndWxhckZyZXEgPSBjYWxjQW5ndWxhckZyZXEodW5kYW1wZWRBbmd1bGFyRnJlcSwgZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgICAgIHJlc29sdmVTcHJpbmcgPSAodCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudmVsb3BlID0gTWF0aC5leHAoLWRhbXBpbmdSYXRpbyAqIHVuZGFtcGVkQW5ndWxhckZyZXEgKiB0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRvIC1cbiAgICAgICAgICAgICAgICAgICAgZW52ZWxvcGUgKlxuICAgICAgICAgICAgICAgICAgICAgICAgKCgoaW5pdGlhbFZlbG9jaXR5ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogaW5pdGlhbERlbHRhKSAvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhckZyZXEpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbihhbmd1bGFyRnJlcSAqIHQpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEgKiBNYXRoLmNvcyhhbmd1bGFyRnJlcSAqIHQpKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzb2x2ZVZlbG9jaXR5ID0gKHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnZlbG9wZSA9IE1hdGguZXhwKC1kYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChkYW1waW5nUmF0aW8gKlxuICAgICAgICAgICAgICAgICAgICB1bmRhbXBlZEFuZ3VsYXJGcmVxICpcbiAgICAgICAgICAgICAgICAgICAgZW52ZWxvcGUgKlxuICAgICAgICAgICAgICAgICAgICAoKE1hdGguc2luKGFuZ3VsYXJGcmVxICogdCkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgKGluaXRpYWxWZWxvY2l0eSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGluZ1JhdGlvICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kYW1wZWRBbmd1bGFyRnJlcSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEZWx0YSkpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXJGcmVxICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEZWx0YSAqIE1hdGguY29zKGFuZ3VsYXJGcmVxICogdCkpIC1cbiAgICAgICAgICAgICAgICAgICAgZW52ZWxvcGUgKlxuICAgICAgICAgICAgICAgICAgICAgICAgKE1hdGguY29zKGFuZ3VsYXJGcmVxICogdCkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbml0aWFsVmVsb2NpdHkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1waW5nUmF0aW8gKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kYW1wZWRBbmd1bGFyRnJlcSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEpIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyRnJlcSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEZWx0YSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKGFuZ3VsYXJGcmVxICogdCkpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGFtcGluZ1JhdGlvID09PSAxKSB7XG4gICAgICAgICAgICByZXNvbHZlU3ByaW5nID0gKHQpID0+IHRvIC1cbiAgICAgICAgICAgICAgICBNYXRoLmV4cCgtdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpICpcbiAgICAgICAgICAgICAgICAgICAgKGluaXRpYWxEZWx0YSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoaW5pdGlhbFZlbG9jaXR5ICsgdW5kYW1wZWRBbmd1bGFyRnJlcSAqIGluaXRpYWxEZWx0YSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGFtcGVkQW5ndWxhckZyZXEgPSB1bmRhbXBlZEFuZ3VsYXJGcmVxICogTWF0aC5zcXJ0KGRhbXBpbmdSYXRpbyAqIGRhbXBpbmdSYXRpbyAtIDEpO1xuICAgICAgICAgICAgcmVzb2x2ZVNwcmluZyA9ICh0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW52ZWxvcGUgPSBNYXRoLmV4cCgtZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZyZXFGb3JUID0gTWF0aC5taW4oZGFtcGVkQW5ndWxhckZyZXEgKiB0LCAzMDApO1xuICAgICAgICAgICAgICAgIHJldHVybiAodG8gLVxuICAgICAgICAgICAgICAgICAgICAoZW52ZWxvcGUgKlxuICAgICAgICAgICAgICAgICAgICAgICAgKChpbml0aWFsVmVsb2NpdHkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBpbmdSYXRpbyAqIHVuZGFtcGVkQW5ndWxhckZyZXEgKiBpbml0aWFsRGVsdGEpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbmgoZnJlcUZvclQpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1wZWRBbmd1bGFyRnJlcSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEZWx0YSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY29zaChmcmVxRm9yVCkpKSAvXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1wZWRBbmd1bGFyRnJlcSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZVNwcmluZygpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6ICh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gcmVzb2x2ZVNwcmluZyh0KTtcbiAgICAgICAgICAgIGlmICghaXNSZXNvbHZlZEZyb21EdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWZWxvY2l0eSA9IHJlc29sdmVWZWxvY2l0eSh0KSAqIDEwMDA7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNCZWxvd1ZlbG9jaXR5VGhyZXNob2xkID0gTWF0aC5hYnMoY3VycmVudFZlbG9jaXR5KSA8PSByZXN0U3BlZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNCZWxvd0Rpc3BsYWNlbWVudFRocmVzaG9sZCA9IE1hdGguYWJzKHRvIC0gY3VycmVudCkgPD0gcmVzdERlbHRhO1xuICAgICAgICAgICAgICAgIHN0YXRlLmRvbmUgPVxuICAgICAgICAgICAgICAgICAgICBpc0JlbG93VmVsb2NpdHlUaHJlc2hvbGQgJiYgaXNCZWxvd0Rpc3BsYWNlbWVudFRocmVzaG9sZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXRlLmRvbmUgPSB0ID49IGR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGUudmFsdWUgPSBzdGF0ZS5kb25lID8gdG8gOiBjdXJyZW50O1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9LFxuICAgICAgICBmbGlwVGFyZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IC12ZWxvY2l0eTtcbiAgICAgICAgICAgIFtmcm9tLCB0b10gPSBbdG8sIGZyb21dO1xuICAgICAgICAgICAgY3JlYXRlU3ByaW5nKCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbnNwcmluZy5uZWVkc0ludGVycG9sYXRpb24gPSAoYSwgYikgPT4gdHlwZW9mIGEgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGIgPT09IFwic3RyaW5nXCI7XG5jb25zdCB6ZXJvID0gKF90KSA9PiAwO1xuXG5leHBvcnQgeyBzcHJpbmcgfTtcbiIsImNvbnN0IHByb2dyZXNzID0gKGZyb20sIHRvLCB2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IHRvRnJvbURpZmZlcmVuY2UgPSB0byAtIGZyb207XG4gICAgcmV0dXJuIHRvRnJvbURpZmZlcmVuY2UgPT09IDAgPyAxIDogKHZhbHVlIC0gZnJvbSkgLyB0b0Zyb21EaWZmZXJlbmNlO1xufTtcblxuZXhwb3J0IHsgcHJvZ3Jlc3MgfTtcbiIsImNvbnN0IG1peCA9IChmcm9tLCB0bywgcHJvZ3Jlc3MpID0+IC1wcm9ncmVzcyAqIGZyb20gKyBwcm9ncmVzcyAqIHRvICsgZnJvbTtcblxuZXhwb3J0IHsgbWl4IH07XG4iLCJpbXBvcnQgeyBpc1N0cmluZywgc2luZ2xlQ29sb3JSZWdleCwgZmxvYXRSZWdleCB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbmNvbnN0IGlzQ29sb3JTdHJpbmcgPSAodHlwZSwgdGVzdFByb3ApID0+ICh2KSA9PiB7XG4gICAgcmV0dXJuIEJvb2xlYW4oKGlzU3RyaW5nKHYpICYmIHNpbmdsZUNvbG9yUmVnZXgudGVzdCh2KSAmJiB2LnN0YXJ0c1dpdGgodHlwZSkpIHx8XG4gICAgICAgICh0ZXN0UHJvcCAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodiwgdGVzdFByb3ApKSk7XG59O1xuY29uc3Qgc3BsaXRDb2xvciA9IChhTmFtZSwgYk5hbWUsIGNOYW1lKSA9PiAodikgPT4ge1xuICAgIGlmICghaXNTdHJpbmcodikpXG4gICAgICAgIHJldHVybiB2O1xuICAgIGNvbnN0IFthLCBiLCBjLCBhbHBoYV0gPSB2Lm1hdGNoKGZsb2F0UmVnZXgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIFthTmFtZV06IHBhcnNlRmxvYXQoYSksXG4gICAgICAgIFtiTmFtZV06IHBhcnNlRmxvYXQoYiksXG4gICAgICAgIFtjTmFtZV06IHBhcnNlRmxvYXQoYyksXG4gICAgICAgIGFscGhhOiBhbHBoYSAhPT0gdW5kZWZpbmVkID8gcGFyc2VGbG9hdChhbHBoYSkgOiAxLFxuICAgIH07XG59O1xuXG5leHBvcnQgeyBpc0NvbG9yU3RyaW5nLCBzcGxpdENvbG9yIH07XG4iLCJpbXBvcnQgeyBudW1iZXIsIGFscGhhIH0gZnJvbSAnLi4vbnVtYmVycy9pbmRleC5tanMnO1xuaW1wb3J0IHsgc2FuaXRpemUsIGNsYW1wIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcbmltcG9ydCB7IGlzQ29sb3JTdHJpbmcsIHNwbGl0Q29sb3IgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNvbnN0IGNsYW1wUmdiVW5pdCA9IGNsYW1wKDAsIDI1NSk7XG5jb25zdCByZ2JVbml0ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBudW1iZXIpLCB7IHRyYW5zZm9ybTogKHYpID0+IE1hdGgucm91bmQoY2xhbXBSZ2JVbml0KHYpKSB9KTtcbmNvbnN0IHJnYmEgPSB7XG4gICAgdGVzdDogaXNDb2xvclN0cmluZygncmdiJywgJ3JlZCcpLFxuICAgIHBhcnNlOiBzcGxpdENvbG9yKCdyZWQnLCAnZ3JlZW4nLCAnYmx1ZScpLFxuICAgIHRyYW5zZm9ybTogKHsgcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGE6IGFscGhhJDEgPSAxIH0pID0+ICdyZ2JhKCcgK1xuICAgICAgICByZ2JVbml0LnRyYW5zZm9ybShyZWQpICtcbiAgICAgICAgJywgJyArXG4gICAgICAgIHJnYlVuaXQudHJhbnNmb3JtKGdyZWVuKSArXG4gICAgICAgICcsICcgK1xuICAgICAgICByZ2JVbml0LnRyYW5zZm9ybShibHVlKSArXG4gICAgICAgICcsICcgK1xuICAgICAgICBzYW5pdGl6ZShhbHBoYS50cmFuc2Zvcm0oYWxwaGEkMSkpICtcbiAgICAgICAgJyknLFxufTtcblxuZXhwb3J0IHsgcmdiVW5pdCwgcmdiYSB9O1xuIiwiaW1wb3J0IHsgcmdiYSB9IGZyb20gJy4vcmdiYS5tanMnO1xuaW1wb3J0IHsgaXNDb2xvclN0cmluZyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gcGFyc2VIZXgodikge1xuICAgIGxldCByID0gJyc7XG4gICAgbGV0IGcgPSAnJztcbiAgICBsZXQgYiA9ICcnO1xuICAgIGxldCBhID0gJyc7XG4gICAgaWYgKHYubGVuZ3RoID4gNSkge1xuICAgICAgICByID0gdi5zdWJzdHIoMSwgMik7XG4gICAgICAgIGcgPSB2LnN1YnN0cigzLCAyKTtcbiAgICAgICAgYiA9IHYuc3Vic3RyKDUsIDIpO1xuICAgICAgICBhID0gdi5zdWJzdHIoNywgMik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByID0gdi5zdWJzdHIoMSwgMSk7XG4gICAgICAgIGcgPSB2LnN1YnN0cigyLCAxKTtcbiAgICAgICAgYiA9IHYuc3Vic3RyKDMsIDEpO1xuICAgICAgICBhID0gdi5zdWJzdHIoNCwgMSk7XG4gICAgICAgIHIgKz0gcjtcbiAgICAgICAgZyArPSBnO1xuICAgICAgICBiICs9IGI7XG4gICAgICAgIGEgKz0gYTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVkOiBwYXJzZUludChyLCAxNiksXG4gICAgICAgIGdyZWVuOiBwYXJzZUludChnLCAxNiksXG4gICAgICAgIGJsdWU6IHBhcnNlSW50KGIsIDE2KSxcbiAgICAgICAgYWxwaGE6IGEgPyBwYXJzZUludChhLCAxNikgLyAyNTUgOiAxLFxuICAgIH07XG59XG5jb25zdCBoZXggPSB7XG4gICAgdGVzdDogaXNDb2xvclN0cmluZygnIycpLFxuICAgIHBhcnNlOiBwYXJzZUhleCxcbiAgICB0cmFuc2Zvcm06IHJnYmEudHJhbnNmb3JtLFxufTtcblxuZXhwb3J0IHsgaGV4IH07XG4iLCJpbXBvcnQgeyBhbHBoYSB9IGZyb20gJy4uL251bWJlcnMvaW5kZXgubWpzJztcbmltcG9ydCB7IHBlcmNlbnQgfSBmcm9tICcuLi9udW1iZXJzL3VuaXRzLm1qcyc7XG5pbXBvcnQgeyBzYW5pdGl6ZSB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBpc0NvbG9yU3RyaW5nLCBzcGxpdENvbG9yIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5jb25zdCBoc2xhID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoJ2hzbCcsICdodWUnKSxcbiAgICBwYXJzZTogc3BsaXRDb2xvcignaHVlJywgJ3NhdHVyYXRpb24nLCAnbGlnaHRuZXNzJyksXG4gICAgdHJhbnNmb3JtOiAoeyBodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYWxwaGE6IGFscGhhJDEgPSAxIH0pID0+IHtcbiAgICAgICAgcmV0dXJuICgnaHNsYSgnICtcbiAgICAgICAgICAgIE1hdGgucm91bmQoaHVlKSArXG4gICAgICAgICAgICAnLCAnICtcbiAgICAgICAgICAgIHBlcmNlbnQudHJhbnNmb3JtKHNhbml0aXplKHNhdHVyYXRpb24pKSArXG4gICAgICAgICAgICAnLCAnICtcbiAgICAgICAgICAgIHBlcmNlbnQudHJhbnNmb3JtKHNhbml0aXplKGxpZ2h0bmVzcykpICtcbiAgICAgICAgICAgICcsICcgK1xuICAgICAgICAgICAgc2FuaXRpemUoYWxwaGEudHJhbnNmb3JtKGFscGhhJDEpKSArXG4gICAgICAgICAgICAnKScpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBoc2xhIH07XG4iLCJmdW5jdGlvbiBodWVUb1JnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKVxuICAgICAgICB0ICs9IDE7XG4gICAgaWYgKHQgPiAxKVxuICAgICAgICB0IC09IDE7XG4gICAgaWYgKHQgPCAxIC8gNilcbiAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgaWYgKHQgPCAxIC8gMilcbiAgICAgICAgcmV0dXJuIHE7XG4gICAgaWYgKHQgPCAyIC8gMylcbiAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICAgIHJldHVybiBwO1xufVxuZnVuY3Rpb24gaHNsYVRvUmdiYSh7IGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzLCBhbHBoYSB9KSB7XG4gICAgaHVlIC89IDM2MDtcbiAgICBzYXR1cmF0aW9uIC89IDEwMDtcbiAgICBsaWdodG5lc3MgLz0gMTAwO1xuICAgIGxldCByZWQgPSAwO1xuICAgIGxldCBncmVlbiA9IDA7XG4gICAgbGV0IGJsdWUgPSAwO1xuICAgIGlmICghc2F0dXJhdGlvbikge1xuICAgICAgICByZWQgPSBncmVlbiA9IGJsdWUgPSBsaWdodG5lc3M7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBxID0gbGlnaHRuZXNzIDwgMC41XG4gICAgICAgICAgICA/IGxpZ2h0bmVzcyAqICgxICsgc2F0dXJhdGlvbilcbiAgICAgICAgICAgIDogbGlnaHRuZXNzICsgc2F0dXJhdGlvbiAtIGxpZ2h0bmVzcyAqIHNhdHVyYXRpb247XG4gICAgICAgIGNvbnN0IHAgPSAyICogbGlnaHRuZXNzIC0gcTtcbiAgICAgICAgcmVkID0gaHVlVG9SZ2IocCwgcSwgaHVlICsgMSAvIDMpO1xuICAgICAgICBncmVlbiA9IGh1ZVRvUmdiKHAsIHEsIGh1ZSk7XG4gICAgICAgIGJsdWUgPSBodWVUb1JnYihwLCBxLCBodWUgLSAxIC8gMyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlZDogTWF0aC5yb3VuZChyZWQgKiAyNTUpLFxuICAgICAgICBncmVlbjogTWF0aC5yb3VuZChncmVlbiAqIDI1NSksXG4gICAgICAgIGJsdWU6IE1hdGgucm91bmQoYmx1ZSAqIDI1NSksXG4gICAgICAgIGFscGhhLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGhzbGFUb1JnYmEgfTtcbiIsImltcG9ydCB7IG1peCB9IGZyb20gJy4vbWl4Lm1qcyc7XG5pbXBvcnQgeyBoc2xhLCByZ2JhLCBoZXggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdoZXktbGlzdGVuJztcbmltcG9ydCB7IGhzbGFUb1JnYmEgfSBmcm9tICcuL2hzbGEtdG8tcmdiYS5tanMnO1xuXG5jb25zdCBtaXhMaW5lYXJDb2xvciA9IChmcm9tLCB0bywgdikgPT4ge1xuICAgIGNvbnN0IGZyb21FeHBvID0gZnJvbSAqIGZyb207XG4gICAgY29uc3QgdG9FeHBvID0gdG8gKiB0bztcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIHYgKiAodG9FeHBvIC0gZnJvbUV4cG8pICsgZnJvbUV4cG8pKTtcbn07XG5jb25zdCBjb2xvclR5cGVzID0gW2hleCwgcmdiYSwgaHNsYV07XG5jb25zdCBnZXRDb2xvclR5cGUgPSAodikgPT4gY29sb3JUeXBlcy5maW5kKCh0eXBlKSA9PiB0eXBlLnRlc3QodikpO1xuY29uc3Qgbm90QW5pbWF0YWJsZSA9IChjb2xvcikgPT4gYCcke2NvbG9yfScgaXMgbm90IGFuIGFuaW1hdGFibGUgY29sb3IuIFVzZSB0aGUgZXF1aXZhbGVudCBjb2xvciBjb2RlIGluc3RlYWQuYDtcbmNvbnN0IG1peENvbG9yID0gKGZyb20sIHRvKSA9PiB7XG4gICAgbGV0IGZyb21Db2xvclR5cGUgPSBnZXRDb2xvclR5cGUoZnJvbSk7XG4gICAgbGV0IHRvQ29sb3JUeXBlID0gZ2V0Q29sb3JUeXBlKHRvKTtcbiAgICBpbnZhcmlhbnQoISFmcm9tQ29sb3JUeXBlLCBub3RBbmltYXRhYmxlKGZyb20pKTtcbiAgICBpbnZhcmlhbnQoISF0b0NvbG9yVHlwZSwgbm90QW5pbWF0YWJsZSh0bykpO1xuICAgIGxldCBmcm9tQ29sb3IgPSBmcm9tQ29sb3JUeXBlLnBhcnNlKGZyb20pO1xuICAgIGxldCB0b0NvbG9yID0gdG9Db2xvclR5cGUucGFyc2UodG8pO1xuICAgIGlmIChmcm9tQ29sb3JUeXBlID09PSBoc2xhKSB7XG4gICAgICAgIGZyb21Db2xvciA9IGhzbGFUb1JnYmEoZnJvbUNvbG9yKTtcbiAgICAgICAgZnJvbUNvbG9yVHlwZSA9IHJnYmE7XG4gICAgfVxuICAgIGlmICh0b0NvbG9yVHlwZSA9PT0gaHNsYSkge1xuICAgICAgICB0b0NvbG9yID0gaHNsYVRvUmdiYSh0b0NvbG9yKTtcbiAgICAgICAgdG9Db2xvclR5cGUgPSByZ2JhO1xuICAgIH1cbiAgICBjb25zdCBibGVuZGVkID0gT2JqZWN0LmFzc2lnbih7fSwgZnJvbUNvbG9yKTtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYmxlbmRlZCkge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gXCJhbHBoYVwiKSB7XG4gICAgICAgICAgICAgICAgYmxlbmRlZFtrZXldID0gbWl4TGluZWFyQ29sb3IoZnJvbUNvbG9yW2tleV0sIHRvQ29sb3Jba2V5XSwgdik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYmxlbmRlZC5hbHBoYSA9IG1peChmcm9tQ29sb3IuYWxwaGEsIHRvQ29sb3IuYWxwaGEsIHYpO1xuICAgICAgICByZXR1cm4gZnJvbUNvbG9yVHlwZS50cmFuc2Zvcm0oYmxlbmRlZCk7XG4gICAgfTtcbn07XG5cbmV4cG9ydCB7IG1peENvbG9yLCBtaXhMaW5lYXJDb2xvciB9O1xuIiwiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy5tanMnO1xuaW1wb3J0IHsgaGV4IH0gZnJvbSAnLi9oZXgubWpzJztcbmltcG9ydCB7IGhzbGEgfSBmcm9tICcuL2hzbGEubWpzJztcbmltcG9ydCB7IHJnYmEgfSBmcm9tICcuL3JnYmEubWpzJztcblxuY29uc3QgY29sb3IgPSB7XG4gICAgdGVzdDogKHYpID0+IHJnYmEudGVzdCh2KSB8fCBoZXgudGVzdCh2KSB8fCBoc2xhLnRlc3QodiksXG4gICAgcGFyc2U6ICh2KSA9PiB7XG4gICAgICAgIGlmIChyZ2JhLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiByZ2JhLnBhcnNlKHYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhzbGEudGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIGhzbGEucGFyc2Uodik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaGV4LnBhcnNlKHYpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2KVxuICAgICAgICAgICAgPyB2XG4gICAgICAgICAgICA6IHYuaGFzT3duUHJvcGVydHkoJ3JlZCcpXG4gICAgICAgICAgICAgICAgPyByZ2JhLnRyYW5zZm9ybSh2KVxuICAgICAgICAgICAgICAgIDogaHNsYS50cmFuc2Zvcm0odik7XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGNvbG9yIH07XG4iLCJpbXBvcnQgeyBjb2xvciB9IGZyb20gJy4uL2NvbG9yL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBudW1iZXIgfSBmcm9tICcuLi9udW1iZXJzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc1N0cmluZywgZmxvYXRSZWdleCwgY29sb3JSZWdleCwgc2FuaXRpemUgfSBmcm9tICcuLi91dGlscy5tanMnO1xuXG5jb25zdCBjb2xvclRva2VuID0gJyR7Y30nO1xuY29uc3QgbnVtYmVyVG9rZW4gPSAnJHtufSc7XG5mdW5jdGlvbiB0ZXN0KHYpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgcmV0dXJuIChpc05hTih2KSAmJlxuICAgICAgICBpc1N0cmluZyh2KSAmJlxuICAgICAgICAoKF9iID0gKF9hID0gdi5tYXRjaChmbG9hdFJlZ2V4KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkgKyAoKF9kID0gKF9jID0gdi5tYXRjaChjb2xvclJlZ2V4KSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmxlbmd0aCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMCkgPiAwKTtcbn1cbmZ1bmN0aW9uIGFuYWx5c2Uodikge1xuICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpXG4gICAgICAgIHYgPSBgJHt2fWA7XG4gICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgbGV0IG51bUNvbG9ycyA9IDA7XG4gICAgY29uc3QgY29sb3JzID0gdi5tYXRjaChjb2xvclJlZ2V4KTtcbiAgICBpZiAoY29sb3JzKSB7XG4gICAgICAgIG51bUNvbG9ycyA9IGNvbG9ycy5sZW5ndGg7XG4gICAgICAgIHYgPSB2LnJlcGxhY2UoY29sb3JSZWdleCwgY29sb3JUb2tlbik7XG4gICAgICAgIHZhbHVlcy5wdXNoKC4uLmNvbG9ycy5tYXAoY29sb3IucGFyc2UpKTtcbiAgICB9XG4gICAgY29uc3QgbnVtYmVycyA9IHYubWF0Y2goZmxvYXRSZWdleCk7XG4gICAgaWYgKG51bWJlcnMpIHtcbiAgICAgICAgdiA9IHYucmVwbGFjZShmbG9hdFJlZ2V4LCBudW1iZXJUb2tlbik7XG4gICAgICAgIHZhbHVlcy5wdXNoKC4uLm51bWJlcnMubWFwKG51bWJlci5wYXJzZSkpO1xuICAgIH1cbiAgICByZXR1cm4geyB2YWx1ZXMsIG51bUNvbG9ycywgdG9rZW5pc2VkOiB2IH07XG59XG5mdW5jdGlvbiBwYXJzZSh2KSB7XG4gICAgcmV0dXJuIGFuYWx5c2UodikudmFsdWVzO1xufVxuZnVuY3Rpb24gY3JlYXRlVHJhbnNmb3JtZXIodikge1xuICAgIGNvbnN0IHsgdmFsdWVzLCBudW1Db2xvcnMsIHRva2VuaXNlZCB9ID0gYW5hbHlzZSh2KTtcbiAgICBjb25zdCBudW1WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBsZXQgb3V0cHV0ID0gdG9rZW5pc2VkO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShpIDwgbnVtQ29sb3JzID8gY29sb3JUb2tlbiA6IG51bWJlclRva2VuLCBpIDwgbnVtQ29sb3JzID8gY29sb3IudHJhbnNmb3JtKHZbaV0pIDogc2FuaXRpemUodltpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn1cbmNvbnN0IGNvbnZlcnROdW1iZXJzVG9aZXJvID0gKHYpID0+IHR5cGVvZiB2ID09PSAnbnVtYmVyJyA/IDAgOiB2O1xuZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZU5vbmUodikge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlKHYpO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVHJhbnNmb3JtZXIodik7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyKHBhcnNlZC5tYXAoY29udmVydE51bWJlcnNUb1plcm8pKTtcbn1cbmNvbnN0IGNvbXBsZXggPSB7IHRlc3QsIHBhcnNlLCBjcmVhdGVUcmFuc2Zvcm1lciwgZ2V0QW5pbWF0YWJsZU5vbmUgfTtcblxuZXhwb3J0IHsgY29tcGxleCB9O1xuIiwiY29uc3QgemVyb1BvaW50ID0ge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICB6OiAwXG59O1xuY29uc3QgaXNOdW0gPSAodikgPT4gdHlwZW9mIHYgPT09ICdudW1iZXInO1xuXG5leHBvcnQgeyBpc051bSwgemVyb1BvaW50IH07XG4iLCJpbXBvcnQgeyBjb21wbGV4LCBjb2xvciB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJy4vbWl4Lm1qcyc7XG5pbXBvcnQgeyBtaXhDb2xvciB9IGZyb20gJy4vbWl4LWNvbG9yLm1qcyc7XG5pbXBvcnQgeyBpc051bSB9IGZyb20gJy4vaW5jLm1qcyc7XG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnLi9waXBlLm1qcyc7XG5pbXBvcnQgeyB3YXJuaW5nIH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5cbmZ1bmN0aW9uIGdldE1peGVyKG9yaWdpbiwgdGFyZ2V0KSB7XG4gICAgaWYgKGlzTnVtKG9yaWdpbikpIHtcbiAgICAgICAgcmV0dXJuICh2KSA9PiBtaXgob3JpZ2luLCB0YXJnZXQsIHYpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2xvci50ZXN0KG9yaWdpbikpIHtcbiAgICAgICAgcmV0dXJuIG1peENvbG9yKG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBtaXhDb21wbGV4KG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG59XG5jb25zdCBtaXhBcnJheSA9IChmcm9tLCB0bykgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFsuLi5mcm9tXTtcbiAgICBjb25zdCBudW1WYWx1ZXMgPSBvdXRwdXQubGVuZ3RoO1xuICAgIGNvbnN0IGJsZW5kVmFsdWUgPSBmcm9tLm1hcCgoZnJvbVRoaXMsIGkpID0+IGdldE1peGVyKGZyb21UaGlzLCB0b1tpXSkpO1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgICAgICBvdXRwdXRbaV0gPSBibGVuZFZhbHVlW2ldKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn07XG5jb25zdCBtaXhPYmplY3QgPSAob3JpZ2luLCB0YXJnZXQpID0+IHtcbiAgICBjb25zdCBvdXRwdXQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9yaWdpbiksIHRhcmdldCk7XG4gICAgY29uc3QgYmxlbmRWYWx1ZSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG91dHB1dCkge1xuICAgICAgICBpZiAob3JpZ2luW2tleV0gIT09IHVuZGVmaW5lZCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBibGVuZFZhbHVlW2tleV0gPSBnZXRNaXhlcihvcmlnaW5ba2V5XSwgdGFyZ2V0W2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBibGVuZFZhbHVlKSB7XG4gICAgICAgICAgICBvdXRwdXRba2V5XSA9IGJsZW5kVmFsdWVba2V5XSh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59O1xuZnVuY3Rpb24gYW5hbHlzZSh2YWx1ZSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IGNvbXBsZXgucGFyc2UodmFsdWUpO1xuICAgIGNvbnN0IG51bVZhbHVlcyA9IHBhcnNlZC5sZW5ndGg7XG4gICAgbGV0IG51bU51bWJlcnMgPSAwO1xuICAgIGxldCBudW1SR0IgPSAwO1xuICAgIGxldCBudW1IU0wgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmFsdWVzOyBpKyspIHtcbiAgICAgICAgaWYgKG51bU51bWJlcnMgfHwgdHlwZW9mIHBhcnNlZFtpXSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgbnVtTnVtYmVycysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHBhcnNlZFtpXS5odWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG51bUhTTCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbnVtUkdCKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcGFyc2VkLCBudW1OdW1iZXJzLCBudW1SR0IsIG51bUhTTCB9O1xufVxuY29uc3QgbWl4Q29tcGxleCA9IChvcmlnaW4sIHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gY29tcGxleC5jcmVhdGVUcmFuc2Zvcm1lcih0YXJnZXQpO1xuICAgIGNvbnN0IG9yaWdpblN0YXRzID0gYW5hbHlzZShvcmlnaW4pO1xuICAgIGNvbnN0IHRhcmdldFN0YXRzID0gYW5hbHlzZSh0YXJnZXQpO1xuICAgIGNvbnN0IGNhbkludGVycG9sYXRlID0gb3JpZ2luU3RhdHMubnVtSFNMID09PSB0YXJnZXRTdGF0cy5udW1IU0wgJiZcbiAgICAgICAgb3JpZ2luU3RhdHMubnVtUkdCID09PSB0YXJnZXRTdGF0cy5udW1SR0IgJiZcbiAgICAgICAgb3JpZ2luU3RhdHMubnVtTnVtYmVycyA+PSB0YXJnZXRTdGF0cy5udW1OdW1iZXJzO1xuICAgIGlmIChjYW5JbnRlcnBvbGF0ZSkge1xuICAgICAgICByZXR1cm4gcGlwZShtaXhBcnJheShvcmlnaW5TdGF0cy5wYXJzZWQsIHRhcmdldFN0YXRzLnBhcnNlZCksIHRlbXBsYXRlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHdhcm5pbmcodHJ1ZSwgYENvbXBsZXggdmFsdWVzICcke29yaWdpbn0nIGFuZCAnJHt0YXJnZXR9JyB0b28gZGlmZmVyZW50IHRvIG1peC4gRW5zdXJlIGFsbCBjb2xvcnMgYXJlIG9mIHRoZSBzYW1lIHR5cGUsIGFuZCB0aGF0IGVhY2ggY29udGFpbnMgdGhlIHNhbWUgcXVhbnRpdHkgb2YgbnVtYmVyIGFuZCBjb2xvciB2YWx1ZXMuIEZhbGxpbmcgYmFjayB0byBpbnN0YW50IHRyYW5zaXRpb24uYCk7XG4gICAgICAgIHJldHVybiAocCkgPT4gYCR7cCA+IDAgPyB0YXJnZXQgOiBvcmlnaW59YDtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBtaXhBcnJheSwgbWl4Q29tcGxleCwgbWl4T2JqZWN0IH07XG4iLCJpbXBvcnQgeyBwcm9ncmVzcyB9IGZyb20gJy4vcHJvZ3Jlc3MubWpzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJy4vbWl4Lm1qcyc7XG5pbXBvcnQgeyBtaXhDb2xvciB9IGZyb20gJy4vbWl4LWNvbG9yLm1qcyc7XG5pbXBvcnQgeyBtaXhDb21wbGV4LCBtaXhBcnJheSwgbWl4T2JqZWN0IH0gZnJvbSAnLi9taXgtY29tcGxleC5tanMnO1xuaW1wb3J0IHsgY29sb3IgfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4vY2xhbXAubWpzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuL3BpcGUubWpzJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ2hleS1saXN0ZW4nO1xuXG5jb25zdCBtaXhOdW1iZXIgPSAoZnJvbSwgdG8pID0+IChwKSA9PiBtaXgoZnJvbSwgdG8sIHApO1xuZnVuY3Rpb24gZGV0ZWN0TWl4ZXJGYWN0b3J5KHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBtaXhOdW1iZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoY29sb3IudGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1peENvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1peENvbXBsZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICByZXR1cm4gbWl4QXJyYXk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbWl4T2JqZWN0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZU1peGVycyhvdXRwdXQsIGVhc2UsIGN1c3RvbU1peGVyKSB7XG4gICAgY29uc3QgbWl4ZXJzID0gW107XG4gICAgY29uc3QgbWl4ZXJGYWN0b3J5ID0gY3VzdG9tTWl4ZXIgfHwgZGV0ZWN0TWl4ZXJGYWN0b3J5KG91dHB1dFswXSk7XG4gICAgY29uc3QgbnVtTWl4ZXJzID0gb3V0cHV0Lmxlbmd0aCAtIDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1NaXhlcnM7IGkrKykge1xuICAgICAgICBsZXQgbWl4ZXIgPSBtaXhlckZhY3Rvcnkob3V0cHV0W2ldLCBvdXRwdXRbaSArIDFdKTtcbiAgICAgICAgaWYgKGVhc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGVhc2luZ0Z1bmN0aW9uID0gQXJyYXkuaXNBcnJheShlYXNlKSA/IGVhc2VbaV0gOiBlYXNlO1xuICAgICAgICAgICAgbWl4ZXIgPSBwaXBlKGVhc2luZ0Z1bmN0aW9uLCBtaXhlcik7XG4gICAgICAgIH1cbiAgICAgICAgbWl4ZXJzLnB1c2gobWl4ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbWl4ZXJzO1xufVxuZnVuY3Rpb24gZmFzdEludGVycG9sYXRlKFtmcm9tLCB0b10sIFttaXhlcl0pIHtcbiAgICByZXR1cm4gKHYpID0+IG1peGVyKHByb2dyZXNzKGZyb20sIHRvLCB2KSk7XG59XG5mdW5jdGlvbiBzbG93SW50ZXJwb2xhdGUoaW5wdXQsIG1peGVycykge1xuICAgIGNvbnN0IGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIGNvbnN0IGxhc3RJbnB1dEluZGV4ID0gaW5wdXRMZW5ndGggLSAxO1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBsZXQgbWl4ZXJJbmRleCA9IDA7XG4gICAgICAgIGxldCBmb3VuZE1peGVySW5kZXggPSBmYWxzZTtcbiAgICAgICAgaWYgKHYgPD0gaW5wdXRbMF0pIHtcbiAgICAgICAgICAgIGZvdW5kTWl4ZXJJbmRleCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodiA+PSBpbnB1dFtsYXN0SW5wdXRJbmRleF0pIHtcbiAgICAgICAgICAgIG1peGVySW5kZXggPSBsYXN0SW5wdXRJbmRleCAtIDE7XG4gICAgICAgICAgICBmb3VuZE1peGVySW5kZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZm91bmRNaXhlckluZGV4KSB7XG4gICAgICAgICAgICBsZXQgaSA9IDE7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGlucHV0TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRbaV0gPiB2IHx8IGkgPT09IGxhc3RJbnB1dEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1peGVySW5kZXggPSBpIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9ncmVzc0luUmFuZ2UgPSBwcm9ncmVzcyhpbnB1dFttaXhlckluZGV4XSwgaW5wdXRbbWl4ZXJJbmRleCArIDFdLCB2KTtcbiAgICAgICAgcmV0dXJuIG1peGVyc1ttaXhlckluZGV4XShwcm9ncmVzc0luUmFuZ2UpO1xuICAgIH07XG59XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShpbnB1dCwgb3V0cHV0LCB7IGNsYW1wOiBpc0NsYW1wID0gdHJ1ZSwgZWFzZSwgbWl4ZXIgfSA9IHt9KSB7XG4gICAgY29uc3QgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgaW52YXJpYW50KGlucHV0TGVuZ3RoID09PSBvdXRwdXQubGVuZ3RoLCAnQm90aCBpbnB1dCBhbmQgb3V0cHV0IHJhbmdlcyBtdXN0IGJlIHRoZSBzYW1lIGxlbmd0aCcpO1xuICAgIGludmFyaWFudCghZWFzZSB8fCAhQXJyYXkuaXNBcnJheShlYXNlKSB8fCBlYXNlLmxlbmd0aCA9PT0gaW5wdXRMZW5ndGggLSAxLCAnQXJyYXkgb2YgZWFzaW5nIGZ1bmN0aW9ucyBtdXN0IGJlIG9mIGxlbmd0aCBgaW5wdXQubGVuZ3RoIC0gMWAsIGFzIGl0IGFwcGxpZXMgdG8gdGhlIHRyYW5zaXRpb25zICoqYmV0d2VlbioqIHRoZSBkZWZpbmVkIHZhbHVlcy4nKTtcbiAgICBpZiAoaW5wdXRbMF0gPiBpbnB1dFtpbnB1dExlbmd0aCAtIDFdKSB7XG4gICAgICAgIGlucHV0ID0gW10uY29uY2F0KGlucHV0KTtcbiAgICAgICAgb3V0cHV0ID0gW10uY29uY2F0KG91dHB1dCk7XG4gICAgICAgIGlucHV0LnJldmVyc2UoKTtcbiAgICAgICAgb3V0cHV0LnJldmVyc2UoKTtcbiAgICB9XG4gICAgY29uc3QgbWl4ZXJzID0gY3JlYXRlTWl4ZXJzKG91dHB1dCwgZWFzZSwgbWl4ZXIpO1xuICAgIGNvbnN0IGludGVycG9sYXRvciA9IGlucHV0TGVuZ3RoID09PSAyXG4gICAgICAgID8gZmFzdEludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpXG4gICAgICAgIDogc2xvd0ludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpO1xuICAgIHJldHVybiBpc0NsYW1wXG4gICAgICAgID8gKHYpID0+IGludGVycG9sYXRvcihjbGFtcChpbnB1dFswXSwgaW5wdXRbaW5wdXRMZW5ndGggLSAxXSwgdikpXG4gICAgICAgIDogaW50ZXJwb2xhdG9yO1xufVxuXG5leHBvcnQgeyBpbnRlcnBvbGF0ZSB9O1xuIiwiY29uc3QgcmV2ZXJzZUVhc2luZyA9IGVhc2luZyA9PiBwID0+IDEgLSBlYXNpbmcoMSAtIHApO1xuY29uc3QgbWlycm9yRWFzaW5nID0gZWFzaW5nID0+IHAgPT4gcCA8PSAwLjUgPyBlYXNpbmcoMiAqIHApIC8gMiA6ICgyIC0gZWFzaW5nKDIgKiAoMSAtIHApKSkgLyAyO1xuY29uc3QgY3JlYXRlRXhwb0luID0gKHBvd2VyKSA9PiBwID0+IE1hdGgucG93KHAsIHBvd2VyKTtcbmNvbnN0IGNyZWF0ZUJhY2tJbiA9IChwb3dlcikgPT4gcCA9PiBwICogcCAqICgocG93ZXIgKyAxKSAqIHAgLSBwb3dlcik7XG5jb25zdCBjcmVhdGVBbnRpY2lwYXRlID0gKHBvd2VyKSA9PiB7XG4gICAgY29uc3QgYmFja0Vhc2luZyA9IGNyZWF0ZUJhY2tJbihwb3dlcik7XG4gICAgcmV0dXJuIHAgPT4gKHAgKj0gMikgPCAxXG4gICAgICAgID8gMC41ICogYmFja0Vhc2luZyhwKVxuICAgICAgICA6IDAuNSAqICgyIC0gTWF0aC5wb3coMiwgLTEwICogKHAgLSAxKSkpO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQW50aWNpcGF0ZSwgY3JlYXRlQmFja0luLCBjcmVhdGVFeHBvSW4sIG1pcnJvckVhc2luZywgcmV2ZXJzZUVhc2luZyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlRXhwb0luLCByZXZlcnNlRWFzaW5nLCBtaXJyb3JFYXNpbmcsIGNyZWF0ZUJhY2tJbiwgY3JlYXRlQW50aWNpcGF0ZSB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY29uc3QgREVGQVVMVF9PVkVSU0hPT1RfU1RSRU5HVEggPSAxLjUyNTtcbmNvbnN0IEJPVU5DRV9GSVJTVF9USFJFU0hPTEQgPSA0LjAgLyAxMS4wO1xuY29uc3QgQk9VTkNFX1NFQ09ORF9USFJFU0hPTEQgPSA4LjAgLyAxMS4wO1xuY29uc3QgQk9VTkNFX1RISVJEX1RIUkVTSE9MRCA9IDkuMCAvIDEwLjA7XG5jb25zdCBsaW5lYXIgPSBwID0+IHA7XG5jb25zdCBlYXNlSW4gPSBjcmVhdGVFeHBvSW4oMik7XG5jb25zdCBlYXNlT3V0ID0gcmV2ZXJzZUVhc2luZyhlYXNlSW4pO1xuY29uc3QgZWFzZUluT3V0ID0gbWlycm9yRWFzaW5nKGVhc2VJbik7XG5jb25zdCBjaXJjSW4gPSBwID0+IDEgLSBNYXRoLnNpbihNYXRoLmFjb3MocCkpO1xuY29uc3QgY2lyY091dCA9IHJldmVyc2VFYXNpbmcoY2lyY0luKTtcbmNvbnN0IGNpcmNJbk91dCA9IG1pcnJvckVhc2luZyhjaXJjT3V0KTtcbmNvbnN0IGJhY2tJbiA9IGNyZWF0ZUJhY2tJbihERUZBVUxUX09WRVJTSE9PVF9TVFJFTkdUSCk7XG5jb25zdCBiYWNrT3V0ID0gcmV2ZXJzZUVhc2luZyhiYWNrSW4pO1xuY29uc3QgYmFja0luT3V0ID0gbWlycm9yRWFzaW5nKGJhY2tJbik7XG5jb25zdCBhbnRpY2lwYXRlID0gY3JlYXRlQW50aWNpcGF0ZShERUZBVUxUX09WRVJTSE9PVF9TVFJFTkdUSCk7XG5jb25zdCBjYSA9IDQzNTYuMCAvIDM2MS4wO1xuY29uc3QgY2IgPSAzNTQ0Mi4wIC8gMTgwNS4wO1xuY29uc3QgY2MgPSAxNjA2MS4wIC8gMTgwNS4wO1xuY29uc3QgYm91bmNlT3V0ID0gKHApID0+IHtcbiAgICBpZiAocCA9PT0gMSB8fCBwID09PSAwKVxuICAgICAgICByZXR1cm4gcDtcbiAgICBjb25zdCBwMiA9IHAgKiBwO1xuICAgIHJldHVybiBwIDwgQk9VTkNFX0ZJUlNUX1RIUkVTSE9MRFxuICAgICAgICA/IDcuNTYyNSAqIHAyXG4gICAgICAgIDogcCA8IEJPVU5DRV9TRUNPTkRfVEhSRVNIT0xEXG4gICAgICAgICAgICA/IDkuMDc1ICogcDIgLSA5LjkgKiBwICsgMy40XG4gICAgICAgICAgICA6IHAgPCBCT1VOQ0VfVEhJUkRfVEhSRVNIT0xEXG4gICAgICAgICAgICAgICAgPyBjYSAqIHAyIC0gY2IgKiBwICsgY2NcbiAgICAgICAgICAgICAgICA6IDEwLjggKiBwICogcCAtIDIwLjUyICogcCArIDEwLjcyO1xufTtcbmNvbnN0IGJvdW5jZUluID0gcmV2ZXJzZUVhc2luZyhib3VuY2VPdXQpO1xuY29uc3QgYm91bmNlSW5PdXQgPSAocCkgPT4gcCA8IDAuNVxuICAgID8gMC41ICogKDEuMCAtIGJvdW5jZU91dCgxLjAgLSBwICogMi4wKSlcbiAgICA6IDAuNSAqIGJvdW5jZU91dChwICogMi4wIC0gMS4wKSArIDAuNTtcblxuZXhwb3J0IHsgYW50aWNpcGF0ZSwgYmFja0luLCBiYWNrSW5PdXQsIGJhY2tPdXQsIGJvdW5jZUluLCBib3VuY2VJbk91dCwgYm91bmNlT3V0LCBjaXJjSW4sIGNpcmNJbk91dCwgY2lyY091dCwgZWFzZUluLCBlYXNlSW5PdXQsIGVhc2VPdXQsIGxpbmVhciB9O1xuIiwiaW1wb3J0IHsgaW50ZXJwb2xhdGUgfSBmcm9tICcuLi8uLi91dGlscy9pbnRlcnBvbGF0ZS5tanMnO1xuaW1wb3J0IHsgZWFzZUluT3V0IH0gZnJvbSAnLi4vLi4vZWFzaW5nL2luZGV4Lm1qcyc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRFYXNpbmcodmFsdWVzLCBlYXNpbmcpIHtcbiAgICByZXR1cm4gdmFsdWVzLm1hcCgoKSA9PiBlYXNpbmcgfHwgZWFzZUluT3V0KS5zcGxpY2UoMCwgdmFsdWVzLmxlbmd0aCAtIDEpO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9mZnNldCh2YWx1ZXMpIHtcbiAgICBjb25zdCBudW1WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHJldHVybiB2YWx1ZXMubWFwKChfdmFsdWUsIGkpID0+IGkgIT09IDAgPyBpIC8gKG51bVZhbHVlcyAtIDEpIDogMCk7XG59XG5mdW5jdGlvbiBjb252ZXJ0T2Zmc2V0VG9UaW1lcyhvZmZzZXQsIGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIG9mZnNldC5tYXAoKG8pID0+IG8gKiBkdXJhdGlvbik7XG59XG5mdW5jdGlvbiBrZXlmcmFtZXMoeyBmcm9tID0gMCwgdG8gPSAxLCBlYXNlLCBvZmZzZXQsIGR1cmF0aW9uID0gMzAwLCB9KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZnJvbSB9O1xuICAgIGNvbnN0IHZhbHVlcyA9IEFycmF5LmlzQXJyYXkodG8pID8gdG8gOiBbZnJvbSwgdG9dO1xuICAgIGNvbnN0IHRpbWVzID0gY29udmVydE9mZnNldFRvVGltZXMob2Zmc2V0ICYmIG9mZnNldC5sZW5ndGggPT09IHZhbHVlcy5sZW5ndGhcbiAgICAgICAgPyBvZmZzZXRcbiAgICAgICAgOiBkZWZhdWx0T2Zmc2V0KHZhbHVlcyksIGR1cmF0aW9uKTtcbiAgICBmdW5jdGlvbiBjcmVhdGVJbnRlcnBvbGF0b3IoKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZSh0aW1lcywgdmFsdWVzLCB7XG4gICAgICAgICAgICBlYXNlOiBBcnJheS5pc0FycmF5KGVhc2UpID8gZWFzZSA6IGRlZmF1bHRFYXNpbmcodmFsdWVzLCBlYXNlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBpbnRlcnBvbGF0b3IgPSBjcmVhdGVJbnRlcnBvbGF0b3IoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiAodCkgPT4ge1xuICAgICAgICAgICAgc3RhdGUudmFsdWUgPSBpbnRlcnBvbGF0b3IodCk7XG4gICAgICAgICAgICBzdGF0ZS5kb25lID0gdCA+PSBkdXJhdGlvbjtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZmxpcFRhcmdldDogKCkgPT4ge1xuICAgICAgICAgICAgdmFsdWVzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGludGVycG9sYXRvciA9IGNyZWF0ZUludGVycG9sYXRvcigpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRPZmZzZXRUb1RpbWVzLCBkZWZhdWx0RWFzaW5nLCBkZWZhdWx0T2Zmc2V0LCBrZXlmcmFtZXMgfTtcbiIsImltcG9ydCB7IHNwcmluZyB9IGZyb20gJy4uL2dlbmVyYXRvcnMvc3ByaW5nLm1qcyc7XG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICcuLi9nZW5lcmF0b3JzL2tleWZyYW1lcy5tanMnO1xuaW1wb3J0IHsgZGVjYXkgfSBmcm9tICcuLi9nZW5lcmF0b3JzL2RlY2F5Lm1qcyc7XG5cbmNvbnN0IHR5cGVzID0geyBrZXlmcmFtZXMsIHNwcmluZywgZGVjYXkgfTtcbmZ1bmN0aW9uIGRldGVjdEFuaW1hdGlvbkZyb21PcHRpb25zKGNvbmZpZykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZy50bykpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lcztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZXNbY29uZmlnLnR5cGVdKSB7XG4gICAgICAgIHJldHVybiB0eXBlc1tjb25maWcudHlwZV07XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKGNvbmZpZykpO1xuICAgIGlmIChrZXlzLmhhcyhcImVhc2VcIikgfHxcbiAgICAgICAgKGtleXMuaGFzKFwiZHVyYXRpb25cIikgJiYgIWtleXMuaGFzKFwiZGFtcGluZ1JhdGlvXCIpKSkge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXlzLmhhcyhcImRhbXBpbmdSYXRpb1wiKSB8fFxuICAgICAgICBrZXlzLmhhcyhcInN0aWZmbmVzc1wiKSB8fFxuICAgICAgICBrZXlzLmhhcyhcIm1hc3NcIikgfHxcbiAgICAgICAga2V5cy5oYXMoXCJkYW1waW5nXCIpIHx8XG4gICAgICAgIGtleXMuaGFzKFwicmVzdFNwZWVkXCIpIHx8XG4gICAgICAgIGtleXMuaGFzKFwicmVzdERlbHRhXCIpKSB7XG4gICAgICAgIHJldHVybiBzcHJpbmc7XG4gICAgfVxuICAgIHJldHVybiBrZXlmcmFtZXM7XG59XG5cbmV4cG9ydCB7IGRldGVjdEFuaW1hdGlvbkZyb21PcHRpb25zIH07XG4iLCJmdW5jdGlvbiBkZWNheSh7IHZlbG9jaXR5ID0gMCwgZnJvbSA9IDAsIHBvd2VyID0gMC44LCB0aW1lQ29uc3RhbnQgPSAzNTAsIHJlc3REZWx0YSA9IDAuNSwgbW9kaWZ5VGFyZ2V0LCB9KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZnJvbSB9O1xuICAgIGxldCBhbXBsaXR1ZGUgPSBwb3dlciAqIHZlbG9jaXR5O1xuICAgIGNvbnN0IGlkZWFsID0gZnJvbSArIGFtcGxpdHVkZTtcbiAgICBjb25zdCB0YXJnZXQgPSBtb2RpZnlUYXJnZXQgPT09IHVuZGVmaW5lZCA/IGlkZWFsIDogbW9kaWZ5VGFyZ2V0KGlkZWFsKTtcbiAgICBpZiAodGFyZ2V0ICE9PSBpZGVhbClcbiAgICAgICAgYW1wbGl0dWRlID0gdGFyZ2V0IC0gZnJvbTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiAodCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSAtYW1wbGl0dWRlICogTWF0aC5leHAoLXQgLyB0aW1lQ29uc3RhbnQpO1xuICAgICAgICAgICAgc3RhdGUuZG9uZSA9ICEoZGVsdGEgPiByZXN0RGVsdGEgfHwgZGVsdGEgPCAtcmVzdERlbHRhKTtcbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gc3RhdGUuZG9uZSA/IHRhcmdldCA6IHRhcmdldCArIGRlbHRhO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9LFxuICAgICAgICBmbGlwVGFyZ2V0OiAoKSA9PiB7IH0sXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZGVjYXkgfTtcbiIsImZ1bmN0aW9uIGxvb3BFbGFwc2VkKGVsYXBzZWQsIGR1cmF0aW9uLCBkZWxheSA9IDApIHtcbiAgICByZXR1cm4gZWxhcHNlZCAtIGR1cmF0aW9uIC0gZGVsYXk7XG59XG5mdW5jdGlvbiByZXZlcnNlRWxhcHNlZChlbGFwc2VkLCBkdXJhdGlvbiwgZGVsYXkgPSAwLCBpc0ZvcndhcmRQbGF5YmFjayA9IHRydWUpIHtcbiAgICByZXR1cm4gaXNGb3J3YXJkUGxheWJhY2tcbiAgICAgICAgPyBsb29wRWxhcHNlZChkdXJhdGlvbiArIC1lbGFwc2VkLCBkdXJhdGlvbiwgZGVsYXkpXG4gICAgICAgIDogZHVyYXRpb24gLSAoZWxhcHNlZCAtIGR1cmF0aW9uKSArIGRlbGF5O1xufVxuZnVuY3Rpb24gaGFzUmVwZWF0RGVsYXlFbGFwc2VkKGVsYXBzZWQsIGR1cmF0aW9uLCBkZWxheSwgaXNGb3J3YXJkUGxheWJhY2spIHtcbiAgICByZXR1cm4gaXNGb3J3YXJkUGxheWJhY2sgPyBlbGFwc2VkID49IGR1cmF0aW9uICsgZGVsYXkgOiBlbGFwc2VkIDw9IC1kZWxheTtcbn1cblxuZXhwb3J0IHsgaGFzUmVwZWF0RGVsYXlFbGFwc2VkLCBsb29wRWxhcHNlZCwgcmV2ZXJzZUVsYXBzZWQgfTtcbiIsImltcG9ydCB7IF9fcmVzdCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGRldGVjdEFuaW1hdGlvbkZyb21PcHRpb25zIH0gZnJvbSAnLi91dGlscy9kZXRlY3QtYW5pbWF0aW9uLWZyb20tb3B0aW9ucy5tanMnO1xuaW1wb3J0IHN5bmMsIHsgY2FuY2VsU3luYyB9IGZyb20gJ2ZyYW1lc3luYyc7XG5pbXBvcnQgeyBpbnRlcnBvbGF0ZSB9IGZyb20gJy4uL3V0aWxzL2ludGVycG9sYXRlLm1qcyc7XG5pbXBvcnQgeyBoYXNSZXBlYXREZWxheUVsYXBzZWQsIHJldmVyc2VFbGFwc2VkLCBsb29wRWxhcHNlZCB9IGZyb20gJy4vdXRpbHMvZWxhcHNlZC5tanMnO1xuXG5jb25zdCBmcmFtZXN5bmMgPSAodXBkYXRlKSA9PiB7XG4gICAgY29uc3QgcGFzc1RpbWVzdGFtcCA9ICh7IGRlbHRhIH0pID0+IHVwZGF0ZShkZWx0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6ICgpID0+IHN5bmMudXBkYXRlKHBhc3NUaW1lc3RhbXAsIHRydWUpLFxuICAgICAgICBzdG9wOiAoKSA9PiBjYW5jZWxTeW5jLnVwZGF0ZShwYXNzVGltZXN0YW1wKSxcbiAgICB9O1xufTtcbmZ1bmN0aW9uIGFuaW1hdGUoX2EpIHtcbiAgICB2YXIgX2IsIF9jO1xuICAgIHZhciB7IGZyb20sIGF1dG9wbGF5ID0gdHJ1ZSwgZHJpdmVyID0gZnJhbWVzeW5jLCBlbGFwc2VkID0gMCwgcmVwZWF0OiByZXBlYXRNYXggPSAwLCByZXBlYXRUeXBlID0gXCJsb29wXCIsIHJlcGVhdERlbGF5ID0gMCwgb25QbGF5LCBvblN0b3AsIG9uQ29tcGxldGUsIG9uUmVwZWF0LCBvblVwZGF0ZSB9ID0gX2EsIG9wdGlvbnMgPSBfX3Jlc3QoX2EsIFtcImZyb21cIiwgXCJhdXRvcGxheVwiLCBcImRyaXZlclwiLCBcImVsYXBzZWRcIiwgXCJyZXBlYXRcIiwgXCJyZXBlYXRUeXBlXCIsIFwicmVwZWF0RGVsYXlcIiwgXCJvblBsYXlcIiwgXCJvblN0b3BcIiwgXCJvbkNvbXBsZXRlXCIsIFwib25SZXBlYXRcIiwgXCJvblVwZGF0ZVwiXSk7XG4gICAgbGV0IHsgdG8gfSA9IG9wdGlvbnM7XG4gICAgbGV0IGRyaXZlckNvbnRyb2xzO1xuICAgIGxldCByZXBlYXRDb3VudCA9IDA7XG4gICAgbGV0IGNvbXB1dGVkRHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uO1xuICAgIGxldCBsYXRlc3Q7XG4gICAgbGV0IGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICBsZXQgaXNGb3J3YXJkUGxheWJhY2sgPSB0cnVlO1xuICAgIGxldCBpbnRlcnBvbGF0ZUZyb21OdW1iZXI7XG4gICAgY29uc3QgYW5pbWF0b3IgPSBkZXRlY3RBbmltYXRpb25Gcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICBpZiAoKF9jID0gKF9iID0gYW5pbWF0b3IpLm5lZWRzSW50ZXJwb2xhdGlvbikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IsIGZyb20sIHRvKSkge1xuICAgICAgICBpbnRlcnBvbGF0ZUZyb21OdW1iZXIgPSBpbnRlcnBvbGF0ZShbMCwgMTAwXSwgW2Zyb20sIHRvXSwge1xuICAgICAgICAgICAgY2xhbXA6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgIHRvID0gMTAwO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb24gPSBhbmltYXRvcihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGZyb20sIHRvIH0pKTtcbiAgICBmdW5jdGlvbiByZXBlYXQoKSB7XG4gICAgICAgIHJlcGVhdENvdW50Kys7XG4gICAgICAgIGlmIChyZXBlYXRUeXBlID09PSBcInJldmVyc2VcIikge1xuICAgICAgICAgICAgaXNGb3J3YXJkUGxheWJhY2sgPSByZXBlYXRDb3VudCAlIDIgPT09IDA7XG4gICAgICAgICAgICBlbGFwc2VkID0gcmV2ZXJzZUVsYXBzZWQoZWxhcHNlZCwgY29tcHV0ZWREdXJhdGlvbiwgcmVwZWF0RGVsYXksIGlzRm9yd2FyZFBsYXliYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsYXBzZWQgPSBsb29wRWxhcHNlZChlbGFwc2VkLCBjb21wdXRlZER1cmF0aW9uLCByZXBlYXREZWxheSk7XG4gICAgICAgICAgICBpZiAocmVwZWF0VHlwZSA9PT0gXCJtaXJyb3JcIilcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uZmxpcFRhcmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgb25SZXBlYXQgJiYgb25SZXBlYXQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICBpZiAoIWlzRm9yd2FyZFBsYXliYWNrKVxuICAgICAgICAgICAgZGVsdGEgPSAtZGVsdGE7XG4gICAgICAgIGVsYXBzZWQgKz0gZGVsdGE7XG4gICAgICAgIGlmICghaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBhbmltYXRpb24ubmV4dChNYXRoLm1heCgwLCBlbGFwc2VkKSk7XG4gICAgICAgICAgICBsYXRlc3QgPSBzdGF0ZS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0ZUZyb21OdW1iZXIpXG4gICAgICAgICAgICAgICAgbGF0ZXN0ID0gaW50ZXJwb2xhdGVGcm9tTnVtYmVyKGxhdGVzdCk7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gaXNGb3J3YXJkUGxheWJhY2sgPyBzdGF0ZS5kb25lIDogZWxhcHNlZCA8PSAwO1xuICAgICAgICB9XG4gICAgICAgIG9uVXBkYXRlID09PSBudWxsIHx8IG9uVXBkYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblVwZGF0ZShsYXRlc3QpO1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgaWYgKHJlcGVhdENvdW50ID09PSAwKVxuICAgICAgICAgICAgICAgIGNvbXB1dGVkRHVyYXRpb24gIT09IG51bGwgJiYgY29tcHV0ZWREdXJhdGlvbiAhPT0gdm9pZCAwID8gY29tcHV0ZWREdXJhdGlvbiA6IChjb21wdXRlZER1cmF0aW9uID0gZWxhcHNlZCk7XG4gICAgICAgICAgICBpZiAocmVwZWF0Q291bnQgPCByZXBlYXRNYXgpIHtcbiAgICAgICAgICAgICAgICBoYXNSZXBlYXREZWxheUVsYXBzZWQoZWxhcHNlZCwgY29tcHV0ZWREdXJhdGlvbiwgcmVwZWF0RGVsYXksIGlzRm9yd2FyZFBsYXliYWNrKSAmJiByZXBlYXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgICAgb25QbGF5ID09PSBudWxsIHx8IG9uUGxheSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25QbGF5KCk7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzID0gZHJpdmVyKHVwZGF0ZSk7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzLnN0YXJ0KCk7XG4gICAgfVxuICAgIGF1dG9wbGF5ICYmIHBsYXkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdG9wOiAoKSA9PiB7XG4gICAgICAgICAgICBvblN0b3AgPT09IG51bGwgfHwgb25TdG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblN0b3AoKTtcbiAgICAgICAgICAgIGRyaXZlckNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhbmltYXRlIH07XG4iLCJmdW5jdGlvbiB2ZWxvY2l0eVBlclNlY29uZCh2ZWxvY2l0eSwgZnJhbWVEdXJhdGlvbikge1xuICAgIHJldHVybiBmcmFtZUR1cmF0aW9uID8gdmVsb2NpdHkgKiAoMTAwMCAvIGZyYW1lRHVyYXRpb24pIDogMDtcbn1cblxuZXhwb3J0IHsgdmVsb2NpdHlQZXJTZWNvbmQgfTtcbiIsIi8qKlxuICogQ29udmVydHMgc2Vjb25kcyB0byBtaWxsaXNlY29uZHNcbiAqXG4gKiBAcGFyYW0gc2Vjb25kcyAtIFRpbWUgaW4gc2Vjb25kcy5cbiAqIEByZXR1cm4gbWlsbGlzZWNvbmRzIC0gQ29udmVydGVkIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5jb25zdCBzZWNvbmRzVG9NaWxsaXNlY29uZHMgPSAoc2Vjb25kcykgPT4gc2Vjb25kcyAqIDEwMDA7XG5cbmV4cG9ydCB7IHNlY29uZHNUb01pbGxpc2Vjb25kcyB9O1xuIiwiaW1wb3J0IHsgbGluZWFyIH0gZnJvbSAnLi9pbmRleC5tanMnO1xuXG5jb25zdCBhID0gKGExLCBhMikgPT4gMS4wIC0gMy4wICogYTIgKyAzLjAgKiBhMTtcbmNvbnN0IGIgPSAoYTEsIGEyKSA9PiAzLjAgKiBhMiAtIDYuMCAqIGExO1xuY29uc3QgYyA9IChhMSkgPT4gMy4wICogYTE7XG5jb25zdCBjYWxjQmV6aWVyID0gKHQsIGExLCBhMikgPT4gKChhKGExLCBhMikgKiB0ICsgYihhMSwgYTIpKSAqIHQgKyBjKGExKSkgKiB0O1xuY29uc3QgZ2V0U2xvcGUgPSAodCwgYTEsIGEyKSA9PiAzLjAgKiBhKGExLCBhMikgKiB0ICogdCArIDIuMCAqIGIoYTEsIGEyKSAqIHQgKyBjKGExKTtcbmNvbnN0IHN1YmRpdmlzaW9uUHJlY2lzaW9uID0gMC4wMDAwMDAxO1xuY29uc3Qgc3ViZGl2aXNpb25NYXhJdGVyYXRpb25zID0gMTA7XG5mdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgICBsZXQgY3VycmVudFg7XG4gICAgbGV0IGN1cnJlbnRUO1xuICAgIGxldCBpID0gMDtcbiAgICBkbyB7XG4gICAgICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XG4gICAgICAgIGN1cnJlbnRYID0gY2FsY0JlemllcihjdXJyZW50VCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgICAgICAgYUIgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFBID0gY3VycmVudFQ7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChNYXRoLmFicyhjdXJyZW50WCkgPiBzdWJkaXZpc2lvblByZWNpc2lvbiAmJlxuICAgICAgICArK2kgPCBzdWJkaXZpc2lvbk1heEl0ZXJhdGlvbnMpO1xuICAgIHJldHVybiBjdXJyZW50VDtcbn1cbmNvbnN0IG5ld3Rvbkl0ZXJhdGlvbnMgPSA4O1xuY29uc3QgbmV3dG9uTWluU2xvcGUgPSAwLjAwMTtcbmZ1bmN0aW9uIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBhR3Vlc3NULCBtWDEsIG1YMikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3dG9uSXRlcmF0aW9uczsgKytpKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgICAgICAgaWYgKGN1cnJlbnRTbG9wZSA9PT0gMC4wKSB7XG4gICAgICAgICAgICByZXR1cm4gYUd1ZXNzVDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gICAgfVxuICAgIHJldHVybiBhR3Vlc3NUO1xufVxuY29uc3Qga1NwbGluZVRhYmxlU2l6ZSA9IDExO1xuY29uc3Qga1NhbXBsZVN0ZXBTaXplID0gMS4wIC8gKGtTcGxpbmVUYWJsZVNpemUgLSAxLjApO1xuZnVuY3Rpb24gY3ViaWNCZXppZXIobVgxLCBtWTEsIG1YMiwgbVkyKSB7XG4gICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKVxuICAgICAgICByZXR1cm4gbGluZWFyO1xuICAgIGNvbnN0IHNhbXBsZVZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICAgICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFRGb3JYKGFYKSB7XG4gICAgICAgIGxldCBpbnRlcnZhbFN0YXJ0ID0gMC4wO1xuICAgICAgICBsZXQgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgICAgIGNvbnN0IGxhc3RTYW1wbGUgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcbiAgICAgICAgZm9yICg7IGN1cnJlbnRTYW1wbGUgIT09IGxhc3RTYW1wbGUgJiYgc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdIDw9IGFYOyArK2N1cnJlbnRTYW1wbGUpIHtcbiAgICAgICAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgICAgICB9XG4gICAgICAgIC0tY3VycmVudFNhbXBsZTtcbiAgICAgICAgY29uc3QgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgL1xuICAgICAgICAgICAgKHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlICsgMV0gLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO1xuICAgICAgICBjb25zdCBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgICAgY29uc3QgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgICAgIGlmIChpbml0aWFsU2xvcGUgPj0gbmV3dG9uTWluU2xvcGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgICAgICAgIHJldHVybiBndWVzc0ZvclQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYmluYXJ5U3ViZGl2aWRlKGFYLCBpbnRlcnZhbFN0YXJ0LCBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICh0KSA9PiB0ID09PSAwIHx8IHQgPT09IDEgPyB0IDogY2FsY0JlemllcihnZXRURm9yWCh0KSwgbVkxLCBtWTIpO1xufVxuXG5leHBvcnQgeyBjdWJpY0JlemllciB9O1xuIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5pbXBvcnQgeyBjdWJpY0JlemllciwgbGluZWFyLCBlYXNlSW4sIGVhc2VJbk91dCwgZWFzZU91dCwgY2lyY0luLCBjaXJjSW5PdXQsIGNpcmNPdXQsIGJhY2tJbiwgYmFja0luT3V0LCBiYWNrT3V0LCBhbnRpY2lwYXRlLCBib3VuY2VJbiwgYm91bmNlSW5PdXQsIGJvdW5jZU91dCB9IGZyb20gJ3BvcG1vdGlvbic7XG5cbmNvbnN0IGVhc2luZ0xvb2t1cCA9IHtcbiAgICBsaW5lYXIsXG4gICAgZWFzZUluLFxuICAgIGVhc2VJbk91dCxcbiAgICBlYXNlT3V0LFxuICAgIGNpcmNJbixcbiAgICBjaXJjSW5PdXQsXG4gICAgY2lyY091dCxcbiAgICBiYWNrSW4sXG4gICAgYmFja0luT3V0LFxuICAgIGJhY2tPdXQsXG4gICAgYW50aWNpcGF0ZSxcbiAgICBib3VuY2VJbixcbiAgICBib3VuY2VJbk91dCxcbiAgICBib3VuY2VPdXQsXG59O1xuY29uc3QgZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24gPSAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKSB7XG4gICAgICAgIC8vIElmIGN1YmljIGJlemllciBkZWZpbml0aW9uLCBjcmVhdGUgYmV6aWVyIGN1cnZlXG4gICAgICAgIGludmFyaWFudChkZWZpbml0aW9uLmxlbmd0aCA9PT0gNCwgYEN1YmljIGJlemllciBhcnJheXMgbXVzdCBjb250YWluIGZvdXIgbnVtZXJpY2FsIHZhbHVlcy5gKTtcbiAgICAgICAgY29uc3QgW3gxLCB5MSwgeDIsIHkyXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBjdWJpY0Jlemllcih4MSwgeTEsIHgyLCB5Mik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIC8vIEVsc2UgbG9va3VwIGZyb20gdGFibGVcbiAgICAgICAgaW52YXJpYW50KGVhc2luZ0xvb2t1cFtkZWZpbml0aW9uXSAhPT0gdW5kZWZpbmVkLCBgSW52YWxpZCBlYXNpbmcgdHlwZSAnJHtkZWZpbml0aW9ufSdgKTtcbiAgICAgICAgcmV0dXJuIGVhc2luZ0xvb2t1cFtkZWZpbml0aW9uXTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmluaXRpb247XG59O1xuY29uc3QgaXNFYXNpbmdBcnJheSA9IChlYXNlKSA9PiB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZWFzZSkgJiYgdHlwZW9mIGVhc2VbMF0gIT09IFwibnVtYmVyXCI7XG59O1xuXG5leHBvcnQgeyBlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiwgaXNFYXNpbmdBcnJheSB9O1xuIiwiaW1wb3J0IHsgY29tcGxleCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGlzIGFuaW1hdGFibGUuIEV4YW1wbGVzOlxuICpcbiAqIOKchTogMTAwLCBcIjEwMHB4XCIsIFwiI2ZmZlwiXG4gKiDinYw6IFwiYmxvY2tcIiwgXCJ1cmwoMi5qcGcpXCJcbiAqIEBwYXJhbSB2YWx1ZVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBpc0FuaW1hdGFibGUgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIC8vIElmIHRoZSBsaXN0IG9mIGtleXMgdGF0IG1pZ2h0IGJlIG5vbi1hbmltYXRhYmxlIGdyb3dzLCByZXBsYWNlIHdpdGggU2V0XG4gICAgaWYgKGtleSA9PT0gXCJ6SW5kZXhcIilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIElmIGl0J3MgYSBudW1iZXIgb3IgYSBrZXlmcmFtZXMgYXJyYXksIHdlIGNhbiBhbmltYXRlIGl0LiBXZSBtaWdodCBhdCBzb21lIHBvaW50XG4gICAgLy8gbmVlZCB0byBkbyBhIGRlZXAgaXNBbmltYXRhYmxlIGNoZWNrIG9mIGtleWZyYW1lcywgb3IgbGV0IFBvcG1vdGlvbiBoYW5kbGUgdGhpcyxcbiAgICAvLyBidXQgZm9yIG5vdyBsZXRzIGxlYXZlIGl0IGxpa2UgdGhpcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgLy8gSXQncyBhbmltYXRhYmxlIGlmIHdlIGhhdmUgYSBzdHJpbmdcbiAgICAgICAgY29tcGxleC50ZXN0KHZhbHVlKSAmJiAvLyBBbmQgaXQgY29udGFpbnMgbnVtYmVycyBhbmQvb3IgY29sb3JzXG4gICAgICAgICF2YWx1ZS5zdGFydHNXaXRoKFwidXJsKFwiKSAvLyBVbmxlc3MgaXQgc3RhcnRzIHdpdGggXCJ1cmwoXCJcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCB7IGlzQW5pbWF0YWJsZSB9O1xuIiwiaW1wb3J0IHsgaXNLZXlmcmFtZXNUYXJnZXQgfSBmcm9tICcuL2lzLWtleWZyYW1lcy10YXJnZXQubWpzJztcblxuY29uc3QgdW5kZXJEYW1wZWRTcHJpbmcgPSAoKSA9PiAoe1xuICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgc3RpZmZuZXNzOiA1MDAsXG4gICAgZGFtcGluZzogMjUsXG4gICAgcmVzdFNwZWVkOiAxMCxcbn0pO1xuY29uc3QgY3JpdGljYWxseURhbXBlZFNwcmluZyA9ICh0bykgPT4gKHtcbiAgICB0eXBlOiBcInNwcmluZ1wiLFxuICAgIHN0aWZmbmVzczogNTUwLFxuICAgIGRhbXBpbmc6IHRvID09PSAwID8gMiAqIE1hdGguc3FydCg1NTApIDogMzAsXG4gICAgcmVzdFNwZWVkOiAxMCxcbn0pO1xuY29uc3QgbGluZWFyVHdlZW4gPSAoKSA9PiAoe1xuICAgIHR5cGU6IFwia2V5ZnJhbWVzXCIsXG4gICAgZWFzZTogXCJsaW5lYXJcIixcbiAgICBkdXJhdGlvbjogMC4zLFxufSk7XG5jb25zdCBrZXlmcmFtZXMgPSAodmFsdWVzKSA9PiAoe1xuICAgIHR5cGU6IFwia2V5ZnJhbWVzXCIsXG4gICAgZHVyYXRpb246IDAuOCxcbiAgICB2YWx1ZXMsXG59KTtcbmNvbnN0IGRlZmF1bHRUcmFuc2l0aW9ucyA9IHtcbiAgICB4OiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICB5OiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICB6OiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGU6IHVuZGVyRGFtcGVkU3ByaW5nLFxuICAgIHJvdGF0ZVg6IHVuZGVyRGFtcGVkU3ByaW5nLFxuICAgIHJvdGF0ZVk6IHVuZGVyRGFtcGVkU3ByaW5nLFxuICAgIHJvdGF0ZVo6IHVuZGVyRGFtcGVkU3ByaW5nLFxuICAgIHNjYWxlWDogY3JpdGljYWxseURhbXBlZFNwcmluZyxcbiAgICBzY2FsZVk6IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcsXG4gICAgc2NhbGU6IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcsXG4gICAgb3BhY2l0eTogbGluZWFyVHdlZW4sXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaW5lYXJUd2VlbixcbiAgICBjb2xvcjogbGluZWFyVHdlZW4sXG4gICAgZGVmYXVsdDogY3JpdGljYWxseURhbXBlZFNwcmluZyxcbn07XG5jb25zdCBnZXREZWZhdWx0VHJhbnNpdGlvbiA9ICh2YWx1ZUtleSwgdG8pID0+IHtcbiAgICBsZXQgdHJhbnNpdGlvbkZhY3Rvcnk7XG4gICAgaWYgKGlzS2V5ZnJhbWVzVGFyZ2V0KHRvKSkge1xuICAgICAgICB0cmFuc2l0aW9uRmFjdG9yeSA9IGtleWZyYW1lcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyYW5zaXRpb25GYWN0b3J5ID1cbiAgICAgICAgICAgIGRlZmF1bHRUcmFuc2l0aW9uc1t2YWx1ZUtleV0gfHwgZGVmYXVsdFRyYW5zaXRpb25zLmRlZmF1bHQ7XG4gICAgfVxuICAgIHJldHVybiB7IHRvLCAuLi50cmFuc2l0aW9uRmFjdG9yeSh0bykgfTtcbn07XG5cbmV4cG9ydCB7IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcsIGdldERlZmF1bHRUcmFuc2l0aW9uLCBsaW5lYXJUd2VlbiwgdW5kZXJEYW1wZWRTcHJpbmcgfTtcbiIsImltcG9ydCB7IGNvbXBsZXggfSBmcm9tICcuL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBmbG9hdFJlZ2V4IH0gZnJvbSAnLi4vdXRpbHMubWpzJztcblxuY29uc3QgbWF4RGVmYXVsdHMgPSBuZXcgU2V0KFsnYnJpZ2h0bmVzcycsICdjb250cmFzdCcsICdzYXR1cmF0ZScsICdvcGFjaXR5J10pO1xuZnVuY3Rpb24gYXBwbHlEZWZhdWx0RmlsdGVyKHYpIHtcbiAgICBsZXQgW25hbWUsIHZhbHVlXSA9IHYuc2xpY2UoMCwgLTEpLnNwbGl0KCcoJyk7XG4gICAgaWYgKG5hbWUgPT09ICdkcm9wLXNoYWRvdycpXG4gICAgICAgIHJldHVybiB2O1xuICAgIGNvbnN0IFtudW1iZXJdID0gdmFsdWUubWF0Y2goZmxvYXRSZWdleCkgfHwgW107XG4gICAgaWYgKCFudW1iZXIpXG4gICAgICAgIHJldHVybiB2O1xuICAgIGNvbnN0IHVuaXQgPSB2YWx1ZS5yZXBsYWNlKG51bWJlciwgJycpO1xuICAgIGxldCBkZWZhdWx0VmFsdWUgPSBtYXhEZWZhdWx0cy5oYXMobmFtZSkgPyAxIDogMDtcbiAgICBpZiAobnVtYmVyICE9PSB2YWx1ZSlcbiAgICAgICAgZGVmYXVsdFZhbHVlICo9IDEwMDtcbiAgICByZXR1cm4gbmFtZSArICcoJyArIGRlZmF1bHRWYWx1ZSArIHVuaXQgKyAnKSc7XG59XG5jb25zdCBmdW5jdGlvblJlZ2V4ID0gLyhbYS16LV0qKVxcKC4qP1xcKS9nO1xuY29uc3QgZmlsdGVyID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb21wbGV4KSwgeyBnZXRBbmltYXRhYmxlTm9uZTogKHYpID0+IHtcbiAgICAgICAgY29uc3QgZnVuY3Rpb25zID0gdi5tYXRjaChmdW5jdGlvblJlZ2V4KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9ucyA/IGZ1bmN0aW9ucy5tYXAoYXBwbHlEZWZhdWx0RmlsdGVyKS5qb2luKCcgJykgOiB2O1xuICAgIH0gfSk7XG5cbmV4cG9ydCB7IGZpbHRlciB9O1xuIiwiaW1wb3J0IHsgY29sb3IsIGZpbHRlciB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IG51bWJlclZhbHVlVHlwZXMgfSBmcm9tICcuL251bWJlci5tanMnO1xuXG4vKipcbiAqIEEgbWFwIG9mIGRlZmF1bHQgdmFsdWUgdHlwZXMgZm9yIGNvbW1vbiB2YWx1ZXNcbiAqL1xuY29uc3QgZGVmYXVsdFZhbHVlVHlwZXMgPSB7XG4gICAgLi4ubnVtYmVyVmFsdWVUeXBlcyxcbiAgICAvLyBDb2xvciBwcm9wc1xuICAgIGNvbG9yLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgb3V0bGluZUNvbG9yOiBjb2xvcixcbiAgICBmaWxsOiBjb2xvcixcbiAgICBzdHJva2U6IGNvbG9yLFxuICAgIC8vIEJvcmRlciBwcm9wc1xuICAgIGJvcmRlckNvbG9yOiBjb2xvcixcbiAgICBib3JkZXJUb3BDb2xvcjogY29sb3IsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogY29sb3IsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IGNvbG9yLFxuICAgIGJvcmRlckxlZnRDb2xvcjogY29sb3IsXG4gICAgZmlsdGVyLFxuICAgIFdlYmtpdEZpbHRlcjogZmlsdGVyLFxufTtcbi8qKlxuICogR2V0cyB0aGUgZGVmYXVsdCBWYWx1ZVR5cGUgZm9yIHRoZSBwcm92aWRlZCB2YWx1ZSBrZXlcbiAqL1xuY29uc3QgZ2V0RGVmYXVsdFZhbHVlVHlwZSA9IChrZXkpID0+IGRlZmF1bHRWYWx1ZVR5cGVzW2tleV07XG5cbmV4cG9ydCB7IGRlZmF1bHRWYWx1ZVR5cGVzLCBnZXREZWZhdWx0VmFsdWVUeXBlIH07XG4iLCJpbXBvcnQgeyBmaWx0ZXIsIGNvbXBsZXggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBnZXREZWZhdWx0VmFsdWVUeXBlIH0gZnJvbSAnLi9kZWZhdWx0cy5tanMnO1xuXG5mdW5jdGlvbiBnZXRBbmltYXRhYmxlTm9uZShrZXksIHZhbHVlKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBkZWZhdWx0VmFsdWVUeXBlID0gZ2V0RGVmYXVsdFZhbHVlVHlwZShrZXkpO1xuICAgIGlmIChkZWZhdWx0VmFsdWVUeXBlICE9PSBmaWx0ZXIpXG4gICAgICAgIGRlZmF1bHRWYWx1ZVR5cGUgPSBjb21wbGV4O1xuICAgIC8vIElmIHZhbHVlIGlzIG5vdCByZWNvZ25pc2VkIGFzIGFuaW1hdGFibGUsIGllIFwibm9uZVwiLCBjcmVhdGUgYW4gYW5pbWF0YWJsZSB2ZXJzaW9uIG9yaWdpbiBiYXNlZCBvbiB0aGUgdGFyZ2V0XG4gICAgcmV0dXJuIChfYSA9IGRlZmF1bHRWYWx1ZVR5cGUuZ2V0QW5pbWF0YWJsZU5vbmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGRlZmF1bHRWYWx1ZVR5cGUsIHZhbHVlKTtcbn1cblxuZXhwb3J0IHsgZ2V0QW5pbWF0YWJsZU5vbmUgfTtcbiIsImltcG9ydCB7IGluZXJ0aWEsIGFuaW1hdGUgfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgc2Vjb25kc1RvTWlsbGlzZWNvbmRzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGltZS1jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyBpc0Vhc2luZ0FycmF5LCBlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiB9IGZyb20gJy4vZWFzaW5nLm1qcyc7XG5pbXBvcnQgeyBpc0FuaW1hdGFibGUgfSBmcm9tICcuL2lzLWFuaW1hdGFibGUubWpzJztcbmltcG9ydCB7IGdldERlZmF1bHRUcmFuc2l0aW9uIH0gZnJvbSAnLi9kZWZhdWx0LXRyYW5zaXRpb25zLm1qcyc7XG5pbXBvcnQgeyB3YXJuaW5nIH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5pbXBvcnQgeyBnZXRBbmltYXRhYmxlTm9uZSB9IGZyb20gJy4uLy4uL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvYW5pbWF0YWJsZS1ub25lLm1qcyc7XG5pbXBvcnQgeyBpbnN0YW50QW5pbWF0aW9uU3RhdGUgfSBmcm9tICcuLi8uLi91dGlscy91c2UtaW5zdGFudC10cmFuc2l0aW9uLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanMnO1xuXG4vKipcbiAqIERlY2lkZSB3aGV0aGVyIGEgdHJhbnNpdGlvbiBpcyBkZWZpbmVkIG9uIGEgZ2l2ZW4gVHJhbnNpdGlvbi5cbiAqIFRoaXMgZmlsdGVycyBvdXQgb3JjaGVzdHJhdGlvbiBvcHRpb25zIGFuZCByZXR1cm5zIHRydWVcbiAqIGlmIGFueSBvcHRpb25zIGFyZSBsZWZ0LlxuICovXG5mdW5jdGlvbiBpc1RyYW5zaXRpb25EZWZpbmVkKHsgd2hlbiwgZGVsYXksIGRlbGF5Q2hpbGRyZW4sIHN0YWdnZXJDaGlsZHJlbiwgc3RhZ2dlckRpcmVjdGlvbiwgcmVwZWF0LCByZXBlYXRUeXBlLCByZXBlYXREZWxheSwgZnJvbSwgLi4udHJhbnNpdGlvbiB9KSB7XG4gICAgcmV0dXJuICEhT2JqZWN0LmtleXModHJhbnNpdGlvbikubGVuZ3RoO1xufVxubGV0IGxlZ2FjeVJlcGVhdFdhcm5pbmcgPSBmYWxzZTtcbi8qKlxuICogQ29udmVydCBGcmFtZXIgTW90aW9uJ3MgVHJhbnNpdGlvbiB0eXBlIGludG8gUG9wbW90aW9uLWNvbXBhdGlibGUgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gY29udmVydFRyYW5zaXRpb25Ub0FuaW1hdGlvbk9wdGlvbnMoeyBlYXNlLCB0aW1lcywgeW95bywgZmxpcCwgbG9vcCwgLi4udHJhbnNpdGlvbiB9KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgLi4udHJhbnNpdGlvbiB9O1xuICAgIGlmICh0aW1lcylcbiAgICAgICAgb3B0aW9uc1tcIm9mZnNldFwiXSA9IHRpbWVzO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYW55IGV4aXN0aW5nIGR1cmF0aW9ucyBmcm9tIHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXG4gICAgICovXG4gICAgaWYgKHRyYW5zaXRpb24uZHVyYXRpb24pXG4gICAgICAgIG9wdGlvbnNbXCJkdXJhdGlvblwiXSA9IHNlY29uZHNUb01pbGxpc2Vjb25kcyh0cmFuc2l0aW9uLmR1cmF0aW9uKTtcbiAgICBpZiAodHJhbnNpdGlvbi5yZXBlYXREZWxheSlcbiAgICAgICAgb3B0aW9ucy5yZXBlYXREZWxheSA9IHNlY29uZHNUb01pbGxpc2Vjb25kcyh0cmFuc2l0aW9uLnJlcGVhdERlbGF5KTtcbiAgICAvKipcbiAgICAgKiBNYXAgZWFzaW5nIG5hbWVzIHRvIFBvcG1vdGlvbidzIGVhc2luZyBmdW5jdGlvbnNcbiAgICAgKi9cbiAgICBpZiAoZWFzZSkge1xuICAgICAgICBvcHRpb25zW1wiZWFzZVwiXSA9IGlzRWFzaW5nQXJyYXkoZWFzZSlcbiAgICAgICAgICAgID8gZWFzZS5tYXAoZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24pXG4gICAgICAgICAgICA6IGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uKGVhc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdXBwb3J0IGxlZ2FjeSB0cmFuc2l0aW9uIEFQSVxuICAgICAqL1xuICAgIGlmICh0cmFuc2l0aW9uLnR5cGUgPT09IFwidHdlZW5cIilcbiAgICAgICAgb3B0aW9ucy50eXBlID0gXCJrZXlmcmFtZXNcIjtcbiAgICAvKipcbiAgICAgKiBUT0RPOiBUaGVzZSBvcHRpb25zIGFyZSBvZmZpY2lhbGx5IHJlbW92ZWQgZnJvbSB0aGUgQVBJLlxuICAgICAqL1xuICAgIGlmICh5b3lvIHx8IGxvb3AgfHwgZmxpcCkge1xuICAgICAgICB3YXJuaW5nKCFsZWdhY3lSZXBlYXRXYXJuaW5nLCBcInlveW8sIGxvb3AgYW5kIGZsaXAgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgQVBJLiBSZXBsYWNlIHdpdGggcmVwZWF0IGFuZCByZXBlYXRUeXBlIG9wdGlvbnMuXCIpO1xuICAgICAgICBsZWdhY3lSZXBlYXRXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHlveW8pIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0VHlwZSA9IFwicmV2ZXJzZVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0VHlwZSA9IFwibG9vcFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZsaXApIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0VHlwZSA9IFwibWlycm9yXCI7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5yZXBlYXQgPSBsb29wIHx8IHlveW8gfHwgZmxpcCB8fCB0cmFuc2l0aW9uLnJlcGVhdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVE9ETzogUG9wbW90aW9uIDkgaGFzIHRoZSBhYmlsaXR5IHRvIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHdoZXRoZXIgdG8gdXNlXG4gICAgICogYSBrZXlmcmFtZXMgb3Igc3ByaW5nIGFuaW1hdGlvbiwgYnV0IGRvZXMgc28gYnkgZGV0ZWN0aW5nIHZlbG9jaXR5IGFuZCBvdGhlciBzcHJpbmcgb3B0aW9ucy5cbiAgICAgKiBJdCdkIGJlIGdvb2QgdG8gaW50cm9kdWNlIGEgc2ltaWxhciB0aGluZyBoZXJlLlxuICAgICAqL1xuICAgIGlmICh0cmFuc2l0aW9uLnR5cGUgIT09IFwic3ByaW5nXCIpXG4gICAgICAgIG9wdGlvbnMudHlwZSA9IFwia2V5ZnJhbWVzXCI7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG4vKipcbiAqIEdldCB0aGUgZGVsYXkgZm9yIGEgdmFsdWUgYnkgY2hlY2tpbmcgVHJhbnNpdGlvbiB3aXRoIGRlY3JlYXNpbmcgc3BlY2lmaWNpdHkuXG4gKi9cbmZ1bmN0aW9uIGdldERlbGF5RnJvbVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCB2YWx1ZVRyYW5zaXRpb24gPSBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB8fCB7fTtcbiAgICByZXR1cm4gKF9iID0gKF9hID0gdmFsdWVUcmFuc2l0aW9uLmRlbGF5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0cmFuc2l0aW9uLmRlbGF5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xufVxuZnVuY3Rpb24gaHlkcmF0ZUtleWZyYW1lcyhvcHRpb25zKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy50bykgJiYgb3B0aW9ucy50b1swXSA9PT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnRvID0gWy4uLm9wdGlvbnMudG9dO1xuICAgICAgICBvcHRpb25zLnRvWzBdID0gb3B0aW9ucy5mcm9tO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIGdldFBvcG1vdGlvbkFuaW1hdGlvbk9wdGlvbnModHJhbnNpdGlvbiwgb3B0aW9ucywga2V5KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy50bykgJiYgdHJhbnNpdGlvbi5kdXJhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRyYW5zaXRpb24uZHVyYXRpb24gPSAwLjg7XG4gICAgfVxuICAgIGh5ZHJhdGVLZXlmcmFtZXMob3B0aW9ucyk7XG4gICAgLyoqXG4gICAgICogR2V0IGEgZGVmYXVsdCB0cmFuc2l0aW9uIGlmIG5vbmUgaXMgZGV0ZXJtaW5lZCB0byBiZSBkZWZpbmVkLlxuICAgICAqL1xuICAgIGlmICghaXNUcmFuc2l0aW9uRGVmaW5lZCh0cmFuc2l0aW9uKSkge1xuICAgICAgICB0cmFuc2l0aW9uID0ge1xuICAgICAgICAgICAgLi4udHJhbnNpdGlvbixcbiAgICAgICAgICAgIC4uLmdldERlZmF1bHRUcmFuc2l0aW9uKGtleSwgb3B0aW9ucy50byksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC4uLmNvbnZlcnRUcmFuc2l0aW9uVG9BbmltYXRpb25PcHRpb25zKHRyYW5zaXRpb24pLFxuICAgIH07XG59XG4vKipcbiAqXG4gKi9cbmZ1bmN0aW9uIGdldEFuaW1hdGlvbihrZXksIHZhbHVlLCB0YXJnZXQsIHRyYW5zaXRpb24sIG9uQ29tcGxldGUpIHtcbiAgICBjb25zdCB2YWx1ZVRyYW5zaXRpb24gPSBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB8fCB7fTtcbiAgICBsZXQgb3JpZ2luID0gdmFsdWVUcmFuc2l0aW9uLmZyb20gIT09IHVuZGVmaW5lZCA/IHZhbHVlVHJhbnNpdGlvbi5mcm9tIDogdmFsdWUuZ2V0KCk7XG4gICAgY29uc3QgaXNUYXJnZXRBbmltYXRhYmxlID0gaXNBbmltYXRhYmxlKGtleSwgdGFyZ2V0KTtcbiAgICBpZiAob3JpZ2luID09PSBcIm5vbmVcIiAmJiBpc1RhcmdldEFuaW1hdGFibGUgJiYgdHlwZW9mIHRhcmdldCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UncmUgdHJ5aW5nIHRvIGFuaW1hdGUgZnJvbSBcIm5vbmVcIiwgdHJ5IGFuZCBnZXQgYW4gYW5pbWF0YWJsZSB2ZXJzaW9uXG4gICAgICAgICAqIG9mIHRoZSB0YXJnZXQuIFRoaXMgY291bGQgYmUgaW1wcm92ZWQgdG8gd29yayBib3RoIHdheXMuXG4gICAgICAgICAqL1xuICAgICAgICBvcmlnaW4gPSBnZXRBbmltYXRhYmxlTm9uZShrZXksIHRhcmdldCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzWmVybyhvcmlnaW4pICYmIHR5cGVvZiB0YXJnZXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgb3JpZ2luID0gZ2V0WmVyb1VuaXQodGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJlxuICAgICAgICBpc1plcm8odGFyZ2V0KSAmJlxuICAgICAgICB0eXBlb2Ygb3JpZ2luID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRhcmdldCA9IGdldFplcm9Vbml0KG9yaWdpbik7XG4gICAgfVxuICAgIGNvbnN0IGlzT3JpZ2luQW5pbWF0YWJsZSA9IGlzQW5pbWF0YWJsZShrZXksIG9yaWdpbik7XG4gICAgd2FybmluZyhpc09yaWdpbkFuaW1hdGFibGUgPT09IGlzVGFyZ2V0QW5pbWF0YWJsZSwgYFlvdSBhcmUgdHJ5aW5nIHRvIGFuaW1hdGUgJHtrZXl9IGZyb20gXCIke29yaWdpbn1cIiB0byBcIiR7dGFyZ2V0fVwiLiAke29yaWdpbn0gaXMgbm90IGFuIGFuaW1hdGFibGUgdmFsdWUgLSB0byBlbmFibGUgdGhpcyBhbmltYXRpb24gc2V0ICR7b3JpZ2lufSB0byBhIHZhbHVlIGFuaW1hdGFibGUgdG8gJHt0YXJnZXR9IHZpYSB0aGUgXFxgc3R5bGVcXGAgcHJvcGVydHkuYCk7XG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBmcm9tOiBvcmlnaW4sXG4gICAgICAgICAgICB0bzogdGFyZ2V0LFxuICAgICAgICAgICAgdmVsb2NpdHk6IHZhbHVlLmdldFZlbG9jaXR5KCksXG4gICAgICAgICAgICBvbkNvbXBsZXRlLFxuICAgICAgICAgICAgb25VcGRhdGU6ICh2KSA9PiB2YWx1ZS5zZXQodiksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB2YWx1ZVRyYW5zaXRpb24udHlwZSA9PT0gXCJpbmVydGlhXCIgfHxcbiAgICAgICAgICAgIHZhbHVlVHJhbnNpdGlvbi50eXBlID09PSBcImRlY2F5XCJcbiAgICAgICAgICAgID8gaW5lcnRpYSh7IC4uLm9wdGlvbnMsIC4uLnZhbHVlVHJhbnNpdGlvbiB9KVxuICAgICAgICAgICAgOiBhbmltYXRlKHtcbiAgICAgICAgICAgICAgICAuLi5nZXRQb3Btb3Rpb25BbmltYXRpb25PcHRpb25zKHZhbHVlVHJhbnNpdGlvbiwgb3B0aW9ucywga2V5KSxcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vblVwZGF0ZSh2KTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUcmFuc2l0aW9uLm9uVXBkYXRlICYmIHZhbHVlVHJhbnNpdGlvbi5vblVwZGF0ZSh2KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVHJhbnNpdGlvbi5vbkNvbXBsZXRlICYmIHZhbHVlVHJhbnNpdGlvbi5vbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXQoKSB7XG4gICAgICAgIGNvbnN0IGZpbmFsVGFyZ2V0ID0gcmVzb2x2ZUZpbmFsVmFsdWVJbktleWZyYW1lcyh0YXJnZXQpO1xuICAgICAgICB2YWx1ZS5zZXQoZmluYWxUYXJnZXQpO1xuICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgIHZhbHVlVHJhbnNpdGlvbi5vblVwZGF0ZSAmJiB2YWx1ZVRyYW5zaXRpb24ub25VcGRhdGUoZmluYWxUYXJnZXQpO1xuICAgICAgICB2YWx1ZVRyYW5zaXRpb24ub25Db21wbGV0ZSAmJiB2YWx1ZVRyYW5zaXRpb24ub25Db21wbGV0ZSgpO1xuICAgICAgICByZXR1cm4geyBzdG9wOiAoKSA9PiB7IH0gfTtcbiAgICB9XG4gICAgcmV0dXJuICFpc09yaWdpbkFuaW1hdGFibGUgfHxcbiAgICAgICAgIWlzVGFyZ2V0QW5pbWF0YWJsZSB8fFxuICAgICAgICB2YWx1ZVRyYW5zaXRpb24udHlwZSA9PT0gZmFsc2VcbiAgICAgICAgPyBzZXRcbiAgICAgICAgOiBzdGFydDtcbn1cbmZ1bmN0aW9uIGlzWmVybyh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgPT09IDAgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgcGFyc2VGbG9hdCh2YWx1ZSkgPT09IDAgJiZcbiAgICAgICAgICAgIHZhbHVlLmluZGV4T2YoXCIgXCIpID09PSAtMSkpO1xufVxuZnVuY3Rpb24gZ2V0WmVyb1VuaXQocG90ZW50aWFsVW5pdFR5cGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHBvdGVudGlhbFVuaXRUeXBlID09PSBcIm51bWJlclwiXG4gICAgICAgID8gMFxuICAgICAgICA6IGdldEFuaW1hdGFibGVOb25lKFwiXCIsIHBvdGVudGlhbFVuaXRUeXBlKTtcbn1cbmZ1bmN0aW9uIGdldFZhbHVlVHJhbnNpdGlvbih0cmFuc2l0aW9uLCBrZXkpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbltrZXldIHx8IHRyYW5zaXRpb25bXCJkZWZhdWx0XCJdIHx8IHRyYW5zaXRpb247XG59XG4vKipcbiAqIFN0YXJ0IGFuaW1hdGlvbiBvbiBhIE1vdGlvblZhbHVlLiBUaGlzIGZ1bmN0aW9uIGlzIGFuIGludGVyZmFjZSBiZXR3ZWVuXG4gKiBGcmFtZXIgTW90aW9uIGFuZCBQb3Btb3Rpb25cbiAqL1xuZnVuY3Rpb24gc3RhcnRBbmltYXRpb24oa2V5LCB2YWx1ZSwgdGFyZ2V0LCB0cmFuc2l0aW9uID0ge30pIHtcbiAgICBpZiAoaW5zdGFudEFuaW1hdGlvblN0YXRlLmN1cnJlbnQpIHtcbiAgICAgICAgdHJhbnNpdGlvbiA9IHsgdHlwZTogZmFsc2UgfTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlLnN0YXJ0KChvbkNvbXBsZXRlKSA9PiB7XG4gICAgICAgIGxldCBkZWxheVRpbWVyO1xuICAgICAgICBsZXQgY29udHJvbHM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IGdldEFuaW1hdGlvbihrZXksIHZhbHVlLCB0YXJnZXQsIHRyYW5zaXRpb24sIG9uQ29tcGxldGUpO1xuICAgICAgICBjb25zdCBkZWxheSA9IGdldERlbGF5RnJvbVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KTtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSAoKSA9PiAoY29udHJvbHMgPSBhbmltYXRpb24oKSk7XG4gICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgZGVsYXlUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KHN0YXJ0LCBzZWNvbmRzVG9NaWxsaXNlY29uZHMoZGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChkZWxheVRpbWVyKTtcbiAgICAgICAgICAgIGNvbnRyb2xzICYmIGNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgY29udmVydFRyYW5zaXRpb25Ub0FuaW1hdGlvbk9wdGlvbnMsIGdldERlbGF5RnJvbVRyYW5zaXRpb24sIGdldFBvcG1vdGlvbkFuaW1hdGlvbk9wdGlvbnMsIGdldFZhbHVlVHJhbnNpdGlvbiwgZ2V0WmVyb1VuaXQsIGh5ZHJhdGVLZXlmcmFtZXMsIGlzVHJhbnNpdGlvbkRlZmluZWQsIGlzWmVybywgc3RhcnRBbmltYXRpb24gfTtcbiIsImltcG9ydCB7IGFuaW1hdGUgfSBmcm9tICcuL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB2ZWxvY2l0eVBlclNlY29uZCB9IGZyb20gJy4uL3V0aWxzL3ZlbG9jaXR5LXBlci1zZWNvbmQubWpzJztcbmltcG9ydCB7IGdldEZyYW1lRGF0YSB9IGZyb20gJ2ZyYW1lc3luYyc7XG5cbmZ1bmN0aW9uIGluZXJ0aWEoeyBmcm9tID0gMCwgdmVsb2NpdHkgPSAwLCBtaW4sIG1heCwgcG93ZXIgPSAwLjgsIHRpbWVDb25zdGFudCA9IDc1MCwgYm91bmNlU3RpZmZuZXNzID0gNTAwLCBib3VuY2VEYW1waW5nID0gMTAsIHJlc3REZWx0YSA9IDEsIG1vZGlmeVRhcmdldCwgZHJpdmVyLCBvblVwZGF0ZSwgb25Db21wbGV0ZSwgb25TdG9wLCB9KSB7XG4gICAgbGV0IGN1cnJlbnRBbmltYXRpb247XG4gICAgZnVuY3Rpb24gaXNPdXRPZkJvdW5kcyh2KSB7XG4gICAgICAgIHJldHVybiAobWluICE9PSB1bmRlZmluZWQgJiYgdiA8IG1pbikgfHwgKG1heCAhPT0gdW5kZWZpbmVkICYmIHYgPiBtYXgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBib3VuZGFyeU5lYXJlc3Qodikge1xuICAgICAgICBpZiAobWluID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gbWF4O1xuICAgICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMobWluIC0gdikgPCBNYXRoLmFicyhtYXggLSB2KSA/IG1pbiA6IG1heDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3RhcnRBbmltYXRpb24ob3B0aW9ucykge1xuICAgICAgICBjdXJyZW50QW5pbWF0aW9uID09PSBudWxsIHx8IGN1cnJlbnRBbmltYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1cnJlbnRBbmltYXRpb24uc3RvcCgpO1xuICAgICAgICBjdXJyZW50QW5pbWF0aW9uID0gYW5pbWF0ZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGRyaXZlciwgb25VcGRhdGU6ICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIG9uVXBkYXRlID09PSBudWxsIHx8IG9uVXBkYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblVwZGF0ZSh2KTtcbiAgICAgICAgICAgICAgICAoX2EgPSBvcHRpb25zLm9uVXBkYXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCB2KTtcbiAgICAgICAgICAgIH0sIG9uQ29tcGxldGUsXG4gICAgICAgICAgICBvblN0b3AgfSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdGFydFNwcmluZyhvcHRpb25zKSB7XG4gICAgICAgIHN0YXJ0QW5pbWF0aW9uKE9iamVjdC5hc3NpZ24oeyB0eXBlOiBcInNwcmluZ1wiLCBzdGlmZm5lc3M6IGJvdW5jZVN0aWZmbmVzcywgZGFtcGluZzogYm91bmNlRGFtcGluZywgcmVzdERlbHRhIH0sIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgaWYgKGlzT3V0T2ZCb3VuZHMoZnJvbSkpIHtcbiAgICAgICAgc3RhcnRTcHJpbmcoeyBmcm9tLCB2ZWxvY2l0eSwgdG86IGJvdW5kYXJ5TmVhcmVzdChmcm9tKSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCB0YXJnZXQgPSBwb3dlciAqIHZlbG9jaXR5ICsgZnJvbTtcbiAgICAgICAgaWYgKHR5cGVvZiBtb2RpZnlUYXJnZXQgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB0YXJnZXQgPSBtb2RpZnlUYXJnZXQodGFyZ2V0KTtcbiAgICAgICAgY29uc3QgYm91bmRhcnkgPSBib3VuZGFyeU5lYXJlc3QodGFyZ2V0KTtcbiAgICAgICAgY29uc3QgaGVhZGluZyA9IGJvdW5kYXJ5ID09PSBtaW4gPyAtMSA6IDE7XG4gICAgICAgIGxldCBwcmV2O1xuICAgICAgICBsZXQgY3VycmVudDtcbiAgICAgICAgY29uc3QgY2hlY2tCb3VuZGFyeSA9ICh2KSA9PiB7XG4gICAgICAgICAgICBwcmV2ID0gY3VycmVudDtcbiAgICAgICAgICAgIGN1cnJlbnQgPSB2O1xuICAgICAgICAgICAgdmVsb2NpdHkgPSB2ZWxvY2l0eVBlclNlY29uZCh2IC0gcHJldiwgZ2V0RnJhbWVEYXRhKCkuZGVsdGEpO1xuICAgICAgICAgICAgaWYgKChoZWFkaW5nID09PSAxICYmIHYgPiBib3VuZGFyeSkgfHxcbiAgICAgICAgICAgICAgICAoaGVhZGluZyA9PT0gLTEgJiYgdiA8IGJvdW5kYXJ5KSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0U3ByaW5nKHsgZnJvbTogdiwgdG86IGJvdW5kYXJ5LCB2ZWxvY2l0eSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc3RhcnRBbmltYXRpb24oe1xuICAgICAgICAgICAgdHlwZTogXCJkZWNheVwiLFxuICAgICAgICAgICAgZnJvbSxcbiAgICAgICAgICAgIHZlbG9jaXR5LFxuICAgICAgICAgICAgdGltZUNvbnN0YW50LFxuICAgICAgICAgICAgcG93ZXIsXG4gICAgICAgICAgICByZXN0RGVsdGEsXG4gICAgICAgICAgICBtb2RpZnlUYXJnZXQsXG4gICAgICAgICAgICBvblVwZGF0ZTogaXNPdXRPZkJvdW5kcyh0YXJnZXQpID8gY2hlY2tCb3VuZGFyeSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0b3A6ICgpID0+IGN1cnJlbnRBbmltYXRpb24gPT09IG51bGwgfHwgY3VycmVudEFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudEFuaW1hdGlvbi5zdG9wKCksXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgaW5lcnRpYSB9O1xuIiwiZnVuY3Rpb24gYWRkVW5pcXVlSXRlbShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyLmluZGV4T2YoaXRlbSkgPT09IC0xKVxuICAgICAgICBhcnIucHVzaChpdGVtKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUl0ZW0oYXJyLCBpdGVtKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSlcbiAgICAgICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG59XG4vLyBBZGFwdGVkIGZyb20gYXJyYXktbW92ZVxuZnVuY3Rpb24gbW92ZUl0ZW0oWy4uLmFycl0sIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBmcm9tSW5kZXggPCAwID8gYXJyLmxlbmd0aCArIGZyb21JbmRleCA6IGZyb21JbmRleDtcbiAgICBpZiAoc3RhcnRJbmRleCA+PSAwICYmIHN0YXJ0SW5kZXggPCBhcnIubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGVuZEluZGV4ID0gdG9JbmRleCA8IDAgPyBhcnIubGVuZ3RoICsgdG9JbmRleCA6IHRvSW5kZXg7XG4gICAgICAgIGNvbnN0IFtpdGVtXSA9IGFyci5zcGxpY2UoZnJvbUluZGV4LCAxKTtcbiAgICAgICAgYXJyLnNwbGljZShlbmRJbmRleCwgMCwgaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCB7IGFkZFVuaXF1ZUl0ZW0sIG1vdmVJdGVtLCByZW1vdmVJdGVtIH07XG4iLCJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi9hcnJheS5tanMnO1xuXG5jbGFzcyBTdWJzY3JpcHRpb25NYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuICAgIGFkZChoYW5kbGVyKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5zdWJzY3JpcHRpb25zLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHJlbW92ZUl0ZW0odGhpcy5zdWJzY3JpcHRpb25zLCBoYW5kbGVyKTtcbiAgICB9XG4gICAgbm90aWZ5KGEsIGIsIGMpIHtcbiAgICAgICAgY29uc3QgbnVtU3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGg7XG4gICAgICAgIGlmICghbnVtU3Vic2NyaXB0aW9ucylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKG51bVN1YnNjcmlwdGlvbnMgPT09IDEpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlcmUncyBvbmx5IGEgc2luZ2xlIGhhbmRsZXIgd2UgY2FuIGp1c3QgY2FsbCBpdCB3aXRob3V0IGludm9raW5nIGEgbG9vcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zWzBdKGEsIGIsIGMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TdWJzY3JpcHRpb25zOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBoYW5kbGVyIGV4aXN0cyBiZWZvcmUgZmlyaW5nIGFzIGl0J3MgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgKiB0aGUgc3Vic2NyaXB0aW9ucyB3ZXJlIG1vZGlmaWVkIGR1cmluZyB0aGlzIGxvb3AgcnVubmluZy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5zdWJzY3JpcHRpb25zW2ldO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgJiYgaGFuZGxlcihhLCBiLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGggPSAwO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9O1xuIiwiaW1wb3J0IHN5bmMsIHsgZ2V0RnJhbWVEYXRhIH0gZnJvbSAnZnJhbWVzeW5jJztcbmltcG9ydCB7IHZlbG9jaXR5UGVyU2Vjb25kIH0gZnJvbSAncG9wbW90aW9uJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfSBmcm9tICcuLi91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5tanMnO1xuXG5jb25zdCBpc0Zsb2F0ID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG59O1xuLyoqXG4gKiBgTW90aW9uVmFsdWVgIGlzIHVzZWQgdG8gdHJhY2sgdGhlIHN0YXRlIGFuZCB2ZWxvY2l0eSBvZiBtb3Rpb24gdmFsdWVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgTW90aW9uVmFsdWUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBpbml0IC0gVGhlIGluaXRpYXRpbmcgdmFsdWVcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAgICpcbiAgICAgKiAtICBgdHJhbnNmb3JtZXJgOiBBIGZ1bmN0aW9uIHRvIHRyYW5zZm9ybSBpbmNvbWluZyB2YWx1ZXMgd2l0aC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGluaXQpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgYnVpbGQgc3RlcCB3aXRoIHRoZSBsYXRlc3QgdmVyc2lvbiBudW1iZXIuXG4gICAgICAgICAqIFdoZW4gTW90aW9uVmFsdWVzIGFyZSBwcm92aWRlZCB0byBtb3Rpb24gY29tcG9uZW50cywgd2FybiBpZiB2ZXJzaW9ucyBhcmUgbWl4ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZlcnNpb24gPSBcIjcuMy4yXCI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEdXJhdGlvbiwgaW4gbWlsbGlzZWNvbmRzLCBzaW5jZSBsYXN0IHVwZGF0aW5nIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGltZURlbHRhID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRpbWVzdGFtcCBvZiB0aGUgbGFzdCB0aW1lIHRoaXMgYE1vdGlvblZhbHVlYCB3YXMgdXBkYXRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RVcGRhdGVkID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZ1bmN0aW9ucyB0byBub3RpZnkgd2hlbiB0aGUgYE1vdGlvblZhbHVlYCB1cGRhdGVzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXBkYXRlU3Vic2NyaWJlcnMgPSBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRnVuY3Rpb25zIHRvIG5vdGlmeSB3aGVuIHRoZSB2ZWxvY2l0eSB1cGRhdGVzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmVsb2NpdHlVcGRhdGVTdWJzY3JpYmVycyA9IG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdW5jdGlvbnMgdG8gbm90aWZ5IHdoZW4gdGhlIGBNb3Rpb25WYWx1ZWAgdXBkYXRlcyBhbmQgYHJlbmRlcmAgaXMgc2V0IHRvIGB0cnVlYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlclN1YnNjcmliZXJzID0gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYWNrcyB3aGV0aGVyIHRoaXMgdmFsdWUgY2FuIG91dHB1dCBhIHZlbG9jaXR5LiBDdXJyZW50bHkgdGhpcyBpcyBvbmx5IHRydWVcbiAgICAgICAgICogaWYgdGhlIHZhbHVlIGlzIG51bWVyaWNhbCwgYnV0IHdlIG1pZ2h0IGJlIGFibGUgdG8gd2lkZW4gdGhlIHNjb3BlIGhlcmUgYW5kIHN1cHBvcnRcbiAgICAgICAgICogb3RoZXIgdmFsdWUgdHlwZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYW5UcmFja1ZlbG9jaXR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudXBkYXRlQW5kTm90aWZ5ID0gKHYsIHJlbmRlciA9IHRydWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJldiA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGltZXN0YW1wXG4gICAgICAgICAgICBjb25zdCB7IGRlbHRhLCB0aW1lc3RhbXAgfSA9IGdldEZyYW1lRGF0YSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMubGFzdFVwZGF0ZWQgIT09IHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZURlbHRhID0gZGVsdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0VXBkYXRlZCA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBzeW5jLnBvc3RSZW5kZXIodGhpcy5zY2hlZHVsZVZlbG9jaXR5Q2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHVwZGF0ZSBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiAhPT0gdGhpcy5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVycy5ub3RpZnkodGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB2ZWxvY2l0eSBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKHRoaXMudmVsb2NpdHlVcGRhdGVTdWJzY3JpYmVycy5nZXRTaXplKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMubm90aWZ5KHRoaXMuZ2V0VmVsb2NpdHkoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgcmVuZGVyIHN1YnNjcmliZXJzXG4gICAgICAgICAgICBpZiAocmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTdWJzY3JpYmVycy5ub3RpZnkodGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjaGVkdWxlIGEgdmVsb2NpdHkgY2hlY2sgZm9yIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlZCBhbmQgYm91bmQgZnVuY3Rpb24gdG8gcHJldmVudCBnZW5lcmF0aW5nIGEgbmV3XG4gICAgICAgICAqIGZ1bmN0aW9uIG9uY2UgcGVyIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NoZWR1bGVWZWxvY2l0eUNoZWNrID0gKCkgPT4gc3luYy5wb3N0UmVuZGVyKHRoaXMudmVsb2NpdHlDaGVjayk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGVzIGBwcmV2YCB3aXRoIGBjdXJyZW50YCBpZiB0aGUgdmFsdWUgaGFzbid0IGJlZW4gdXBkYXRlZCB0aGlzIGZyYW1lLlxuICAgICAgICAgKiBUaGlzIGVuc3VyZXMgdmVsb2NpdHkgY2FsY3VsYXRpb25zIHJldHVybiBgMGAuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgYW4gaW5zdGFuY2VkIGFuZCBib3VuZCBmdW5jdGlvbiB0byBwcmV2ZW50IGdlbmVyYXRpbmcgYSBuZXdcbiAgICAgICAgICogZnVuY3Rpb24gb25jZSBwZXIgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZWxvY2l0eUNoZWNrID0gKHsgdGltZXN0YW1wIH0pID0+IHtcbiAgICAgICAgICAgIGlmICh0aW1lc3RhbXAgIT09IHRoaXMubGFzdFVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzLm5vdGlmeSh0aGlzLmdldFZlbG9jaXR5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhc0FuaW1hdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJldiA9IHRoaXMuY3VycmVudCA9IGluaXQ7XG4gICAgICAgIHRoaXMuY2FuVHJhY2tWZWxvY2l0eSA9IGlzRmxvYXQodGhpcy5jdXJyZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBub3RpZmllZCB3aGVuIHRoZSBgTW90aW9uVmFsdWVgIGlzIHVwZGF0ZWQuXG4gICAgICpcbiAgICAgKiBJdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgY2FuY2VsIHRoZSBzdWJzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBXaGVuIGNhbGxpbmcgYG9uQ2hhbmdlYCBpbnNpZGUgYSBSZWFjdCBjb21wb25lbnQsIGl0IHNob3VsZCBiZSB3cmFwcGVkIHdpdGggdGhlXG4gICAgICogYHVzZUVmZmVjdGAgaG9vay4gQXMgaXQgcmV0dXJucyBhbiB1bnN1YnNjcmliZSBmdW5jdGlvbiwgdGhpcyBzaG91bGQgYmUgcmV0dXJuZWRcbiAgICAgKiBmcm9tIHRoZSBgdXNlRWZmZWN0YCBmdW5jdGlvbiB0byBlbnN1cmUgeW91IGRvbid0IGFkZCBkdXBsaWNhdGUgc3Vic2NyaWJlcnMuLlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogZXhwb3J0IGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAqICAgY29uc3QgeCA9IHVzZU1vdGlvblZhbHVlKDApXG4gICAgICogICBjb25zdCB5ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiAgIGNvbnN0IG9wYWNpdHkgPSB1c2VNb3Rpb25WYWx1ZSgxKVxuICAgICAqXG4gICAgICogICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAqICAgICBmdW5jdGlvbiB1cGRhdGVPcGFjaXR5KCkge1xuICAgICAqICAgICAgIGNvbnN0IG1heFhZID0gTWF0aC5tYXgoeC5nZXQoKSwgeS5nZXQoKSlcbiAgICAgKiAgICAgICBjb25zdCBuZXdPcGFjaXR5ID0gdHJhbnNmb3JtKG1heFhZLCBbMCwgMTAwXSwgWzEsIDBdKVxuICAgICAqICAgICAgIG9wYWNpdHkuc2V0KG5ld09wYWNpdHkpXG4gICAgICogICAgIH1cbiAgICAgKlxuICAgICAqICAgICBjb25zdCB1bnN1YnNjcmliZVggPSB4Lm9uQ2hhbmdlKHVwZGF0ZU9wYWNpdHkpXG4gICAgICogICAgIGNvbnN0IHVuc3Vic2NyaWJlWSA9IHkub25DaGFuZ2UodXBkYXRlT3BhY2l0eSlcbiAgICAgKlxuICAgICAqICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAqICAgICAgIHVuc3Vic2NyaWJlWCgpXG4gICAgICogICAgICAgdW5zdWJzY3JpYmVZKClcbiAgICAgKiAgICAgfVxuICAgICAqICAgfSwgW10pXG4gICAgICpcbiAgICAgKiAgIHJldHVybiA8bW90aW9uLmRpdiBzdHlsZT17eyB4IH19IC8+XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHByaXZhdGVSZW1hcmtzXG4gICAgICpcbiAgICAgKiBXZSBjb3VsZCBsb29rIGludG8gYSBgdXNlT25DaGFuZ2VgIGhvb2sgaWYgdGhlIGFib3ZlIGxpZmVjeWNsZSBtYW5hZ2VtZW50IHByb3ZlcyBjb25mdXNpbmcuXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiB1c2VPbkNoYW5nZSh4LCAoKSA9PiB7fSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdWJzY3JpYmVyIC0gQSBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBsYXRlc3QgdmFsdWUuXG4gICAgICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBjYW5jZWwgdGhpcyBzdWJzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb25DaGFuZ2Uoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZVN1YnNjcmliZXJzLmFkZChzdWJzY3JpcHRpb24pO1xuICAgIH1cbiAgICBjbGVhckxpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIG5vdGlmaWVkIHdoZW4gdGhlIGBNb3Rpb25WYWx1ZWAgcmVxdWVzdHMgYSByZW5kZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3Vic2NyaWJlciAtIEEgZnVuY3Rpb24gdGhhdCdzIHByb3ZpZGVkIHRoZSBsYXRlc3QgdmFsdWUuXG4gICAgICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBjYW5jZWwgdGhpcyBzdWJzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBvblJlbmRlclJlcXVlc3Qoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIC8vIFJlbmRlciBpbW1lZGlhdGVseVxuICAgICAgICBzdWJzY3JpcHRpb24odGhpcy5nZXQoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclN1YnNjcmliZXJzLmFkZChzdWJzY3JpcHRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIHBhc3NpdmUgZWZmZWN0IHRvIHRoZSBgTW90aW9uVmFsdWVgLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgYXR0YWNoKHBhc3NpdmVFZmZlY3QpIHtcbiAgICAgICAgdGhpcy5wYXNzaXZlRWZmZWN0ID0gcGFzc2l2ZUVmZmVjdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIGBNb3Rpb25WYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogY29uc3QgeCA9IHVzZU1vdGlvblZhbHVlKDApXG4gICAgICogeC5zZXQoMTApXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGF0ZXN0IC0gTGF0ZXN0IHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0gcmVuZGVyIC0gV2hldGhlciB0byBub3RpZnkgcmVuZGVyIHN1YnNjcmliZXJzLiBEZWZhdWx0cyB0byBgdHJ1ZWBcbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZXQodiwgcmVuZGVyID0gdHJ1ZSkge1xuICAgICAgICBpZiAoIXJlbmRlciB8fCAhdGhpcy5wYXNzaXZlRWZmZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFuZE5vdGlmeSh2LCByZW5kZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXNzaXZlRWZmZWN0KHYsIHRoaXMudXBkYXRlQW5kTm90aWZ5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3Qgc3RhdGUgb2YgYE1vdGlvblZhbHVlYFxuICAgICAqXG4gICAgICogQHJldHVybnMgLSBUaGUgbGF0ZXN0IHN0YXRlIG9mIGBNb3Rpb25WYWx1ZWBcbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXRQcmV2aW91cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGF0ZXN0IHZlbG9jaXR5IG9mIGBNb3Rpb25WYWx1ZWBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIC0gVGhlIGxhdGVzdCB2ZWxvY2l0eSBvZiBgTW90aW9uVmFsdWVgLiBSZXR1cm5zIGAwYCBpZiB0aGUgc3RhdGUgaXMgbm9uLW51bWVyaWNhbC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXRWZWxvY2l0eSgpIHtcbiAgICAgICAgLy8gVGhpcyBjb3VsZCBiZSBpc0Zsb2F0KHRoaXMucHJldikgJiYgaXNGbG9hdCh0aGlzLmN1cnJlbnQpLCBidXQgdGhhdCB3b3VsZCBiZSB3YXN0ZWZ1bFxuICAgICAgICByZXR1cm4gdGhpcy5jYW5UcmFja1ZlbG9jaXR5XG4gICAgICAgICAgICA/IC8vIFRoZXNlIGNhc3RzIGNvdWxkIGJlIGF2b2lkZWQgaWYgcGFyc2VGbG9hdCB3b3VsZCBiZSB0eXBlZCBiZXR0ZXJcbiAgICAgICAgICAgICAgICB2ZWxvY2l0eVBlclNlY29uZChwYXJzZUZsb2F0KHRoaXMuY3VycmVudCkgLVxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHRoaXMucHJldiksIHRoaXMudGltZURlbHRhKVxuICAgICAgICAgICAgOiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBuZXcgYW5pbWF0aW9uIHRvIGNvbnRyb2wgdGhpcyBgTW90aW9uVmFsdWVgLiBPbmx5IG9uZVxuICAgICAqIGFuaW1hdGlvbiBjYW4gZHJpdmUgYSBgTW90aW9uVmFsdWVgIGF0IG9uZSB0aW1lLlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogdmFsdWUuc3RhcnQoKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGFuaW1hdGlvbiAtIEEgZnVuY3Rpb24gdGhhdCBzdGFydHMgdGhlIHByb3ZpZGVkIGFuaW1hdGlvblxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc3RhcnQoYW5pbWF0aW9uKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFzQW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uID0gYW5pbWF0aW9uKHJlc29sdmUpO1xuICAgICAgICB9KS50aGVuKCgpID0+IHRoaXMuY2xlYXJBbmltYXRpb24oKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3AgdGhlIGN1cnJlbnRseSBhY3RpdmUgYW5pbWF0aW9uLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0b3BBbmltYXRpb24pXG4gICAgICAgICAgICB0aGlzLnN0b3BBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5jbGVhckFuaW1hdGlvbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHZhbHVlIGlzIGN1cnJlbnRseSBhbmltYXRpbmcuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaXNBbmltYXRpbmcoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuc3RvcEFuaW1hdGlvbjtcbiAgICB9XG4gICAgY2xlYXJBbmltYXRpb24oKSB7XG4gICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbiA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYW5kIGNsZWFuIHVwIHN1YnNjcmliZXJzIHRvIHRoaXMgYE1vdGlvblZhbHVlYC5cbiAgICAgKlxuICAgICAqIFRoZSBgTW90aW9uVmFsdWVgIGhvb2tzIGxpa2UgYHVzZU1vdGlvblZhbHVlYCBhbmQgYHVzZVRyYW5zZm9ybWAgYXV0b21hdGljYWxseVxuICAgICAqIGhhbmRsZSB0aGUgbGlmZWN5Y2xlIG9mIHRoZSByZXR1cm5lZCBgTW90aW9uVmFsdWVgLCBzbyB0aGlzIG1ldGhvZCBpcyBvbmx5IG5lY2Vzc2FyeSBpZiB5b3UndmUgbWFudWFsbHlcbiAgICAgKiBjcmVhdGVkIGEgYE1vdGlvblZhbHVlYCB2aWEgdGhlIGBtb3Rpb25WYWx1ZWAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVycy5jbGVhcigpO1xuICAgICAgICB0aGlzLnJlbmRlclN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1vdGlvblZhbHVlKGluaXQpIHtcbiAgICByZXR1cm4gbmV3IE1vdGlvblZhbHVlKGluaXQpO1xufVxuXG5leHBvcnQgeyBNb3Rpb25WYWx1ZSwgbW90aW9uVmFsdWUgfTtcbiIsIi8qKlxuICogVGVzdHMgYSBwcm92aWRlZCB2YWx1ZSBhZ2FpbnN0IGEgVmFsdWVUeXBlXG4gKi9cbmNvbnN0IHRlc3RWYWx1ZVR5cGUgPSAodikgPT4gKHR5cGUpID0+IHR5cGUudGVzdCh2KTtcblxuZXhwb3J0IHsgdGVzdFZhbHVlVHlwZSB9O1xuIiwiaW1wb3J0IHsgbnVtYmVyLCBweCwgcGVyY2VudCwgZGVncmVlcywgdncsIHZoIH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuaW1wb3J0IHsgdGVzdFZhbHVlVHlwZSB9IGZyb20gJy4vdGVzdC5tanMnO1xuaW1wb3J0IHsgYXV0byB9IGZyb20gJy4vdHlwZS1hdXRvLm1qcyc7XG5cbi8qKlxuICogQSBsaXN0IG9mIHZhbHVlIHR5cGVzIGNvbW1vbmx5IHVzZWQgZm9yIGRpbWVuc2lvbnNcbiAqL1xuY29uc3QgZGltZW5zaW9uVmFsdWVUeXBlcyA9IFtudW1iZXIsIHB4LCBwZXJjZW50LCBkZWdyZWVzLCB2dywgdmgsIGF1dG9dO1xuLyoqXG4gKiBUZXN0cyBhIGRpbWVuc2lvbmFsIHZhbHVlIGFnYWluc3QgdGhlIGxpc3Qgb2YgZGltZW5zaW9uIFZhbHVlVHlwZXNcbiAqL1xuY29uc3QgZmluZERpbWVuc2lvblZhbHVlVHlwZSA9ICh2KSA9PiBkaW1lbnNpb25WYWx1ZVR5cGVzLmZpbmQodGVzdFZhbHVlVHlwZSh2KSk7XG5cbmV4cG9ydCB7IGRpbWVuc2lvblZhbHVlVHlwZXMsIGZpbmREaW1lbnNpb25WYWx1ZVR5cGUgfTtcbiIsIi8qKlxuICogVmFsdWVUeXBlIGZvciBcImF1dG9cIlxuICovXG5jb25zdCBhdXRvID0ge1xuICAgIHRlc3Q6ICh2KSA9PiB2ID09PSBcImF1dG9cIixcbiAgICBwYXJzZTogKHYpID0+IHYsXG59O1xuXG5leHBvcnQgeyBhdXRvIH07XG4iLCJpbXBvcnQgeyBjb2xvciwgY29tcGxleCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IGRpbWVuc2lvblZhbHVlVHlwZXMgfSBmcm9tICcuL2RpbWVuc2lvbnMubWpzJztcbmltcG9ydCB7IHRlc3RWYWx1ZVR5cGUgfSBmcm9tICcuL3Rlc3QubWpzJztcblxuLyoqXG4gKiBBIGxpc3Qgb2YgYWxsIFZhbHVlVHlwZXNcbiAqL1xuY29uc3QgdmFsdWVUeXBlcyA9IFsuLi5kaW1lbnNpb25WYWx1ZVR5cGVzLCBjb2xvciwgY29tcGxleF07XG4vKipcbiAqIFRlc3RzIGEgdmFsdWUgYWdhaW5zdCB0aGUgbGlzdCBvZiBWYWx1ZVR5cGVzXG4gKi9cbmNvbnN0IGZpbmRWYWx1ZVR5cGUgPSAodikgPT4gdmFsdWVUeXBlcy5maW5kKHRlc3RWYWx1ZVR5cGUodikpO1xuXG5leHBvcnQgeyBmaW5kVmFsdWVUeXBlIH07XG4iLCJpbXBvcnQgeyByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyB9IGZyb20gJy4vcmVzb2x2ZS12YXJpYW50cy5tanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxhdGVzdCBzdGF0ZSBvZiBldmVyeSBNb3Rpb25WYWx1ZSBvbiBhIFZpc3VhbEVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudCh2aXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3QgY3VycmVudCA9IHt9O1xuICAgIHZpc3VhbEVsZW1lbnQuZm9yRWFjaFZhbHVlKCh2YWx1ZSwga2V5KSA9PiAoY3VycmVudFtrZXldID0gdmFsdWUuZ2V0KCkpKTtcbiAgICByZXR1cm4gY3VycmVudDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbGF0ZXN0IHZlbG9jaXR5IG9mIGV2ZXJ5IE1vdGlvblZhbHVlIG9uIGEgVmlzdWFsRWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRWZWxvY2l0eSh2aXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3QgdmVsb2NpdHkgPSB7fTtcbiAgICB2aXN1YWxFbGVtZW50LmZvckVhY2hWYWx1ZSgodmFsdWUsIGtleSkgPT4gKHZlbG9jaXR5W2tleV0gPSB2YWx1ZS5nZXRWZWxvY2l0eSgpKSk7XG4gICAgcmV0dXJuIHZlbG9jaXR5O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgY3VzdG9tKSB7XG4gICAgY29uc3QgcHJvcHMgPSB2aXN1YWxFbGVtZW50LmdldFByb3BzKCk7XG4gICAgcmV0dXJuIHJlc29sdmVWYXJpYW50RnJvbVByb3BzKHByb3BzLCBkZWZpbml0aW9uLCBjdXN0b20gIT09IHVuZGVmaW5lZCA/IGN1c3RvbSA6IHByb3BzLmN1c3RvbSwgZ2V0Q3VycmVudCh2aXN1YWxFbGVtZW50KSwgZ2V0VmVsb2NpdHkodmlzdWFsRWxlbWVudCkpO1xufVxuXG5leHBvcnQgeyByZXNvbHZlVmFyaWFudCB9O1xuIiwiaW1wb3J0IHsgY29tcGxleCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IGlzTnVtZXJpY2FsU3RyaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvaXMtbnVtZXJpY2FsLXN0cmluZy5tanMnO1xuaW1wb3J0IHsgaXNaZXJvVmFsdWVTdHJpbmcgfSBmcm9tICcuLi8uLi91dGlscy9pcy16ZXJvLXZhbHVlLXN0cmluZy5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUZpbmFsVmFsdWVJbktleWZyYW1lcyB9IGZyb20gJy4uLy4uL3V0aWxzL3Jlc29sdmUtdmFsdWUubWpzJztcbmltcG9ydCB7IG1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvaW5kZXgubWpzJztcbmltcG9ydCB7IGdldEFuaW1hdGFibGVOb25lIH0gZnJvbSAnLi4vZG9tL3ZhbHVlLXR5cGVzL2FuaW1hdGFibGUtbm9uZS5tanMnO1xuaW1wb3J0IHsgZmluZFZhbHVlVHlwZSB9IGZyb20gJy4uL2RvbS92YWx1ZS10eXBlcy9maW5kLm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlVmFyaWFudCB9IGZyb20gJy4vcmVzb2x2ZS1keW5hbWljLXZhcmlhbnRzLm1qcyc7XG5cbi8qKlxuICogU2V0IFZpc3VhbEVsZW1lbnQncyBNb3Rpb25WYWx1ZSwgY3JlYXRpbmcgYSBuZXcgTW90aW9uVmFsdWUgZm9yIGl0IGlmXG4gKiBpdCBkb2Vzbid0IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXRNb3Rpb25WYWx1ZSh2aXN1YWxFbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKHZpc3VhbEVsZW1lbnQuaGFzVmFsdWUoa2V5KSkge1xuICAgICAgICB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSkuc2V0KHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZSh2YWx1ZSkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKSB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICBsZXQgeyB0cmFuc2l0aW9uRW5kID0ge30sIHRyYW5zaXRpb24gPSB7fSwgLi4udGFyZ2V0IH0gPSByZXNvbHZlZCA/IHZpc3VhbEVsZW1lbnQubWFrZVRhcmdldEFuaW1hdGFibGUocmVzb2x2ZWQsIGZhbHNlKSA6IHt9O1xuICAgIHRhcmdldCA9IHsgLi4udGFyZ2V0LCAuLi50cmFuc2l0aW9uRW5kIH07XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcmVzb2x2ZUZpbmFsVmFsdWVJbktleWZyYW1lcyh0YXJnZXRba2V5XSk7XG4gICAgICAgIHNldE1vdGlvblZhbHVlKHZpc3VhbEVsZW1lbnQsIGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFZhcmlhbnRzKHZpc3VhbEVsZW1lbnQsIHZhcmlhbnRMYWJlbHMpIHtcbiAgICBjb25zdCByZXZlcnNlZExhYmVscyA9IFsuLi52YXJpYW50TGFiZWxzXS5yZXZlcnNlKCk7XG4gICAgcmV2ZXJzZWRMYWJlbHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgdmFyaWFudCA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFyaWFudChrZXkpO1xuICAgICAgICB2YXJpYW50ICYmIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCB2YXJpYW50KTtcbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgc2V0VmFyaWFudHMoY2hpbGQsIHZhcmlhbnRMYWJlbHMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlcyh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIHNldFZhcmlhbnRzKHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gc2V0VmFyaWFudHModmlzdWFsRWxlbWVudCwgW2RlZmluaXRpb25dKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja1RhcmdldEZvck5ld1ZhbHVlcyh2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgbmV3VmFsdWVLZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KS5maWx0ZXIoKGtleSkgPT4gIXZpc3VhbEVsZW1lbnQuaGFzVmFsdWUoa2V5KSk7XG4gICAgY29uc3QgbnVtTmV3VmFsdWVzID0gbmV3VmFsdWVLZXlzLmxlbmd0aDtcbiAgICBpZiAoIW51bU5ld1ZhbHVlcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtTmV3VmFsdWVzOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gbmV3VmFsdWVLZXlzW2ldO1xuICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIHRhcmdldCBpcyBhIHNlcmllcyBvZiBrZXlmcmFtZXMsIHdlIGNhbiB1c2UgdGhlIGZpcnN0IHZhbHVlXG4gICAgICAgICAqIGluIHRoZSBhcnJheS4gSWYgdGhpcyBmaXJzdCB2YWx1ZSBpcyBudWxsLCB3ZSdsbCBzdGlsbCBuZWVkIHRvIHJlYWQgZnJvbSB0aGUgRE9NLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0VmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRhcmdldFZhbHVlWzBdO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgdGFyZ2V0IGlzbid0IGtleWZyYW1lcywgb3IgdGhlIGZpcnN0IGtleWZyYW1lIHdhcyBudWxsLCB3ZSBuZWVkIHRvXG4gICAgICAgICAqIGZpcnN0IGNoZWNrIGlmIGFuIG9yaWdpbiB2YWx1ZSB3YXMgZXhwbGljaXRseSBkZWZpbmVkIGluIHRoZSB0cmFuc2l0aW9uIGFzIFwiZnJvbVwiLFxuICAgICAgICAgKiBpZiBub3QgcmVhZCB0aGUgdmFsdWUgZnJvbSB0aGUgRE9NLiBBcyBhbiBhYnNvbHV0ZSBmYWxsYmFjaywgdGFrZSB0aGUgZGVmaW5lZCB0YXJnZXQgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhbHVlID0gKF9iID0gKF9hID0gb3JpZ2luW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHZpc3VhbEVsZW1lbnQucmVhZFZhbHVlKGtleSkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRhcmdldFtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB2YWx1ZSBpcyBzdGlsbCB1bmRlZmluZWQgb3IgbnVsbCwgaWdub3JlIGl0LiBQcmVmZXJhYmx5IHRoaXMgd291bGQgdGhyb3csXG4gICAgICAgICAqIGJ1dCB0aGlzIHdhcyBjYXVzaW5nIGlzc3VlcyBpbiBGcmFtZXIuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAoaXNOdW1lcmljYWxTdHJpbmcodmFsdWUpIHx8IGlzWmVyb1ZhbHVlU3RyaW5nKHZhbHVlKSkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSBudW1iZXIgcmVhZCBhcyBhIHN0cmluZywgaWUgXCIwXCIgb3IgXCIyMDBcIiwgY29udmVydCBpdCB0byBhIG51bWJlclxuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghZmluZFZhbHVlVHlwZSh2YWx1ZSkgJiYgY29tcGxleC50ZXN0KHRhcmdldFZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBnZXRBbmltYXRhYmxlTm9uZShrZXksIHRhcmdldFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2aXN1YWxFbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUodmFsdWUpKTtcbiAgICAgICAgaWYgKG9yaWdpbltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9yaWdpbltrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRCYXNlVGFyZ2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE9yaWdpbkZyb21UcmFuc2l0aW9uKGtleSwgdHJhbnNpdGlvbikge1xuICAgIGlmICghdHJhbnNpdGlvbilcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHZhbHVlVHJhbnNpdGlvbiA9IHRyYW5zaXRpb25ba2V5XSB8fCB0cmFuc2l0aW9uW1wiZGVmYXVsdFwiXSB8fCB0cmFuc2l0aW9uO1xuICAgIHJldHVybiB2YWx1ZVRyYW5zaXRpb24uZnJvbTtcbn1cbmZ1bmN0aW9uIGdldE9yaWdpbih0YXJnZXQsIHRyYW5zaXRpb24sIHZpc3VhbEVsZW1lbnQpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgb3JpZ2luID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25PcmlnaW4gPSBnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbihrZXksIHRyYW5zaXRpb24pO1xuICAgICAgICBvcmlnaW5ba2V5XSA9XG4gICAgICAgICAgICB0cmFuc2l0aW9uT3JpZ2luICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IHRyYW5zaXRpb25PcmlnaW5cbiAgICAgICAgICAgICAgICA6IChfYSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldCgpO1xuICAgIH1cbiAgICByZXR1cm4gb3JpZ2luO1xufVxuXG5leHBvcnQgeyBjaGVja1RhcmdldEZvck5ld1ZhbHVlcywgZ2V0T3JpZ2luLCBnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbiwgc2V0VGFyZ2V0LCBzZXRWYWx1ZXMgfTtcbiIsImltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcblxuZnVuY3Rpb24gaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gQm9vbGVhbihpc01vdGlvblZhbHVlKHZhbHVlKSAmJiB2YWx1ZS5hZGQpO1xufVxuXG5leHBvcnQgeyBpc1dpbGxDaGFuZ2VNb3Rpb25WYWx1ZSB9O1xuIiwiaW1wb3J0IHsgc3RhcnRBbmltYXRpb24gfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvdHJhbnNpdGlvbnMubWpzJztcbmltcG9ydCB7IHNldFRhcmdldCB9IGZyb20gJy4vc2V0dGVycy5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnQgfSBmcm9tICcuL3Jlc29sdmUtZHluYW1pYy12YXJpYW50cy5tanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91c2Utd2lsbC1jaGFuZ2UvaXMubWpzJztcblxuZnVuY3Rpb24gYW5pbWF0ZVZpc3VhbEVsZW1lbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmlzdWFsRWxlbWVudC5ub3RpZnlBbmltYXRpb25TdGFydChkZWZpbml0aW9uKTtcbiAgICBsZXQgYW5pbWF0aW9uO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBkZWZpbml0aW9uLm1hcCgodmFyaWFudCkgPT4gYW5pbWF0ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgdmFyaWFudCwgb3B0aW9ucykpO1xuICAgICAgICBhbmltYXRpb24gPSBQcm9taXNlLmFsbChhbmltYXRpb25zKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgYW5pbWF0aW9uID0gYW5pbWF0ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCByZXNvbHZlZERlZmluaXRpb24gPSB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIG9wdGlvbnMuY3VzdG9tKVxuICAgICAgICAgICAgOiBkZWZpbml0aW9uO1xuICAgICAgICBhbmltYXRpb24gPSBhbmltYXRlVGFyZ2V0KHZpc3VhbEVsZW1lbnQsIHJlc29sdmVkRGVmaW5pdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb24udGhlbigoKSA9PiB2aXN1YWxFbGVtZW50Lm5vdGlmeUFuaW1hdGlvbkNvbXBsZXRlKGRlZmluaXRpb24pKTtcbn1cbmZ1bmN0aW9uIGFuaW1hdGVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIG9wdGlvbnMuY3VzdG9tKTtcbiAgICBsZXQgeyB0cmFuc2l0aW9uID0gdmlzdWFsRWxlbWVudC5nZXREZWZhdWx0VHJhbnNpdGlvbigpIHx8IHt9IH0gPSByZXNvbHZlZCB8fCB7fTtcbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uT3ZlcnJpZGUpIHtcbiAgICAgICAgdHJhbnNpdGlvbiA9IG9wdGlvbnMudHJhbnNpdGlvbk92ZXJyaWRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB3ZSBoYXZlIGEgdmFyaWFudCwgY3JlYXRlIGEgY2FsbGJhY2sgdGhhdCBydW5zIGl0IGFzIGFuIGFuaW1hdGlvbi5cbiAgICAgKiBPdGhlcndpc2UsIHdlIHJlc29sdmUgYSBQcm9taXNlIGltbWVkaWF0ZWx5IGZvciBhIGNvbXBvc2FibGUgbm8tb3AuXG4gICAgICovXG4gICAgY29uc3QgZ2V0QW5pbWF0aW9uID0gcmVzb2x2ZWRcbiAgICAgICAgPyAoKSA9PiBhbmltYXRlVGFyZ2V0KHZpc3VhbEVsZW1lbnQsIHJlc29sdmVkLCBvcHRpb25zKVxuICAgICAgICA6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIC8qKlxuICAgICAqIElmIHdlIGhhdmUgY2hpbGRyZW4sIGNyZWF0ZSBhIGNhbGxiYWNrIHRoYXQgcnVucyBhbGwgdGhlaXIgYW5pbWF0aW9ucy5cbiAgICAgKiBPdGhlcndpc2UsIHdlIHJlc29sdmUgYSBQcm9taXNlIGltbWVkaWF0ZWx5IGZvciBhIGNvbXBvc2FibGUgbm8tb3AuXG4gICAgICovXG4gICAgY29uc3QgZ2V0Q2hpbGRBbmltYXRpb25zID0gKChfYSA9IHZpc3VhbEVsZW1lbnQudmFyaWFudENoaWxkcmVuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2l6ZSlcbiAgICAgICAgPyAoZm9yd2FyZERlbGF5ID0gMCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBkZWxheUNoaWxkcmVuID0gMCwgc3RhZ2dlckNoaWxkcmVuLCBzdGFnZ2VyRGlyZWN0aW9uLCB9ID0gdHJhbnNpdGlvbjtcbiAgICAgICAgICAgIHJldHVybiBhbmltYXRlQ2hpbGRyZW4odmlzdWFsRWxlbWVudCwgdmFyaWFudCwgZGVsYXlDaGlsZHJlbiArIGZvcndhcmREZWxheSwgc3RhZ2dlckNoaWxkcmVuLCBzdGFnZ2VyRGlyZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICA6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIC8qKlxuICAgICAqIElmIHRoZSB0cmFuc2l0aW9uIGV4cGxpY2l0bHkgZGVmaW5lcyBhIFwid2hlblwiIG9wdGlvbiwgd2UgbmVlZCB0byByZXNvbHZlIGVpdGhlclxuICAgICAqIHRoaXMgYW5pbWF0aW9uIG9yIGFsbCBjaGlsZHJlbiBhbmltYXRpb25zIGJlZm9yZSBwbGF5aW5nIHRoZSBvdGhlci5cbiAgICAgKi9cbiAgICBjb25zdCB7IHdoZW4gfSA9IHRyYW5zaXRpb247XG4gICAgaWYgKHdoZW4pIHtcbiAgICAgICAgY29uc3QgW2ZpcnN0LCBsYXN0XSA9IHdoZW4gPT09IFwiYmVmb3JlQ2hpbGRyZW5cIlxuICAgICAgICAgICAgPyBbZ2V0QW5pbWF0aW9uLCBnZXRDaGlsZEFuaW1hdGlvbnNdXG4gICAgICAgICAgICA6IFtnZXRDaGlsZEFuaW1hdGlvbnMsIGdldEFuaW1hdGlvbl07XG4gICAgICAgIHJldHVybiBmaXJzdCgpLnRoZW4obGFzdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2dldEFuaW1hdGlvbigpLCBnZXRDaGlsZEFuaW1hdGlvbnMob3B0aW9ucy5kZWxheSldKTtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBhbmltYXRlVGFyZ2V0KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIHsgZGVsYXkgPSAwLCB0cmFuc2l0aW9uT3ZlcnJpZGUsIHR5cGUgfSA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCB7IHRyYW5zaXRpb24gPSB2aXN1YWxFbGVtZW50LmdldERlZmF1bHRUcmFuc2l0aW9uKCksIHRyYW5zaXRpb25FbmQsIC4uLnRhcmdldCB9ID0gdmlzdWFsRWxlbWVudC5tYWtlVGFyZ2V0QW5pbWF0YWJsZShkZWZpbml0aW9uKTtcbiAgICBjb25zdCB3aWxsQ2hhbmdlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShcIndpbGxDaGFuZ2VcIik7XG4gICAgaWYgKHRyYW5zaXRpb25PdmVycmlkZSlcbiAgICAgICAgdHJhbnNpdGlvbiA9IHRyYW5zaXRpb25PdmVycmlkZTtcbiAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgY29uc3QgYW5pbWF0aW9uVHlwZVN0YXRlID0gdHlwZSAmJiAoKF9hID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFN0YXRlKClbdHlwZV0pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KTtcbiAgICAgICAgY29uc3QgdmFsdWVUYXJnZXQgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgaWYgKCF2YWx1ZSB8fFxuICAgICAgICAgICAgdmFsdWVUYXJnZXQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKGFuaW1hdGlvblR5cGVTdGF0ZSAmJlxuICAgICAgICAgICAgICAgIHNob3VsZEJsb2NrQW5pbWF0aW9uKGFuaW1hdGlvblR5cGVTdGF0ZSwga2V5KSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCB2YWx1ZVRyYW5zaXRpb24gPSB7IGRlbGF5LCAuLi50cmFuc2l0aW9uIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYWtlIGFuaW1hdGlvbiBpbnN0YW50IGlmIHRoaXMgaXMgYSB0cmFuc2Zvcm0gcHJvcCBhbmQgd2Ugc2hvdWxkIHJlZHVjZSBtb3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodmlzdWFsRWxlbWVudC5zaG91bGRSZWR1Y2VNb3Rpb24gJiYgdHJhbnNmb3JtUHJvcHMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHZhbHVlVHJhbnNpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAuLi52YWx1ZVRyYW5zaXRpb24sXG4gICAgICAgICAgICAgICAgdHlwZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbmltYXRpb24gPSBzdGFydEFuaW1hdGlvbihrZXksIHZhbHVlLCB2YWx1ZVRhcmdldCwgdmFsdWVUcmFuc2l0aW9uKTtcbiAgICAgICAgaWYgKGlzV2lsbENoYW5nZU1vdGlvblZhbHVlKHdpbGxDaGFuZ2UpKSB7XG4gICAgICAgICAgICB3aWxsQ2hhbmdlLmFkZChrZXkpO1xuICAgICAgICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLnRoZW4oKCkgPT4gd2lsbENoYW5nZS5yZW1vdmUoa2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLmFsbChhbmltYXRpb25zKS50aGVuKCgpID0+IHtcbiAgICAgICAgdHJhbnNpdGlvbkVuZCAmJiBzZXRUYXJnZXQodmlzdWFsRWxlbWVudCwgdHJhbnNpdGlvbkVuZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhbmltYXRlQ2hpbGRyZW4odmlzdWFsRWxlbWVudCwgdmFyaWFudCwgZGVsYXlDaGlsZHJlbiA9IDAsIHN0YWdnZXJDaGlsZHJlbiA9IDAsIHN0YWdnZXJEaXJlY3Rpb24gPSAxLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuICAgIGNvbnN0IG1heFN0YWdnZXJEdXJhdGlvbiA9ICh2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbi5zaXplIC0gMSkgKiBzdGFnZ2VyQ2hpbGRyZW47XG4gICAgY29uc3QgZ2VuZXJhdGVTdGFnZ2VyRHVyYXRpb24gPSBzdGFnZ2VyRGlyZWN0aW9uID09PSAxXG4gICAgICAgID8gKGkgPSAwKSA9PiBpICogc3RhZ2dlckNoaWxkcmVuXG4gICAgICAgIDogKGkgPSAwKSA9PiBtYXhTdGFnZ2VyRHVyYXRpb24gLSBpICogc3RhZ2dlckNoaWxkcmVuO1xuICAgIEFycmF5LmZyb20odmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pXG4gICAgICAgIC5zb3J0KHNvcnRCeVRyZWVPcmRlcilcbiAgICAgICAgLmZvckVhY2goKGNoaWxkLCBpKSA9PiB7XG4gICAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRlVmFyaWFudChjaGlsZCwgdmFyaWFudCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheUNoaWxkcmVuICsgZ2VuZXJhdGVTdGFnZ2VyRHVyYXRpb24oaSksXG4gICAgICAgIH0pLnRoZW4oKCkgPT4gY2hpbGQubm90aWZ5QW5pbWF0aW9uQ29tcGxldGUodmFyaWFudCkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoYW5pbWF0aW9ucyk7XG59XG5mdW5jdGlvbiBzdG9wQW5pbWF0aW9uKHZpc3VhbEVsZW1lbnQpIHtcbiAgICB2aXN1YWxFbGVtZW50LmZvckVhY2hWYWx1ZSgodmFsdWUpID0+IHZhbHVlLnN0b3AoKSk7XG59XG5mdW5jdGlvbiBzb3J0QnlUcmVlT3JkZXIoYSwgYikge1xuICAgIHJldHVybiBhLnNvcnROb2RlUG9zaXRpb24oYik7XG59XG4vKipcbiAqIERlY2lkZSB3aGV0aGVyIHdlIHNob3VsZCBibG9jayB0aGlzIGFuaW1hdGlvbi4gUHJldmlvdXNseSwgd2UgYWNoaWV2ZWQgdGhpc1xuICoganVzdCBieSBjaGVja2luZyB3aGV0aGVyIHRoZSBrZXkgd2FzIGxpc3RlZCBpbiBwcm90ZWN0ZWRLZXlzLCBidXQgdGhpc1xuICogcG9zZWQgcHJvYmxlbXMgaWYgYW4gYW5pbWF0aW9uIHdhcyB0cmlnZ2VyZWQgYnkgYWZ0ZXJDaGlsZHJlbiBhbmQgcHJvdGVjdGVkS2V5c1xuICogaGFkIGJlZW4gc2V0IHRvIHRydWUgaW4gdGhlIG1lYW50aW1lLlxuICovXG5mdW5jdGlvbiBzaG91bGRCbG9ja0FuaW1hdGlvbih7IHByb3RlY3RlZEtleXMsIG5lZWRzQW5pbWF0aW5nIH0sIGtleSkge1xuICAgIGNvbnN0IHNob3VsZEJsb2NrID0gcHJvdGVjdGVkS2V5cy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG5lZWRzQW5pbWF0aW5nW2tleV0gIT09IHRydWU7XG4gICAgbmVlZHNBbmltYXRpbmdba2V5XSA9IGZhbHNlO1xuICAgIHJldHVybiBzaG91bGRCbG9jaztcbn1cblxuZXhwb3J0IHsgYW5pbWF0ZVZpc3VhbEVsZW1lbnQsIHNvcnRCeVRyZWVPcmRlciwgc3RvcEFuaW1hdGlvbiB9O1xuIiwiaW1wb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzJztcbmltcG9ydCB7IGlzS2V5ZnJhbWVzVGFyZ2V0IH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL3V0aWxzL2lzLWtleWZyYW1lcy10YXJnZXQubWpzJztcbmltcG9ydCB7IHNoYWxsb3dDb21wYXJlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2hhbGxvdy1jb21wYXJlLm1qcyc7XG5pbXBvcnQgeyBhbmltYXRlVmlzdWFsRWxlbWVudCB9IGZyb20gJy4vYW5pbWF0aW9uLm1qcyc7XG5pbXBvcnQgeyBpc1ZhcmlhbnRMYWJlbCB9IGZyb20gJy4vaXMtdmFyaWFudC1sYWJlbC5tanMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uVHlwZSB9IGZyb20gJy4vdHlwZXMubWpzJztcbmltcG9ydCB7IHJlc29sdmVWYXJpYW50IH0gZnJvbSAnLi9yZXNvbHZlLWR5bmFtaWMtdmFyaWFudHMubWpzJztcblxuY29uc3QgdmFyaWFudFByaW9yaXR5T3JkZXIgPSBbXG4gICAgQW5pbWF0aW9uVHlwZS5BbmltYXRlLFxuICAgIEFuaW1hdGlvblR5cGUuSW5WaWV3LFxuICAgIEFuaW1hdGlvblR5cGUuRm9jdXMsXG4gICAgQW5pbWF0aW9uVHlwZS5Ib3ZlcixcbiAgICBBbmltYXRpb25UeXBlLlRhcCxcbiAgICBBbmltYXRpb25UeXBlLkRyYWcsXG4gICAgQW5pbWF0aW9uVHlwZS5FeGl0LFxuXTtcbmNvbnN0IHJldmVyc2VQcmlvcml0eU9yZGVyID0gWy4uLnZhcmlhbnRQcmlvcml0eU9yZGVyXS5yZXZlcnNlKCk7XG5jb25zdCBudW1BbmltYXRpb25UeXBlcyA9IHZhcmlhbnRQcmlvcml0eU9yZGVyLmxlbmd0aDtcbmZ1bmN0aW9uIGFuaW1hdGVMaXN0KHZpc3VhbEVsZW1lbnQpIHtcbiAgICByZXR1cm4gKGFuaW1hdGlvbnMpID0+IFByb21pc2UuYWxsKGFuaW1hdGlvbnMubWFwKCh7IGFuaW1hdGlvbiwgb3B0aW9ucyB9KSA9PiBhbmltYXRlVmlzdWFsRWxlbWVudCh2aXN1YWxFbGVtZW50LCBhbmltYXRpb24sIG9wdGlvbnMpKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVBbmltYXRpb25TdGF0ZSh2aXN1YWxFbGVtZW50KSB7XG4gICAgbGV0IGFuaW1hdGUgPSBhbmltYXRlTGlzdCh2aXN1YWxFbGVtZW50KTtcbiAgICBjb25zdCBzdGF0ZSA9IGNyZWF0ZVN0YXRlKCk7XG4gICAgbGV0IGlzSW5pdGlhbFJlbmRlciA9IHRydWU7XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHVzZWQgdG8gcmVkdWNlIHRoZSBhbmltYXRpb24gZGVmaW5pdGlvbnMgZm9yXG4gICAgICogZWFjaCBhY3RpdmUgYW5pbWF0aW9uIHR5cGUgaW50byBhbiBvYmplY3Qgb2YgcmVzb2x2ZWQgdmFsdWVzIGZvciBpdC5cbiAgICAgKi9cbiAgICBjb25zdCBidWlsZFJlc29sdmVkVHlwZVZhbHVlcyA9IChhY2MsIGRlZmluaXRpb24pID0+IHtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICAgICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICAgICAgICBjb25zdCB7IHRyYW5zaXRpb24sIHRyYW5zaXRpb25FbmQsIC4uLnRhcmdldCB9ID0gcmVzb2x2ZWQ7XG4gICAgICAgICAgICBhY2MgPSB7IC4uLmFjYywgLi4udGFyZ2V0LCAuLi50cmFuc2l0aW9uRW5kIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMganVzdCBhbGxvd3MgdXMgdG8gaW5qZWN0IG1vY2tlZCBhbmltYXRpb24gZnVuY3Rpb25zXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0QW5pbWF0ZUZ1bmN0aW9uKG1ha2VBbmltYXRvcikge1xuICAgICAgICBhbmltYXRlID0gbWFrZUFuaW1hdG9yKHZpc3VhbEVsZW1lbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIHdlIHJlY2VpdmUgbmV3IHByb3BzLCB3ZSBuZWVkIHRvOlxuICAgICAqIDEuIENyZWF0ZSBhIGxpc3Qgb2YgcHJvdGVjdGVkIGtleXMgZm9yIGVhY2ggdHlwZS4gVGhpcyBpcyBhIGRpcmVjdG9yeSBvZlxuICAgICAqICAgIHZhbHVlIGtleXMgdGhhdCBhcmUgY3VycmVudGx5IGJlaW5nIFwiaGFuZGxlZFwiIGJ5IHR5cGVzIG9mIGEgaGlnaGVyIHByaW9yaXR5XG4gICAgICogICAgc28gdGhhdCB3aGVuZXZlciBhbiBhbmltYXRpb24gaXMgcGxheWVkIG9mIGEgZ2l2ZW4gdHlwZSwgdGhlc2UgdmFsdWVzIGFyZVxuICAgICAqICAgIHByb3RlY3RlZCBmcm9tIGJlaW5nIGFuaW1hdGVkLlxuICAgICAqIDIuIERldGVybWluZSBpZiBhbiBhbmltYXRpb24gdHlwZSBuZWVkcyBhbmltYXRpbmcuXG4gICAgICogMy4gRGV0ZXJtaW5lIGlmIGFueSB2YWx1ZXMgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSBhIHR5cGUgYW5kIGZpZ3VyZSBvdXRcbiAgICAgKiAgICB3aGF0IHRvIGFuaW1hdGUgdGhvc2UgdG8uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYW5pbWF0ZUNoYW5nZXMob3B0aW9ucywgY2hhbmdlZEFjdGl2ZVR5cGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBwcm9wcyA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFyaWFudENvbnRleHQodHJ1ZSkgfHwge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxpc3Qgb2YgYW5pbWF0aW9ucyB0aGF0IHdlJ2xsIGJ1aWxkIGludG8gYXMgd2UgaXRlcmF0ZSB0aHJvdWdoIHRoZSBhbmltYXRpb25cbiAgICAgICAgICogdHlwZXMuIFRoaXMgd2lsbCBnZXQgZXhlY3V0ZWQgYXQgdGhlIGVuZCBvZiB0aGUgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLZWVwIHRyYWNrIG9mIHdoaWNoIHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZC4gVGhlbiwgYXMgd2UgaGl0IGxvd2VyIHByaW9yaXR5XG4gICAgICAgICAqIGFuaW1hdGlvbiB0eXBlcywgd2UgY2FuIGNoZWNrIGlmIHRoZXkgY29udGFpbiByZW1vdmVkIHZhbHVlcyBhbmQgYW5pbWF0ZSB0byB0aGF0LlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgcmVtb3ZlZEtleXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRpY3Rpb25hcnkgb2YgYWxsIGVuY291bnRlcmVkIGtleXMuIFRoaXMgaXMgYW4gb2JqZWN0IHRvIGxldCB1cyBidWlsZCBpbnRvIGFuZFxuICAgICAgICAgKiBjb3B5IGl0IHdpdGhvdXQgaXRlcmF0aW9uLiBFYWNoIHRpbWUgd2UgaGl0IGFuIGFuaW1hdGlvbiB0eXBlIHdlIHNldCBpdHMgcHJvdGVjdGVkXG4gICAgICAgICAqIGtleXMgLSB0aGUga2V5cyBpdHMgbm90IGFsbG93ZWQgdG8gYW5pbWF0ZSAtIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiB0aGlzIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGxldCBlbmNvdW50ZXJlZEtleXMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGEgdmFyaWFudCBoYXMgYmVlbiByZW1vdmVkIGF0IGEgZ2l2ZW4gaW5kZXgsIGFuZCB0aGlzIGNvbXBvbmVudCBpcyBjb250cm9sbGluZ1xuICAgICAgICAgKiB2YXJpYW50IGFuaW1hdGlvbnMsIHdlIHdhbnQgdG8gZW5zdXJlIGxvd2VyLXByaW9yaXR5IHZhcmlhbnRzIGFyZSBmb3JjZWQgdG8gYW5pbWF0ZS5cbiAgICAgICAgICovXG4gICAgICAgIGxldCByZW1vdmVkVmFyaWFudEluZGV4ID0gSW5maW5pdHk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJdGVyYXRlIHRocm91Z2ggYWxsIGFuaW1hdGlvbiB0eXBlcyBpbiByZXZlcnNlIHByaW9yaXR5IG9yZGVyLiBGb3IgZWFjaCwgd2Ugd2FudCB0b1xuICAgICAgICAgKiBkZXRlY3Qgd2hpY2ggdmFsdWVzIGl0J3MgaGFuZGxpbmcgYW5kIHdoZXRoZXIgb3Igbm90IHRoZXkndmUgY2hhbmdlZCAoYW5kIHRoZXJlZm9yZVxuICAgICAgICAgKiBuZWVkIHRvIGJlIGFuaW1hdGVkKS4gSWYgYW55IHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZCwgd2Ugd2FudCB0byBkZXRlY3QgdGhvc2UgaW5cbiAgICAgICAgICogbG93ZXIgcHJpb3JpdHkgcHJvcHMgYW5kIGZsYWcgZm9yIGFuaW1hdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQW5pbWF0aW9uVHlwZXM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHJldmVyc2VQcmlvcml0eU9yZGVyW2ldO1xuICAgICAgICAgICAgY29uc3QgdHlwZVN0YXRlID0gc3RhdGVbdHlwZV07XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gKF9hID0gcHJvcHNbdHlwZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGNvbnRleHRbdHlwZV07XG4gICAgICAgICAgICBjb25zdCBwcm9wSXNWYXJpYW50ID0gaXNWYXJpYW50TGFiZWwocHJvcCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgdHlwZSBoYXMgKmp1c3QqIGNoYW5nZWQgaXNBY3RpdmUgc3RhdHVzLCBzZXQgYWN0aXZlRGVsdGFcbiAgICAgICAgICAgICAqIHRvIHRoYXQgc3RhdHVzLiBPdGhlcndpc2Ugc2V0IHRvIG51bGwuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZURlbHRhID0gdHlwZSA9PT0gY2hhbmdlZEFjdGl2ZVR5cGUgPyB0eXBlU3RhdGUuaXNBY3RpdmUgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZURlbHRhID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZW1vdmVkVmFyaWFudEluZGV4ID0gaTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBwcm9wIGlzIGFuIGluaGVyaXRlZCB2YXJpYW50LCByYXRoZXIgdGhhbiBiZWVuIHNldCBkaXJlY3RseSBvbiB0aGVcbiAgICAgICAgICAgICAqIGNvbXBvbmVudCBpdHNlbGYsIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFsbG93IHRoZSBwYXJlbnQgdG8gdHJpZ2dlciBhbmltYXRpb25zLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRPRE86IENhbiBwcm9iYWJseSBjaGFuZ2UgdGhpcyB0byBhICFpc0NvbnRyb2xsaW5nVmFyaWFudHMgY2hlY2tcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IGlzSW5oZXJpdGVkID0gcHJvcCA9PT0gY29udGV4dFt0eXBlXSAmJiBwcm9wICE9PSBwcm9wc1t0eXBlXSAmJiBwcm9wSXNWYXJpYW50O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoaXNJbmhlcml0ZWQgJiZcbiAgICAgICAgICAgICAgICBpc0luaXRpYWxSZW5kZXIgJiZcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50Lm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQpIHtcbiAgICAgICAgICAgICAgICBpc0luaGVyaXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgYWxsIGVuY291bnRlcmVkIGtleXMgc28gZmFyIGFzIHRoZSBwcm90ZWN0ZWQga2V5cyBmb3IgdGhpcyB0eXBlLiBUaGlzIHdpbGxcbiAgICAgICAgICAgICAqIGJlIGFueSBrZXkgdGhhdCBoYXMgYmVlbiBhbmltYXRlZCBvciBvdGhlcndpc2UgaGFuZGxlZCBieSBhY3RpdmUsIGhpZ2hlci1wcmlvcnRpeSB0eXBlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdHlwZVN0YXRlLnByb3RlY3RlZEtleXMgPSB7IC4uLmVuY291bnRlcmVkS2V5cyB9O1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgY2FuIHNraXAgYW5hbHlzaW5nIHRoaXMgcHJvcCBlYXJseVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gSWYgaXQgaXNuJ3QgYWN0aXZlIGFuZCBoYXNuJ3QgKmp1c3QqIGJlZW4gc2V0IGFzIGluYWN0aXZlXG4gICAgICAgICAgICAoIXR5cGVTdGF0ZS5pc0FjdGl2ZSAmJiBhY3RpdmVEZWx0YSA9PT0gbnVsbCkgfHxcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBkaWRuJ3QgYW5kIGRvbid0IGhhdmUgYW55IGRlZmluZWQgcHJvcCBmb3IgdGhpcyBhbmltYXRpb24gdHlwZVxuICAgICAgICAgICAgICAgICghcHJvcCAmJiAhdHlwZVN0YXRlLnByZXZQcm9wKSB8fFxuICAgICAgICAgICAgICAgIC8vIE9yIGlmIHRoZSBwcm9wIGRvZXNuJ3QgZGVmaW5lIGFuIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgIGlzQW5pbWF0aW9uQ29udHJvbHMocHJvcCkgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgcHJvcCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXMgd2UgZ28gbG9vayB0aHJvdWdoIHRoZSB2YWx1ZXMgZGVmaW5lZCBvbiB0aGlzIHR5cGUsIGlmIHdlIGRldGVjdFxuICAgICAgICAgICAgICogYSBjaGFuZ2VkIHZhbHVlIG9yIGEgdmFsdWUgdGhhdCB3YXMgcmVtb3ZlZCBpbiBhIGhpZ2hlciBwcmlvcml0eSwgd2Ugc2V0XG4gICAgICAgICAgICAgKiB0aGlzIHRvIHRydWUgYW5kIGFkZCB0aGlzIHByb3AgdG8gdGhlIGFuaW1hdGlvbiBsaXN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCB2YXJpYW50RGlkQ2hhbmdlID0gY2hlY2tWYXJpYW50c0RpZENoYW5nZSh0eXBlU3RhdGUucHJldlByb3AsIHByb3ApO1xuICAgICAgICAgICAgbGV0IHNob3VsZEFuaW1hdGVUeXBlID0gdmFyaWFudERpZENoYW5nZSB8fFxuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3JlIG1ha2luZyB0aGlzIHZhcmlhbnQgYWN0aXZlLCB3ZSB3YW50IHRvIGFsd2F5cyBtYWtlIGl0IGFjdGl2ZVxuICAgICAgICAgICAgICAgICh0eXBlID09PSBjaGFuZ2VkQWN0aXZlVHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlU3RhdGUuaXNBY3RpdmUgJiZcbiAgICAgICAgICAgICAgICAgICAgIWlzSW5oZXJpdGVkICYmXG4gICAgICAgICAgICAgICAgICAgIHByb3BJc1ZhcmlhbnQpIHx8XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVtb3ZlZCBhIGhpZ2hlci1wcmlvcml0eSB2YXJpYW50IChpIGlzIGluIHJldmVyc2Ugb3JkZXIpXG4gICAgICAgICAgICAgICAgKGkgPiByZW1vdmVkVmFyaWFudEluZGV4ICYmIHByb3BJc1ZhcmlhbnQpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBcyBhbmltYXRpb25zIGNhbiBiZSBzZXQgYXMgdmFyaWFudCBsaXN0cywgdmFyaWFudHMgb3IgdGFyZ2V0IG9iamVjdHMsIHdlXG4gICAgICAgICAgICAgKiBjb2VyY2UgZXZlcnl0aGluZyB0byBhbiBhcnJheSBpZiBpdCBpc24ndCBvbmUgYWxyZWFkeVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBkZWZpbml0aW9uTGlzdCA9IEFycmF5LmlzQXJyYXkocHJvcCkgPyBwcm9wIDogW3Byb3BdO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBCdWlsZCBhbiBvYmplY3Qgb2YgYWxsIHRoZSByZXNvbHZlZCB2YWx1ZXMuIFdlJ2xsIHVzZSB0aGlzIGluIHRoZSBzdWJzZXF1ZW50XG4gICAgICAgICAgICAgKiBhbmltYXRlQ2hhbmdlcyBjYWxscyB0byBkZXRlcm1pbmUgd2hldGhlciBhIHZhbHVlIGhhcyBjaGFuZ2VkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgcmVzb2x2ZWRWYWx1ZXMgPSBkZWZpbml0aW9uTGlzdC5yZWR1Y2UoYnVpbGRSZXNvbHZlZFR5cGVWYWx1ZXMsIHt9KTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVEZWx0YSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRWYWx1ZXMgPSB7fTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTm93IHdlIG5lZWQgdG8gbG9vcCB0aHJvdWdoIGFsbCB0aGUga2V5cyBpbiB0aGUgcHJldiBwcm9wIGFuZCB0aGlzIHByb3AsXG4gICAgICAgICAgICAgKiBhbmQgZGVjaWRlOlxuICAgICAgICAgICAgICogMS4gSWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLCBhbmQgbmVlZHMgYW5pbWF0aW5nXG4gICAgICAgICAgICAgKiAyLiBJZiBpdCBoYXMgYmVlbiByZW1vdmVkLCBhbmQgbmVlZHMgYWRkaW5nIHRvIHRoZSByZW1vdmVkS2V5cyBzZXRcbiAgICAgICAgICAgICAqIDMuIElmIGl0IGhhcyBiZWVuIHJlbW92ZWQgaW4gYSBoaWdoZXIgcHJpb3JpdHkgdHlwZSBhbmQgbmVlZHMgYW5pbWF0aW5nXG4gICAgICAgICAgICAgKiA0LiBJZiBpdCBoYXNuJ3QgYmVlbiByZW1vdmVkIGluIGEgaGlnaGVyIHByaW9yaXR5IGJ1dCBoYXNuJ3QgY2hhbmdlZCwgYW5kXG4gICAgICAgICAgICAgKiAgICBuZWVkcyBhZGRpbmcgdG8gdGhlIHR5cGUncyBwcm90ZWN0ZWRLZXlzIGxpc3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHsgcHJldlJlc29sdmVkVmFsdWVzID0ge30gfSA9IHR5cGVTdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IGFsbEtleXMgPSB7XG4gICAgICAgICAgICAgICAgLi4ucHJldlJlc29sdmVkVmFsdWVzLFxuICAgICAgICAgICAgICAgIC4uLnJlc29sdmVkVmFsdWVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IG1hcmtUb0FuaW1hdGUgPSAoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgc2hvdWxkQW5pbWF0ZVR5cGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlbW92ZWRLZXlzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIHR5cGVTdGF0ZS5uZWVkc0FuaW1hdGluZ1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHJlc29sdmVkVmFsdWVzW2tleV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IHByZXZSZXNvbHZlZFZhbHVlc1trZXldO1xuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGlzIHdlIGNhbiBqdXN0IHNraXAgYWhlYWRcbiAgICAgICAgICAgICAgICBpZiAoZW5jb3VudGVyZWRLZXlzLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCwgd2UgcHJvYmFibHkgd2FudCB0byBhbmltYXRlIGl0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2KSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBJZiBib3RoIHZhbHVlcyBhcmUga2V5ZnJhbWVzLCB3ZSBuZWVkIHRvIHNoYWxsb3cgY29tcGFyZSB0aGVtIHRvXG4gICAgICAgICAgICAgICAgICAgICAqIGRldGVjdCB3aGV0aGVyIGFueSB2YWx1ZSBoYXMgY2hhbmdlZC4gSWYgaXQgaGFzLCB3ZSBhbmltYXRlIGl0LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzS2V5ZnJhbWVzVGFyZ2V0KG5leHQpICYmIGlzS2V5ZnJhbWVzVGFyZ2V0KHByZXYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNoYWxsb3dDb21wYXJlKG5leHQsIHByZXYpIHx8IHZhcmlhbnREaWRDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrVG9BbmltYXRlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBJZiBpdCBoYXNuJ3QgY2hhbmdlZCwgd2Ugd2FudCB0byBlbnN1cmUgaXQgZG9lc24ndCBhbmltYXRlIGJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogYWRkaW5nIGl0IHRvIHRoZSBsaXN0IG9mIHByb3RlY3RlZCBrZXlzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVTdGF0ZS5wcm90ZWN0ZWRLZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgbmV4dCBpcyBkZWZpbmVkIGFuZCBkb2Vzbid0IGVxdWFsIHByZXYsIGl0IG5lZWRzIGFuaW1hdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya1RvQW5pbWF0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQncyB1bmRlZmluZWQsIGl0J3MgYmVlbiByZW1vdmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZEtleXMuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobmV4dCAhPT0gdW5kZWZpbmVkICYmIHJlbW92ZWRLZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBJZiBuZXh0IGhhc24ndCBjaGFuZ2VkIGFuZCBpdCBpc24ndCB1bmRlZmluZWQsIHdlIHdhbnQgdG8gY2hlY2sgaWYgaXQnc1xuICAgICAgICAgICAgICAgICAgICAgKiBiZWVuIHJlbW92ZWQgYnkgYSBoaWdoZXIgcHJpb3JpdHlcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIG1hcmtUb0FuaW1hdGUoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBJZiBpdCBoYXNuJ3QgY2hhbmdlZCwgd2UgYWRkIGl0IHRvIHRoZSBsaXN0IG9mIHByb3RlY3RlZCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICogdG8gZW5zdXJlIGl0IGRvZXNuJ3QgZ2V0IGFuaW1hdGVkLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgdHlwZVN0YXRlLnByb3RlY3RlZEtleXNba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVcGRhdGUgdGhlIHR5cGVTdGF0ZSBzbyBuZXh0IHRpbWUgYW5pbWF0ZUNoYW5nZXMgaXMgY2FsbGVkIHdlIGNhbiBjb21wYXJlIHRoZVxuICAgICAgICAgICAgICogbGF0ZXN0IHByb3AgYW5kIHJlc29sdmVkVmFsdWVzIHRvIHRoZXNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0eXBlU3RhdGUucHJldlByb3AgPSBwcm9wO1xuICAgICAgICAgICAgdHlwZVN0YXRlLnByZXZSZXNvbHZlZFZhbHVlcyA9IHJlc29sdmVkVmFsdWVzO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodHlwZVN0YXRlLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgZW5jb3VudGVyZWRLZXlzID0geyAuLi5lbmNvdW50ZXJlZEtleXMsIC4uLnJlc29sdmVkVmFsdWVzIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNJbml0aWFsUmVuZGVyICYmIHZpc3VhbEVsZW1lbnQuYmxvY2tJbml0aWFsQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkQW5pbWF0ZVR5cGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhbiBpbmhlcml0ZWQgcHJvcCB3ZSB3YW50IHRvIGhhcmQtYmxvY2sgYW5pbWF0aW9uc1xuICAgICAgICAgICAgICogVE9ETzogVGVzdCBhcyB0aGlzIHNob3VsZCBwcm9iYWJseSBzdGlsbCBoYW5kbGUgYW5pbWF0aW9ucyB0cmlnZ2VyZWRcbiAgICAgICAgICAgICAqIGJ5IHJlbW92ZWQgdmFsdWVzP1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoc2hvdWxkQW5pbWF0ZVR5cGUgJiYgIWlzSW5oZXJpdGVkKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKC4uLmRlZmluaXRpb25MaXN0Lm1hcCgoYW5pbWF0aW9uKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246IGFuaW1hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogeyB0eXBlLCAuLi5vcHRpb25zIH0sXG4gICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlcmUgYXJlIHNvbWUgcmVtb3ZlZCB2YWx1ZSB0aGF0IGhhdmVuJ3QgYmVlbiBkZWFsdCB3aXRoLFxuICAgICAgICAgKiB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBhbmltYXRpb24gdGhhdCBmYWxscyBiYWNrIGVpdGhlciB0byB0aGUgdmFsdWVcbiAgICAgICAgICogZGVmaW5lZCBpbiB0aGUgc3R5bGUgcHJvcCwgb3IgdGhlIGxhc3QgcmVhZCB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChyZW1vdmVkS2V5cy5zaXplKSB7XG4gICAgICAgICAgICBjb25zdCBmYWxsYmFja0FuaW1hdGlvbiA9IHt9O1xuICAgICAgICAgICAgcmVtb3ZlZEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tUYXJnZXQgPSB2aXN1YWxFbGVtZW50LmdldEJhc2VUYXJnZXQoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoZmFsbGJhY2tUYXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmYWxsYmFja0FuaW1hdGlvbltrZXldID0gZmFsbGJhY2tUYXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbmltYXRpb25zLnB1c2goeyBhbmltYXRpb246IGZhbGxiYWNrQW5pbWF0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzaG91bGRBbmltYXRlID0gQm9vbGVhbihhbmltYXRpb25zLmxlbmd0aCk7XG4gICAgICAgIGlmIChpc0luaXRpYWxSZW5kZXIgJiZcbiAgICAgICAgICAgIHByb3BzLmluaXRpYWwgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAhdmlzdWFsRWxlbWVudC5tYW51YWxseUFuaW1hdGVPbk1vdW50KSB7XG4gICAgICAgICAgICBzaG91bGRBbmltYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaXNJbml0aWFsUmVuZGVyID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBzaG91bGRBbmltYXRlID8gYW5pbWF0ZShhbmltYXRpb25zKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2Ugd2hldGhlciBhIGNlcnRhaW4gYW5pbWF0aW9uIHR5cGUgaXMgYWN0aXZlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldEFjdGl2ZSh0eXBlLCBpc0FjdGl2ZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIElmIHRoZSBhY3RpdmUgc3RhdGUgaGFzbid0IGNoYW5nZWQsIHdlIGNhbiBzYWZlbHkgZG8gbm90aGluZyBoZXJlXG4gICAgICAgIGlmIChzdGF0ZVt0eXBlXS5pc0FjdGl2ZSA9PT0gaXNBY3RpdmUpXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIC8vIFByb3BhZ2F0ZSBhY3RpdmUgY2hhbmdlIHRvIGNoaWxkcmVuXG4gICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQudmFyaWFudENoaWxkcmVuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9yRWFjaCgoY2hpbGQpID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gY2hpbGQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUodHlwZSwgaXNBY3RpdmUpOyB9KTtcbiAgICAgICAgc3RhdGVbdHlwZV0uaXNBY3RpdmUgPSBpc0FjdGl2ZTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IGFuaW1hdGVDaGFuZ2VzKG9wdGlvbnMsIHR5cGUpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzdGF0ZSkge1xuICAgICAgICAgICAgc3RhdGVba2V5XS5wcm90ZWN0ZWRLZXlzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFuaW1hdGVDaGFuZ2VzLFxuICAgICAgICBzZXRBY3RpdmUsXG4gICAgICAgIHNldEFuaW1hdGVGdW5jdGlvbixcbiAgICAgICAgZ2V0U3RhdGU6ICgpID0+IHN0YXRlLFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja1ZhcmlhbnRzRGlkQ2hhbmdlKHByZXYsIG5leHQpIHtcbiAgICBpZiAodHlwZW9mIG5leHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQgIT09IHByZXY7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobmV4dCkpIHtcbiAgICAgICAgcmV0dXJuICFzaGFsbG93Q29tcGFyZShuZXh0LCBwcmV2KTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY3JlYXRlVHlwZVN0YXRlKGlzQWN0aXZlID0gZmFsc2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpc0FjdGl2ZSxcbiAgICAgICAgcHJvdGVjdGVkS2V5czoge30sXG4gICAgICAgIG5lZWRzQW5pbWF0aW5nOiB7fSxcbiAgICAgICAgcHJldlJlc29sdmVkVmFsdWVzOiB7fSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgW0FuaW1hdGlvblR5cGUuQW5pbWF0ZV06IGNyZWF0ZVR5cGVTdGF0ZSh0cnVlKSxcbiAgICAgICAgW0FuaW1hdGlvblR5cGUuSW5WaWV3XTogY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIFtBbmltYXRpb25UeXBlLkhvdmVyXTogY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIFtBbmltYXRpb25UeXBlLlRhcF06IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICBbQW5pbWF0aW9uVHlwZS5EcmFnXTogY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIFtBbmltYXRpb25UeXBlLkZvY3VzXTogY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIFtBbmltYXRpb25UeXBlLkV4aXRdOiBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjaGVja1ZhcmlhbnRzRGlkQ2hhbmdlLCBjcmVhdGVBbmltYXRpb25TdGF0ZSwgdmFyaWFudFByaW9yaXR5T3JkZXIgfTtcbiIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzQW5pbWF0aW9uQ29udHJvbHMgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0aW9uLWNvbnRyb2xzLm1qcyc7XG5pbXBvcnQgeyB1c2VQcmVzZW5jZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL3VzZS1wcmVzZW5jZS5tanMnO1xuaW1wb3J0IHsgUHJlc2VuY2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzJztcbmltcG9ydCB7IGNyZWF0ZUFuaW1hdGlvblN0YXRlIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL2FuaW1hdGlvbi1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uVHlwZSB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy90eXBlcy5tanMnO1xuaW1wb3J0IHsgbWFrZVJlbmRlcmxlc3NDb21wb25lbnQgfSBmcm9tICcuLi91dGlscy9tYWtlLXJlbmRlcmxlc3MtY29tcG9uZW50Lm1qcyc7XG5cbmNvbnN0IGFuaW1hdGlvbnMgPSB7XG4gICAgYW5pbWF0aW9uOiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCgoeyB2aXN1YWxFbGVtZW50LCBhbmltYXRlIH0pID0+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIGR5bmFtaWNhbGx5IGdlbmVyYXRlIHRoZSBBbmltYXRpb25TdGF0ZSBtYW5hZ2VyIGFzIGl0IGNvbnRhaW5zIGEgcmVmZXJlbmNlXG4gICAgICAgICAqIHRvIHRoZSB1bmRlcmx5aW5nIGFuaW1hdGlvbiBsaWJyYXJ5LiBXZSBvbmx5IHdhbnQgdG8gbG9hZCB0aGF0IGlmIHdlIGxvYWQgdGhpcyxcbiAgICAgICAgICogc28gcGVvcGxlIGNhbiBvcHRpb25hbGx5IGNvZGUgc3BsaXQgaXQgb3V0IHVzaW5nIHRoZSBgbWAgY29tcG9uZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSB8fCAodmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSA9IGNyZWF0ZUFuaW1hdGlvblN0YXRlKHZpc3VhbEVsZW1lbnQpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN1YnNjcmliZSBhbnkgcHJvdmlkZWQgQW5pbWF0aW9uQ29udHJvbHMgdG8gdGhlIGNvbXBvbmVudCdzIFZpc3VhbEVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGlmIChpc0FuaW1hdGlvbkNvbnRyb2xzKGFuaW1hdGUpKSB7XG4gICAgICAgICAgICB1c2VFZmZlY3QoKCkgPT4gYW5pbWF0ZS5zdWJzY3JpYmUodmlzdWFsRWxlbWVudCksIFthbmltYXRlXSk7XG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBleGl0OiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCgocHJvcHMpID0+IHtcbiAgICAgICAgY29uc3QgeyBjdXN0b20sIHZpc3VhbEVsZW1lbnQgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBbaXNQcmVzZW50LCBzYWZlVG9SZW1vdmVdID0gdXNlUHJlc2VuY2UoKTtcbiAgICAgICAgY29uc3QgcHJlc2VuY2VDb250ZXh0ID0gdXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5pc1ByZXNlbnQgPSBpc1ByZXNlbnQ7XG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb24gPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlICYmXG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5FeGl0LCAhaXNQcmVzZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbTogKHByZXNlbmNlQ29udGV4dCAmJiBwcmVzZW5jZUNvbnRleHQuY3VzdG9tKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbiAmJiAhaXNQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRoZW4oc2FmZVRvUmVtb3ZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgW2lzUHJlc2VudF0pO1xuICAgIH0pLFxufTtcblxuZXhwb3J0IHsgYW5pbWF0aW9ucyB9O1xuIiwiY29uc3QgaXNQb2ludCA9IChwb2ludCkgPT4gcG9pbnQuaGFzT3duUHJvcGVydHkoJ3gnKSAmJiBwb2ludC5oYXNPd25Qcm9wZXJ0eSgneScpO1xuXG5leHBvcnQgeyBpc1BvaW50IH07XG4iLCJpbXBvcnQgeyBpc1BvaW50IH0gZnJvbSAnLi9pcy1wb2ludC5tanMnO1xuXG5jb25zdCBpc1BvaW50M0QgPSAocG9pbnQpID0+IGlzUG9pbnQocG9pbnQpICYmIHBvaW50Lmhhc093blByb3BlcnR5KCd6Jyk7XG5cbmV4cG9ydCB7IGlzUG9pbnQzRCB9O1xuIiwiaW1wb3J0IHsgaXNQb2ludCB9IGZyb20gJy4vaXMtcG9pbnQubWpzJztcbmltcG9ydCB7IGlzUG9pbnQzRCB9IGZyb20gJy4vaXMtcG9pbnQtM2QubWpzJztcbmltcG9ydCB7IGlzTnVtIH0gZnJvbSAnLi9pbmMubWpzJztcblxuY29uc3QgZGlzdGFuY2UxRCA9IChhLCBiKSA9PiBNYXRoLmFicyhhIC0gYik7XG5mdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gICAgaWYgKGlzTnVtKGEpICYmIGlzTnVtKGIpKSB7XG4gICAgICAgIHJldHVybiBkaXN0YW5jZTFEKGEsIGIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1BvaW50KGEpICYmIGlzUG9pbnQoYikpIHtcbiAgICAgICAgY29uc3QgeERlbHRhID0gZGlzdGFuY2UxRChhLngsIGIueCk7XG4gICAgICAgIGNvbnN0IHlEZWx0YSA9IGRpc3RhbmNlMUQoYS55LCBiLnkpO1xuICAgICAgICBjb25zdCB6RGVsdGEgPSBpc1BvaW50M0QoYSkgJiYgaXNQb2ludDNEKGIpID8gZGlzdGFuY2UxRChhLnosIGIueikgOiAwO1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHhEZWx0YSwgMikgKyBNYXRoLnBvdyh5RGVsdGEsIDIpICsgTWF0aC5wb3coekRlbHRhLCAyKSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBkaXN0YW5jZSB9O1xuIiwiaW1wb3J0IHsgaXNNb3VzZUV2ZW50LCBpc1RvdWNoRXZlbnQgfSBmcm9tICcuL3V0aWxzL2V2ZW50LXR5cGUubWpzJztcbmltcG9ydCB7IGV4dHJhY3RFdmVudEluZm8gfSBmcm9tICcuLi9ldmVudHMvZXZlbnQtaW5mby5tanMnO1xuaW1wb3J0IHN5bmMsIHsgZ2V0RnJhbWVEYXRhLCBjYW5jZWxTeW5jIH0gZnJvbSAnZnJhbWVzeW5jJztcbmltcG9ydCB7IHNlY29uZHNUb01pbGxpc2Vjb25kcyB9IGZyb20gJy4uL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgYWRkUG9pbnRlckV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzL3VzZS1wb2ludGVyLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBkaXN0YW5jZSwgcGlwZSB9IGZyb20gJ3BvcG1vdGlvbic7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFBhblNlc3Npb24ge1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50LCBoYW5kbGVycywgeyB0cmFuc2Zvcm1QYWdlUG9pbnQgfSA9IHt9KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhcnRFdmVudCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGFzdE1vdmVFdmVudCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGFzdE1vdmVFdmVudEluZm8gPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0ge307XG4gICAgICAgIHRoaXMudXBkYXRlUG9pbnQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoISh0aGlzLmxhc3RNb3ZlRXZlbnQgJiYgdGhpcy5sYXN0TW92ZUV2ZW50SW5mbykpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGdldFBhbkluZm8odGhpcy5sYXN0TW92ZUV2ZW50SW5mbywgdGhpcy5oaXN0b3J5KTtcbiAgICAgICAgICAgIGNvbnN0IGlzUGFuU3RhcnRlZCA9IHRoaXMuc3RhcnRFdmVudCAhPT0gbnVsbDtcbiAgICAgICAgICAgIC8vIE9ubHkgc3RhcnQgcGFubmluZyBpZiB0aGUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIDMgcGl4ZWxzLiBJZiB3ZSBtYWtlIGl0XG4gICAgICAgICAgICAvLyBhbnkgbGFyZ2VyIHRoYW4gdGhpcyB3ZSdsbCB3YW50IHRvIHJlc2V0IHRoZSBwb2ludGVyIGhpc3RvcnlcbiAgICAgICAgICAgIC8vIG9uIHRoZSBmaXJzdCB1cGRhdGUgdG8gYXZvaWQgdmlzdWFsIHNuYXBwaW5nIHRvIHRoZSBjdXJzb2UuXG4gICAgICAgICAgICBjb25zdCBpc0Rpc3RhbmNlUGFzdFRocmVzaG9sZCA9IGRpc3RhbmNlKGluZm8ub2Zmc2V0LCB7IHg6IDAsIHk6IDAgfSkgPj0gMztcbiAgICAgICAgICAgIGlmICghaXNQYW5TdGFydGVkICYmICFpc0Rpc3RhbmNlUGFzdFRocmVzaG9sZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7IHBvaW50IH0gPSBpbmZvO1xuICAgICAgICAgICAgY29uc3QgeyB0aW1lc3RhbXAgfSA9IGdldEZyYW1lRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goeyAuLi5wb2ludCwgdGltZXN0YW1wIH0pO1xuICAgICAgICAgICAgY29uc3QgeyBvblN0YXJ0LCBvbk1vdmUgfSA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgICAgICBpZiAoIWlzUGFuU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIG9uU3RhcnQgJiYgb25TdGFydCh0aGlzLmxhc3RNb3ZlRXZlbnQsIGluZm8pO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRFdmVudCA9IHRoaXMubGFzdE1vdmVFdmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uTW92ZSAmJiBvbk1vdmUodGhpcy5sYXN0TW92ZUV2ZW50LCBpbmZvKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSA9IChldmVudCwgaW5mbykgPT4ge1xuICAgICAgICAgICAgdGhpcy5sYXN0TW92ZUV2ZW50ID0gZXZlbnQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RNb3ZlRXZlbnRJbmZvID0gdHJhbnNmb3JtUG9pbnQoaW5mbywgdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQpO1xuICAgICAgICAgICAgLy8gQmVjYXVzZSBTYWZhcmkgZG9lc24ndCB0cmlnZ2VyIG1vdXNldXAgZXZlbnRzIHdoZW4gaXQncyBhYm92ZSBhIGA8c2VsZWN0PmBcbiAgICAgICAgICAgIGlmIChpc01vdXNlRXZlbnQoZXZlbnQpICYmIGV2ZW50LmJ1dHRvbnMgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJVcChldmVudCwgaW5mbyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhyb3R0bGUgbW91c2UgbW92ZSBldmVudCB0byBvbmNlIHBlciBmcmFtZVxuICAgICAgICAgICAgc3luYy51cGRhdGUodGhpcy51cGRhdGVQb2ludCwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlclVwID0gKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVuZCgpO1xuICAgICAgICAgICAgY29uc3QgeyBvbkVuZCwgb25TZXNzaW9uRW5kIH0gPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICAgICAgY29uc3QgcGFuSW5mbyA9IGdldFBhbkluZm8odHJhbnNmb3JtUG9pbnQoaW5mbywgdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQpLCB0aGlzLmhpc3RvcnkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRFdmVudCAmJiBvbkVuZCkge1xuICAgICAgICAgICAgICAgIG9uRW5kKGV2ZW50LCBwYW5JbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uU2Vzc2lvbkVuZCAmJiBvblNlc3Npb25FbmQoZXZlbnQsIHBhbkluZm8pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIG1vcmUgdGhhbiBvbmUgdG91Y2gsIGRvbid0IHN0YXJ0IGRldGVjdGluZyB0aGlzIGdlc3R1cmVcbiAgICAgICAgaWYgKGlzVG91Y2hFdmVudChldmVudCkgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtUGFnZVBvaW50ID0gdHJhbnNmb3JtUGFnZVBvaW50O1xuICAgICAgICBjb25zdCBpbmZvID0gZXh0cmFjdEV2ZW50SW5mbyhldmVudCk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxJbmZvID0gdHJhbnNmb3JtUG9pbnQoaW5mbywgdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQpO1xuICAgICAgICBjb25zdCB7IHBvaW50IH0gPSBpbml0aWFsSW5mbztcbiAgICAgICAgY29uc3QgeyB0aW1lc3RhbXAgfSA9IGdldEZyYW1lRGF0YSgpO1xuICAgICAgICB0aGlzLmhpc3RvcnkgPSBbeyAuLi5wb2ludCwgdGltZXN0YW1wIH1dO1xuICAgICAgICBjb25zdCB7IG9uU2Vzc2lvblN0YXJ0IH0gPSBoYW5kbGVycztcbiAgICAgICAgb25TZXNzaW9uU3RhcnQgJiZcbiAgICAgICAgICAgIG9uU2Vzc2lvblN0YXJ0KGV2ZW50LCBnZXRQYW5JbmZvKGluaXRpYWxJbmZvLCB0aGlzLmhpc3RvcnkpKTtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMgPSBwaXBlKGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcm1vdmVcIiwgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSksIGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcnVwXCIsIHRoaXMuaGFuZGxlUG9pbnRlclVwKSwgYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVyY2FuY2VsXCIsIHRoaXMuaGFuZGxlUG9pbnRlclVwKSk7XG4gICAgfVxuICAgIHVwZGF0ZUhhbmRsZXJzKGhhbmRsZXJzKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSBoYW5kbGVycztcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycyAmJiB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICBjYW5jZWxTeW5jLnVwZGF0ZSh0aGlzLnVwZGF0ZVBvaW50KTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludChpbmZvLCB0cmFuc2Zvcm1QYWdlUG9pbnQpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUGFnZVBvaW50ID8geyBwb2ludDogdHJhbnNmb3JtUGFnZVBvaW50KGluZm8ucG9pbnQpIH0gOiBpbmZvO1xufVxuZnVuY3Rpb24gc3VidHJhY3RQb2ludChhLCBiKSB7XG4gICAgcmV0dXJuIHsgeDogYS54IC0gYi54LCB5OiBhLnkgLSBiLnkgfTtcbn1cbmZ1bmN0aW9uIGdldFBhbkluZm8oeyBwb2ludCB9LCBoaXN0b3J5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQsXG4gICAgICAgIGRlbHRhOiBzdWJ0cmFjdFBvaW50KHBvaW50LCBsYXN0RGV2aWNlUG9pbnQoaGlzdG9yeSkpLFxuICAgICAgICBvZmZzZXQ6IHN1YnRyYWN0UG9pbnQocG9pbnQsIHN0YXJ0RGV2aWNlUG9pbnQoaGlzdG9yeSkpLFxuICAgICAgICB2ZWxvY2l0eTogZ2V0VmVsb2NpdHkoaGlzdG9yeSwgMC4xKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gc3RhcnREZXZpY2VQb2ludChoaXN0b3J5KSB7XG4gICAgcmV0dXJuIGhpc3RvcnlbMF07XG59XG5mdW5jdGlvbiBsYXN0RGV2aWNlUG9pbnQoaGlzdG9yeSkge1xuICAgIHJldHVybiBoaXN0b3J5W2hpc3RvcnkubGVuZ3RoIC0gMV07XG59XG5mdW5jdGlvbiBnZXRWZWxvY2l0eShoaXN0b3J5LCB0aW1lRGVsdGEpIHtcbiAgICBpZiAoaGlzdG9yeS5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAgfTtcbiAgICB9XG4gICAgbGV0IGkgPSBoaXN0b3J5Lmxlbmd0aCAtIDE7XG4gICAgbGV0IHRpbWVzdGFtcGVkUG9pbnQgPSBudWxsO1xuICAgIGNvbnN0IGxhc3RQb2ludCA9IGxhc3REZXZpY2VQb2ludChoaXN0b3J5KTtcbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICAgIHRpbWVzdGFtcGVkUG9pbnQgPSBoaXN0b3J5W2ldO1xuICAgICAgICBpZiAobGFzdFBvaW50LnRpbWVzdGFtcCAtIHRpbWVzdGFtcGVkUG9pbnQudGltZXN0YW1wID5cbiAgICAgICAgICAgIHNlY29uZHNUb01pbGxpc2Vjb25kcyh0aW1lRGVsdGEpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpLS07XG4gICAgfVxuICAgIGlmICghdGltZXN0YW1wZWRQb2ludCkge1xuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgfVxuICAgIGNvbnN0IHRpbWUgPSAobGFzdFBvaW50LnRpbWVzdGFtcCAtIHRpbWVzdGFtcGVkUG9pbnQudGltZXN0YW1wKSAvIDEwMDA7XG4gICAgaWYgKHRpbWUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50VmVsb2NpdHkgPSB7XG4gICAgICAgIHg6IChsYXN0UG9pbnQueCAtIHRpbWVzdGFtcGVkUG9pbnQueCkgLyB0aW1lLFxuICAgICAgICB5OiAobGFzdFBvaW50LnkgLSB0aW1lc3RhbXBlZFBvaW50LnkpIC8gdGltZSxcbiAgICB9O1xuICAgIGlmIChjdXJyZW50VmVsb2NpdHkueCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgY3VycmVudFZlbG9jaXR5LnggPSAwO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFZlbG9jaXR5LnkgPT09IEluZmluaXR5KSB7XG4gICAgICAgIGN1cnJlbnRWZWxvY2l0eS55ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRWZWxvY2l0eTtcbn1cblxuZXhwb3J0IHsgUGFuU2Vzc2lvbiB9O1xuIiwiaW1wb3J0IHsgbWl4LCBkaXN0YW5jZSB9IGZyb20gJ3BvcG1vdGlvbic7XG5cbmZ1bmN0aW9uIGNhbGNMZW5ndGgoYXhpcykge1xuICAgIHJldHVybiBheGlzLm1heCAtIGF4aXMubWluO1xufVxuZnVuY3Rpb24gaXNOZWFyKHZhbHVlLCB0YXJnZXQgPSAwLCBtYXhEaXN0YW5jZSA9IDAuMDEpIHtcbiAgICByZXR1cm4gZGlzdGFuY2UodmFsdWUsIHRhcmdldCkgPCBtYXhEaXN0YW5jZTtcbn1cbmZ1bmN0aW9uIGNhbGNBeGlzRGVsdGEoZGVsdGEsIHNvdXJjZSwgdGFyZ2V0LCBvcmlnaW4gPSAwLjUpIHtcbiAgICBkZWx0YS5vcmlnaW4gPSBvcmlnaW47XG4gICAgZGVsdGEub3JpZ2luUG9pbnQgPSBtaXgoc291cmNlLm1pbiwgc291cmNlLm1heCwgZGVsdGEub3JpZ2luKTtcbiAgICBkZWx0YS5zY2FsZSA9IGNhbGNMZW5ndGgodGFyZ2V0KSAvIGNhbGNMZW5ndGgoc291cmNlKTtcbiAgICBpZiAoaXNOZWFyKGRlbHRhLnNjYWxlLCAxLCAwLjAwMDEpIHx8IGlzTmFOKGRlbHRhLnNjYWxlKSlcbiAgICAgICAgZGVsdGEuc2NhbGUgPSAxO1xuICAgIGRlbHRhLnRyYW5zbGF0ZSA9XG4gICAgICAgIG1peCh0YXJnZXQubWluLCB0YXJnZXQubWF4LCBkZWx0YS5vcmlnaW4pIC0gZGVsdGEub3JpZ2luUG9pbnQ7XG4gICAgaWYgKGlzTmVhcihkZWx0YS50cmFuc2xhdGUpIHx8IGlzTmFOKGRlbHRhLnRyYW5zbGF0ZSkpXG4gICAgICAgIGRlbHRhLnRyYW5zbGF0ZSA9IDA7XG59XG5mdW5jdGlvbiBjYWxjQm94RGVsdGEoZGVsdGEsIHNvdXJjZSwgdGFyZ2V0LCBvcmlnaW4pIHtcbiAgICBjYWxjQXhpc0RlbHRhKGRlbHRhLngsIHNvdXJjZS54LCB0YXJnZXQueCwgb3JpZ2luID09PSBudWxsIHx8IG9yaWdpbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luLm9yaWdpblgpO1xuICAgIGNhbGNBeGlzRGVsdGEoZGVsdGEueSwgc291cmNlLnksIHRhcmdldC55LCBvcmlnaW4gPT09IG51bGwgfHwgb3JpZ2luID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW4ub3JpZ2luWSk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVBeGlzKHRhcmdldCwgcmVsYXRpdmUsIHBhcmVudCkge1xuICAgIHRhcmdldC5taW4gPSBwYXJlbnQubWluICsgcmVsYXRpdmUubWluO1xuICAgIHRhcmdldC5tYXggPSB0YXJnZXQubWluICsgY2FsY0xlbmd0aChyZWxhdGl2ZSk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVCb3godGFyZ2V0LCByZWxhdGl2ZSwgcGFyZW50KSB7XG4gICAgY2FsY1JlbGF0aXZlQXhpcyh0YXJnZXQueCwgcmVsYXRpdmUueCwgcGFyZW50LngpO1xuICAgIGNhbGNSZWxhdGl2ZUF4aXModGFyZ2V0LnksIHJlbGF0aXZlLnksIHBhcmVudC55KTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbih0YXJnZXQsIGxheW91dCwgcGFyZW50KSB7XG4gICAgdGFyZ2V0Lm1pbiA9IGxheW91dC5taW4gLSBwYXJlbnQubWluO1xuICAgIHRhcmdldC5tYXggPSB0YXJnZXQubWluICsgY2FsY0xlbmd0aChsYXlvdXQpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlUG9zaXRpb24odGFyZ2V0LCBsYXlvdXQsIHBhcmVudCkge1xuICAgIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbih0YXJnZXQueCwgbGF5b3V0LngsIHBhcmVudC54KTtcbiAgICBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24odGFyZ2V0LnksIGxheW91dC55LCBwYXJlbnQueSk7XG59XG5cbmV4cG9ydCB7IGNhbGNBeGlzRGVsdGEsIGNhbGNCb3hEZWx0YSwgY2FsY0xlbmd0aCwgY2FsY1JlbGF0aXZlQXhpcywgY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uLCBjYWxjUmVsYXRpdmVCb3gsIGNhbGNSZWxhdGl2ZVBvc2l0aW9uLCBpc05lYXIgfTtcbiIsImltcG9ydCB7IG1peCwgcHJvZ3Jlc3MsIGNsYW1wIH0gZnJvbSAncG9wbW90aW9uJztcbmltcG9ydCB7IGNhbGNMZW5ndGggfSBmcm9tICcuLi8uLi8uLi9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLWNhbGMubWpzJztcblxuLyoqXG4gKiBBcHBseSBjb25zdHJhaW50cyB0byBhIHBvaW50LiBUaGVzZSBjb25zdHJhaW50cyBhcmUgYm90aCBwaHlzaWNhbCBhbG9uZyBhblxuICogYXhpcywgYW5kIGFuIGVsYXN0aWMgZmFjdG9yIHRoYXQgZGV0ZXJtaW5lcyBob3cgbXVjaCB0byBjb25zdHJhaW4gdGhlIHBvaW50XG4gKiBieSBpZiBpdCBkb2VzIGxpZSBvdXRzaWRlIHRoZSBkZWZpbmVkIHBhcmFtZXRlcnMuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5Q29uc3RyYWludHMocG9pbnQsIHsgbWluLCBtYXggfSwgZWxhc3RpYykge1xuICAgIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBwb2ludCA8IG1pbikge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbWluIHBvaW50IGRlZmluZWQsIGFuZCB0aGlzIGlzIG91dHNpZGUgb2YgdGhhdCwgY29uc3RyYWluXG4gICAgICAgIHBvaW50ID0gZWxhc3RpYyA/IG1peChtaW4sIHBvaW50LCBlbGFzdGljLm1pbikgOiBNYXRoLm1heChwb2ludCwgbWluKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobWF4ICE9PSB1bmRlZmluZWQgJiYgcG9pbnQgPiBtYXgpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIG1heCBwb2ludCBkZWZpbmVkLCBhbmQgdGhpcyBpcyBvdXRzaWRlIG9mIHRoYXQsIGNvbnN0cmFpblxuICAgICAgICBwb2ludCA9IGVsYXN0aWMgPyBtaXgobWF4LCBwb2ludCwgZWxhc3RpYy5tYXgpIDogTWF0aC5taW4ocG9pbnQsIG1heCk7XG4gICAgfVxuICAgIHJldHVybiBwb2ludDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIGNvbnN0cmFpbnRzIGluIHRlcm1zIG9mIHRoZSB2aWV3cG9ydCB3aGVuIGRlZmluZWQgcmVsYXRpdmVseSB0byB0aGVcbiAqIG1lYXN1cmVkIGF4aXMuIFRoaXMgaXMgbWVhc3VyZWQgZnJvbSB0aGUgbmVhcmVzdCBlZGdlLCBzbyBhIG1heCBjb25zdHJhaW50IG9mIDIwMFxuICogb24gYW4gYXhpcyB3aXRoIGEgbWF4IHZhbHVlIG9mIDMwMCB3b3VsZCByZXR1cm4gYSBjb25zdHJhaW50IG9mIDUwMCAtIGF4aXMgbGVuZ3RoXG4gKi9cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyhheGlzLCBtaW4sIG1heCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1pbjogbWluICE9PSB1bmRlZmluZWQgPyBheGlzLm1pbiArIG1pbiA6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4OiBtYXggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBheGlzLm1heCArIG1heCAtIChheGlzLm1heCAtIGF4aXMubWluKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIGNvbnN0cmFpbnRzIGluIHRlcm1zIG9mIHRoZSB2aWV3cG9ydCB3aGVuXG4gKiBkZWZpbmVkIHJlbGF0aXZlbHkgdG8gdGhlIG1lYXN1cmVkIGJvdW5kaW5nIGJveC5cbiAqL1xuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQ29uc3RyYWludHMobGF5b3V0Qm94LCB7IHRvcCwgbGVmdCwgYm90dG9tLCByaWdodCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogY2FsY1JlbGF0aXZlQXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC54LCBsZWZ0LCByaWdodCksXG4gICAgICAgIHk6IGNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueSwgdG9wLCBib3R0b20pLFxuICAgIH07XG59XG4vKipcbiAqIENhbGN1bGF0ZSB2aWV3cG9ydCBjb25zdHJhaW50cyB3aGVuIGRlZmluZWQgYXMgYW5vdGhlciB2aWV3cG9ydC1yZWxhdGl2ZSBheGlzXG4gKi9cbmZ1bmN0aW9uIGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyhsYXlvdXRBeGlzLCBjb25zdHJhaW50c0F4aXMpIHtcbiAgICBsZXQgbWluID0gY29uc3RyYWludHNBeGlzLm1pbiAtIGxheW91dEF4aXMubWluO1xuICAgIGxldCBtYXggPSBjb25zdHJhaW50c0F4aXMubWF4IC0gbGF5b3V0QXhpcy5tYXg7XG4gICAgLy8gSWYgdGhlIGNvbnN0cmFpbnRzIGF4aXMgaXMgYWN0dWFsbHkgc21hbGxlciB0aGFuIHRoZSBsYXlvdXQgYXhpcyB0aGVuIHdlIGNhblxuICAgIC8vIGZsaXAgdGhlIGNvbnN0cmFpbnRzXG4gICAgaWYgKGNvbnN0cmFpbnRzQXhpcy5tYXggLSBjb25zdHJhaW50c0F4aXMubWluIDxcbiAgICAgICAgbGF5b3V0QXhpcy5tYXggLSBsYXlvdXRBeGlzLm1pbikge1xuICAgICAgICBbbWluLCBtYXhdID0gW21heCwgbWluXTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbWluLCBtYXggfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHZpZXdwb3J0IGNvbnN0cmFpbnRzIHdoZW4gZGVmaW5lZCBhcyBhbm90aGVyIHZpZXdwb3J0LXJlbGF0aXZlIGJveFxuICovXG5mdW5jdGlvbiBjYWxjVmlld3BvcnRDb25zdHJhaW50cyhsYXlvdXRCb3gsIGNvbnN0cmFpbnRzQm94KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogY2FsY1ZpZXdwb3J0QXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC54LCBjb25zdHJhaW50c0JveC54KSxcbiAgICAgICAgeTogY2FsY1ZpZXdwb3J0QXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC55LCBjb25zdHJhaW50c0JveC55KSxcbiAgICB9O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgYSB0cmFuc2Zvcm0gb3JpZ2luIHJlbGF0aXZlIHRvIHRoZSBzb3VyY2UgYXhpcywgYmV0d2VlbiAwLTEsIHRoYXQgcmVzdWx0c1xuICogaW4gYW4gYXN0aGV0aWNhbGx5IHBsZWFzaW5nIHNjYWxlL3RyYW5zZm9ybSBuZWVkZWQgdG8gcHJvamVjdCBmcm9tIHNvdXJjZSB0byB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIGNhbGNPcmlnaW4oc291cmNlLCB0YXJnZXQpIHtcbiAgICBsZXQgb3JpZ2luID0gMC41O1xuICAgIGNvbnN0IHNvdXJjZUxlbmd0aCA9IGNhbGNMZW5ndGgoc291cmNlKTtcbiAgICBjb25zdCB0YXJnZXRMZW5ndGggPSBjYWxjTGVuZ3RoKHRhcmdldCk7XG4gICAgaWYgKHRhcmdldExlbmd0aCA+IHNvdXJjZUxlbmd0aCkge1xuICAgICAgICBvcmlnaW4gPSBwcm9ncmVzcyh0YXJnZXQubWluLCB0YXJnZXQubWF4IC0gc291cmNlTGVuZ3RoLCBzb3VyY2UubWluKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc291cmNlTGVuZ3RoID4gdGFyZ2V0TGVuZ3RoKSB7XG4gICAgICAgIG9yaWdpbiA9IHByb2dyZXNzKHNvdXJjZS5taW4sIHNvdXJjZS5tYXggLSB0YXJnZXRMZW5ndGgsIHRhcmdldC5taW4pO1xuICAgIH1cbiAgICByZXR1cm4gY2xhbXAoMCwgMSwgb3JpZ2luKTtcbn1cbi8qKlxuICogUmViYXNlIHRoZSBjYWxjdWxhdGVkIHZpZXdwb3J0IGNvbnN0cmFpbnRzIHJlbGF0aXZlIHRvIHRoZSBsYXlvdXQubWluIHBvaW50LlxuICovXG5mdW5jdGlvbiByZWJhc2VBeGlzQ29uc3RyYWludHMobGF5b3V0LCBjb25zdHJhaW50cykge1xuICAgIGNvbnN0IHJlbGF0aXZlQ29uc3RyYWludHMgPSB7fTtcbiAgICBpZiAoY29uc3RyYWludHMubWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVsYXRpdmVDb25zdHJhaW50cy5taW4gPSBjb25zdHJhaW50cy5taW4gLSBsYXlvdXQubWluO1xuICAgIH1cbiAgICBpZiAoY29uc3RyYWludHMubWF4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVsYXRpdmVDb25zdHJhaW50cy5tYXggPSBjb25zdHJhaW50cy5tYXggLSBsYXlvdXQubWluO1xuICAgIH1cbiAgICByZXR1cm4gcmVsYXRpdmVDb25zdHJhaW50cztcbn1cbmNvbnN0IGRlZmF1bHRFbGFzdGljID0gMC4zNTtcbi8qKlxuICogQWNjZXB0cyBhIGRyYWdFbGFzdGljIHByb3AgYW5kIHJldHVybnMgcmVzb2x2ZWQgZWxhc3RpYyB2YWx1ZXMgZm9yIGVhY2ggYXhpcy5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZURyYWdFbGFzdGljKGRyYWdFbGFzdGljID0gZGVmYXVsdEVsYXN0aWMpIHtcbiAgICBpZiAoZHJhZ0VsYXN0aWMgPT09IGZhbHNlKSB7XG4gICAgICAgIGRyYWdFbGFzdGljID0gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHJhZ0VsYXN0aWMgPT09IHRydWUpIHtcbiAgICAgICAgZHJhZ0VsYXN0aWMgPSBkZWZhdWx0RWxhc3RpYztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBcImxlZnRcIiwgXCJyaWdodFwiKSxcbiAgICAgICAgeTogcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBcInRvcFwiLCBcImJvdHRvbVwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBtaW5MYWJlbCwgbWF4TGFiZWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IHJlc29sdmVQb2ludEVsYXN0aWMoZHJhZ0VsYXN0aWMsIG1pbkxhYmVsKSxcbiAgICAgICAgbWF4OiByZXNvbHZlUG9pbnRFbGFzdGljKGRyYWdFbGFzdGljLCBtYXhMYWJlbCksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQb2ludEVsYXN0aWMoZHJhZ0VsYXN0aWMsIGxhYmVsKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB0eXBlb2YgZHJhZ0VsYXN0aWMgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyBkcmFnRWxhc3RpY1xuICAgICAgICA6IChfYSA9IGRyYWdFbGFzdGljW2xhYmVsXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbn1cblxuZXhwb3J0IHsgYXBwbHlDb25zdHJhaW50cywgY2FsY09yaWdpbiwgY2FsY1JlbGF0aXZlQXhpc0NvbnN0cmFpbnRzLCBjYWxjUmVsYXRpdmVDb25zdHJhaW50cywgY2FsY1ZpZXdwb3J0QXhpc0NvbnN0cmFpbnRzLCBjYWxjVmlld3BvcnRDb25zdHJhaW50cywgZGVmYXVsdEVsYXN0aWMsIHJlYmFzZUF4aXNDb25zdHJhaW50cywgcmVzb2x2ZUF4aXNFbGFzdGljLCByZXNvbHZlRHJhZ0VsYXN0aWMsIHJlc29sdmVQb2ludEVsYXN0aWMgfTtcbiIsImZ1bmN0aW9uIGVhY2hBeGlzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFtjYWxsYmFjayhcInhcIiksIGNhbGxiYWNrKFwieVwiKV07XG59XG5cbmV4cG9ydCB7IGVhY2hBeGlzIH07XG4iLCIvKipcbiAqIEJvdW5kaW5nIGJveGVzIHRlbmQgdG8gYmUgZGVmaW5lZCBhcyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20uIEZvciB2YXJpb3VzIG9wZXJhdGlvbnNcbiAqIGl0J3MgZWFzaWVyIHRvIGNvbnNpZGVyIGVhY2ggYXhpcyBpbmRpdmlkdWFsbHkuIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIGJvdW5kaW5nIGJveFxuICogYXMgYSBtYXAgb2Ygc2luZ2xlLWF4aXMgbWluL21heCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94KHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeyBtaW46IGxlZnQsIG1heDogcmlnaHQgfSxcbiAgICAgICAgeTogeyBtaW46IHRvcCwgbWF4OiBib3R0b20gfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY29udmVydEJveFRvQm91bmRpbmdCb3goeyB4LCB5IH0pIHtcbiAgICByZXR1cm4geyB0b3A6IHkubWluLCByaWdodDogeC5tYXgsIGJvdHRvbTogeS5tYXgsIGxlZnQ6IHgubWluIH07XG59XG4vKipcbiAqIEFwcGxpZXMgYSBUcmFuc2Zvcm1Qb2ludCBmdW5jdGlvbiB0byBhIGJvdW5kaW5nIGJveC4gVHJhbnNmb3JtUG9pbnQgaXMgdXN1YWxseSBhIGZ1bmN0aW9uXG4gKiBwcm92aWRlZCBieSBGcmFtZXIgdG8gYWxsb3cgbWVhc3VyZWQgcG9pbnRzIHRvIGJlIGNvcnJlY3RlZCBmb3IgZGV2aWNlIHNjYWxpbmcuIFRoaXMgaXMgdXNlZFxuICogd2hlbiBtZWFzdXJpbmcgRE9NIGVsZW1lbnRzIGFuZCBET00gZXZlbnQgcG9pbnRzLlxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1Cb3hQb2ludHMocG9pbnQsIHRyYW5zZm9ybVBvaW50KSB7XG4gICAgaWYgKCF0cmFuc2Zvcm1Qb2ludClcbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIGNvbnN0IHRvcExlZnQgPSB0cmFuc2Zvcm1Qb2ludCh7IHg6IHBvaW50LmxlZnQsIHk6IHBvaW50LnRvcCB9KTtcbiAgICBjb25zdCBib3R0b21SaWdodCA9IHRyYW5zZm9ybVBvaW50KHsgeDogcG9pbnQucmlnaHQsIHk6IHBvaW50LmJvdHRvbSB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRvcExlZnQueSxcbiAgICAgICAgbGVmdDogdG9wTGVmdC54LFxuICAgICAgICBib3R0b206IGJvdHRvbVJpZ2h0LnksXG4gICAgICAgIHJpZ2h0OiBib3R0b21SaWdodC54LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRCb3VuZGluZ0JveFRvQm94LCBjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCwgdHJhbnNmb3JtQm94UG9pbnRzIH07XG4iLCJmdW5jdGlvbiBpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHtcbiAgICByZXR1cm4gc2NhbGUgPT09IHVuZGVmaW5lZCB8fCBzY2FsZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGhhc1NjYWxlKHsgc2NhbGUsIHNjYWxlWCwgc2NhbGVZIH0pIHtcbiAgICByZXR1cm4gKCFpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHx8XG4gICAgICAgICFpc0lkZW50aXR5U2NhbGUoc2NhbGVYKSB8fFxuICAgICAgICAhaXNJZGVudGl0eVNjYWxlKHNjYWxlWSkpO1xufVxuZnVuY3Rpb24gaGFzVHJhbnNmb3JtKHZhbHVlcykge1xuICAgIHJldHVybiAoaGFzU2NhbGUodmFsdWVzKSB8fFxuICAgICAgICBoYXNUcmFuc2xhdGUodmFsdWVzLngpIHx8XG4gICAgICAgIGhhc1RyYW5zbGF0ZSh2YWx1ZXMueSkgfHxcbiAgICAgICAgdmFsdWVzLnogfHxcbiAgICAgICAgdmFsdWVzLnJvdGF0ZSB8fFxuICAgICAgICB2YWx1ZXMucm90YXRlWCB8fFxuICAgICAgICB2YWx1ZXMucm90YXRlWSk7XG59XG5mdW5jdGlvbiBoYXNUcmFuc2xhdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUgIT09IFwiMCVcIjtcbn1cblxuZXhwb3J0IHsgaGFzU2NhbGUsIGhhc1RyYW5zZm9ybSB9O1xuIiwiaW1wb3J0IHsgbWl4IH0gZnJvbSAncG9wbW90aW9uJztcbmltcG9ydCB7IGhhc1RyYW5zZm9ybSB9IGZyb20gJy4uL3V0aWxzL2hhcy10cmFuc2Zvcm0ubWpzJztcblxuLyoqXG4gKiBTY2FsZXMgYSBwb2ludCBiYXNlZCBvbiBhIGZhY3RvciBhbmQgYW4gb3JpZ2luUG9pbnRcbiAqL1xuZnVuY3Rpb24gc2NhbGVQb2ludChwb2ludCwgc2NhbGUsIG9yaWdpblBvaW50KSB7XG4gICAgY29uc3QgZGlzdGFuY2VGcm9tT3JpZ2luID0gcG9pbnQgLSBvcmlnaW5Qb2ludDtcbiAgICBjb25zdCBzY2FsZWQgPSBzY2FsZSAqIGRpc3RhbmNlRnJvbU9yaWdpbjtcbiAgICByZXR1cm4gb3JpZ2luUG9pbnQgKyBzY2FsZWQ7XG59XG4vKipcbiAqIEFwcGxpZXMgYSB0cmFuc2xhdGUvc2NhbGUgZGVsdGEgdG8gYSBwb2ludFxuICovXG5mdW5jdGlvbiBhcHBseVBvaW50RGVsdGEocG9pbnQsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSkge1xuICAgIGlmIChib3hTY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBvaW50ID0gc2NhbGVQb2ludChwb2ludCwgYm94U2NhbGUsIG9yaWdpblBvaW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlUG9pbnQocG9pbnQsIHNjYWxlLCBvcmlnaW5Qb2ludCkgKyB0cmFuc2xhdGU7XG59XG4vKipcbiAqIEFwcGxpZXMgYSB0cmFuc2xhdGUvc2NhbGUgZGVsdGEgdG8gYW4gYXhpc1xuICovXG5mdW5jdGlvbiBhcHBseUF4aXNEZWx0YShheGlzLCB0cmFuc2xhdGUgPSAwLCBzY2FsZSA9IDEsIG9yaWdpblBvaW50LCBib3hTY2FsZSkge1xuICAgIGF4aXMubWluID0gYXBwbHlQb2ludERlbHRhKGF4aXMubWluLCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpO1xuICAgIGF4aXMubWF4ID0gYXBwbHlQb2ludERlbHRhKGF4aXMubWF4LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGEgYm94XG4gKi9cbmZ1bmN0aW9uIGFwcGx5Qm94RGVsdGEoYm94LCB7IHgsIHkgfSkge1xuICAgIGFwcGx5QXhpc0RlbHRhKGJveC54LCB4LnRyYW5zbGF0ZSwgeC5zY2FsZSwgeC5vcmlnaW5Qb2ludCk7XG4gICAgYXBwbHlBeGlzRGVsdGEoYm94LnksIHkudHJhbnNsYXRlLCB5LnNjYWxlLCB5Lm9yaWdpblBvaW50KTtcbn1cbi8qKlxuICogQXBwbHkgYSB0cmVlIG9mIGRlbHRhcyB0byBhIGJveC4gV2UgZG8gdGhpcyB0byBjYWxjdWxhdGUgdGhlIGVmZmVjdCBvZiBhbGwgdGhlIHRyYW5zZm9ybXNcbiAqIGluIGEgdHJlZSB1cG9uIG91ciBib3ggYmVmb3JlIHRoZW4gY2FsY3VsYXRpbmcgaG93IHRvIHByb2plY3QgaXQgaW50byBvdXIgZGVzaXJlZCB2aWV3cG9ydC1yZWxhdGl2ZSBib3hcbiAqXG4gKiBUaGlzIGlzIHRoZSBmaW5hbCBuZXN0ZWQgbG9vcCB3aXRoaW4gdXBkYXRlTGF5b3V0RGVsdGEgZm9yIGZ1dHVyZSByZWZhY3RvcmluZ1xuICovXG5mdW5jdGlvbiBhcHBseVRyZWVEZWx0YXMoYm94LCB0cmVlU2NhbGUsIHRyZWVQYXRoLCBpc1NoYXJlZFRyYW5zaXRpb24gPSBmYWxzZSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgdHJlZUxlbmd0aCA9IHRyZWVQYXRoLmxlbmd0aDtcbiAgICBpZiAoIXRyZWVMZW5ndGgpXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBSZXNldCB0aGUgdHJlZVNjYWxlXG4gICAgdHJlZVNjYWxlLnggPSB0cmVlU2NhbGUueSA9IDE7XG4gICAgbGV0IG5vZGU7XG4gICAgbGV0IGRlbHRhO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJlZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5vZGUgPSB0cmVlUGF0aFtpXTtcbiAgICAgICAgZGVsdGEgPSBub2RlLnByb2plY3Rpb25EZWx0YTtcbiAgICAgICAgaWYgKCgoX2IgPSAoX2EgPSBub2RlLmluc3RhbmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3R5bGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kaXNwbGF5KSA9PT0gXCJjb250ZW50c1wiKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChpc1NoYXJlZFRyYW5zaXRpb24gJiZcbiAgICAgICAgICAgIG5vZGUub3B0aW9ucy5sYXlvdXRTY3JvbGwgJiZcbiAgICAgICAgICAgIG5vZGUuc2Nyb2xsICYmXG4gICAgICAgICAgICBub2RlICE9PSBub2RlLnJvb3QpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybUJveChib3gsIHsgeDogLW5vZGUuc2Nyb2xsLngsIHk6IC1ub2RlLnNjcm9sbC55IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gSW5jb3BvcmF0ZSBlYWNoIGFuY2VzdG9yJ3Mgc2NhbGUgaW50byBhIGN1bG11bGF0aXZlIHRyZWVTY2FsZSBmb3IgdGhpcyBjb21wb25lbnRcbiAgICAgICAgICAgIHRyZWVTY2FsZS54ICo9IGRlbHRhLnguc2NhbGU7XG4gICAgICAgICAgICB0cmVlU2NhbGUueSAqPSBkZWx0YS55LnNjYWxlO1xuICAgICAgICAgICAgLy8gQXBwbHkgZWFjaCBhbmNlc3RvcidzIGNhbGN1bGF0ZWQgZGVsdGEgaW50byB0aGlzIGNvbXBvbmVudCdzIHJlY29yZGVkIGxheW91dCBib3hcbiAgICAgICAgICAgIGFwcGx5Qm94RGVsdGEoYm94LCBkZWx0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU2hhcmVkVHJhbnNpdGlvbiAmJiBoYXNUcmFuc2Zvcm0obm9kZS5sYXRlc3RWYWx1ZXMpKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Cb3goYm94LCBub2RlLmxhdGVzdFZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2xhdGVBeGlzKGF4aXMsIGRpc3RhbmNlKSB7XG4gICAgYXhpcy5taW4gPSBheGlzLm1pbiArIGRpc3RhbmNlO1xuICAgIGF4aXMubWF4ID0gYXhpcy5tYXggKyBkaXN0YW5jZTtcbn1cbi8qKlxuICogQXBwbHkgYSB0cmFuc2Zvcm0gdG8gYW4gYXhpcyBmcm9tIHRoZSBsYXRlc3QgcmVzb2x2ZWQgbW90aW9uIHZhbHVlcy5cbiAqIFRoaXMgZnVuY3Rpb24gYmFzaWNhbGx5IGFjdHMgYXMgYSBicmlkZ2UgYmV0d2VlbiBhIGZsYXQgbW90aW9uIHZhbHVlIG1hcFxuICogYW5kIGFwcGx5QXhpc0RlbHRhXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUF4aXMoYXhpcywgdHJhbnNmb3JtcywgW2tleSwgc2NhbGVLZXksIG9yaWdpbktleV0pIHtcbiAgICBjb25zdCBheGlzT3JpZ2luID0gdHJhbnNmb3Jtc1tvcmlnaW5LZXldICE9PSB1bmRlZmluZWQgPyB0cmFuc2Zvcm1zW29yaWdpbktleV0gOiAwLjU7XG4gICAgY29uc3Qgb3JpZ2luUG9pbnQgPSBtaXgoYXhpcy5taW4sIGF4aXMubWF4LCBheGlzT3JpZ2luKTtcbiAgICAvLyBBcHBseSB0aGUgYXhpcyBkZWx0YSB0byB0aGUgZmluYWwgYXhpc1xuICAgIGFwcGx5QXhpc0RlbHRhKGF4aXMsIHRyYW5zZm9ybXNba2V5XSwgdHJhbnNmb3Jtc1tzY2FsZUtleV0sIG9yaWdpblBvaW50LCB0cmFuc2Zvcm1zLnNjYWxlKTtcbn1cbi8qKlxuICogVGhlIG5hbWVzIG9mIHRoZSBtb3Rpb24gdmFsdWVzIHdlIHdhbnQgdG8gYXBwbHkgYXMgdHJhbnNsYXRpb24sIHNjYWxlIGFuZCBvcmlnaW4uXG4gKi9cbmNvbnN0IHhLZXlzID0gW1wieFwiLCBcInNjYWxlWFwiLCBcIm9yaWdpblhcIl07XG5jb25zdCB5S2V5cyA9IFtcInlcIiwgXCJzY2FsZVlcIiwgXCJvcmlnaW5ZXCJdO1xuLyoqXG4gKiBBcHBseSBhIHRyYW5zZm9ybSB0byBhIGJveCBmcm9tIHRoZSBsYXRlc3QgcmVzb2x2ZWQgbW90aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtQm94KGJveCwgdHJhbnNmb3JtKSB7XG4gICAgdHJhbnNmb3JtQXhpcyhib3gueCwgdHJhbnNmb3JtLCB4S2V5cyk7XG4gICAgdHJhbnNmb3JtQXhpcyhib3gueSwgdHJhbnNmb3JtLCB5S2V5cyk7XG59XG5cbmV4cG9ydCB7IGFwcGx5QXhpc0RlbHRhLCBhcHBseUJveERlbHRhLCBhcHBseVBvaW50RGVsdGEsIGFwcGx5VHJlZURlbHRhcywgc2NhbGVQb2ludCwgdHJhbnNmb3JtQXhpcywgdHJhbnNmb3JtQm94LCB0cmFuc2xhdGVBeGlzIH07XG4iLCJpbXBvcnQgeyBjb252ZXJ0Qm91bmRpbmdCb3hUb0JveCwgdHJhbnNmb3JtQm94UG9pbnRzIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29udmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlQXhpcyB9IGZyb20gJy4uL2dlb21ldHJ5L2RlbHRhLWFwcGx5Lm1qcyc7XG5cbmZ1bmN0aW9uIG1lYXN1cmVWaWV3cG9ydEJveChpbnN0YW5jZSwgdHJhbnNmb3JtUG9pbnQpIHtcbiAgICByZXR1cm4gY29udmVydEJvdW5kaW5nQm94VG9Cb3godHJhbnNmb3JtQm94UG9pbnRzKGluc3RhbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB0cmFuc2Zvcm1Qb2ludCkpO1xufVxuZnVuY3Rpb24gbWVhc3VyZVBhZ2VCb3goZWxlbWVudCwgcm9vdFByb2plY3Rpb25Ob2RlLCB0cmFuc2Zvcm1QYWdlUG9pbnQpIHtcbiAgICBjb25zdCB2aWV3cG9ydEJveCA9IG1lYXN1cmVWaWV3cG9ydEJveChlbGVtZW50LCB0cmFuc2Zvcm1QYWdlUG9pbnQpO1xuICAgIGNvbnN0IHsgc2Nyb2xsIH0gPSByb290UHJvamVjdGlvbk5vZGU7XG4gICAgaWYgKHNjcm9sbCkge1xuICAgICAgICB0cmFuc2xhdGVBeGlzKHZpZXdwb3J0Qm94LngsIHNjcm9sbC54KTtcbiAgICAgICAgdHJhbnNsYXRlQXhpcyh2aWV3cG9ydEJveC55LCBzY3JvbGwueSk7XG4gICAgfVxuICAgIHJldHVybiB2aWV3cG9ydEJveDtcbn1cblxuZXhwb3J0IHsgbWVhc3VyZVBhZ2VCb3gsIG1lYXN1cmVWaWV3cG9ydEJveCB9O1xuIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5pbXBvcnQgeyBQYW5TZXNzaW9uIH0gZnJvbSAnLi4vUGFuU2Vzc2lvbi5tanMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsTG9jayB9IGZyb20gJy4vdXRpbHMvbG9jay5tanMnO1xuaW1wb3J0IHsgaXNSZWZPYmplY3QgfSBmcm9tICcuLi8uLi91dGlscy9pcy1yZWYtb2JqZWN0Lm1qcyc7XG5pbXBvcnQgeyBhZGRQb2ludGVyRXZlbnQgfSBmcm9tICcuLi8uLi9ldmVudHMvdXNlLXBvaW50ZXItZXZlbnQubWpzJztcbmltcG9ydCB7IGFwcGx5Q29uc3RyYWludHMsIGNhbGNSZWxhdGl2ZUNvbnN0cmFpbnRzLCByZXNvbHZlRHJhZ0VsYXN0aWMsIHJlYmFzZUF4aXNDb25zdHJhaW50cywgY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMsIGNhbGNPcmlnaW4sIGRlZmF1bHRFbGFzdGljIH0gZnJvbSAnLi91dGlscy9jb25zdHJhaW50cy5tanMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uVHlwZSB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy90eXBlcy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlQm94IH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi9nZW9tZXRyeS9tb2RlbHMubWpzJztcbmltcG9ydCB7IGVhY2hBeGlzIH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi91dGlscy9lYWNoLWF4aXMubWpzJztcbmltcG9ydCB7IG1lYXN1cmVQYWdlQm94IH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi91dGlscy9tZWFzdXJlLm1qcyc7XG5pbXBvcnQgeyBleHRyYWN0RXZlbnRJbmZvIH0gZnJvbSAnLi4vLi4vZXZlbnRzL2V2ZW50LWluZm8ubWpzJztcbmltcG9ydCB7IHN0YXJ0QW5pbWF0aW9uIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL3V0aWxzL3RyYW5zaXRpb25zLm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCwgY29udmVydEJvdW5kaW5nQm94VG9Cb3ggfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL2dlb21ldHJ5L2NvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL3VzZS1kb20tZXZlbnQubWpzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJ3BvcG1vdGlvbic7XG5pbXBvcnQgeyBwZXJjZW50IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuaW1wb3J0IHsgY2FsY0xlbmd0aCB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanMnO1xuXG5jb25zdCBlbGVtZW50RHJhZ0NvbnRyb2xzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICpcbiAqL1xuLy8gbGV0IGxhdGVzdFBvaW50ZXJFdmVudDogQW55UG9pbnRlckV2ZW50XG5jbGFzcyBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzIHtcbiAgICBjb25zdHJ1Y3Rvcih2aXN1YWxFbGVtZW50KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBkcmFnIGdlc3R1cmUgbG9jaywgZW5zdXJpbmcgb25seSBvbmUgY29tcG9uZW50XG4gICAgICAgIC8vIGNhbiBcImNhcHR1cmVcIiB0aGUgZHJhZyBvZiBvbmUgb3IgYm90aCBheGVzLlxuICAgICAgICAvLyBUT0RPOiBMb29rIGludG8gbW92aW5nIHRoaXMgaW50byBwYW5zZXNzaW9uP1xuICAgICAgICB0aGlzLm9wZW5HbG9iYWxMb2NrID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3VycmVudERpcmVjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMub3JpZ2luUG9pbnQgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwZXJtaXR0ZWQgYm91bmRhcmllcyBvZiB0cmF2ZWwsIGluIHBpeGVscy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29uc3RyYWludHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oYXNNdXRhdGVkQ29uc3RyYWludHMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwZXItYXhpcyByZXNvbHZlZCBlbGFzdGljIHZhbHVlcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZWxhc3RpYyA9IGNyZWF0ZUJveCgpO1xuICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50O1xuICAgIH1cbiAgICBzdGFydChvcmlnaW5FdmVudCwgeyBzbmFwVG9DdXJzb3IgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERvbid0IHN0YXJ0IGRyYWdnaW5nIGlmIHRoaXMgY29tcG9uZW50IGlzIGV4aXRpbmdcbiAgICAgICAgICovXG4gICAgICAgIGlmICh0aGlzLnZpc3VhbEVsZW1lbnQuaXNQcmVzZW50ID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3Qgb25TZXNzaW9uU3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIFN0b3AgYW55IGFuaW1hdGlvbnMgb24gYm90aCBheGlzIHZhbHVlcyBpbW1lZGlhdGVseS4gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gdGhyb3cgYW5kIGNhdGNoXG4gICAgICAgICAgICAvLyB0aGUgY29tcG9uZW50LlxuICAgICAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBpZiAoc25hcFRvQ3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zbmFwVG9DdXJzb3IoZXh0cmFjdEV2ZW50SW5mbyhldmVudCwgXCJwYWdlXCIpLnBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25TdGFydCA9IChldmVudCwgaW5mbykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byBncmFiIHRoZSBnbG9iYWwgZHJhZyBnZXN0dXJlIGxvY2sgLSBtYXliZSBtYWtlIHRoaXMgcGFydCBvZiBQYW5TZXNzaW9uXG4gICAgICAgICAgICBjb25zdCB7IGRyYWcsIGRyYWdQcm9wYWdhdGlvbiwgb25EcmFnU3RhcnQgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIGlmIChkcmFnICYmICFkcmFnUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcGVuR2xvYmFsTG9jaylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuR2xvYmFsTG9jaygpO1xuICAgICAgICAgICAgICAgIHRoaXMub3Blbkdsb2JhbExvY2sgPSBnZXRHbG9iYWxMb2NrKGRyYWcpO1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIGRvbiAndCBoYXZlIHRoZSBsb2NrLCBkb24ndCBzdGFydCBkcmFnZ2luZ1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuR2xvYmFsTG9jaylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudERpcmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVDb25zdHJhaW50cygpO1xuICAgICAgICAgICAgaWYgKHRoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb24uaXNBbmltYXRpb25CbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbi50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlY29yZCBnZXN0dXJlIG9yaWdpblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKS5nZXQoKSB8fCAwO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZSBNb3Rpb25WYWx1ZSBpcyBhIHBlcmNlbnRhZ2UgdmFsdWUgY29udmVydCB0byBweFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChwZXJjZW50LnRlc3QoY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVhc3VyZWRBeGlzID0gKF9iID0gKF9hID0gdGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sYXlvdXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hY3R1YWxbYXhpc107XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZWFzdXJlZEF4aXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGNhbGNMZW5ndGgobWVhc3VyZWRBeGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBsZW5ndGggKiAocGFyc2VGbG9hdChjdXJyZW50KSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5Qb2ludFtheGlzXSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEZpcmUgb25EcmFnU3RhcnQgZXZlbnRcbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0ID09PSBudWxsIHx8IG9uRHJhZ1N0YXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkRyYWdTdGFydChldmVudCwgaW5mbyk7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLnZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5EcmFnLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25Nb3ZlID0gKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAvLyBsYXRlc3RQb2ludGVyRXZlbnQgPSBldmVudFxuICAgICAgICAgICAgY29uc3QgeyBkcmFnUHJvcGFnYXRpb24sIGRyYWdEaXJlY3Rpb25Mb2NrLCBvbkRpcmVjdGlvbkxvY2ssIG9uRHJhZywgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIC8vIElmIHdlIGRpZG4ndCBzdWNjZXNzZnVsbHkgcmVjZWl2ZSB0aGUgZ2VzdHVyZSBsb2NrLCBlYXJseSByZXR1cm4uXG4gICAgICAgICAgICBpZiAoIWRyYWdQcm9wYWdhdGlvbiAmJiAhdGhpcy5vcGVuR2xvYmFsTG9jaylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7IG9mZnNldCB9ID0gaW5mbztcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGRyYWcgZGlyZWN0aW9uIGlmIGRpcmVjdGlvbkxvY2sgaXMgdHJ1ZVxuICAgICAgICAgICAgaWYgKGRyYWdEaXJlY3Rpb25Mb2NrICYmIHRoaXMuY3VycmVudERpcmVjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudERpcmVjdGlvbiA9IGdldEN1cnJlbnREaXJlY3Rpb24ob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSBzdWNjZXNzZnVsbHkgc2V0IGEgZGlyZWN0aW9uLCBub3RpZnkgbGlzdGVuZXJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RGlyZWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRGlyZWN0aW9uTG9jayA9PT0gbnVsbCB8fCBvbkRpcmVjdGlvbkxvY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRGlyZWN0aW9uTG9jayh0aGlzLmN1cnJlbnREaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgZWFjaCBwb2ludCB3aXRoIHRoZSBsYXRlc3QgcG9zaXRpb25cbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXhpcyhcInhcIiwgaW5mby5wb2ludCwgb2Zmc2V0KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXhpcyhcInlcIiwgaW5mby5wb2ludCwgb2Zmc2V0KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWRlYWxseSB3ZSB3b3VsZCBsZWF2ZSB0aGUgcmVuZGVyZXIgdG8gZmlyZSBuYXR1cmFsbHkgYXQgdGhlIGVuZCBvZlxuICAgICAgICAgICAgICogdGhpcyBmcmFtZSBidXQgaWYgdGhlIGVsZW1lbnQgaXMgYWJvdXQgdG8gY2hhbmdlIGxheW91dCBhcyB0aGUgcmVzdWx0XG4gICAgICAgICAgICAgKiBvZiBhIHJlLXJlbmRlciB3ZSB3YW50IHRvIGVuc3VyZSB0aGUgYnJvd3NlciBjYW4gcmVhZCB0aGUgbGF0ZXN0XG4gICAgICAgICAgICAgKiBib3VuZGluZyBib3ggdG8gZW5zdXJlIHRoZSBwb2ludGVyIGFuZCBlbGVtZW50IGRvbid0IGZhbGwgb3V0IG9mIHN5bmMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMudmlzdWFsRWxlbWVudC5zeW5jUmVuZGVyKCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgbXVzdCBmaXJlIGFmdGVyIHRoZSBzeW5jUmVuZGVyIGNhbGwgYXMgaXQgbWlnaHQgdHJpZ2dlciBhIHN0YXRlXG4gICAgICAgICAgICAgKiBjaGFuZ2Ugd2hpY2ggaXRzZWxmIG1pZ2h0IHRyaWdnZXIgYSBsYXlvdXQgdXBkYXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBvbkRyYWcgPT09IG51bGwgfHwgb25EcmFnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkRyYWcoZXZlbnQsIGluZm8pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvblNlc3Npb25FbmQgPSAoZXZlbnQsIGluZm8pID0+IHRoaXMuc3RvcChldmVudCwgaW5mbyk7XG4gICAgICAgIHRoaXMucGFuU2Vzc2lvbiA9IG5ldyBQYW5TZXNzaW9uKG9yaWdpbkV2ZW50LCB7XG4gICAgICAgICAgICBvblNlc3Npb25TdGFydCxcbiAgICAgICAgICAgIG9uU3RhcnQsXG4gICAgICAgICAgICBvbk1vdmUsXG4gICAgICAgICAgICBvblNlc3Npb25FbmQsXG4gICAgICAgIH0sIHsgdHJhbnNmb3JtUGFnZVBvaW50OiB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0VHJhbnNmb3JtUGFnZVBvaW50KCkgfSk7XG4gICAgfVxuICAgIHN0b3AoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgY29uc3QgaXNEcmFnZ2luZyA9IHRoaXMuaXNEcmFnZ2luZztcbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgaWYgKCFpc0RyYWdnaW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IHZlbG9jaXR5IH0gPSBpbmZvO1xuICAgICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uKHZlbG9jaXR5KTtcbiAgICAgICAgY29uc3QgeyBvbkRyYWdFbmQgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgb25EcmFnRW5kID09PSBudWxsIHx8IG9uRHJhZ0VuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25EcmFnRW5kKGV2ZW50LCBpbmZvKTtcbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbi5pc0FuaW1hdGlvbkJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSB0aGlzLnBhblNlc3Npb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbmQoKTtcbiAgICAgICAgdGhpcy5wYW5TZXNzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCB7IGRyYWdQcm9wYWdhdGlvbiB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICBpZiAoIWRyYWdQcm9wYWdhdGlvbiAmJiB0aGlzLm9wZW5HbG9iYWxMb2NrKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5HbG9iYWxMb2NrKCk7XG4gICAgICAgICAgICB0aGlzLm9wZW5HbG9iYWxMb2NrID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAoX2IgPSB0aGlzLnZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5EcmFnLCBmYWxzZSk7XG4gICAgfVxuICAgIHVwZGF0ZUF4aXMoYXhpcywgX3BvaW50LCBvZmZzZXQpIHtcbiAgICAgICAgY29uc3QgeyBkcmFnIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgIC8vIElmIHdlJ3JlIG5vdCBkcmFnZ2luZyB0aGlzIGF4aXMsIGRvIGFuIGVhcmx5IHJldHVybi5cbiAgICAgICAgaWYgKCFvZmZzZXQgfHwgIXNob3VsZERyYWcoYXhpcywgZHJhZywgdGhpcy5jdXJyZW50RGlyZWN0aW9uKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgYXhpc1ZhbHVlID0gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgIGxldCBuZXh0ID0gdGhpcy5vcmlnaW5Qb2ludFtheGlzXSArIG9mZnNldFtheGlzXTtcbiAgICAgICAgLy8gQXBwbHkgY29uc3RyYWludHNcbiAgICAgICAgaWYgKHRoaXMuY29uc3RyYWludHMgJiYgdGhpcy5jb25zdHJhaW50c1theGlzXSkge1xuICAgICAgICAgICAgbmV4dCA9IGFwcGx5Q29uc3RyYWludHMobmV4dCwgdGhpcy5jb25zdHJhaW50c1theGlzXSwgdGhpcy5lbGFzdGljW2F4aXNdKTtcbiAgICAgICAgfVxuICAgICAgICBheGlzVmFsdWUuc2V0KG5leHQpO1xuICAgIH1cbiAgICByZXNvbHZlQ29uc3RyYWludHMoKSB7XG4gICAgICAgIGNvbnN0IHsgZHJhZ0NvbnN0cmFpbnRzLCBkcmFnRWxhc3RpYyB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICBjb25zdCB7IGxheW91dCB9ID0gdGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb24gfHwge307XG4gICAgICAgIGNvbnN0IHByZXZDb25zdHJhaW50cyA9IHRoaXMuY29uc3RyYWludHM7XG4gICAgICAgIGlmIChkcmFnQ29uc3RyYWludHMgJiYgaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50cyA9IHRoaXMucmVzb2x2ZVJlZkNvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZHJhZ0NvbnN0cmFpbnRzICYmIGxheW91dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3RyYWludHMgPSBjYWxjUmVsYXRpdmVDb25zdHJhaW50cyhsYXlvdXQuYWN0dWFsLCBkcmFnQ29uc3RyYWludHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxhc3RpYyA9IHJlc29sdmVEcmFnRWxhc3RpYyhkcmFnRWxhc3RpYyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB3ZSdyZSBvdXRwdXR0aW5nIHRvIGV4dGVybmFsIE1vdGlvblZhbHVlcywgd2Ugd2FudCB0byByZWJhc2UgdGhlIG1lYXN1cmVkIGNvbnN0cmFpbnRzXG4gICAgICAgICAqIGZyb20gdmlld3BvcnQtcmVsYXRpdmUgdG8gY29tcG9uZW50LXJlbGF0aXZlLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHByZXZDb25zdHJhaW50cyAhPT0gdGhpcy5jb25zdHJhaW50cyAmJlxuICAgICAgICAgICAgbGF5b3V0ICYmXG4gICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzICYmXG4gICAgICAgICAgICAhdGhpcy5oYXNNdXRhdGVkQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgIGVhY2hBeGlzKChheGlzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3RyYWludHNbYXhpc10gPSByZWJhc2VBeGlzQ29uc3RyYWludHMobGF5b3V0LmFjdHVhbFtheGlzXSwgdGhpcy5jb25zdHJhaW50c1theGlzXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzb2x2ZVJlZkNvbnN0cmFpbnRzKCkge1xuICAgICAgICBjb25zdCB7IGRyYWdDb25zdHJhaW50czogY29uc3RyYWludHMsIG9uTWVhc3VyZURyYWdDb25zdHJhaW50cyB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICBpZiAoIWNvbnN0cmFpbnRzIHx8ICFpc1JlZk9iamVjdChjb25zdHJhaW50cykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNvbnN0cmFpbnRzRWxlbWVudCA9IGNvbnN0cmFpbnRzLmN1cnJlbnQ7XG4gICAgICAgIGludmFyaWFudChjb25zdHJhaW50c0VsZW1lbnQgIT09IG51bGwsIFwiSWYgYGRyYWdDb25zdHJhaW50c2AgaXMgc2V0IGFzIGEgUmVhY3QgcmVmLCB0aGF0IHJlZiBtdXN0IGJlIHBhc3NlZCB0byBhbm90aGVyIGNvbXBvbmVudCdzIGByZWZgIHByb3AuXCIpO1xuICAgICAgICBjb25zdCB7IHByb2plY3Rpb24gfSA9IHRoaXMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICBpZiAoIXByb2plY3Rpb24gfHwgIXByb2plY3Rpb24ubGF5b3V0KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBjb25zdHJhaW50c0JveCA9IG1lYXN1cmVQYWdlQm94KGNvbnN0cmFpbnRzRWxlbWVudCwgcHJvamVjdGlvbi5yb290LCB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0VHJhbnNmb3JtUGFnZVBvaW50KCkpO1xuICAgICAgICBsZXQgbWVhc3VyZWRDb25zdHJhaW50cyA9IGNhbGNWaWV3cG9ydENvbnN0cmFpbnRzKHByb2plY3Rpb24ubGF5b3V0LmFjdHVhbCwgY29uc3RyYWludHNCb3gpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlcmUncyBhbiBvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMgbGlzdGVuZXIgd2UgY2FsbCBpdCBhbmRcbiAgICAgICAgICogaWYgZGlmZmVyZW50IGNvbnN0cmFpbnRzIGFyZSByZXR1cm5lZCwgc2V0IGNvbnN0cmFpbnRzIHRvIHRoYXRcbiAgICAgICAgICovXG4gICAgICAgIGlmIChvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJDb25zdHJhaW50cyA9IG9uTWVhc3VyZURyYWdDb25zdHJhaW50cyhjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveChtZWFzdXJlZENvbnN0cmFpbnRzKSk7XG4gICAgICAgICAgICB0aGlzLmhhc011dGF0ZWRDb25zdHJhaW50cyA9ICEhdXNlckNvbnN0cmFpbnRzO1xuICAgICAgICAgICAgaWYgKHVzZXJDb25zdHJhaW50cykge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVkQ29uc3RyYWludHMgPSBjb252ZXJ0Qm91bmRpbmdCb3hUb0JveCh1c2VyQ29uc3RyYWludHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWFzdXJlZENvbnN0cmFpbnRzO1xuICAgIH1cbiAgICBzdGFydEFuaW1hdGlvbih2ZWxvY2l0eSkge1xuICAgICAgICBjb25zdCB7IGRyYWcsIGRyYWdNb21lbnR1bSwgZHJhZ0VsYXN0aWMsIGRyYWdUcmFuc2l0aW9uLCBkcmFnU25hcFRvT3JpZ2luLCBvbkRyYWdUcmFuc2l0aW9uRW5kLCB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICBjb25zdCBjb25zdHJhaW50cyA9IHRoaXMuY29uc3RyYWludHMgfHwge307XG4gICAgICAgIGNvbnN0IG1vbWVudHVtQW5pbWF0aW9ucyA9IGVhY2hBeGlzKChheGlzKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoIXNob3VsZERyYWcoYXhpcywgZHJhZywgdGhpcy5jdXJyZW50RGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0cmFuc2l0aW9uID0gKF9hID0gY29uc3RyYWludHMgPT09IG51bGwgfHwgY29uc3RyYWludHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnN0cmFpbnRzW2F4aXNdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICAgICAgICAgIGlmIChkcmFnU25hcFRvT3JpZ2luKVxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7IG1pbjogMCwgbWF4OiAwIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE92ZXJkYW1wIHRoZSBib3VuZGFyeSBzcHJpbmcgaWYgYGRyYWdFbGFzdGljYCBpcyBkaXNhYmxlZC4gVGhlcmUncyBzdGlsbCBhIGZyYW1lXG4gICAgICAgICAgICAgKiBvZiBzcHJpbmcgYW5pbWF0aW9ucyBzbyB3ZSBzaG91bGQgbG9vayBpbnRvIGFkZGluZyBhIGRpc2FibGUgc3ByaW5nIG9wdGlvbiB0byBgaW5lcnRpYWAuXG4gICAgICAgICAgICAgKiBXZSBjb3VsZCBkbyBzb21ldGhpbmcgaGVyZSB3aGVyZSB3ZSBhZmZlY3QgdGhlIGBib3VuY2VTdGlmZm5lc3NgIGFuZCBgYm91bmNlRGFtcGluZ2BcbiAgICAgICAgICAgICAqIHVzaW5nIHRoZSB2YWx1ZSBvZiBgZHJhZ0VsYXN0aWNgLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBib3VuY2VTdGlmZm5lc3MgPSBkcmFnRWxhc3RpYyA/IDIwMCA6IDEwMDAwMDA7XG4gICAgICAgICAgICBjb25zdCBib3VuY2VEYW1waW5nID0gZHJhZ0VsYXN0aWMgPyA0MCA6IDEwMDAwMDAwO1xuICAgICAgICAgICAgY29uc3QgaW5lcnRpYSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImluZXJ0aWFcIixcbiAgICAgICAgICAgICAgICB2ZWxvY2l0eTogZHJhZ01vbWVudHVtID8gdmVsb2NpdHlbYXhpc10gOiAwLFxuICAgICAgICAgICAgICAgIGJvdW5jZVN0aWZmbmVzcyxcbiAgICAgICAgICAgICAgICBib3VuY2VEYW1waW5nLFxuICAgICAgICAgICAgICAgIHRpbWVDb25zdGFudDogNzUwLFxuICAgICAgICAgICAgICAgIHJlc3REZWx0YTogMSxcbiAgICAgICAgICAgICAgICByZXN0U3BlZWQ6IDEwLFxuICAgICAgICAgICAgICAgIC4uLmRyYWdUcmFuc2l0aW9uLFxuICAgICAgICAgICAgICAgIC4uLnRyYW5zaXRpb24sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gSWYgd2UncmUgbm90IGFuaW1hdGluZyBvbiBhbiBleHRlcm5hbGx5LXByb3ZpZGVkIGBNb3Rpb25WYWx1ZWAgd2UgY2FuIHVzZSB0aGVcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudCdzIGFuaW1hdGlvbiBjb250cm9scyB3aGljaCB3aWxsIGhhbmRsZSBpbnRlcmFjdGlvbnMgd2l0aCB3aGlsZUhvdmVyIChldGMpLFxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIGp1c3QgaGF2ZSB0byBhbmltYXRlIHRoZSBgTW90aW9uVmFsdWVgIGl0c2VsZi5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0QXhpc1ZhbHVlQW5pbWF0aW9uKGF4aXMsIGluZXJ0aWEpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gUnVuIGFsbCBhbmltYXRpb25zIGFuZCB0aGVuIHJlc29sdmUgdGhlIG5ldyBkcmFnIGNvbnN0cmFpbnRzLlxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwobW9tZW50dW1BbmltYXRpb25zKS50aGVuKG9uRHJhZ1RyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgICBzdGFydEF4aXNWYWx1ZUFuaW1hdGlvbihheGlzLCB0cmFuc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGF4aXNWYWx1ZSA9IHRoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICByZXR1cm4gc3RhcnRBbmltYXRpb24oYXhpcywgYXhpc1ZhbHVlLCAwLCB0cmFuc2l0aW9uKTtcbiAgICB9XG4gICAgc3RvcEFuaW1hdGlvbigpIHtcbiAgICAgICAgZWFjaEF4aXMoKGF4aXMpID0+IHRoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpLnN0b3AoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERyYWcgd29ya3MgZGlmZmVyZW50bHkgZGVwZW5kaW5nIG9uIHdoaWNoIHByb3BzIGFyZSBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIC0gSWYgX2RyYWdYIGFuZCBfZHJhZ1kgYXJlIHByb3ZpZGVkLCB3ZSBvdXRwdXQgdGhlIGdlc3R1cmUgZGVsdGEgZGlyZWN0bHkgdG8gdGhvc2UgbW90aW9uIHZhbHVlcy5cbiAgICAgKiAtIE90aGVyd2lzZSwgd2UgYXBwbHkgdGhlIGRlbHRhIHRvIHRoZSB4L3kgbW90aW9uIHZhbHVlcy5cbiAgICAgKi9cbiAgICBnZXRBeGlzTW90aW9uVmFsdWUoYXhpcykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBkcmFnS2V5ID0gXCJfZHJhZ1wiICsgYXhpcy50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBjb25zdCBleHRlcm5hbE1vdGlvblZhbHVlID0gdGhpcy52aXN1YWxFbGVtZW50LmdldFByb3BzKClbZHJhZ0tleV07XG4gICAgICAgIHJldHVybiBleHRlcm5hbE1vdGlvblZhbHVlXG4gICAgICAgICAgICA/IGV4dGVybmFsTW90aW9uVmFsdWVcbiAgICAgICAgICAgIDogdGhpcy52aXN1YWxFbGVtZW50LmdldFZhbHVlKGF4aXMsIChfYiA9IChfYSA9IHRoaXMudmlzdWFsRWxlbWVudC5nZXRQcm9wcygpLmluaXRpYWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtheGlzXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCk7XG4gICAgfVxuICAgIHNuYXBUb0N1cnNvcihwb2ludCkge1xuICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBkcmFnIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBub3QgZHJhZ2dpbmcgdGhpcyBheGlzLCBkbyBhbiBlYXJseSByZXR1cm4uXG4gICAgICAgICAgICBpZiAoIXNob3VsZERyYWcoYXhpcywgZHJhZywgdGhpcy5jdXJyZW50RGlyZWN0aW9uKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7IHByb2plY3Rpb24gfSA9IHRoaXMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IGF4aXNWYWx1ZSA9IHRoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICAgICAgaWYgKHByb2plY3Rpb24gJiYgcHJvamVjdGlvbi5sYXlvdXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSBwcm9qZWN0aW9uLmxheW91dC5hY3R1YWxbYXhpc107XG4gICAgICAgICAgICAgICAgYXhpc1ZhbHVlLnNldChwb2ludFtheGlzXSAtIG1peChtaW4sIG1heCwgMC41KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSB2aWV3cG9ydCByZXNpemVzIHdlIHdhbnQgdG8gY2hlY2sgaWYgdGhlIG1lYXN1cmVkIGNvbnN0cmFpbnRzXG4gICAgICogaGF2ZSBjaGFuZ2VkIGFuZCwgaWYgc28sIHJlcG9zaXRpb24gdGhlIGVsZW1lbnQgd2l0aGluIHRob3NlIG5ldyBjb25zdHJhaW50c1xuICAgICAqIHJlbGF0aXZlIHRvIHdoZXJlIGl0IHdhcyBiZWZvcmUgdGhlIHJlc2l6ZS5cbiAgICAgKi9cbiAgICBzY2FsZVBvc2l0aW9uV2l0aGluQ29uc3RyYWludHMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyBkcmFnLCBkcmFnQ29uc3RyYWludHMgfSA9IHRoaXMuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIGlmICghaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSB8fCAhcHJvamVjdGlvbiB8fCAhdGhpcy5jb25zdHJhaW50cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3AgY3VycmVudCBhbmltYXRpb25zIGFzIHRoZXJlIGNhbiBiZSB2aXN1YWwgZ2xpdGNoaW5nIGlmIHdlIHRyeSB0byBkb1xuICAgICAgICAgKiB0aGlzIG1pZC1hbmltYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVjb3JkIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZVxuICAgICAgICAgKiBjb25zdHJhaW50cyBib3ggYW5kIHNhdmUgYXMgYSBwcm9ncmVzcyB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGJveFByb2dyZXNzID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIGVhY2hBeGlzKChheGlzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBheGlzVmFsdWUgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgICAgIGlmIChheGlzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXRlc3QgPSBheGlzVmFsdWUuZ2V0KCk7XG4gICAgICAgICAgICAgICAgYm94UHJvZ3Jlc3NbYXhpc10gPSBjYWxjT3JpZ2luKHsgbWluOiBsYXRlc3QsIG1heDogbGF0ZXN0IH0sIHRoaXMuY29uc3RyYWludHNbYXhpc10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZSB0aGUgbGF5b3V0IG9mIHRoaXMgZWxlbWVudCBhbmQgcmVzb2x2ZSB0aGUgbGF0ZXN0IGRyYWcgY29uc3RyYWludHNcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHsgdHJhbnNmb3JtVGVtcGxhdGUgfSA9IHRoaXMudmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgPyB0cmFuc2Zvcm1UZW1wbGF0ZSh7fSwgXCJcIilcbiAgICAgICAgICAgIDogXCJub25lXCI7XG4gICAgICAgIChfYSA9IHByb2plY3Rpb24ucm9vdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVwZGF0ZVNjcm9sbCgpO1xuICAgICAgICBwcm9qZWN0aW9uLnVwZGF0ZUxheW91dCgpO1xuICAgICAgICB0aGlzLnJlc29sdmVDb25zdHJhaW50cygpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRm9yIGVhY2ggYXhpcywgY2FsY3VsYXRlIHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBsYXlvdXQgYXhpc1xuICAgICAgICAgKiB3aXRoaW4gdGhlIG5ldyBjb25zdHJhaW50cy5cbiAgICAgICAgICovXG4gICAgICAgIGVhY2hBeGlzKChheGlzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNob3VsZERyYWcoYXhpcywgZHJhZywgbnVsbCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxjdWxhdGUgYSBuZXcgdHJhbnNmb3JtIGJhc2VkIG9uIHRoZSBwcmV2aW91cyBib3ggcHJvZ3Jlc3NcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgYXhpc1ZhbHVlID0gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgICAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSB0aGlzLmNvbnN0cmFpbnRzW2F4aXNdO1xuICAgICAgICAgICAgYXhpc1ZhbHVlLnNldChtaXgobWluLCBtYXgsIGJveFByb2dyZXNzW2F4aXNdKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgZWxlbWVudERyYWdDb250cm9scy5zZXQodGhpcy52aXN1YWxFbGVtZW50LCB0aGlzKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudmlzdWFsRWxlbWVudC5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQXR0YWNoIGEgcG9pbnRlcmRvd24gZXZlbnQgbGlzdGVuZXIgb24gdGhpcyBET00gZWxlbWVudCB0byBpbml0aWF0ZSBkcmFnIHRyYWNraW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3Qgc3RvcFBvaW50ZXJMaXN0ZW5lciA9IGFkZFBvaW50ZXJFdmVudChlbGVtZW50LCBcInBvaW50ZXJkb3duXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBkcmFnLCBkcmFnTGlzdGVuZXIgPSB0cnVlIH0gPSB0aGlzLmdldFByb3BzKCk7XG4gICAgICAgICAgICBkcmFnICYmIGRyYWdMaXN0ZW5lciAmJiB0aGlzLnN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG1lYXN1cmVEcmFnQ29uc3RyYWludHMgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGRyYWdDb25zdHJhaW50cyB9ID0gdGhpcy5nZXRQcm9wcygpO1xuICAgICAgICAgICAgaWYgKGlzUmVmT2JqZWN0KGRyYWdDb25zdHJhaW50cykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gdGhpcy5yZXNvbHZlUmVmQ29uc3RyYWludHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB0aGlzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHN0b3BNZWFzdXJlTGF5b3V0TGlzdGVuZXIgPSBwcm9qZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJtZWFzdXJlXCIsIG1lYXN1cmVEcmFnQ29uc3RyYWludHMpO1xuICAgICAgICBpZiAocHJvamVjdGlvbiAmJiAhcHJvamVjdGlvbi5sYXlvdXQpIHtcbiAgICAgICAgICAgIChfYSA9IHByb2plY3Rpb24ucm9vdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVwZGF0ZVNjcm9sbCgpO1xuICAgICAgICAgICAgcHJvamVjdGlvbi51cGRhdGVMYXlvdXQoKTtcbiAgICAgICAgfVxuICAgICAgICBtZWFzdXJlRHJhZ0NvbnN0cmFpbnRzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdHRhY2ggYSB3aW5kb3cgcmVzaXplIGxpc3RlbmVyIHRvIHNjYWxlIHRoZSBkcmFnZ2FibGUgdGFyZ2V0IHdpdGhpbiBpdHMgZGVmaW5lZFxuICAgICAgICAgKiBjb25zdHJhaW50cyBhcyB0aGUgd2luZG93IHJlc2l6ZXMuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBzdG9wUmVzaXplTGlzdGVuZXIgPSBhZGREb21FdmVudCh3aW5kb3csIFwicmVzaXplXCIsICgpID0+IHRoaXMuc2NhbGVQb3NpdGlvbldpdGhpbkNvbnN0cmFpbnRzKCkpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIGVsZW1lbnQncyBsYXlvdXQgY2hhbmdlcywgY2FsY3VsYXRlIHRoZSBkZWx0YSBhbmQgYXBwbHkgdGhhdCB0b1xuICAgICAgICAgKiB0aGUgZHJhZyBnZXN0dXJlJ3Mgb3JpZ2luIHBvaW50LlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3Qgc3RvcExheW91dFVwZGF0ZUxpc3RlbmVyID0gcHJvamVjdGlvbi5hZGRFdmVudExpc3RlbmVyKFwiZGlkVXBkYXRlXCIsICgoeyBkZWx0YSwgaGFzTGF5b3V0Q2hhbmdlZCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nICYmIGhhc0xheW91dENoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb3Rpb25WYWx1ZSA9IHRoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW1vdGlvblZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9yaWdpblBvaW50W2F4aXNdICs9IGRlbHRhW2F4aXNdLnRyYW5zbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgbW90aW9uVmFsdWUuc2V0KG1vdGlvblZhbHVlLmdldCgpICsgZGVsdGFbYXhpc10udHJhbnNsYXRlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdG9wUmVzaXplTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BQb2ludGVyTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BNZWFzdXJlTGF5b3V0TGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BMYXlvdXRVcGRhdGVMaXN0ZW5lciA9PT0gbnVsbCB8fCBzdG9wTGF5b3V0VXBkYXRlTGlzdGVuZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0b3BMYXlvdXRVcGRhdGVMaXN0ZW5lcigpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRQcm9wcygpIHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgeyBkcmFnID0gZmFsc2UsIGRyYWdEaXJlY3Rpb25Mb2NrID0gZmFsc2UsIGRyYWdQcm9wYWdhdGlvbiA9IGZhbHNlLCBkcmFnQ29uc3RyYWludHMgPSBmYWxzZSwgZHJhZ0VsYXN0aWMgPSBkZWZhdWx0RWxhc3RpYywgZHJhZ01vbWVudHVtID0gdHJ1ZSwgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICBkcmFnLFxuICAgICAgICAgICAgZHJhZ0RpcmVjdGlvbkxvY2ssXG4gICAgICAgICAgICBkcmFnUHJvcGFnYXRpb24sXG4gICAgICAgICAgICBkcmFnQ29uc3RyYWludHMsXG4gICAgICAgICAgICBkcmFnRWxhc3RpYyxcbiAgICAgICAgICAgIGRyYWdNb21lbnR1bSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBzaG91bGREcmFnKGRpcmVjdGlvbiwgZHJhZywgY3VycmVudERpcmVjdGlvbikge1xuICAgIHJldHVybiAoKGRyYWcgPT09IHRydWUgfHwgZHJhZyA9PT0gZGlyZWN0aW9uKSAmJlxuICAgICAgICAoY3VycmVudERpcmVjdGlvbiA9PT0gbnVsbCB8fCBjdXJyZW50RGlyZWN0aW9uID09PSBkaXJlY3Rpb24pKTtcbn1cbi8qKlxuICogQmFzZWQgb24gYW4geC95IG9mZnNldCBkZXRlcm1pbmUgdGhlIGN1cnJlbnQgZHJhZyBkaXJlY3Rpb24uIElmIGJvdGggYXhpcycgb2Zmc2V0cyBhcmUgbG93ZXJcbiAqIHRoYW4gdGhlIHByb3ZpZGVkIHRocmVzaG9sZCwgcmV0dXJuIGBudWxsYC5cbiAqXG4gKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIHgveSBvZmZzZXQgZnJvbSBvcmlnaW4uXG4gKiBAcGFyYW0gbG9ja1RocmVzaG9sZCAtIChPcHRpb25hbCkgLSB0aGUgbWluaW11bSBhYnNvbHV0ZSBvZmZzZXQgYmVmb3JlIHdlIGNhbiBkZXRlcm1pbmUgYSBkcmFnIGRpcmVjdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudERpcmVjdGlvbihvZmZzZXQsIGxvY2tUaHJlc2hvbGQgPSAxMCkge1xuICAgIGxldCBkaXJlY3Rpb24gPSBudWxsO1xuICAgIGlmIChNYXRoLmFicyhvZmZzZXQueSkgPiBsb2NrVGhyZXNob2xkKSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IFwieVwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChNYXRoLmFicyhvZmZzZXQueCkgPiBsb2NrVGhyZXNob2xkKSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IFwieFwiO1xuICAgIH1cbiAgICByZXR1cm4gZGlyZWN0aW9uO1xufVxuXG5leHBvcnQgeyBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLCBlbGVtZW50RHJhZ0NvbnRyb2xzIH07XG4iLCJjb25zdCBjcmVhdGVBeGlzRGVsdGEgPSAoKSA9PiAoe1xuICAgIHRyYW5zbGF0ZTogMCxcbiAgICBzY2FsZTogMSxcbiAgICBvcmlnaW46IDAsXG4gICAgb3JpZ2luUG9pbnQ6IDAsXG59KTtcbmNvbnN0IGNyZWF0ZURlbHRhID0gKCkgPT4gKHtcbiAgICB4OiBjcmVhdGVBeGlzRGVsdGEoKSxcbiAgICB5OiBjcmVhdGVBeGlzRGVsdGEoKSxcbn0pO1xuY29uc3QgY3JlYXRlQXhpcyA9ICgpID0+ICh7IG1pbjogMCwgbWF4OiAwIH0pO1xuY29uc3QgY3JlYXRlQm94ID0gKCkgPT4gKHtcbiAgICB4OiBjcmVhdGVBeGlzKCksXG4gICAgeTogY3JlYXRlQXhpcygpLFxufSk7XG5cbmV4cG9ydCB7IGNyZWF0ZUF4aXMsIGNyZWF0ZUF4aXNEZWx0YSwgY3JlYXRlQm94LCBjcmVhdGVEZWx0YSB9O1xuIiwiaW1wb3J0IHsgdXNlRHJhZyB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL2RyYWcvdXNlLWRyYWcubWpzJztcbmltcG9ydCB7IHVzZVBhbkdlc3R1cmUgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy91c2UtcGFuLWdlc3R1cmUubWpzJztcbmltcG9ydCB7IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50IH0gZnJvbSAnLi4vdXRpbHMvbWFrZS1yZW5kZXJsZXNzLWNvbXBvbmVudC5tanMnO1xuXG5jb25zdCBkcmFnID0ge1xuICAgIHBhbjogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlUGFuR2VzdHVyZSksXG4gICAgZHJhZzogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlRHJhZyksXG59O1xuXG5leHBvcnQgeyBkcmFnIH07XG4iLCJpbXBvcnQgeyB1c2VSZWYsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vdGlvbkNvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L01vdGlvbkNvbmZpZ0NvbnRleHQubWpzJztcbmltcG9ydCB7IHVzZVVubW91bnRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2UtdW5tb3VudC1lZmZlY3QubWpzJztcbmltcG9ydCB7IHVzZVBvaW50ZXJFdmVudCB9IGZyb20gJy4uL2V2ZW50cy91c2UtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgUGFuU2Vzc2lvbiB9IGZyb20gJy4vUGFuU2Vzc2lvbi5tanMnO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gaGFuZGxlcnMgLVxuICogQHBhcmFtIHJlZiAtXG4gKlxuICogQHByaXZhdGVSZW1hcmtzXG4gKiBDdXJyZW50bHkgdGhpcyBzZXRzIG5ldyBwYW4gZ2VzdHVyZSBmdW5jdGlvbnMgZXZlcnkgcmVuZGVyLiBUaGUgbWVtbyByb3V0ZSBoYXMgYmVlbiBleHBsb3JlZFxuICogaW4gdGhlIHBhc3QgYnV0IHVsdGltYXRlbHkgd2UncmUgc3RpbGwgY3JlYXRpbmcgbmV3IGZ1bmN0aW9ucyBldmVyeSByZW5kZXIuIEFuIG9wdGltaXNhdGlvblxuICogdG8gZXhwbG9yZSBpcyBjcmVhdGluZyB0aGUgcGFuIGdlc3R1cmVzIGFuZCBsb2FkaW5nIHRoZW0gaW50byBhIGByZWZgLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VQYW5HZXN0dXJlKHsgb25QYW4sIG9uUGFuU3RhcnQsIG9uUGFuRW5kLCBvblBhblNlc3Npb25TdGFydCwgdmlzdWFsRWxlbWVudCwgfSkge1xuICAgIGNvbnN0IGhhc1BhbkV2ZW50cyA9IG9uUGFuIHx8IG9uUGFuU3RhcnQgfHwgb25QYW5FbmQgfHwgb25QYW5TZXNzaW9uU3RhcnQ7XG4gICAgY29uc3QgcGFuU2Vzc2lvbiA9IHVzZVJlZihudWxsKTtcbiAgICBjb25zdCB7IHRyYW5zZm9ybVBhZ2VQb2ludCB9ID0gdXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KTtcbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgICAgb25TZXNzaW9uU3RhcnQ6IG9uUGFuU2Vzc2lvblN0YXJ0LFxuICAgICAgICBvblN0YXJ0OiBvblBhblN0YXJ0LFxuICAgICAgICBvbk1vdmU6IG9uUGFuLFxuICAgICAgICBvbkVuZDogKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICBwYW5TZXNzaW9uLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgICAgb25QYW5FbmQgJiYgb25QYW5FbmQoZXZlbnQsIGluZm8pO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHBhblNlc3Npb24uY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFuU2Vzc2lvbi5jdXJyZW50LnVwZGF0ZUhhbmRsZXJzKGhhbmRsZXJzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oZXZlbnQpIHtcbiAgICAgICAgcGFuU2Vzc2lvbi5jdXJyZW50ID0gbmV3IFBhblNlc3Npb24oZXZlbnQsIGhhbmRsZXJzLCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1QYWdlUG9pbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1c2VQb2ludGVyRXZlbnQodmlzdWFsRWxlbWVudCwgXCJwb2ludGVyZG93blwiLCBoYXNQYW5FdmVudHMgJiYgb25Qb2ludGVyRG93bik7XG4gICAgdXNlVW5tb3VudEVmZmVjdCgoKSA9PiBwYW5TZXNzaW9uLmN1cnJlbnQgJiYgcGFuU2Vzc2lvbi5jdXJyZW50LmVuZCgpKTtcbn1cblxuZXhwb3J0IHsgdXNlUGFuR2VzdHVyZSB9O1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlzdWFsRWxlbWVudERyYWdDb250cm9scyB9IGZyb20gJy4vVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5tanMnO1xuaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuLi8uLi91dGlscy91c2UtY29uc3RhbnQubWpzJztcblxuLyoqXG4gKiBBIGhvb2sgdGhhdCBhbGxvd3MgYW4gZWxlbWVudCB0byBiZSBkcmFnZ2VkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VEcmFnKHByb3BzKSB7XG4gICAgY29uc3QgeyBkcmFnQ29udHJvbHM6IGdyb3VwRHJhZ0NvbnRyb2xzLCB2aXN1YWxFbGVtZW50IH0gPSBwcm9wcztcbiAgICBjb25zdCBkcmFnQ29udHJvbHMgPSB1c2VDb25zdGFudCgoKSA9PiBuZXcgVmlzdWFsRWxlbWVudERyYWdDb250cm9scyh2aXN1YWxFbGVtZW50KSk7XG4gICAgLy8gSWYgd2UndmUgYmVlbiBwcm92aWRlZCBhIERyYWdDb250cm9scyBmb3IgbWFudWFsIGNvbnRyb2wgb3ZlciB0aGUgZHJhZyBnZXN0dXJlLFxuICAgIC8vIHN1YnNjcmliZSB0aGlzIGNvbXBvbmVudCB0byBpdCBvbiBtb3VudC5cbiAgICB1c2VFZmZlY3QoKCkgPT4gZ3JvdXBEcmFnQ29udHJvbHMgJiYgZ3JvdXBEcmFnQ29udHJvbHMuc3Vic2NyaWJlKGRyYWdDb250cm9scyksIFtkcmFnQ29udHJvbHMsIGdyb3VwRHJhZ0NvbnRyb2xzXSk7XG4gICAgLy8gQXBwbHkgdGhlIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgZWxlbWVudFxuICAgIHVzZUVmZmVjdCgoKSA9PiBkcmFnQ29udHJvbHMuYWRkTGlzdGVuZXJzKCksIFtkcmFnQ29udHJvbHNdKTtcbn1cblxuZXhwb3J0IHsgdXNlRHJhZyB9O1xuIiwiLy8gRG9lcyB0aGlzIGRldmljZSBwcmVmZXIgcmVkdWNlZCBtb3Rpb24/IFJldHVybnMgYG51bGxgIHNlcnZlci1zaWRlLlxuY29uc3QgcHJlZmVyc1JlZHVjZWRNb3Rpb24gPSB7IGN1cnJlbnQ6IG51bGwgfTtcbmNvbnN0IGhhc1JlZHVjZWRNb3Rpb25MaXN0ZW5lciA9IHsgY3VycmVudDogZmFsc2UgfTtcblxuZXhwb3J0IHsgaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyLCBwcmVmZXJzUmVkdWNlZE1vdGlvbiB9O1xuIiwiaW1wb3J0IHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9IGZyb20gJy4uLy4uL3V0aWxzL3N1YnNjcmlwdGlvbi1tYW5hZ2VyLm1qcyc7XG5cbmNvbnN0IG5hbWVzID0gW1xuICAgIFwiTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwiQmVmb3JlTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwiTGF5b3V0VXBkYXRlXCIsXG4gICAgXCJWaWV3cG9ydEJveFVwZGF0ZVwiLFxuICAgIFwiVXBkYXRlXCIsXG4gICAgXCJSZW5kZXJcIixcbiAgICBcIkFuaW1hdGlvbkNvbXBsZXRlXCIsXG4gICAgXCJMYXlvdXRBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwiQW5pbWF0aW9uU3RhcnRcIixcbiAgICBcIkxheW91dEFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJTZXRBeGlzVGFyZ2V0XCIsXG4gICAgXCJVbm1vdW50XCIsXG5dO1xuZnVuY3Rpb24gY3JlYXRlTGlmZWN5Y2xlcygpIHtcbiAgICBjb25zdCBtYW5hZ2VycyA9IG5hbWVzLm1hcCgoKSA9PiBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpKTtcbiAgICBjb25zdCBwcm9wU3Vic2NyaXB0aW9ucyA9IHt9O1xuICAgIGNvbnN0IGxpZmVjeWNsZXMgPSB7XG4gICAgICAgIGNsZWFyQWxsTGlzdGVuZXJzOiAoKSA9PiBtYW5hZ2Vycy5mb3JFYWNoKChtYW5hZ2VyKSA9PiBtYW5hZ2VyLmNsZWFyKCkpLFxuICAgICAgICB1cGRhdGVQcm9wTGlzdGVuZXJzOiAocHJvcHMpID0+IHtcbiAgICAgICAgICAgIG5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3Qgb24gPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BMaXN0ZW5lciA9IHByb3BzW29uXTtcbiAgICAgICAgICAgICAgICAvLyBVbnN1YnNjcmliZSBleGlzdGluZyBzdWJzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAoX2EgPSBwcm9wU3Vic2NyaXB0aW9uc1tuYW1lXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwocHJvcFN1YnNjcmlwdGlvbnMpO1xuICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgaWYgKHByb3BMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wU3Vic2NyaXB0aW9uc1tuYW1lXSA9IGxpZmVjeWNsZXNbb25dKHByb3BMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBtYW5hZ2Vycy5mb3JFYWNoKChtYW5hZ2VyLCBpKSA9PiB7XG4gICAgICAgIGxpZmVjeWNsZXNbXCJvblwiICsgbmFtZXNbaV1dID0gKGhhbmRsZXIpID0+IG1hbmFnZXIuYWRkKGhhbmRsZXIpO1xuICAgICAgICBsaWZlY3ljbGVzW1wibm90aWZ5XCIgKyBuYW1lc1tpXV0gPSAoLi4uYXJncykgPT4gbWFuYWdlci5ub3RpZnkoLi4uYXJncyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGxpZmVjeWNsZXM7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUxpZmVjeWNsZXMgfTtcbiIsImltcG9ydCBzeW5jLCB7IGNhbmNlbFN5bmMgfSBmcm9tICdmcmFtZXN5bmMnO1xuaW1wb3J0IHsgaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uIH0gZnJvbSAnLi4vdXRpbHMvcmVkdWNlZC1tb3Rpb24vaW5kZXgubWpzJztcbmltcG9ydCB7IGhhc1JlZHVjZWRNb3Rpb25MaXN0ZW5lciwgcHJlZmVyc1JlZHVjZWRNb3Rpb24gfSBmcm9tICcuLi91dGlscy9yZWR1Y2VkLW1vdGlvbi9zdGF0ZS5tanMnO1xuaW1wb3J0IHsgbW90aW9uVmFsdWUgfSBmcm9tICcuLi92YWx1ZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUgfSBmcm9tICcuLi92YWx1ZS91c2Utd2lsbC1jaGFuZ2UvaXMubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IHZhcmlhbnRQcmlvcml0eU9yZGVyIH0gZnJvbSAnLi91dGlscy9hbmltYXRpb24tc3RhdGUubWpzJztcbmltcG9ydCB7IGlzVmFyaWFudExhYmVsIH0gZnJvbSAnLi91dGlscy9pcy12YXJpYW50LWxhYmVsLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVMaWZlY3ljbGVzIH0gZnJvbSAnLi91dGlscy9saWZlY3ljbGVzLm1qcyc7XG5pbXBvcnQgeyB1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL21vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IGlzQ29udHJvbGxpbmdWYXJpYW50cywgaXNWYXJpYW50Tm9kZSB9IGZyb20gJy4vdXRpbHMvaXMtY29udHJvbGxpbmctdmFyaWFudHMubWpzJztcbmltcG9ydCB7IGVudiB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3MubWpzJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ2hleS1saXN0ZW4nO1xuaW1wb3J0IHsgZmVhdHVyZURlZmluaXRpb25zIH0gZnJvbSAnLi4vbW90aW9uL2ZlYXR1cmVzL2RlZmluaXRpb25zLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNSZWZPYmplY3QgfSBmcm9tICcuLi91dGlscy9pcy1yZWYtb2JqZWN0Lm1qcyc7XG5cbmNvbnN0IGZlYXR1cmVOYW1lcyA9IE9iamVjdC5rZXlzKGZlYXR1cmVEZWZpbml0aW9ucyk7XG5jb25zdCBudW1GZWF0dXJlcyA9IGZlYXR1cmVOYW1lcy5sZW5ndGg7XG5jb25zdCB2aXN1YWxFbGVtZW50ID0gKHsgdHJlZVR5cGUgPSBcIlwiLCBidWlsZCwgZ2V0QmFzZVRhcmdldCwgbWFrZVRhcmdldEFuaW1hdGFibGUsIG1lYXN1cmVWaWV3cG9ydEJveCwgcmVuZGVyOiByZW5kZXJJbnN0YW5jZSwgcmVhZFZhbHVlRnJvbUluc3RhbmNlLCByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZSwgc29ydE5vZGVQb3NpdGlvbiwgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLCB9KSA9PiAoeyBwYXJlbnQsIHByb3BzLCBwcmVzZW5jZUlkLCBibG9ja0luaXRpYWxBbmltYXRpb24sIHZpc3VhbFN0YXRlLCByZWR1Y2VkTW90aW9uQ29uZmlnLCB9LCBvcHRpb25zID0ge30pID0+IHtcbiAgICBsZXQgaXNNb3VudGVkID0gZmFsc2U7XG4gICAgY29uc3QgeyBsYXRlc3RWYWx1ZXMsIHJlbmRlclN0YXRlIH0gPSB2aXN1YWxTdGF0ZTtcbiAgICAvKipcbiAgICAgKiBUaGUgaW5zdGFuY2Ugb2YgdGhlIHJlbmRlci1zcGVjaWZpYyBub2RlIHRoYXQgd2lsbCBiZSBoeWRyYXRlZCBieSB0aGVcbiAgICAgKiBleHBvc2VkIFJlYWN0IHJlZi4gU28gZm9yIGV4YW1wbGUsIHRoaXMgdmlzdWFsIGVsZW1lbnQgY2FuIGhvc3QgYVxuICAgICAqIEhUTUxFbGVtZW50LCBwbGFpbiBvYmplY3QsIG9yIFRocmVlLmpzIG9iamVjdC4gVGhlIGZ1bmN0aW9ucyBwcm92aWRlZFxuICAgICAqIGluIFZpc3VhbEVsZW1lbnRDb25maWcgYWxsb3cgdXMgdG8gaW50ZXJmYWNlIHdpdGggdGhpcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBsZXQgaW5zdGFuY2U7XG4gICAgLyoqXG4gICAgICogTWFuYWdlcyB0aGUgc3Vic2NyaXB0aW9ucyBmb3IgYSB2aXN1YWwgZWxlbWVudCdzIGxpZmVjeWNsZSwgZm9yIGluc3RhbmNlXG4gICAgICogb25SZW5kZXJcbiAgICAgKi9cbiAgICBjb25zdCBsaWZlY3ljbGVzID0gY3JlYXRlTGlmZWN5Y2xlcygpO1xuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIGFsbCBtb3Rpb24gdmFsdWVzIGF0dGFjaGVkIHRvIHRoaXMgdmlzdWFsIGVsZW1lbnQuIE1vdGlvblxuICAgICAqIHZhbHVlcyBhcmUgc291cmNlIG9mIHRydXRoIGZvciBhbnkgZ2l2ZW4gYW5pbWF0ZWQgdmFsdWUuIEEgbW90aW9uXG4gICAgICogdmFsdWUgbWlnaHQgYmUgcHJvdmlkZWQgZXh0ZXJuYWxseSBieSB0aGUgY29tcG9uZW50IHZpYSBwcm9wcy5cbiAgICAgKi9cbiAgICBjb25zdCB2YWx1ZXMgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogQSBtYXAgb2YgZXZlcnkgc3Vic2NyaXB0aW9uIHRoYXQgYmluZHMgdGhlIHByb3ZpZGVkIG9yIGdlbmVyYXRlZFxuICAgICAqIG1vdGlvbiB2YWx1ZXMgb25DaGFuZ2UgbGlzdGVuZXJzIHRvIHRoaXMgdmlzdWFsIGVsZW1lbnQuXG4gICAgICovXG4gICAgY29uc3QgdmFsdWVTdWJzY3JpcHRpb25zID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBwcmV2aW91c2x5LXByb3ZpZGVkIG1vdGlvbiB2YWx1ZXMgYXMgcmV0dXJuZWRcbiAgICAgKiBmcm9tIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcy4gV2UgdXNlIHRoZSBrZXlzIGluIGhlcmUgdG8gZGV0ZXJtaW5lXG4gICAgICogaWYgYW55IG1vdGlvbiB2YWx1ZXMgbmVlZCB0byBiZSByZW1vdmVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgICAqL1xuICAgIGxldCBwcmV2TW90aW9uVmFsdWVzID0ge307XG4gICAgLyoqXG4gICAgICogV2hlbiB2YWx1ZXMgYXJlIHJlbW92ZWQgZnJvbSBhbGwgYW5pbWF0aW9uIHByb3BzIHdlIG5lZWQgdG8gc2VhcmNoXG4gICAgICogZm9yIGEgZmFsbGJhY2sgdmFsdWUgdG8gYW5pbWF0ZSB0by4gVGhlc2UgdmFsdWVzIGFyZSB0cmFja2VkIGluIGJhc2VUYXJnZXQuXG4gICAgICovXG4gICAgY29uc3QgYmFzZVRhcmdldCA9IHtcbiAgICAgICAgLi4ubGF0ZXN0VmFsdWVzLFxuICAgIH07XG4gICAgLy8gSW50ZXJuYWwgbWV0aG9kcyA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvKipcbiAgICAgKiBPbiBtb3VudCwgdGhpcyB3aWxsIGJlIGh5ZHJhdGVkIHdpdGggYSBjYWxsYmFjayB0byBkaXNjb25uZWN0XG4gICAgICogdGhpcyB2aXN1YWwgZWxlbWVudCBmcm9tIGl0cyBwYXJlbnQgb24gdW5tb3VudC5cbiAgICAgKi9cbiAgICBsZXQgcmVtb3ZlRnJvbVZhcmlhbnRUcmVlO1xuICAgIC8qKlxuICAgICAqIFJlbmRlciB0aGUgZWxlbWVudCB3aXRoIHRoZSBsYXRlc3Qgc3R5bGVzIG91dHNpZGUgb2YgdGhlIFJlYWN0XG4gICAgICogcmVuZGVyIGxpZmVjeWNsZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKCFpbnN0YW5jZSB8fCAhaXNNb3VudGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0cmlnZ2VyQnVpbGQoKTtcbiAgICAgICAgcmVuZGVySW5zdGFuY2UoaW5zdGFuY2UsIHJlbmRlclN0YXRlLCBwcm9wcy5zdHlsZSwgZWxlbWVudC5wcm9qZWN0aW9uKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJpZ2dlckJ1aWxkKCkge1xuICAgICAgICBidWlsZChlbGVtZW50LCByZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCBwcm9wcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgbGlmZWN5Y2xlcy5ub3RpZnlVcGRhdGUobGF0ZXN0VmFsdWVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiaW5kVG9Nb3Rpb25WYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlbW92ZU9uQ2hhbmdlID0gdmFsdWUub25DaGFuZ2UoKGxhdGVzdFZhbHVlKSA9PiB7XG4gICAgICAgICAgICBsYXRlc3RWYWx1ZXNba2V5XSA9IGxhdGVzdFZhbHVlO1xuICAgICAgICAgICAgcHJvcHMub25VcGRhdGUgJiYgc3luYy51cGRhdGUodXBkYXRlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZW1vdmVPblJlbmRlclJlcXVlc3QgPSB2YWx1ZS5vblJlbmRlclJlcXVlc3QoZWxlbWVudC5zY2hlZHVsZVJlbmRlcik7XG4gICAgICAgIHZhbHVlU3Vic2NyaXB0aW9ucy5zZXQoa2V5LCAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmVPbkNoYW5nZSgpO1xuICAgICAgICAgICAgcmVtb3ZlT25SZW5kZXJSZXF1ZXN0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbnkgbW90aW9uIHZhbHVlcyB0aGF0IGFyZSBwcm92aWRlZCB0byB0aGUgZWxlbWVudCB3aGVuIGNyZWF0ZWRcbiAgICAgKiBhcmVuJ3QgeWV0IGJvdW5kIHRvIHRoZSBlbGVtZW50LCBhcyB0aGlzIHdvdWxkIHRlY2huaWNhbGx5IGJlIGltcHVyZS5cbiAgICAgKiBIb3dldmVyLCB3ZSBpdGVyYXRlIHRocm91Z2ggdGhlIG1vdGlvbiB2YWx1ZXMgYW5kIHNldCB0aGVtIHRvIHRoZVxuICAgICAqIGluaXRpYWwgdmFsdWVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIFRPRE86IFRoaXMgaXMgaW1wdXJlIGFuZCB3ZSBzaG91bGQgbG9vayBhdCBjaGFuZ2luZyB0aGlzIHRvIHJ1biBvbiBtb3VudC5cbiAgICAgKiBEb2luZyBzbyB3aWxsIGJyZWFrIHNvbWUgdGVzdHMgYnV0IHRoaXMgaXNuJ3QgbmVjY2Vzc2FyaWx5IGEgYnJlYWtpbmcgY2hhbmdlLFxuICAgICAqIG1vcmUgYSByZWZsZWN0aW9uIG9mIHRoZSB0ZXN0LlxuICAgICAqL1xuICAgIGNvbnN0IHsgd2lsbENoYW5nZSwgLi4uaW5pdGlhbE1vdGlvblZhbHVlcyB9ID0gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbml0aWFsTW90aW9uVmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaW5pdGlhbE1vdGlvblZhbHVlc1trZXldO1xuICAgICAgICBpZiAobGF0ZXN0VmFsdWVzW2tleV0gIT09IHVuZGVmaW5lZCAmJiBpc01vdGlvblZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUuc2V0KGxhdGVzdFZhbHVlc1trZXldLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUod2lsbENoYW5nZSkpIHtcbiAgICAgICAgICAgICAgICB3aWxsQ2hhbmdlLmFkZChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGVybWluZSB3aGF0IHJvbGUgdGhpcyB2aXN1YWwgZWxlbWVudCBzaG91bGQgdGFrZSBpbiB0aGUgdmFyaWFudCB0cmVlLlxuICAgICAqL1xuICAgIGNvbnN0IGlzQ29udHJvbGxpbmdWYXJpYW50cyQxID0gaXNDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKTtcbiAgICBjb25zdCBpc1ZhcmlhbnROb2RlJDEgPSBpc1ZhcmlhbnROb2RlKHByb3BzKTtcbiAgICBjb25zdCBlbGVtZW50ID0ge1xuICAgICAgICB0cmVlVHlwZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgaXMgYSBtaXJyb3Igb2YgdGhlIGludGVybmFsIGluc3RhbmNlIHByb3AsIHdoaWNoIGtlZXBzXG4gICAgICAgICAqIFZpc3VhbEVsZW1lbnQgdHlwZS1jb21wYXRpYmxlIHdpdGggUmVhY3QncyBSZWZPYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBjdXJyZW50OiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRlcHRoIG9mIHRoaXMgdmlzdWFsIGVsZW1lbnQgd2l0aGluIHRoZSB2aXN1YWwgZWxlbWVudCB0cmVlLlxuICAgICAgICAgKi9cbiAgICAgICAgZGVwdGg6IHBhcmVudCA/IHBhcmVudC5kZXB0aCArIDEgOiAwLFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIGNoaWxkcmVuOiBuZXcgU2V0KCksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgcHJlc2VuY2VJZCxcbiAgICAgICAgc2hvdWxkUmVkdWNlTW90aW9uOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhpcyBjb21wb25lbnQgaXMgcGFydCBvZiB0aGUgdmFyaWFudCB0cmVlLCBpdCBzaG91bGQgdHJhY2tcbiAgICAgICAgICogYW55IGNoaWxkcmVuIHRoYXQgYXJlIGFsc28gcGFydCBvZiB0aGUgdHJlZS4gVGhpcyBpcyBlc3NlbnRpYWxseVxuICAgICAgICAgKiBhIHNoYWRvdyB0cmVlIHRvIHNpbXBsaWZ5IGxvZ2ljIGFyb3VuZCBob3cgdG8gc3RhZ2dlciBvdmVyIGNoaWxkcmVuLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyaWFudENoaWxkcmVuOiBpc1ZhcmlhbnROb2RlJDEgPyBuZXcgU2V0KCkgOiB1bmRlZmluZWQsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoaXMgaW5zdGFuY2UgaXMgdmlzaWJsZS4gVGhpcyBjYW4gYmUgY2hhbmdlZCBpbXBlcmF0aXZlbHlcbiAgICAgICAgICogYnkgdGhlIHByb2plY3Rpb24gdHJlZSwgaXMgYW5hbG9nb3VzIHRvIENTUydzIHZpc2liaWxpdHkgaW4gdGhhdFxuICAgICAgICAgKiBoaWRkZW4gZWxlbWVudHMgc2hvdWxkIHRha2UgdXAgbGF5b3V0LCBhbmQgbmVlZHMgZW5hY3RpbmcgYnkgdGhlIGNvbmZpZ3VyZWRcbiAgICAgICAgICogcmVuZGVyIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgaXNWaXNpYmxlOiB1bmRlZmluZWQsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb3JtYWxseSwgaWYgYSBjb21wb25lbnQgaXMgY29udHJvbGxlZCBieSBhIHBhcmVudCdzIHZhcmlhbnRzLCBpdCBjYW5cbiAgICAgICAgICogcmVseSBvbiB0aGF0IGFuY2VzdG9yIHRvIHRyaWdnZXIgYW5pbWF0aW9ucyBmdXJ0aGVyIGRvd24gdGhlIHRyZWUuXG4gICAgICAgICAqIEhvd2V2ZXIsIGlmIGEgY29tcG9uZW50IGlzIGNyZWF0ZWQgYWZ0ZXIgaXRzIHBhcmVudCBpcyBtb3VudGVkLCB0aGUgcGFyZW50XG4gICAgICAgICAqIHdvbid0IHRyaWdnZXIgdGhhdCBtb3VudCBhbmltYXRpb24gc28gdGhlIGNoaWxkIG5lZWRzIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUT0RPOiBUaGlzIG1pZ2h0IGJlIGJldHRlciByZXBsYWNlZCB3aXRoIGEgbWV0aG9kIGlzUGFyZW50TW91bnRlZFxuICAgICAgICAgKi9cbiAgICAgICAgbWFudWFsbHlBbmltYXRlT25Nb3VudDogQm9vbGVhbihwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuaXNNb3VudGVkKCkpLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBjYW4gYmUgc2V0IGJ5IEFuaW1hdGVQcmVzZW5jZSB0byBmb3JjZSBjb21wb25lbnRzIHRoYXQgbW91bnRcbiAgICAgICAgICogYXQgdGhlIHNhbWUgdGltZSBhcyBpdCB0byBtb3VudCBhcyBpZiB0aGV5IGhhdmUgaW5pdGlhbD17ZmFsc2V9IHNldC5cbiAgICAgICAgICovXG4gICAgICAgIGJsb2NrSW5pdGlhbEFuaW1hdGlvbixcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZSB3aGV0aGVyIHRoaXMgY29tcG9uZW50IGhhcyBtb3VudGVkIHlldC4gVGhpcyBpcyBtb3N0bHkgdXNlZFxuICAgICAgICAgKiBieSB2YXJpYW50IGNoaWxkcmVuIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZXkgbmVlZCB0byB0cmlnZ2VyIHRoZWlyXG4gICAgICAgICAqIG93biBhbmltYXRpb25zIG9uIG1vdW50LlxuICAgICAgICAgKi9cbiAgICAgICAgaXNNb3VudGVkOiAoKSA9PiBCb29sZWFuKGluc3RhbmNlKSxcbiAgICAgICAgbW91bnQobmV3SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IGVsZW1lbnQuY3VycmVudCA9IG5ld0luc3RhbmNlO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQucHJvamVjdGlvbikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucHJvamVjdGlvbi5tb3VudChuZXdJbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNWYXJpYW50Tm9kZSQxICYmIHBhcmVudCAmJiAhaXNDb250cm9sbGluZ1ZhcmlhbnRzJDEpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVGcm9tVmFyaWFudFRyZWUgPSBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuYWRkVmFyaWFudENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IGJpbmRUb01vdGlvblZhbHVlKGtleSwgdmFsdWUpKTtcbiAgICAgICAgICAgIGlmICghaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBpbml0UHJlZmVyc1JlZHVjZWRNb3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZW1lbnQuc2hvdWxkUmVkdWNlTW90aW9uID1cbiAgICAgICAgICAgICAgICByZWR1Y2VkTW90aW9uQ29uZmlnID09PSBcIm5ldmVyXCJcbiAgICAgICAgICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgICAgICAgICA6IHJlZHVjZWRNb3Rpb25Db25maWcgPT09IFwiYWx3YXlzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwcmVmZXJzUmVkdWNlZE1vdGlvbi5jdXJyZW50O1xuICAgICAgICAgICAgcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmNoaWxkcmVuLmFkZChlbGVtZW50KTtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0UHJvcHMocHJvcHMpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHVubW91bnQoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAoX2EgPSBlbGVtZW50LnByb2plY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51bm1vdW50KCk7XG4gICAgICAgICAgICBjYW5jZWxTeW5jLnVwZGF0ZSh1cGRhdGUpO1xuICAgICAgICAgICAgY2FuY2VsU3luYy5yZW5kZXIocmVuZGVyKTtcbiAgICAgICAgICAgIHZhbHVlU3Vic2NyaXB0aW9ucy5mb3JFYWNoKChyZW1vdmUpID0+IHJlbW92ZSgpKTtcbiAgICAgICAgICAgIHJlbW92ZUZyb21WYXJpYW50VHJlZSA9PT0gbnVsbCB8fCByZW1vdmVGcm9tVmFyaWFudFRyZWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlbW92ZUZyb21WYXJpYW50VHJlZSgpO1xuICAgICAgICAgICAgcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmNoaWxkcmVuLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgICAgIGxpZmVjeWNsZXMuY2xlYXJBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIGluc3RhbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaXNNb3VudGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRGZWF0dXJlcyhyZW5kZXJlZFByb3BzLCBpc1N0cmljdCwgcHJlbG9hZGVkRmVhdHVyZXMsIHByb2plY3Rpb25JZCwgUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciwgaW5pdGlhbExheW91dEdyb3VwQ29uZmlnKSB7XG4gICAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSdyZSBpbiBkZXZlbG9wbWVudCBtb2RlLCBjaGVjayB0byBtYWtlIHN1cmUgd2UncmUgbm90IHJlbmRlcmluZyBhIG1vdGlvbiBjb21wb25lbnRcbiAgICAgICAgICAgICAqIGFzIGEgY2hpbGQgb2YgTGF6eU1vdGlvbiwgYXMgdGhpcyB3aWxsIGJyZWFrIHRoZSBmaWxlLXNpemUgYmVuZWZpdHMgb2YgdXNpbmcgaXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChlbnYgIT09IFwicHJvZHVjdGlvblwiICYmIHByZWxvYWRlZEZlYXR1cmVzICYmIGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaW52YXJpYW50KGZhbHNlLCBcIllvdSBoYXZlIHJlbmRlcmVkIGEgYG1vdGlvbmAgY29tcG9uZW50IHdpdGhpbiBhIGBMYXp5TW90aW9uYCBjb21wb25lbnQuIFRoaXMgd2lsbCBicmVhayB0cmVlIHNoYWtpbmcuIEltcG9ydCBhbmQgcmVuZGVyIGEgYG1gIGNvbXBvbmVudCBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRmVhdHVyZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBmZWF0dXJlTmFtZXNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgeyBpc0VuYWJsZWQsIENvbXBvbmVudCB9ID0gZmVhdHVyZURlZmluaXRpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEl0IG1pZ2h0IGJlIHBvc3NpYmxlIGluIHRoZSBmdXR1cmUgdG8gdXNlIHRoaXMgbW9tZW50IHRvXG4gICAgICAgICAgICAgICAgICogZHluYW1pY2FsbHkgcmVxdWVzdCBmdW5jdGlvbmFsaXR5LiBJbiBpbml0aWFsIHRlc3RzIHRoaXNcbiAgICAgICAgICAgICAgICAgKiB3YXMgcHJvZHVjaW5nIGEgbG90IG9mIGR1cGxpY2F0aW9uIGFtb25nc3QgYnVuZGxlcy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKHByb3BzKSAmJiBDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChjcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucmVuZGVyZWRQcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQucHJvamVjdGlvbiAmJiBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5wcm9qZWN0aW9uID0gbmV3IFByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IocHJvamVjdGlvbklkLCBlbGVtZW50LmdldExhdGVzdFZhbHVlcygpLCBwYXJlbnQgJiYgcGFyZW50LnByb2plY3Rpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0SWQsIGxheW91dCwgZHJhZywgZHJhZ0NvbnN0cmFpbnRzLCBsYXlvdXRTY3JvbGwsIH0gPSByZW5kZXJlZFByb3BzO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucHJvamVjdGlvbi5zZXRPcHRpb25zKHtcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0SWQsXG4gICAgICAgICAgICAgICAgICAgIGxheW91dCxcbiAgICAgICAgICAgICAgICAgICAgYWx3YXlzTWVhc3VyZUxheW91dDogQm9vbGVhbihkcmFnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGRyYWdDb25zdHJhaW50cyAmJiBpc1JlZk9iamVjdChkcmFnQ29uc3RyYWludHMpKSxcbiAgICAgICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVSZW5kZXI6ICgpID0+IGVsZW1lbnQuc2NoZWR1bGVSZW5kZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFRPRE86IFVwZGF0ZSBvcHRpb25zIGluIGFuIGVmZmVjdC4gVGhpcyBjb3VsZCBiZSB0cmlja3kgYXMgaXQnbGwgYmUgdG9vIGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICogdG8gdXBkYXRlIGJ5IHRoZSB0aW1lIGxheW91dCBhbmltYXRpb25zIHJ1bi5cbiAgICAgICAgICAgICAgICAgICAgICogV2UgYWxzbyBuZWVkIHRvIGZpeCB0aGlzIHNhZmVUb1JlbW92ZSBieSBsaW5raW5nIGl0IHVwIHRvIHRoZSBvbmUgcmV0dXJuZWQgYnkgdXNlUHJlc2VuY2UsXG4gICAgICAgICAgICAgICAgICAgICAqIGVuc3VyaW5nIGl0IGdldHMgY2FsbGVkIGlmIHRoZXJlJ3Mgbm8gcG90ZW50aWFsIGxheW91dCBhbmltYXRpb25zLlxuICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVHlwZTogdHlwZW9mIGxheW91dCA9PT0gXCJzdHJpbmdcIiA/IGxheW91dCA6IFwiYm90aFwiLFxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsUHJvbW90aW9uQ29uZmlnOiBpbml0aWFsTGF5b3V0R3JvdXBDb25maWcsXG4gICAgICAgICAgICAgICAgICAgIGxheW91dFNjcm9sbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCBhIGNoaWxkIHZpc3VhbCBlbGVtZW50IHRvIG91ciBzZXQgb2YgY2hpbGRyZW4uXG4gICAgICAgICAqL1xuICAgICAgICBhZGRWYXJpYW50Q2hpbGQoY2hpbGQpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3RWYXJpYW50Tm9kZSA9IGVsZW1lbnQuZ2V0Q2xvc2VzdFZhcmlhbnROb2RlKCk7XG4gICAgICAgICAgICBpZiAoY2xvc2VzdFZhcmlhbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgKF9hID0gY2xvc2VzdFZhcmlhbnROb2RlLnZhcmlhbnRDaGlsZHJlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFkZChjaGlsZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGNsb3Nlc3RWYXJpYW50Tm9kZS52YXJpYW50Q2hpbGRyZW4uZGVsZXRlKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc29ydE5vZGVQb3NpdGlvbihvdGhlcikge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGVzZSBub2RlcyBhcmVuJ3QgZXZlbiBvZiB0aGUgc2FtZSB0eXBlIHdlIGNhbid0IGNvbXBhcmUgdGhlaXIgZGVwdGguXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghc29ydE5vZGVQb3NpdGlvbiB8fCB0cmVlVHlwZSAhPT0gb3RoZXIudHJlZVR5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICByZXR1cm4gc29ydE5vZGVQb3NpdGlvbihlbGVtZW50LmdldEluc3RhbmNlKCksIG90aGVyLmdldEluc3RhbmNlKCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgY2xvc2VzdCB2YXJpYW50IG5vZGUgaW4gdGhlIHRyZWUgc3RhcnRpbmcgZnJvbVxuICAgICAgICAgKiB0aGlzIHZpc3VhbCBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q2xvc2VzdFZhcmlhbnROb2RlOiAoKSA9PiBpc1ZhcmlhbnROb2RlJDEgPyBlbGVtZW50IDogcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmdldENsb3Nlc3RWYXJpYW50Tm9kZSgpLFxuICAgICAgICAvKipcbiAgICAgICAgICogRXhwb3NlIHRoZSBsYXRlc3QgbGF5b3V0SWQgcHJvcC5cbiAgICAgICAgICovXG4gICAgICAgIGdldExheW91dElkOiAoKSA9PiBwcm9wcy5sYXlvdXRJZCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgaW5zdGFuY2UuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRJbnN0YW5jZTogKCkgPT4gaW5zdGFuY2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQvc2V0IHRoZSBsYXRlc3Qgc3RhdGljIHZhbHVlcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldFN0YXRpY1ZhbHVlOiAoa2V5KSA9PiBsYXRlc3RWYWx1ZXNba2V5XSxcbiAgICAgICAgc2V0U3RhdGljVmFsdWU6IChrZXksIHZhbHVlKSA9PiAobGF0ZXN0VmFsdWVzW2tleV0gPSB2YWx1ZSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3QgbW90aW9uIHZhbHVlIHN0YXRlLiBDdXJyZW50bHkgb25seSB1c2VkIHRvIHRha2VcbiAgICAgICAgICogYSBzbmFwc2hvdCBvZiB0aGUgdmlzdWFsIGVsZW1lbnQgLSBwZXJoYXBzIHRoaXMgY2FuIHJldHVybiB0aGUgd2hvbGVcbiAgICAgICAgICogdmlzdWFsIHN0YXRlXG4gICAgICAgICAqL1xuICAgICAgICBnZXRMYXRlc3RWYWx1ZXM6ICgpID0+IGxhdGVzdFZhbHVlcyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0aGUgdmlzaWJsaXR5IG9mIHRoZSB2aXN1YWwgZWxlbWVudC4gSWYgaXQncyBjaGFuZ2VkLCBzY2hlZHVsZVxuICAgICAgICAgKiBhIHJlbmRlciB0byByZWZsZWN0IHRoZXNlIGNoYW5nZXMuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRWaXNpYmlsaXR5KHZpc2liaWxpdHkpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmlzVmlzaWJsZSA9PT0gdmlzaWJpbGl0eSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBlbGVtZW50LmlzVmlzaWJsZSA9IHZpc2liaWxpdHk7XG4gICAgICAgICAgICBlbGVtZW50LnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYWtlIGEgdGFyZ2V0IGFuaW1hdGFibGUgYnkgUG9wbW90aW9uLiBGb3IgaW5zdGFuY2UsIGlmIHdlJ3JlXG4gICAgICAgICAqIHRyeWluZyB0byBhbmltYXRlIHdpZHRoIGZyb20gMTAwcHggdG8gMTAwdncgd2UgbmVlZCB0byBtZWFzdXJlIDEwMHZ3XG4gICAgICAgICAqIGluIHBpeGVscyB0byBkZXRlcm1pbmUgd2hhdCB3ZSByZWFsbHkgbmVlZCB0byBhbmltYXRlIHRvLiBUaGlzIGlzIGFsc29cbiAgICAgICAgICogcGx1Z2dhYmxlIHRvIHN1cHBvcnQgRnJhbWVyJ3MgY3VzdG9tIHZhbHVlIHR5cGVzIGxpa2UgQ29sb3IsXG4gICAgICAgICAqIGFuZCBDU1MgdmFyaWFibGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgbWFrZVRhcmdldEFuaW1hdGFibGUodGFyZ2V0LCBjYW5NdXRhdGUgPSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZVRhcmdldEFuaW1hdGFibGUoZWxlbWVudCwgdGFyZ2V0LCBwcm9wcywgY2FuTXV0YXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lYXN1cmUgdGhlIGN1cnJlbnQgdmlld3BvcnQgYm94IHdpdGggb3Igd2l0aG91dCB0cmFuc2Zvcm1zLlxuICAgICAgICAgKiBPbmx5IG1lYXN1cmVzIGF4aXMtYWxpZ25lZCBib3hlcywgcm90YXRlIGFuZCBza2V3IG11c3QgYmUgbWFudWFsbHlcbiAgICAgICAgICogcmVtb3ZlZCB3aXRoIGEgcmUtcmVuZGVyIHRvIHdvcmsuXG4gICAgICAgICAqL1xuICAgICAgICBtZWFzdXJlVmlld3BvcnRCb3goKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVhc3VyZVZpZXdwb3J0Qm94KGluc3RhbmNlLCBwcm9wcyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE1vdGlvbiB2YWx1ZXMgPT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGQgYSBtb3Rpb24gdmFsdWUgYW5kIGJpbmQgaXQgdG8gdGhpcyB2aXN1YWwgZWxlbWVudC5cbiAgICAgICAgICovXG4gICAgICAgIGFkZFZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyB2YWx1ZSBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc1ZhbHVlKGtleSkpXG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVWYWx1ZShrZXkpO1xuICAgICAgICAgICAgdmFsdWVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIGxhdGVzdFZhbHVlc1trZXldID0gdmFsdWUuZ2V0KCk7XG4gICAgICAgICAgICBiaW5kVG9Nb3Rpb25WYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSBhIG1vdGlvbiB2YWx1ZSBhbmQgdW5iaW5kIGFueSBhY3RpdmUgc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZVZhbHVlKGtleSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFsdWVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgKF9hID0gdmFsdWVTdWJzY3JpcHRpb25zLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EoKTtcbiAgICAgICAgICAgIHZhbHVlU3Vic2NyaXB0aW9ucy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIGRlbGV0ZSBsYXRlc3RWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgIHJlbW92ZVZhbHVlRnJvbVJlbmRlclN0YXRlKGtleSwgcmVuZGVyU3RhdGUpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgd2hldGhlciB3ZSBoYXZlIGEgbW90aW9uIHZhbHVlIGZvciB0aGlzIGtleVxuICAgICAgICAgKi9cbiAgICAgICAgaGFzVmFsdWU6IChrZXkpID0+IHZhbHVlcy5oYXMoa2V5KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhIG1vdGlvbiB2YWx1ZSBmb3IgdGhpcyBrZXkuIElmIGNhbGxlZCB3aXRoIGEgZGVmYXVsdFxuICAgICAgICAgKiB2YWx1ZSwgd2UnbGwgY3JlYXRlIG9uZSBpZiBub25lIGV4aXN0cy5cbiAgICAgICAgICovXG4gICAgICAgIGdldFZhbHVlKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB2YWx1ZXMuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW90aW9uVmFsdWUoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZFZhbHVlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogSXRlcmF0ZSBvdmVyIG91ciBtb3Rpb24gdmFsdWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgZm9yRWFjaFZhbHVlOiAoY2FsbGJhY2spID0+IHZhbHVlcy5mb3JFYWNoKGNhbGxiYWNrKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIHRyeWluZyB0byBhbmltYXRlIHRvIGEgcHJldmlvdXNseSB1bmVuY291bnRlcmVkIHZhbHVlLFxuICAgICAgICAgKiB3ZSBuZWVkIHRvIGNoZWNrIGZvciBpdCBpbiBvdXIgc3RhdGUgYW5kIGFzIGEgbGFzdCByZXNvcnQgcmVhZCBpdFxuICAgICAgICAgKiBkaXJlY3RseSBmcm9tIHRoZSBpbnN0YW5jZSAod2hpY2ggbWlnaHQgaGF2ZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMpLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZFZhbHVlOiAoa2V5KSA9PiBsYXRlc3RWYWx1ZXNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGxhdGVzdFZhbHVlc1trZXldXG4gICAgICAgICAgICA6IHJlYWRWYWx1ZUZyb21JbnN0YW5jZShpbnN0YW5jZSwga2V5LCBvcHRpb25zKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0aGUgYmFzZSB0YXJnZXQgdG8gbGF0ZXIgYW5pbWF0ZSBiYWNrIHRvLiBUaGlzIGlzIGN1cnJlbnRseVxuICAgICAgICAgKiBvbmx5IGh5ZHJhdGVkIG9uIGNyZWF0aW9uIGFuZCB3aGVuIHdlIGZpcnN0IHJlYWQgYSB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHNldEJhc2VUYXJnZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgYmFzZVRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaW5kIHRoZSBiYXNlIHRhcmdldCBmb3IgYSB2YWx1ZSB0aGF0cyBiZWVuIHJlbW92ZWQgZnJvbSBhbGwgYW5pbWF0aW9uXG4gICAgICAgICAqIHByb3BzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0QmFzZVRhcmdldChrZXkpIHtcbiAgICAgICAgICAgIGlmIChnZXRCYXNlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0QmFzZVRhcmdldChwcm9wcywga2V5KTtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSB1bmRlZmluZWQgJiYgIWlzTW90aW9uVmFsdWUodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiYXNlVGFyZ2V0W2tleV07XG4gICAgICAgIH0sXG4gICAgICAgIC8vIExpZmVjeWxlcyA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLi4ubGlmZWN5Y2xlcyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ1aWxkIHRoZSByZW5kZXJlciBzdGF0ZSBiYXNlZCBvbiB0aGUgbGF0ZXN0IHZpc3VhbCBzdGF0ZS5cbiAgICAgICAgICovXG4gICAgICAgIGJ1aWxkKCkge1xuICAgICAgICAgICAgdHJpZ2dlckJ1aWxkKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyU3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY2hlZHVsZSBhIHJlbmRlciBvbiB0aGUgbmV4dCBhbmltYXRpb24gZnJhbWUuXG4gICAgICAgICAqL1xuICAgICAgICBzY2hlZHVsZVJlbmRlcigpIHtcbiAgICAgICAgICAgIHN5bmMucmVuZGVyKHJlbmRlciwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU3luY2hyb25vdXNseSBmaXJlIHJlbmRlci4gSXQncyBwcmVmZXJlZCB0aGF0IHdlIGJhdGNoIHJlbmRlcnMgYnV0XG4gICAgICAgICAqIGluIG1hbnkgY2lyY3Vtc3RhbmNlcywgbGlrZSBsYXlvdXQgbWVhc3VyZW1lbnQsIHdlIG5lZWQgdG8gcnVuIHRoaXNcbiAgICAgICAgICogc3luY2hyb25vdXNseS4gSG93ZXZlciBpbiB0aG9zZSBpbnN0YW5jZXMgb3RoZXIgbWVhc3VyZXMgc2hvdWxkIGJlIHRha2VuXG4gICAgICAgICAqIHRvIGJhdGNoIHJlYWRzL3dyaXRlcy5cbiAgICAgICAgICovXG4gICAgICAgIHN5bmNSZW5kZXI6IHJlbmRlcixcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZSB0aGUgcHJvdmlkZWQgcHJvcHMuIEVuc3VyZSBhbnkgbmV3bHktYWRkZWQgbW90aW9uIHZhbHVlcyBhcmVcbiAgICAgICAgICogYWRkZWQgdG8gb3VyIG1hcCwgb2xkIG9uZXMgcmVtb3ZlZCwgYW5kIGxpc3RlbmVycyB1cGRhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0UHJvcHMobmV3UHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChuZXdQcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSB8fCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb3BzID0gbmV3UHJvcHM7XG4gICAgICAgICAgICBsaWZlY3ljbGVzLnVwZGF0ZVByb3BMaXN0ZW5lcnMobmV3UHJvcHMpO1xuICAgICAgICAgICAgcHJldk1vdGlvblZhbHVlcyA9IHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhlbGVtZW50LCBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMpLCBwcmV2TW90aW9uVmFsdWVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UHJvcHM6ICgpID0+IHByb3BzLFxuICAgICAgICAvLyBWYXJpYW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHZhcmlhbnQgZGVmaW5pdGlvbiB3aXRoIGEgZ2l2ZW4gbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldFZhcmlhbnQ6IChuYW1lKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IHByb3BzLnZhcmlhbnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbbmFtZV07IH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZWZpbmVkIGRlZmF1bHQgdHJhbnNpdGlvbiBvbiB0aGlzIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIGdldERlZmF1bHRUcmFuc2l0aW9uOiAoKSA9PiBwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBnZXRUcmFuc2Zvcm1QYWdlUG9pbnQ6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy50cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIGJ5IGNoaWxkIHZhcmlhbnQgbm9kZXMgdG8gZ2V0IHRoZSBjbG9zZXN0IGFuY2VzdG9yIHZhcmlhbnQgcHJvcHMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRWYXJpYW50Q29udGV4dChzdGFydEF0UGFyZW50ID0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChzdGFydEF0UGFyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuZ2V0VmFyaWFudENvbnRleHQoKTtcbiAgICAgICAgICAgIGlmICghaXNDb250cm9sbGluZ1ZhcmlhbnRzJDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gKHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5nZXRWYXJpYW50Q29udGV4dCgpKSB8fCB7fTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHMuaW5pdGlhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuaW5pdGlhbCA9IHByb3BzLmluaXRpYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHt9O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WYXJpYW50UHJvcHM7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB2YXJpYW50UHJvcHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzW25hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChpc1ZhcmlhbnRMYWJlbChwcm9wKSB8fCBwcm9wID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0W25hbWVdID0gcHJvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBlbGVtZW50O1xufTtcbmNvbnN0IHZhcmlhbnRQcm9wcyA9IFtcImluaXRpYWxcIiwgLi4udmFyaWFudFByaW9yaXR5T3JkZXJdO1xuY29uc3QgbnVtVmFyaWFudFByb3BzID0gdmFyaWFudFByb3BzLmxlbmd0aDtcblxuZXhwb3J0IHsgdmlzdWFsRWxlbWVudCB9O1xuIiwiaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnLi4vaXMtYnJvd3Nlci5tanMnO1xuaW1wb3J0IHsgaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyLCBwcmVmZXJzUmVkdWNlZE1vdGlvbiB9IGZyb20gJy4vc3RhdGUubWpzJztcblxuZnVuY3Rpb24gaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uKCkge1xuICAgIGhhc1JlZHVjZWRNb3Rpb25MaXN0ZW5lci5jdXJyZW50ID0gdHJ1ZTtcbiAgICBpZiAoIWlzQnJvd3NlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSkge1xuICAgICAgICBjb25zdCBtb3Rpb25NZWRpYVF1ZXJ5ID0gd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1yZWR1Y2VkLW1vdGlvbilcIik7XG4gICAgICAgIGNvbnN0IHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyA9ICgpID0+IChwcmVmZXJzUmVkdWNlZE1vdGlvbi5jdXJyZW50ID0gbW90aW9uTWVkaWFRdWVyeS5tYXRjaGVzKTtcbiAgICAgICAgbW90aW9uTWVkaWFRdWVyeS5hZGRMaXN0ZW5lcihzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMpO1xuICAgICAgICBzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHByZWZlcnNSZWR1Y2VkTW90aW9uLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbiB9O1xuIiwiaW1wb3J0IHsgaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91c2Utd2lsbC1jaGFuZ2UvaXMubWpzJztcbmltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Fybi1vbmNlLm1qcyc7XG5pbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhlbGVtZW50LCBuZXh0LCBwcmV2KSB7XG4gICAgY29uc3QgeyB3aWxsQ2hhbmdlIH0gPSBuZXh0O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcbiAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gbmV4dFtrZXldO1xuICAgICAgICBjb25zdCBwcmV2VmFsdWUgPSBwcmV2W2tleV07XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKG5leHRWYWx1ZSkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhIG1vdGlvbiB2YWx1ZSBmb3VuZCBpbiBwcm9wcyBvciBzdHlsZSwgd2Ugd2FudCB0byBhZGQgaXRcbiAgICAgICAgICAgICAqIHRvIG91ciB2aXN1YWwgZWxlbWVudCdzIG1vdGlvbiB2YWx1ZSBtYXAuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBuZXh0VmFsdWUpO1xuICAgICAgICAgICAgaWYgKGlzV2lsbENoYW5nZU1vdGlvblZhbHVlKHdpbGxDaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgd2lsbENoYW5nZS5hZGQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGluY29taW5nIG1vdGlvbiB2YWx1ZSB3aXRoIHRoaXMgdmVyc2lvblxuICAgICAgICAgICAgICogYW5kIHdhcm4gYWdhaW5zdCBtaXNtYXRjaGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgICAgICAgIHdhcm5PbmNlKG5leHRWYWx1ZS52ZXJzaW9uID09PSBcIjcuMy4yXCIsIGBBdHRlbXB0aW5nIHRvIG1peCBGcmFtZXIgTW90aW9uIHZlcnNpb25zICR7bmV4dFZhbHVlLnZlcnNpb259IHdpdGggNy4zLjIgbWF5IG5vdCB3b3JrIGFzIGV4cGVjdGVkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTW90aW9uVmFsdWUocHJldlZhbHVlKSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSdyZSBzd2FwcGluZyBmcm9tIGEgbW90aW9uIHZhbHVlIHRvIGEgc3RhdGljIHZhbHVlLFxuICAgICAgICAgICAgICogY3JlYXRlIGEgbmV3IG1vdGlvbiB2YWx1ZSBmcm9tIHRoYXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIG1vdGlvblZhbHVlKG5leHRWYWx1ZSkpO1xuICAgICAgICAgICAgaWYgKGlzV2lsbENoYW5nZU1vdGlvblZhbHVlKHdpbGxDaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgd2lsbENoYW5nZS5yZW1vdmUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2VmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGEgZmxhdCB2YWx1ZSB0aGF0IGhhcyBjaGFuZ2VkLCB1cGRhdGUgdGhlIG1vdGlvbiB2YWx1ZVxuICAgICAgICAgICAgICogb3IgY3JlYXRlIG9uZSBpZiBpdCBkb2Vzbid0IGV4aXN0LiBXZSBvbmx5IHdhbnQgdG8gZG8gdGhpcyBpZiB3ZSdyZVxuICAgICAgICAgICAgICogbm90IGhhbmRsaW5nIHRoZSB2YWx1ZSB3aXRoIG91ciBhbmltYXRpb24gc3RhdGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc1ZhbHVlKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ1ZhbHVlID0gZWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IE9ubHkgdXBkYXRlIHZhbHVlcyB0aGF0IGFyZW4ndCBiZWluZyBhbmltYXRlZCBvciBldmVuIGxvb2tlZCBhdFxuICAgICAgICAgICAgICAgICFleGlzdGluZ1ZhbHVlLmhhc0FuaW1hdGVkICYmIGV4aXN0aW5nVmFsdWUuc2V0KG5leHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXRlc3RWYWx1ZSA9IGVsZW1lbnQuZ2V0U3RhdGljVmFsdWUoa2V5KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUobGF0ZXN0VmFsdWUgIT09IHVuZGVmaW5lZCA/IGxhdGVzdFZhbHVlIDogbmV4dFZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSGFuZGxlIHJlbW92ZWQgdmFsdWVzXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcHJldikge1xuICAgICAgICBpZiAobmV4dFtrZXldID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZVZhbHVlKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0O1xufVxuXG5leHBvcnQgeyB1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfTtcbiIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ2hleS1saXN0ZW4nO1xuXG5mdW5jdGlvbiBpc0NTU1ZhcmlhYmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5zdGFydHNXaXRoKFwidmFyKC0tXCIpO1xufVxuLyoqXG4gKiBQYXJzZSBGcmFtZXIncyBzcGVjaWFsIENTUyB2YXJpYWJsZSBmb3JtYXQgaW50byBhIENTUyB0b2tlbiBhbmQgYSBmYWxsYmFjay5cbiAqXG4gKiBgYGBcbiAqIGB2YXIoLS1mb28sICNmZmYpYCA9PiBbYC0tZm9vYCwgJyNmZmYnXVxuICogYGBgXG4gKlxuICogQHBhcmFtIGN1cnJlbnRcbiAqL1xuY29uc3QgY3NzVmFyaWFibGVSZWdleCA9IC92YXJcXCgoLS1bYS16QS1aMC05LV9dKyksPyA/KFthLXpBLVowLTkgKCklIy4sLV0rKT9cXCkvO1xuZnVuY3Rpb24gcGFyc2VDU1NWYXJpYWJsZShjdXJyZW50KSB7XG4gICAgY29uc3QgbWF0Y2ggPSBjc3NWYXJpYWJsZVJlZ2V4LmV4ZWMoY3VycmVudCk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgICAgcmV0dXJuIFssXTtcbiAgICBjb25zdCBbLCB0b2tlbiwgZmFsbGJhY2tdID0gbWF0Y2g7XG4gICAgcmV0dXJuIFt0b2tlbiwgZmFsbGJhY2tdO1xufVxuY29uc3QgbWF4RGVwdGggPSA0O1xuZnVuY3Rpb24gZ2V0VmFyaWFibGVWYWx1ZShjdXJyZW50LCBlbGVtZW50LCBkZXB0aCA9IDEpIHtcbiAgICBpbnZhcmlhbnQoZGVwdGggPD0gbWF4RGVwdGgsIGBNYXggQ1NTIHZhcmlhYmxlIGZhbGxiYWNrIGRlcHRoIGRldGVjdGVkIGluIHByb3BlcnR5IFwiJHtjdXJyZW50fVwiLiBUaGlzIG1heSBpbmRpY2F0ZSBhIGNpcmN1bGFyIGZhbGxiYWNrIGRlcGVuZGVuY3kuYCk7XG4gICAgY29uc3QgW3Rva2VuLCBmYWxsYmFja10gPSBwYXJzZUNTU1ZhcmlhYmxlKGN1cnJlbnQpO1xuICAgIC8vIE5vIENTUyB2YXJpYWJsZSBkZXRlY3RlZFxuICAgIGlmICghdG9rZW4pXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBBdHRlbXB0IHRvIHJlYWQgdGhpcyBDU1MgdmFyaWFibGUgb2ZmIHRoZSBlbGVtZW50XG4gICAgY29uc3QgcmVzb2x2ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKHRva2VuKTtcbiAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkLnRyaW0oKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDU1NWYXJpYWJsZShmYWxsYmFjaykpIHtcbiAgICAgICAgLy8gVGhlIGZhbGxiYWNrIG1pZ2h0IGl0c2VsZiBiZSBhIENTUyB2YXJpYWJsZSwgaW4gd2hpY2ggY2FzZSB3ZSBhdHRlbXB0IHRvIHJlc29sdmUgaXQgdG9vLlxuICAgICAgICByZXR1cm4gZ2V0VmFyaWFibGVWYWx1ZShmYWxsYmFjaywgZWxlbWVudCwgZGVwdGggKyAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICB9XG59XG4vKipcbiAqIFJlc29sdmUgQ1NTIHZhcmlhYmxlcyBmcm9tXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVDU1NWYXJpYWJsZXModmlzdWFsRWxlbWVudCwgeyAuLi50YXJnZXQgfSwgdHJhbnNpdGlvbkVuZCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB2aXN1YWxFbGVtZW50LmdldEluc3RhbmNlKCk7XG4gICAgaWYgKCEoZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnQpKVxuICAgICAgICByZXR1cm4geyB0YXJnZXQsIHRyYW5zaXRpb25FbmQgfTtcbiAgICAvLyBJZiBgdHJhbnNpdGlvbkVuZGAgaXNuJ3QgYHVuZGVmaW5lZGAsIGNsb25lIGl0LiBXZSBjb3VsZCBjbG9uZSBgdGFyZ2V0YCBhbmQgYHRyYW5zaXRpb25FbmRgXG4gICAgLy8gb25seSBpZiB0aGV5IGNoYW5nZSBidXQgSSB0aGluayB0aGlzIHJlYWRzIGNsZWFyZXIgYW5kIHRoaXMgaXNuJ3QgYSBwZXJmb3JtYW5jZS1jcml0aWNhbCBwYXRoLlxuICAgIGlmICh0cmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHRyYW5zaXRpb25FbmQgPSB7IC4uLnRyYW5zaXRpb25FbmQgfTtcbiAgICB9XG4gICAgLy8gR28gdGhyb3VnaCBleGlzdGluZyBgTW90aW9uVmFsdWVgcyBhbmQgZW5zdXJlIGFueSBleGlzdGluZyBDU1MgdmFyaWFibGVzIGFyZSByZXNvbHZlZFxuICAgIHZpc3VhbEVsZW1lbnQuZm9yRWFjaFZhbHVlKCh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdmFsdWUuZ2V0KCk7XG4gICAgICAgIGlmICghaXNDU1NWYXJpYWJsZShjdXJyZW50KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSBnZXRWYXJpYWJsZVZhbHVlKGN1cnJlbnQsIGVsZW1lbnQpO1xuICAgICAgICBpZiAocmVzb2x2ZWQpXG4gICAgICAgICAgICB2YWx1ZS5zZXQocmVzb2x2ZWQpO1xuICAgIH0pO1xuICAgIC8vIEN5Y2xlIHRocm91Z2ggZXZlcnkgdGFyZ2V0IHByb3BlcnR5IGFuZCByZXNvbHZlIENTUyB2YXJpYWJsZXMuIEN1cnJlbnRseVxuICAgIC8vIHdlIG9ubHkgcmVhZCBzaW5nbGUtdmFyIHByb3BlcnRpZXMgbGlrZSBgdmFyKC0tZm9vKWAsIG5vdCBgY2FsYyh2YXIoLS1mb28pICsgMjBweClgXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgaWYgKCFpc0NTU1ZhcmlhYmxlKGN1cnJlbnQpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gZ2V0VmFyaWFibGVWYWx1ZShjdXJyZW50LCBlbGVtZW50KTtcbiAgICAgICAgaWYgKCFyZXNvbHZlZClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAvLyBDbG9uZSB0YXJnZXQgaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlblxuICAgICAgICB0YXJnZXRba2V5XSA9IHJlc29sdmVkO1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBoYXNuJ3QgYWxyZWFkeSBzZXQgdGhpcyBrZXkgb24gYHRyYW5zaXRpb25FbmRgLCBzZXQgaXQgdG8gdGhlIHVucmVzb2x2ZWRcbiAgICAgICAgLy8gQ1NTIHZhcmlhYmxlLiBUaGlzIHdpbGwgZW5zdXJlIHRoYXQgYWZ0ZXIgdGhlIGFuaW1hdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgcmVmbGVjdFxuICAgICAgICAvLyBjaGFuZ2VzIGluIHRoZSB2YWx1ZSBvZiB0aGUgQ1NTIHZhcmlhYmxlLlxuICAgICAgICBpZiAodHJhbnNpdGlvbkVuZCAmJiB0cmFuc2l0aW9uRW5kW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZFtrZXldID0gY3VycmVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyB0YXJnZXQsIHRyYW5zaXRpb25FbmQgfTtcbn1cblxuZXhwb3J0IHsgY3NzVmFyaWFibGVSZWdleCwgcGFyc2VDU1NWYXJpYWJsZSwgcmVzb2x2ZUNTU1ZhcmlhYmxlcyB9O1xuIiwiaW1wb3J0IHsgcHgsIG51bWJlciB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IGlzS2V5ZnJhbWVzVGFyZ2V0IH0gZnJvbSAnLi4vLi4vLi4vYW5pbWF0aW9uL3V0aWxzL2lzLWtleWZyYW1lcy10YXJnZXQubWpzJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ2hleS1saXN0ZW4nO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcE9yZGVyIH0gZnJvbSAnLi4vLi4vaHRtbC91dGlscy90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IGZpbmREaW1lbnNpb25WYWx1ZVR5cGUgfSBmcm9tICcuLi92YWx1ZS10eXBlcy9kaW1lbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi8uLi8uLi91dGlscy9pcy1icm93c2VyLm1qcyc7XG5cbmNvbnN0IHBvc2l0aW9uYWxLZXlzID0gbmV3IFNldChbXG4gICAgXCJ3aWR0aFwiLFxuICAgIFwiaGVpZ2h0XCIsXG4gICAgXCJ0b3BcIixcbiAgICBcImxlZnRcIixcbiAgICBcInJpZ2h0XCIsXG4gICAgXCJib3R0b21cIixcbiAgICBcInhcIixcbiAgICBcInlcIixcbl0pO1xuY29uc3QgaXNQb3NpdGlvbmFsS2V5ID0gKGtleSkgPT4gcG9zaXRpb25hbEtleXMuaGFzKGtleSk7XG5jb25zdCBoYXNQb3NpdGlvbmFsS2V5ID0gKHRhcmdldCkgPT4ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpLnNvbWUoaXNQb3NpdGlvbmFsS2V5KTtcbn07XG5jb25zdCBzZXRBbmRSZXNldFZlbG9jaXR5ID0gKHZhbHVlLCB0bykgPT4ge1xuICAgIC8vIExvb2tzIG9kZCBidXQgc2V0dGluZyBpdCB0d2ljZSBkb2Vzbid0IHJlbmRlciwgaXQnbGwganVzdFxuICAgIC8vIHNldCBib3RoIHByZXYgYW5kIGN1cnJlbnQgdG8gdGhlIGxhdGVzdCB2YWx1ZVxuICAgIHZhbHVlLnNldCh0bywgZmFsc2UpO1xuICAgIHZhbHVlLnNldCh0byk7XG59O1xuY29uc3QgaXNOdW1PclB4VHlwZSA9ICh2KSA9PiB2ID09PSBudW1iZXIgfHwgdiA9PT0gcHg7XG52YXIgQm91bmRpbmdCb3hEaW1lbnNpb247XG4oZnVuY3Rpb24gKEJvdW5kaW5nQm94RGltZW5zaW9uKSB7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJ3aWR0aFwiXSA9IFwid2lkdGhcIjtcbiAgICBCb3VuZGluZ0JveERpbWVuc2lvbltcImhlaWdodFwiXSA9IFwiaGVpZ2h0XCI7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJsZWZ0XCJdID0gXCJsZWZ0XCI7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJyaWdodFwiXSA9IFwicmlnaHRcIjtcbiAgICBCb3VuZGluZ0JveERpbWVuc2lvbltcInRvcFwiXSA9IFwidG9wXCI7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJib3R0b21cIl0gPSBcImJvdHRvbVwiO1xufSkoQm91bmRpbmdCb3hEaW1lbnNpb24gfHwgKEJvdW5kaW5nQm94RGltZW5zaW9uID0ge30pKTtcbmNvbnN0IGdldFBvc0Zyb21NYXRyaXggPSAobWF0cml4LCBwb3MpID0+IHBhcnNlRmxvYXQobWF0cml4LnNwbGl0KFwiLCBcIilbcG9zXSk7XG5jb25zdCBnZXRUcmFuc2xhdGVGcm9tTWF0cml4ID0gKHBvczIsIHBvczMpID0+IChfYmJveCwgeyB0cmFuc2Zvcm0gfSkgPT4ge1xuICAgIGlmICh0cmFuc2Zvcm0gPT09IFwibm9uZVwiIHx8ICF0cmFuc2Zvcm0pXG4gICAgICAgIHJldHVybiAwO1xuICAgIGNvbnN0IG1hdHJpeDNkID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4M2RcXCgoLispXFwpJC8pO1xuICAgIGlmIChtYXRyaXgzZCkge1xuICAgICAgICByZXR1cm4gZ2V0UG9zRnJvbU1hdHJpeChtYXRyaXgzZFsxXSwgcG9zMyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBtYXRyaXggPSB0cmFuc2Zvcm0ubWF0Y2goL15tYXRyaXhcXCgoLispXFwpJC8pO1xuICAgICAgICBpZiAobWF0cml4KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0UG9zRnJvbU1hdHJpeChtYXRyaXhbMV0sIHBvczIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgdHJhbnNmb3JtS2V5cyA9IG5ldyBTZXQoW1wieFwiLCBcInlcIiwgXCJ6XCJdKTtcbmNvbnN0IG5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm1LZXlzID0gdHJhbnNmb3JtUHJvcE9yZGVyLmZpbHRlcigoa2V5KSA9PiAhdHJhbnNmb3JtS2V5cy5oYXMoa2V5KSk7XG5mdW5jdGlvbiByZW1vdmVOb25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtKHZpc3VhbEVsZW1lbnQpIHtcbiAgICBjb25zdCByZW1vdmVkVHJhbnNmb3JtcyA9IFtdO1xuICAgIG5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm1LZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlbW92ZWRUcmFuc2Zvcm1zLnB1c2goW2tleSwgdmFsdWUuZ2V0KCldKTtcbiAgICAgICAgICAgIHZhbHVlLnNldChrZXkuc3RhcnRzV2l0aChcInNjYWxlXCIpID8gMSA6IDApO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gQXBwbHkgY2hhbmdlcyB0byBlbGVtZW50IGJlZm9yZSBtZWFzdXJlbWVudFxuICAgIGlmIChyZW1vdmVkVHJhbnNmb3Jtcy5sZW5ndGgpXG4gICAgICAgIHZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgIHJldHVybiByZW1vdmVkVHJhbnNmb3Jtcztcbn1cbmNvbnN0IHBvc2l0aW9uYWxWYWx1ZXMgPSB7XG4gICAgLy8gRGltZW5zaW9uc1xuICAgIHdpZHRoOiAoeyB4IH0sIHsgcGFkZGluZ0xlZnQgPSBcIjBcIiwgcGFkZGluZ1JpZ2h0ID0gXCIwXCIgfSkgPT4geC5tYXggLSB4Lm1pbiAtIHBhcnNlRmxvYXQocGFkZGluZ0xlZnQpIC0gcGFyc2VGbG9hdChwYWRkaW5nUmlnaHQpLFxuICAgIGhlaWdodDogKHsgeSB9LCB7IHBhZGRpbmdUb3AgPSBcIjBcIiwgcGFkZGluZ0JvdHRvbSA9IFwiMFwiIH0pID0+IHkubWF4IC0geS5taW4gLSBwYXJzZUZsb2F0KHBhZGRpbmdUb3ApIC0gcGFyc2VGbG9hdChwYWRkaW5nQm90dG9tKSxcbiAgICB0b3A6IChfYmJveCwgeyB0b3AgfSkgPT4gcGFyc2VGbG9hdCh0b3ApLFxuICAgIGxlZnQ6IChfYmJveCwgeyBsZWZ0IH0pID0+IHBhcnNlRmxvYXQobGVmdCksXG4gICAgYm90dG9tOiAoeyB5IH0sIHsgdG9wIH0pID0+IHBhcnNlRmxvYXQodG9wKSArICh5Lm1heCAtIHkubWluKSxcbiAgICByaWdodDogKHsgeCB9LCB7IGxlZnQgfSkgPT4gcGFyc2VGbG9hdChsZWZ0KSArICh4Lm1heCAtIHgubWluKSxcbiAgICAvLyBUcmFuc2Zvcm1cbiAgICB4OiBnZXRUcmFuc2xhdGVGcm9tTWF0cml4KDQsIDEzKSxcbiAgICB5OiBnZXRUcmFuc2xhdGVGcm9tTWF0cml4KDUsIDE0KSxcbn07XG5jb25zdCBjb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXMgPSAodGFyZ2V0LCB2aXN1YWxFbGVtZW50LCBjaGFuZ2VkS2V5cykgPT4ge1xuICAgIGNvbnN0IG9yaWdpbkJib3ggPSB2aXN1YWxFbGVtZW50Lm1lYXN1cmVWaWV3cG9ydEJveCgpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSB2aXN1YWxFbGVtZW50LmdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgZWxlbWVudENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGNvbnN0IHsgZGlzcGxheSB9ID0gZWxlbWVudENvbXB1dGVkU3R5bGU7XG4gICAgY29uc3Qgb3JpZ2luID0ge307XG4gICAgLy8gSWYgdGhlIGVsZW1lbnQgaXMgY3VycmVudGx5IHNldCB0byBkaXNwbGF5OiBcIm5vbmVcIiwgbWFrZSBpdCB2aXNpYmxlIGJlZm9yZVxuICAgIC8vIG1lYXN1cmluZyB0aGUgdGFyZ2V0IGJvdW5kaW5nIGJveFxuICAgIGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgICB2aXN1YWxFbGVtZW50LnNldFN0YXRpY1ZhbHVlKFwiZGlzcGxheVwiLCB0YXJnZXQuZGlzcGxheSB8fCBcImJsb2NrXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNvcmQgb3JpZ2lucyBiZWZvcmUgd2UgcmVuZGVyIGFuZCB1cGRhdGUgc3R5bGVzXG4gICAgICovXG4gICAgY2hhbmdlZEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIG9yaWdpbltrZXldID0gcG9zaXRpb25hbFZhbHVlc1trZXldKG9yaWdpbkJib3gsIGVsZW1lbnRDb21wdXRlZFN0eWxlKTtcbiAgICB9KTtcbiAgICAvLyBBcHBseSB0aGUgbGF0ZXN0IHZhbHVlcyAoYXMgc2V0IGluIGNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzKVxuICAgIHZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgIGNvbnN0IHRhcmdldEJib3ggPSB2aXN1YWxFbGVtZW50Lm1lYXN1cmVWaWV3cG9ydEJveCgpO1xuICAgIGNoYW5nZWRLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAvLyBSZXN0b3JlIHN0eWxlcyB0byB0aGVpciAqKmNhbGN1bGF0ZWQgY29tcHV0ZWQgc3R5bGUqKiwgbm90IHRoZWlyIGFjdHVhbFxuICAgICAgICAvLyBvcmlnaW5hbGx5IHNldCBzdHlsZS4gVGhpcyBhbGxvd3MgdXMgdG8gYW5pbWF0ZSBiZXR3ZWVuIGVxdWl2YWxlbnQgcGl4ZWwgdW5pdHMuXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICBzZXRBbmRSZXNldFZlbG9jaXR5KHZhbHVlLCBvcmlnaW5ba2V5XSk7XG4gICAgICAgIHRhcmdldFtrZXldID0gcG9zaXRpb25hbFZhbHVlc1trZXldKHRhcmdldEJib3gsIGVsZW1lbnRDb21wdXRlZFN0eWxlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcbmNvbnN0IGNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzID0gKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luID0ge30sIHRyYW5zaXRpb25FbmQgPSB7fSkgPT4ge1xuICAgIHRhcmdldCA9IHsgLi4udGFyZ2V0IH07XG4gICAgdHJhbnNpdGlvbkVuZCA9IHsgLi4udHJhbnNpdGlvbkVuZCB9O1xuICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uYWxLZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KS5maWx0ZXIoaXNQb3NpdGlvbmFsS2V5KTtcbiAgICAvLyBXZSB3YW50IHRvIHJlbW92ZSBhbnkgdHJhbnNmb3JtIHZhbHVlcyB0aGF0IGNvdWxkIGFmZmVjdCB0aGUgZWxlbWVudCdzIGJvdW5kaW5nIGJveCBiZWZvcmVcbiAgICAvLyBpdCdzIG1lYXN1cmVkLiBXZSdsbCByZWFwcGx5IHRoZXNlIGxhdGVyLlxuICAgIGxldCByZW1vdmVkVHJhbnNmb3JtVmFsdWVzID0gW107XG4gICAgbGV0IGhhc0F0dGVtcHRlZFRvUmVtb3ZlVHJhbnNmb3JtVmFsdWVzID0gZmFsc2U7XG4gICAgY29uc3QgY2hhbmdlZFZhbHVlVHlwZUtleXMgPSBbXTtcbiAgICB0YXJnZXRQb3NpdGlvbmFsS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgIGlmICghdmlzdWFsRWxlbWVudC5oYXNWYWx1ZShrZXkpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgZnJvbSA9IG9yaWdpbltrZXldO1xuICAgICAgICBsZXQgZnJvbVR5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKGZyb20pO1xuICAgICAgICBjb25zdCB0byA9IHRhcmdldFtrZXldO1xuICAgICAgICBsZXQgdG9UeXBlO1xuICAgICAgICAvLyBUT0RPOiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGJhc2ljYWxseSB0aHJvd3MgYW4gZXJyb3JcbiAgICAgICAgLy8gaWYgeW91IHRyeSBhbmQgZG8gdmFsdWUgY29udmVyc2lvbiB2aWEga2V5ZnJhbWVzLiBUaGVyZSdzIHByb2JhYmx5XG4gICAgICAgIC8vIGEgd2F5IG9mIGRvaW5nIHRoaXMgYnV0IHRoZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMgd291bGQgbmVlZCBncmVhdGVyIHNjcnV0aW55LFxuICAgICAgICAvLyBhcyBpdCdkIGJlIGRvaW5nIG11bHRpcGxlIHJlc2l6ZS1yZW1lYXN1cmUgb3BlcmF0aW9ucy5cbiAgICAgICAgaWYgKGlzS2V5ZnJhbWVzVGFyZ2V0KHRvKSkge1xuICAgICAgICAgICAgY29uc3QgbnVtS2V5ZnJhbWVzID0gdG8ubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgZnJvbUluZGV4ID0gdG9bMF0gPT09IG51bGwgPyAxIDogMDtcbiAgICAgICAgICAgIGZyb20gPSB0b1tmcm9tSW5kZXhdO1xuICAgICAgICAgICAgZnJvbVR5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKGZyb20pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGZyb21JbmRleDsgaSA8IG51bUtleWZyYW1lczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0b1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9UeXBlID0gZmluZERpbWVuc2lvblZhbHVlVHlwZSh0b1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGludmFyaWFudCh0b1R5cGUgPT09IGZyb21UeXBlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaXNOdW1PclB4VHlwZShmcm9tVHlwZSkgJiYgaXNOdW1PclB4VHlwZSh0b1R5cGUpKSwgXCJLZXlmcmFtZXMgbXVzdCBiZSBvZiB0aGUgc2FtZSBkaW1lbnNpb24gYXMgdGhlIGN1cnJlbnQgdmFsdWVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnZhcmlhbnQoZmluZERpbWVuc2lvblZhbHVlVHlwZSh0b1tpXSkgPT09IHRvVHlwZSwgXCJBbGwga2V5ZnJhbWVzIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b1R5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKHRvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbVR5cGUgIT09IHRvVHlwZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhleSdyZSBib3RoIGp1c3QgbnVtYmVyIG9yIHB4LCBjb252ZXJ0IHRoZW0gYm90aCB0byBudW1iZXJzIHJhdGhlciB0aGFuXG4gICAgICAgICAgICAvLyByZWx5aW5nIG9uIHJlc2l6ZS9yZW1lYXN1cmUgdG8gY29udmVydCAod2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhpcyBzaXR1YXRpb24pXG4gICAgICAgICAgICBpZiAoaXNOdW1PclB4VHlwZShmcm9tVHlwZSkgJiYgaXNOdW1PclB4VHlwZSh0b1R5cGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHZhbHVlLmdldCgpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5zZXQocGFyc2VGbG9hdChjdXJyZW50KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBwYXJzZUZsb2F0KHRvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0bykgJiYgdG9UeXBlID09PSBweCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHRvLm1hcChwYXJzZUZsb2F0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoZnJvbVR5cGUgPT09IG51bGwgfHwgZnJvbVR5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZyb21UeXBlLnRyYW5zZm9ybSkgJiZcbiAgICAgICAgICAgICAgICAodG9UeXBlID09PSBudWxsIHx8IHRvVHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdG9UeXBlLnRyYW5zZm9ybSkgJiZcbiAgICAgICAgICAgICAgICAoZnJvbSA9PT0gMCB8fCB0byA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBvbmUgb3IgdGhlIG90aGVyIHZhbHVlIGlzIDAsIGl0J3Mgc2FmZSB0byBjb2VyY2UgaXQgdG8gdGhlXG4gICAgICAgICAgICAgICAgLy8gdHlwZSBvZiB0aGUgb3RoZXIgd2l0aG91dCBtZWFzdXJlbWVudFxuICAgICAgICAgICAgICAgIGlmIChmcm9tID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnNldCh0b1R5cGUudHJhbnNmb3JtKGZyb20pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gZnJvbVR5cGUudHJhbnNmb3JtKHRvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBnb2luZyB0byBkbyB2YWx1ZSBjb252ZXJzaW9uIHZpYSBET00gbWVhc3VyZW1lbnRzLCB3ZSBmaXJzdFxuICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gcmVtb3ZlIG5vbi1wb3NpdGlvbmFsIHRyYW5zZm9ybSB2YWx1ZXMgdGhhdCBjb3VsZCBhZmZlY3QgdGhlIGJib3ggbWVhc3VyZW1lbnRzLlxuICAgICAgICAgICAgICAgIGlmICghaGFzQXR0ZW1wdGVkVG9SZW1vdmVUcmFuc2Zvcm1WYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZFRyYW5zZm9ybVZhbHVlcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtKHZpc3VhbEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBoYXNBdHRlbXB0ZWRUb1JlbW92ZVRyYW5zZm9ybVZhbHVlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoYW5nZWRWYWx1ZVR5cGVLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRW5kW2tleV0gPVxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRW5kW2tleV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmFuc2l0aW9uRW5kW2tleV1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGFyZ2V0W2tleV07XG4gICAgICAgICAgICAgICAgc2V0QW5kUmVzZXRWZWxvY2l0eSh2YWx1ZSwgdG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGNoYW5nZWRWYWx1ZVR5cGVLZXlzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBzY3JvbGxZID0gY2hhbmdlZFZhbHVlVHlwZUtleXMuaW5kZXhPZihcImhlaWdodFwiKSA+PSAwXG4gICAgICAgICAgICA/IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRUYXJnZXQgPSBjb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXModGFyZ2V0LCB2aXN1YWxFbGVtZW50LCBjaGFuZ2VkVmFsdWVUeXBlS2V5cyk7XG4gICAgICAgIC8vIElmIHdlIHJlbW92ZWQgdHJhbnNmb3JtIHZhbHVlcywgcmVhcHBseSB0aGVtIGJlZm9yZSB0aGUgbmV4dCByZW5kZXJcbiAgICAgICAgaWYgKHJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZW1vdmVkVHJhbnNmb3JtVmFsdWVzLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KS5zZXQodmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVhcHBseSBvcmlnaW5hbCB2YWx1ZXNcbiAgICAgICAgdmlzdWFsRWxlbWVudC5zeW5jUmVuZGVyKCk7XG4gICAgICAgIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgIGlmIChpc0Jyb3dzZXIgJiYgc2Nyb2xsWSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKHsgdG9wOiBzY3JvbGxZIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHRhcmdldDogY29udmVydGVkVGFyZ2V0LCB0cmFuc2l0aW9uRW5kIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geyB0YXJnZXQsIHRyYW5zaXRpb25FbmQgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBDb252ZXJ0IHZhbHVlIHR5cGVzIGZvciB4L3kvd2lkdGgvaGVpZ2h0L3RvcC9sZWZ0L2JvdHRvbS9yaWdodFxuICpcbiAqIEFsbG93cyBhbmltYXRpb24gYmV0d2VlbiBgJ2F1dG8nYCAtPiBgJzEwMCUnYCBvciBgMGAgLT4gYCdjYWxjKDUwJSAtIDEwdncpJ2BcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdW5pdENvbnZlcnNpb24odmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpIHtcbiAgICByZXR1cm4gaGFzUG9zaXRpb25hbEtleSh0YXJnZXQpXG4gICAgICAgID8gY2hlY2tBbmRDb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXModmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpXG4gICAgICAgIDogeyB0YXJnZXQsIHRyYW5zaXRpb25FbmQgfTtcbn1cblxuZXhwb3J0IHsgQm91bmRpbmdCb3hEaW1lbnNpb24sIHBvc2l0aW9uYWxWYWx1ZXMsIHVuaXRDb252ZXJzaW9uIH07XG4iLCJpbXBvcnQgeyByZXNvbHZlQ1NTVmFyaWFibGVzIH0gZnJvbSAnLi9jc3MtdmFyaWFibGVzLWNvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IHVuaXRDb252ZXJzaW9uIH0gZnJvbSAnLi91bml0LWNvbnZlcnNpb24ubWpzJztcblxuLyoqXG4gKiBQYXJzZSBhIERPTSB2YXJpYW50IHRvIG1ha2UgaXQgYW5pbWF0YWJsZS4gVGhpcyBpbnZvbHZlcyByZXNvbHZpbmcgQ1NTIHZhcmlhYmxlc1xuICogYW5kIGVuc3VyaW5nIGFuaW1hdGlvbnMgbGlrZSBcIjIwJVwiID0+IFwiY2FsYyg1MHZ3KVwiIGFyZSBwZXJmb3JtZWQgaW4gcGl4ZWxzLlxuICovXG5jb25zdCBwYXJzZURvbVZhcmlhbnQgPSAodmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpID0+IHtcbiAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVDU1NWYXJpYWJsZXModmlzdWFsRWxlbWVudCwgdGFyZ2V0LCB0cmFuc2l0aW9uRW5kKTtcbiAgICB0YXJnZXQgPSByZXNvbHZlZC50YXJnZXQ7XG4gICAgdHJhbnNpdGlvbkVuZCA9IHJlc29sdmVkLnRyYW5zaXRpb25FbmQ7XG4gICAgcmV0dXJuIHVuaXRDb252ZXJzaW9uKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKTtcbn07XG5cbmV4cG9ydCB7IHBhcnNlRG9tVmFyaWFudCB9O1xuIiwiaW1wb3J0IHsgdmlzdWFsRWxlbWVudCB9IGZyb20gJy4uL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBnZXRPcmlnaW4sIGNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzIH0gZnJvbSAnLi4vdXRpbHMvc2V0dGVycy5tanMnO1xuaW1wb3J0IHsgYnVpbGRIVE1MU3R5bGVzIH0gZnJvbSAnLi91dGlscy9idWlsZC1zdHlsZXMubWpzJztcbmltcG9ydCB7IGlzQ1NTVmFyaWFibGUgfSBmcm9tICcuLi9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyc7XG5pbXBvcnQgeyBwYXJzZURvbVZhcmlhbnQgfSBmcm9tICcuLi9kb20vdXRpbHMvcGFyc2UtZG9tLXZhcmlhbnQubWpzJztcbmltcG9ydCB7IHRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi91dGlscy90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IHJlbmRlckhUTUwgfSBmcm9tICcuL3V0aWxzL3JlbmRlci5tanMnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFZhbHVlVHlwZSB9IGZyb20gJy4uL2RvbS92YWx1ZS10eXBlcy9kZWZhdWx0cy5tanMnO1xuaW1wb3J0IHsgbWVhc3VyZVZpZXdwb3J0Qm94IH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi91dGlscy9tZWFzdXJlLm1qcyc7XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cbmNvbnN0IGh0bWxDb25maWcgPSB7XG4gICAgdHJlZVR5cGU6IFwiZG9tXCIsXG4gICAgcmVhZFZhbHVlRnJvbUluc3RhbmNlKGRvbUVsZW1lbnQsIGtleSkge1xuICAgICAgICBpZiAodHJhbnNmb3JtUHJvcHMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gZ2V0RGVmYXVsdFZhbHVlVHlwZShrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRUeXBlID8gZGVmYXVsdFR5cGUuZGVmYXVsdCB8fCAwIDogMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRvbUVsZW1lbnQpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAoaXNDU1NWYXJpYWJsZShrZXkpXG4gICAgICAgICAgICAgICAgPyBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoa2V5KVxuICAgICAgICAgICAgICAgIDogY29tcHV0ZWRTdHlsZVtrZXldKSB8fCAwO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzb3J0Tm9kZVBvc2l0aW9uKGEsIGIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIHJldHVybnMgYSBiaXRtYXNrLCBieSB1c2luZyB0aGUgYml0d2lzZSAmXG4gICAgICAgICAqIHdlJ3JlIHJldHVybmluZyB0cnVlIGlmIDIgaW4gdGhhdCBiaXRtYXNrIGlzIHNldCB0byB0cnVlLiAyIGlzIHNldFxuICAgICAgICAgKiB0byB0cnVlIGlmIGIgcHJlY2VlZHMgYS5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgMiA/IDEgOiAtMTtcbiAgICB9LFxuICAgIGdldEJhc2VUYXJnZXQocHJvcHMsIGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSBwcm9wcy5zdHlsZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW2tleV07XG4gICAgfSxcbiAgICBtZWFzdXJlVmlld3BvcnRCb3goZWxlbWVudCwgeyB0cmFuc2Zvcm1QYWdlUG9pbnQgfSkge1xuICAgICAgICByZXR1cm4gbWVhc3VyZVZpZXdwb3J0Qm94KGVsZW1lbnQsIHRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgdHJhbnNmb3JtIG9uIHRoZSBjdXJyZW50IEVsZW1lbnQuIFRoaXMgaXMgY2FsbGVkIGFzIHBhcnRcbiAgICAgKiBvZiBhIGJhdGNoZWQgcHJvY2VzcyBhY3Jvc3MgdGhlIGVudGlyZSBsYXlvdXQgdHJlZS4gVG8gcmVtb3ZlIHRoaXMgd3JpdGVcbiAgICAgKiBjeWNsZSBpdCdkIGJlIGludGVyZXN0aW5nIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIFwidW5kb1wiIGFsbCB0aGUgY3VycmVudFxuICAgICAqIGxheW91dCB0cmFuc2Zvcm1zIHVwIHRoZSB0cmVlIGluIHRoZSBzYW1lIHdheSB0aGlzLmdldEJvdW5kaW5nQm94V2l0aG91dFRyYW5zZm9ybXNcbiAgICAgKiB3b3Jrc1xuICAgICAqL1xuICAgIHJlc2V0VHJhbnNmb3JtKGVsZW1lbnQsIGRvbUVsZW1lbnQsIHByb3BzKSB7XG4gICAgICAgIGNvbnN0IHsgdHJhbnNmb3JtVGVtcGxhdGUgfSA9IHByb3BzO1xuICAgICAgICBkb21FbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRlbXBsYXRlXG4gICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHt9LCBcIlwiKVxuICAgICAgICAgICAgOiBcIm5vbmVcIjtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgd2hhdGV2ZXIgaGFwcGVucyBuZXh0LCB3ZSByZXN0b3JlIG91ciB0cmFuc2Zvcm0gb24gdGhlIG5leHQgZnJhbWVcbiAgICAgICAgZWxlbWVudC5zY2hlZHVsZVJlbmRlcigpO1xuICAgIH0sXG4gICAgcmVzdG9yZVRyYW5zZm9ybShpbnN0YW5jZSwgbXV0YWJsZVN0YXRlKSB7XG4gICAgICAgIGluc3RhbmNlLnN0eWxlLnRyYW5zZm9ybSA9IG11dGFibGVTdGF0ZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgfSxcbiAgICByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZShrZXksIHsgdmFycywgc3R5bGUgfSkge1xuICAgICAgICBkZWxldGUgdmFyc1trZXldO1xuICAgICAgICBkZWxldGUgc3R5bGVba2V5XTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEVuc3VyZSB0aGF0IEhUTUwgYW5kIEZyYW1lci1zcGVjaWZpYyB2YWx1ZSB0eXBlcyBsaWtlIGBweGAtPmAlYCBhbmQgYENvbG9yYFxuICAgICAqIGNhbiBiZSBhbmltYXRlZCBieSBNb3Rpb24uXG4gICAgICovXG4gICAgbWFrZVRhcmdldEFuaW1hdGFibGUoZWxlbWVudCwgeyB0cmFuc2l0aW9uLCB0cmFuc2l0aW9uRW5kLCAuLi50YXJnZXQgfSwgeyB0cmFuc2Zvcm1WYWx1ZXMgfSwgaXNNb3VudGVkID0gdHJ1ZSkge1xuICAgICAgICBsZXQgb3JpZ2luID0gZ2V0T3JpZ2luKHRhcmdldCwgdHJhbnNpdGlvbiB8fCB7fSwgZWxlbWVudCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBGcmFtZXIgaGFzIHByb3ZpZGVkIGEgZnVuY3Rpb24gdG8gY29udmVydCBgQ29sb3JgIGV0YyB2YWx1ZSB0eXBlcywgY29udmVydCB0aGVtXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHJhbnNmb3JtVmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbkVuZClcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRW5kID0gdHJhbnNmb3JtVmFsdWVzKHRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgaWYgKHRhcmdldClcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0cmFuc2Zvcm1WYWx1ZXModGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChvcmlnaW4pXG4gICAgICAgICAgICAgICAgb3JpZ2luID0gdHJhbnNmb3JtVmFsdWVzKG9yaWdpbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTW91bnRlZCkge1xuICAgICAgICAgICAgY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXMoZWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4pO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VEb21WYXJpYW50KGVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmQgPSBwYXJzZWQudHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICAgIHRhcmdldCA9IHBhcnNlZC50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24sXG4gICAgICAgICAgICB0cmFuc2l0aW9uRW5kLFxuICAgICAgICAgICAgLi4udGFyZ2V0LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLFxuICAgIGJ1aWxkKGVsZW1lbnQsIHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHByb3BzKSB7XG4gICAgICAgIGlmIChlbGVtZW50LmlzVmlzaWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZW5kZXJTdGF0ZS5zdHlsZS52aXNpYmlsaXR5ID0gZWxlbWVudC5pc1Zpc2libGVcbiAgICAgICAgICAgICAgICA/IFwidmlzaWJsZVwiXG4gICAgICAgICAgICAgICAgOiBcImhpZGRlblwiO1xuICAgICAgICB9XG4gICAgICAgIGJ1aWxkSFRNTFN0eWxlcyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgfSxcbiAgICByZW5kZXI6IHJlbmRlckhUTUwsXG59O1xuY29uc3QgaHRtbFZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50KGh0bWxDb25maWcpO1xuXG5leHBvcnQgeyBnZXRDb21wdXRlZFN0eWxlLCBodG1sQ29uZmlnLCBodG1sVmlzdWFsRWxlbWVudCB9O1xuIiwiLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBhIG51bWVyaWNhbCBzdHJpbmcsIGllIGEgc3RyaW5nIHRoYXQgaXMgcHVyZWx5IGEgbnVtYmVyIGVnIFwiMTAwXCIgb3IgXCItMTAwLjFcIlxuICovXG5jb25zdCBpc051bWVyaWNhbFN0cmluZyA9ICh2KSA9PiAvXlxcLT9cXGQqXFwuP1xcZCskLy50ZXN0KHYpO1xuXG5leHBvcnQgeyBpc051bWVyaWNhbFN0cmluZyB9O1xuIiwiLyoqXG4gKiBDaGVjayBpZiB0aGUgdmFsdWUgaXMgYSB6ZXJvIHZhbHVlIHN0cmluZyBsaWtlIFwiMHB4XCIgb3IgXCIwJVwiXG4gKi9cbmNvbnN0IGlzWmVyb1ZhbHVlU3RyaW5nID0gKHYpID0+IC9eMFteLlxcc10rJC8udGVzdCh2KTtcblxuZXhwb3J0IHsgaXNaZXJvVmFsdWVTdHJpbmcgfTtcbiIsImltcG9ydCB7IHZpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9pbmRleC5tanMnO1xuaW1wb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH0gZnJvbSAnLi91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgaHRtbENvbmZpZyB9IGZyb20gJy4uL2h0bWwvdmlzdWFsLWVsZW1lbnQubWpzJztcbmltcG9ydCB7IGJ1aWxkU1ZHQXR0cnMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLWF0dHJzLm1qcyc7XG5pbXBvcnQgeyBjYW1lbFRvRGFzaCB9IGZyb20gJy4uL2RvbS91dGlscy9jYW1lbC10by1kYXNoLm1qcyc7XG5pbXBvcnQgeyBjYW1lbENhc2VBdHRyaWJ1dGVzIH0gZnJvbSAnLi91dGlscy9jYW1lbC1jYXNlLWF0dHJzLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wcyB9IGZyb20gJy4uL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyByZW5kZXJTVkcgfSBmcm9tICcuL3V0aWxzL3JlbmRlci5tanMnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFZhbHVlVHlwZSB9IGZyb20gJy4uL2RvbS92YWx1ZS10eXBlcy9kZWZhdWx0cy5tanMnO1xuXG5jb25zdCBzdmdWaXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudCh7XG4gICAgLi4uaHRtbENvbmZpZyxcbiAgICBnZXRCYXNlVGFyZ2V0KHByb3BzLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XG4gICAgfSxcbiAgICByZWFkVmFsdWVGcm9tSW5zdGFuY2UoZG9tRWxlbWVudCwga2V5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybVByb3BzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IGdldERlZmF1bHRWYWx1ZVR5cGUoa2V5KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlZmF1bHQpIHx8IDA7XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gIWNhbWVsQ2FzZUF0dHJpYnV0ZXMuaGFzKGtleSkgPyBjYW1lbFRvRGFzaChrZXkpIDoga2V5O1xuICAgICAgICByZXR1cm4gZG9tRWxlbWVudC5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICB9LFxuICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyxcbiAgICBidWlsZChfZWxlbWVudCwgcmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMpIHtcbiAgICAgICAgYnVpbGRTVkdBdHRycyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgfSxcbiAgICByZW5kZXI6IHJlbmRlclNWRyxcbn0pO1xuXG5leHBvcnQgeyBzdmdWaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBodG1sVmlzdWFsRWxlbWVudCB9IGZyb20gJy4uL2h0bWwvdmlzdWFsLWVsZW1lbnQubWpzJztcbmltcG9ydCB7IHN2Z1Zpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9zdmcvdmlzdWFsLWVsZW1lbnQubWpzJztcbmltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi91dGlscy9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5cbmNvbnN0IGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQgPSAoQ29tcG9uZW50LCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgPyBzdmdWaXN1YWxFbGVtZW50KG9wdGlvbnMsIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb246IGZhbHNlIH0pXG4gICAgICAgIDogaHRtbFZpc3VhbEVsZW1lbnQob3B0aW9ucywgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQgfTtcbiIsImltcG9ydCB7IHB4IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuXG5mdW5jdGlvbiBwaXhlbHNUb1BlcmNlbnQocGl4ZWxzLCBheGlzKSB7XG4gICAgaWYgKGF4aXMubWF4ID09PSBheGlzLm1pbilcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIChwaXhlbHMgLyAoYXhpcy5tYXggLSBheGlzLm1pbikpICogMTAwO1xufVxuLyoqXG4gKiBXZSBhbHdheXMgY29ycmVjdCBib3JkZXJSYWRpdXMgYXMgYSBwZXJjZW50YWdlIHJhdGhlciB0aGFuIHBpeGVscyB0byByZWR1Y2UgcGFpbnRzLlxuICogRm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgcHJvamVjdGluZyBhIGJveCB0aGF0IGlzIDEwMHB4IHdpZGUgd2l0aCBhIDEwcHggYm9yZGVyUmFkaXVzXG4gKiBpbnRvIGEgYm94IHRoYXQgaXMgMjAwcHggd2lkZSB3aXRoIGEgMjBweCBib3JkZXJSYWRpdXMsIHRoYXQgaXMgYWN0dWFsbHkgYSAxMCVcbiAqIGJvcmRlclJhZGl1cyBpbiBib3RoIHN0YXRlcy4gSWYgd2UgYW5pbWF0ZSBiZXR3ZWVuIHRoZSB0d28gaW4gcGl4ZWxzIHRoYXQgd2lsbCB0cmlnZ2VyXG4gKiBhIHBhaW50IGVhY2ggdGltZS4gSWYgd2UgYW5pbWF0ZSBiZXR3ZWVuIHRoZSB0d28gaW4gcGVyY2VudGFnZSB3ZSdsbCBhdm9pZCBhIHBhaW50LlxuICovXG5jb25zdCBjb3JyZWN0Qm9yZGVyUmFkaXVzID0ge1xuICAgIGNvcnJlY3Q6IChsYXRlc3QsIG5vZGUpID0+IHtcbiAgICAgICAgaWYgKCFub2RlLnRhcmdldClcbiAgICAgICAgICAgIHJldHVybiBsYXRlc3Q7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBsYXRlc3QgaXMgYSBzdHJpbmcsIGlmIGl0J3MgYSBwZXJjZW50YWdlIHdlIGNhbiByZXR1cm4gaW1tZWRpYXRlbHkgYXMgaXQnc1xuICAgICAgICAgKiBnb2luZyB0byBiZSBzdHJldGNoZWQgYXBwcm9wcmlhdGVseS4gT3RoZXJ3aXNlLCBpZiBpdCdzIGEgcGl4ZWwsIGNvbnZlcnQgaXQgdG8gYSBudW1iZXIuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIGxhdGVzdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKHB4LnRlc3QobGF0ZXN0KSkge1xuICAgICAgICAgICAgICAgIGxhdGVzdCA9IHBhcnNlRmxvYXQobGF0ZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXRlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGxhdGVzdCBpcyBhIG51bWJlciwgaXQncyBhIHBpeGVsIHZhbHVlLiBXZSB1c2UgdGhlIGN1cnJlbnQgdmlld3BvcnRCb3ggdG8gY2FsY3VsYXRlIHRoYXRcbiAgICAgICAgICogcGl4ZWwgdmFsdWUgYXMgYSBwZXJjZW50YWdlIG9mIGVhY2ggYXhpc1xuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgeCA9IHBpeGVsc1RvUGVyY2VudChsYXRlc3QsIG5vZGUudGFyZ2V0LngpO1xuICAgICAgICBjb25zdCB5ID0gcGl4ZWxzVG9QZXJjZW50KGxhdGVzdCwgbm9kZS50YXJnZXQueSk7XG4gICAgICAgIHJldHVybiBgJHt4fSUgJHt5fSVgO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBjb3JyZWN0Qm9yZGVyUmFkaXVzLCBwaXhlbHNUb1BlcmNlbnQgfTtcbiIsImltcG9ydCB7IG1peCB9IGZyb20gJ3BvcG1vdGlvbic7XG5pbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuaW1wb3J0IHsgY3NzVmFyaWFibGVSZWdleCB9IGZyb20gJy4uLy4uL3JlbmRlci9kb20vdXRpbHMvY3NzLXZhcmlhYmxlcy1jb252ZXJzaW9uLm1qcyc7XG5cbmNvbnN0IHZhclRva2VuID0gXCJfJGNzc1wiO1xuY29uc3QgY29ycmVjdEJveFNoYWRvdyA9IHtcbiAgICBjb3JyZWN0OiAobGF0ZXN0LCB7IHRyZWVTY2FsZSwgcHJvamVjdGlvbkRlbHRhIH0pID0+IHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBsYXRlc3Q7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBuZWVkIHRvIGZpcnN0IHN0cmlwIGFuZCBzdG9yZSBDU1MgdmFyaWFibGVzIGZyb20gdGhlIHN0cmluZy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGNvbnRhaW5zQ1NTVmFyaWFibGVzID0gbGF0ZXN0LmluY2x1ZGVzKFwidmFyKFwiKTtcbiAgICAgICAgY29uc3QgY3NzVmFyaWFibGVzID0gW107XG4gICAgICAgIGlmIChjb250YWluc0NTU1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgbGF0ZXN0ID0gbGF0ZXN0LnJlcGxhY2UoY3NzVmFyaWFibGVSZWdleCwgKG1hdGNoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3NzVmFyaWFibGVzLnB1c2gobWF0Y2gpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YXJUb2tlbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNoYWRvdyA9IGNvbXBsZXgucGFyc2UobGF0ZXN0KTtcbiAgICAgICAgLy8gVE9ETzogRG9lc24ndCBzdXBwb3J0IG11bHRpcGxlIHNoYWRvd3NcbiAgICAgICAgaWYgKHNoYWRvdy5sZW5ndGggPiA1KVxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGNvbXBsZXguY3JlYXRlVHJhbnNmb3JtZXIobGF0ZXN0KTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdHlwZW9mIHNoYWRvd1swXSAhPT0gXCJudW1iZXJcIiA/IDEgOiAwO1xuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIG92ZXJhbGwgY29udGV4dCBzY2FsZVxuICAgICAgICBjb25zdCB4U2NhbGUgPSBwcm9qZWN0aW9uRGVsdGEueC5zY2FsZSAqIHRyZWVTY2FsZS54O1xuICAgICAgICBjb25zdCB5U2NhbGUgPSBwcm9qZWN0aW9uRGVsdGEueS5zY2FsZSAqIHRyZWVTY2FsZS55O1xuICAgICAgICBzaGFkb3dbMCArIG9mZnNldF0gLz0geFNjYWxlO1xuICAgICAgICBzaGFkb3dbMSArIG9mZnNldF0gLz0geVNjYWxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWRlYWxseSB3ZSdkIGNvcnJlY3QgeCBhbmQgeSBzY2FsZXMgaW5kaXZpZHVhbGx5LCBidXQgYmVjYXVzZSBibHVyIGFuZFxuICAgICAgICAgKiBzcHJlYWQgYXBwbHkgdG8gYm90aCB3ZSBoYXZlIHRvIHRha2UgYSBzY2FsZSBhdmVyYWdlIGFuZCBhcHBseSB0aGF0IGluc3RlYWQuXG4gICAgICAgICAqIFdlIGNvdWxkIHBvdGVudGlhbGx5IGltcHJvdmUgdGhlIG91dGNvbWUgb2YgdGhpcyBieSBpbmNvcnBvcmF0aW5nIHRoZSByYXRpbyBiZXR3ZWVuXG4gICAgICAgICAqIHRoZSB0d28gc2NhbGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgYXZlcmFnZVNjYWxlID0gbWl4KHhTY2FsZSwgeVNjYWxlLCAwLjUpO1xuICAgICAgICAvLyBCbHVyXG4gICAgICAgIGlmICh0eXBlb2Ygc2hhZG93WzIgKyBvZmZzZXRdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgc2hhZG93WzIgKyBvZmZzZXRdIC89IGF2ZXJhZ2VTY2FsZTtcbiAgICAgICAgLy8gU3ByZWFkXG4gICAgICAgIGlmICh0eXBlb2Ygc2hhZG93WzMgKyBvZmZzZXRdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgc2hhZG93WzMgKyBvZmZzZXRdIC89IGF2ZXJhZ2VTY2FsZTtcbiAgICAgICAgbGV0IG91dHB1dCA9IHRlbXBsYXRlKHNoYWRvdyk7XG4gICAgICAgIGlmIChjb250YWluc0NTU1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UodmFyVG9rZW4sICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjc3NWYXJpYWJsZSA9IGNzc1ZhcmlhYmxlc1tpXTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNzc1ZhcmlhYmxlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgY29ycmVjdEJveFNoYWRvdyB9O1xuIiwiaW1wb3J0IHN5bmMgZnJvbSAnZnJhbWVzeW5jJztcbmltcG9ydCBSZWFjdF9fZGVmYXVsdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUHJlc2VuY2UgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL0FuaW1hdGVQcmVzZW5jZS91c2UtcHJlc2VuY2UubWpzJztcbmltcG9ydCB7IExheW91dEdyb3VwQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHQvTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBTd2l0Y2hMYXlvdXRHcm91cENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0L1N3aXRjaExheW91dEdyb3VwQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgZ2xvYmFsUHJvamVjdGlvblN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vcHJvamVjdGlvbi9ub2RlL3N0YXRlLm1qcyc7XG5pbXBvcnQgeyBjb3JyZWN0Qm9yZGVyUmFkaXVzIH0gZnJvbSAnLi4vLi4vLi4vcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtYm9yZGVyLXJhZGl1cy5tanMnO1xuaW1wb3J0IHsgY29ycmVjdEJveFNoYWRvdyB9IGZyb20gJy4uLy4uLy4uL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJveC1zaGFkb3cubWpzJztcbmltcG9ydCB7IGFkZFNjYWxlQ29ycmVjdG9yIH0gZnJvbSAnLi4vLi4vLi4vcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtY29ycmVjdGlvbi5tanMnO1xuXG5jbGFzcyBNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQgZXh0ZW5kcyBSZWFjdF9fZGVmYXVsdC5Db21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIFRoaXMgb25seSBtb3VudHMgcHJvamVjdGlvbiBub2RlcyBmb3IgY29tcG9uZW50cyB0aGF0XG4gICAgICogbmVlZCBtZWFzdXJpbmcsIHdlIG1pZ2h0IHdhbnQgdG8gZG8gaXQgZm9yIGFsbCBjb21wb25lbnRzXG4gICAgICogaW4gb3JkZXIgdG8gaW5jb3Jwb3JhdGUgdHJhbnNmb3Jtc1xuICAgICAqL1xuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCB7IHZpc3VhbEVsZW1lbnQsIGxheW91dEdyb3VwLCBzd2l0Y2hMYXlvdXRHcm91cCwgbGF5b3V0SWQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgcHJvamVjdGlvbiB9ID0gdmlzdWFsRWxlbWVudDtcbiAgICAgICAgYWRkU2NhbGVDb3JyZWN0b3IoZGVmYXVsdFNjYWxlQ29ycmVjdG9ycyk7XG4gICAgICAgIGlmIChwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAobGF5b3V0R3JvdXAuZ3JvdXApXG4gICAgICAgICAgICAgICAgbGF5b3V0R3JvdXAuZ3JvdXAuYWRkKHByb2plY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHN3aXRjaExheW91dEdyb3VwICYmIHN3aXRjaExheW91dEdyb3VwLnJlZ2lzdGVyICYmIGxheW91dElkKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoTGF5b3V0R3JvdXAucmVnaXN0ZXIocHJvamVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnJvb3QuZGlkVXBkYXRlKCk7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25Db21wbGV0ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYWZlVG9SZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJvamVjdGlvbi5zZXRPcHRpb25zKHtcbiAgICAgICAgICAgICAgICAuLi5wcm9qZWN0aW9uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgb25FeGl0Q29tcGxldGU6ICgpID0+IHRoaXMuc2FmZVRvUmVtb3ZlKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnbG9iYWxQcm9qZWN0aW9uU3RhdGUuaGFzRXZlclVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgICAgY29uc3QgeyBsYXlvdXREZXBlbmRlbmN5LCB2aXN1YWxFbGVtZW50LCBkcmFnLCBpc1ByZXNlbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHByb2plY3Rpb24gPSB2aXN1YWxFbGVtZW50LnByb2plY3Rpb247XG4gICAgICAgIGlmICghcHJvamVjdGlvbilcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVE9ETzogV2UgdXNlIHRoaXMgZGF0YSBpbiByZWxlZ2F0ZSB0byBkZXRlcm1pbmUgd2hldGhlciB0b1xuICAgICAgICAgKiBwcm9tb3RlIGEgcHJldmlvdXMgZWxlbWVudC4gVGhlcmUncyBubyBndWFyYW50ZWUgaXRzIHByZXNlbmNlIGRhdGFcbiAgICAgICAgICogd2lsbCBoYXZlIHVwZGF0ZWQgYnkgdGhpcyBwb2ludCAtIGlmIGEgYnVnIGxpa2UgdGhpcyBhcmlzZXMgaXQgd2lsbFxuICAgICAgICAgKiBoYXZlIHRvIGJlIHRoYXQgd2UgbWFya0ZvclJlbGVnYXRpb24gYW5kIHRoZW4gZmluZCBhIG5ldyBsZWFkIHNvbWUgb3RoZXIgd2F5LFxuICAgICAgICAgKiBwZXJoYXBzIGluIGRpZFVwZGF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgcHJvamVjdGlvbi5pc1ByZXNlbnQgPSBpc1ByZXNlbnQ7XG4gICAgICAgIGlmIChkcmFnIHx8XG4gICAgICAgICAgICBwcmV2UHJvcHMubGF5b3V0RGVwZW5kZW5jeSAhPT0gbGF5b3V0RGVwZW5kZW5jeSB8fFxuICAgICAgICAgICAgbGF5b3V0RGVwZW5kZW5jeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLndpbGxVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2FmZVRvUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZQcm9wcy5pc1ByZXNlbnQgIT09IGlzUHJlc2VudCkge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCkge1xuICAgICAgICAgICAgICAgIHByb2plY3Rpb24ucHJvbW90ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXByb2plY3Rpb24ucmVsZWdhdGUoKSkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZXJlJ3MgYW5vdGhlciBzdGFjayBtZW1iZXIgdGFraW5nIG92ZXIgZnJvbSB0aGlzIG9uZSxcbiAgICAgICAgICAgICAgICAgKiBpdCdzIGluIGNoYXJnZSBvZiB0aGUgZXhpdCBhbmltYXRpb24gYW5kIHRoZXJlZm9yZSBzaG91bGRcbiAgICAgICAgICAgICAgICAgKiBiZSBpbiBjaGFyZ2Ugb2YgdGhlIHNhZmUgdG8gcmVtb3ZlLiBPdGhlcndpc2Ugd2UgY2FsbCBpdCBoZXJlLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHN5bmMucG9zdFJlbmRlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoKF9hID0gcHJvamVjdGlvbi5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWVtYmVycy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhZmVUb1JlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB0aGlzLnByb3BzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIGlmIChwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnJvb3QuZGlkVXBkYXRlKCk7XG4gICAgICAgICAgICBpZiAoIXByb2plY3Rpb24uY3VycmVudEFuaW1hdGlvbiAmJiBwcm9qZWN0aW9uLmlzTGVhZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYWZlVG9SZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgY29uc3QgeyB2aXN1YWxFbGVtZW50LCBsYXlvdXRHcm91cCwgc3dpdGNoTGF5b3V0R3JvdXA6IHByb21vdGVDb250ZXh0LCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0aW9uIH0gPSB2aXN1YWxFbGVtZW50O1xuICAgICAgICBpZiAocHJvamVjdGlvbikge1xuICAgICAgICAgICAgcHJvamVjdGlvbi5zY2hlZHVsZUNoZWNrQWZ0ZXJVbm1vdW50KCk7XG4gICAgICAgICAgICBpZiAobGF5b3V0R3JvdXAgPT09IG51bGwgfHwgbGF5b3V0R3JvdXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxheW91dEdyb3VwLmdyb3VwKVxuICAgICAgICAgICAgICAgIGxheW91dEdyb3VwLmdyb3VwLnJlbW92ZShwcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIGlmIChwcm9tb3RlQ29udGV4dCA9PT0gbnVsbCB8fCBwcm9tb3RlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvbW90ZUNvbnRleHQuZGVyZWdpc3RlcilcbiAgICAgICAgICAgICAgICBwcm9tb3RlQ29udGV4dC5kZXJlZ2lzdGVyKHByb2plY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNhZmVUb1JlbW92ZSgpIHtcbiAgICAgICAgY29uc3QgeyBzYWZlVG9SZW1vdmUgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHNhZmVUb1JlbW92ZSA9PT0gbnVsbCB8fCBzYWZlVG9SZW1vdmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNhZmVUb1JlbW92ZSgpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIE1lYXN1cmVMYXlvdXQocHJvcHMpIHtcbiAgICBjb25zdCBbaXNQcmVzZW50LCBzYWZlVG9SZW1vdmVdID0gdXNlUHJlc2VuY2UoKTtcbiAgICBjb25zdCBsYXlvdXRHcm91cCA9IHVzZUNvbnRleHQoTGF5b3V0R3JvdXBDb250ZXh0KTtcbiAgICByZXR1cm4gKFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTWVhc3VyZUxheW91dFdpdGhDb250ZXh0LCB7IC4uLnByb3BzLCBsYXlvdXRHcm91cDogbGF5b3V0R3JvdXAsIHN3aXRjaExheW91dEdyb3VwOiB1c2VDb250ZXh0KFN3aXRjaExheW91dEdyb3VwQ29udGV4dCksIGlzUHJlc2VudDogaXNQcmVzZW50LCBzYWZlVG9SZW1vdmU6IHNhZmVUb1JlbW92ZSB9KSk7XG59XG5jb25zdCBkZWZhdWx0U2NhbGVDb3JyZWN0b3JzID0ge1xuICAgIGJvcmRlclJhZGl1czoge1xuICAgICAgICAuLi5jb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgICAgICBhcHBseVRvOiBbXG4gICAgICAgICAgICBcImJvcmRlclRvcExlZnRSYWRpdXNcIixcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIixcbiAgICAgICAgICAgIFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiLFxuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogY29ycmVjdEJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogY29ycmVjdEJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBjb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBjb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgIGJveFNoYWRvdzogY29ycmVjdEJveFNoYWRvdyxcbn07XG5cbmV4cG9ydCB7IE1lYXN1cmVMYXlvdXQgfTtcbiIsImltcG9ydCB7IE1lYXN1cmVMYXlvdXQgfSBmcm9tICcuL01lYXN1cmVMYXlvdXQubWpzJztcblxuY29uc3QgbGF5b3V0RmVhdHVyZXMgPSB7XG4gICAgbWVhc3VyZUxheW91dDogTWVhc3VyZUxheW91dCxcbn07XG5cbmV4cG9ydCB7IGxheW91dEZlYXR1cmVzIH07XG4iLCJpbXBvcnQgeyBtaXgsIHByb2dyZXNzLCBjaXJjT3V0LCBsaW5lYXIgfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgcGVyY2VudCwgcHggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5cbmNvbnN0IGJvcmRlcnMgPSBbXCJUb3BMZWZ0XCIsIFwiVG9wUmlnaHRcIiwgXCJCb3R0b21MZWZ0XCIsIFwiQm90dG9tUmlnaHRcIl07XG5jb25zdCBudW1Cb3JkZXJzID0gYm9yZGVycy5sZW5ndGg7XG5jb25zdCBhc051bWJlciA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gcGFyc2VGbG9hdCh2YWx1ZSkgOiB2YWx1ZTtcbmNvbnN0IGlzUHggPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCBweC50ZXN0KHZhbHVlKTtcbmZ1bmN0aW9uIG1peFZhbHVlcyh0YXJnZXQsIGZvbGxvdywgbGVhZCwgcHJvZ3Jlc3MsIHNob3VsZENyb3NzZmFkZU9wYWNpdHksIGlzT25seU1lbWJlcikge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBpZiAoc2hvdWxkQ3Jvc3NmYWRlT3BhY2l0eSkge1xuICAgICAgICB0YXJnZXQub3BhY2l0eSA9IG1peCgwLCBcbiAgICAgICAgLy8gKGZvbGxvdz8ub3BhY2l0eSBhcyBudW1iZXIpID8/IDAsXG4gICAgICAgIC8vIFRPRE8gUmVpbnN0YXRlIHRoaXMgaWYgb25seSBjaGlsZFxuICAgICAgICAoX2EgPSBsZWFkLm9wYWNpdHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDEsIGVhc2VDcm9zc2ZhZGVJbihwcm9ncmVzcykpO1xuICAgICAgICB0YXJnZXQub3BhY2l0eUV4aXQgPSBtaXgoKF9iID0gZm9sbG93Lm9wYWNpdHkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDEsIDAsIGVhc2VDcm9zc2ZhZGVPdXQocHJvZ3Jlc3MpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPbmx5TWVtYmVyKSB7XG4gICAgICAgIHRhcmdldC5vcGFjaXR5ID0gbWl4KChfYyA9IGZvbGxvdy5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAxLCAoX2QgPSBsZWFkLm9wYWNpdHkpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDEsIHByb2dyZXNzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWl4IGJvcmRlciByYWRpdXNcbiAgICAgKi9cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUJvcmRlcnM7IGkrKykge1xuICAgICAgICBjb25zdCBib3JkZXJMYWJlbCA9IGBib3JkZXIke2JvcmRlcnNbaV19UmFkaXVzYDtcbiAgICAgICAgbGV0IGZvbGxvd1JhZGl1cyA9IGdldFJhZGl1cyhmb2xsb3csIGJvcmRlckxhYmVsKTtcbiAgICAgICAgbGV0IGxlYWRSYWRpdXMgPSBnZXRSYWRpdXMobGVhZCwgYm9yZGVyTGFiZWwpO1xuICAgICAgICBpZiAoZm9sbG93UmFkaXVzID09PSB1bmRlZmluZWQgJiYgbGVhZFJhZGl1cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGZvbGxvd1JhZGl1cyB8fCAoZm9sbG93UmFkaXVzID0gMCk7XG4gICAgICAgIGxlYWRSYWRpdXMgfHwgKGxlYWRSYWRpdXMgPSAwKTtcbiAgICAgICAgY29uc3QgY2FuTWl4ID0gZm9sbG93UmFkaXVzID09PSAwIHx8XG4gICAgICAgICAgICBsZWFkUmFkaXVzID09PSAwIHx8XG4gICAgICAgICAgICBpc1B4KGZvbGxvd1JhZGl1cykgPT09IGlzUHgobGVhZFJhZGl1cyk7XG4gICAgICAgIGlmIChjYW5NaXgpIHtcbiAgICAgICAgICAgIHRhcmdldFtib3JkZXJMYWJlbF0gPSBNYXRoLm1heChtaXgoYXNOdW1iZXIoZm9sbG93UmFkaXVzKSwgYXNOdW1iZXIobGVhZFJhZGl1cyksIHByb2dyZXNzKSwgMCk7XG4gICAgICAgICAgICBpZiAocGVyY2VudC50ZXN0KGxlYWRSYWRpdXMpIHx8IHBlcmNlbnQudGVzdChmb2xsb3dSYWRpdXMpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2JvcmRlckxhYmVsXSArPSBcIiVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtib3JkZXJMYWJlbF0gPSBsZWFkUmFkaXVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1peCByb3RhdGlvblxuICAgICAqL1xuICAgIGlmIChmb2xsb3cucm90YXRlIHx8IGxlYWQucm90YXRlKSB7XG4gICAgICAgIHRhcmdldC5yb3RhdGUgPSBtaXgoZm9sbG93LnJvdGF0ZSB8fCAwLCBsZWFkLnJvdGF0ZSB8fCAwLCBwcm9ncmVzcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UmFkaXVzKHZhbHVlcywgcmFkaXVzTmFtZSkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gdmFsdWVzW3JhZGl1c05hbWVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB2YWx1ZXMuYm9yZGVyUmFkaXVzO1xufVxuLy8gLyoqXG4vLyAgKiBXZSBvbmx5IHdhbnQgdG8gbWl4IHRoZSBiYWNrZ3JvdW5kIGNvbG9yIGlmIHRoZXJlJ3MgYSBmb2xsb3cgZWxlbWVudFxuLy8gICogdGhhdCB3ZSdyZSBub3QgY3Jvc3NmYWRpbmcgb3BhY2l0eSBiZXR3ZWVuLiBGb3IgaW5zdGFuY2Ugd2l0aCBzd2l0Y2hcbi8vICAqIEFuaW1hdGVTaGFyZWRMYXlvdXQgYW5pbWF0aW9ucywgdGhpcyBoZWxwcyB0aGUgaWxsdXNpb24gb2YgYSBjb250aW51b3VzXG4vLyAgKiBlbGVtZW50IGJlaW5nIGFuaW1hdGVkIGJ1dCBhbHNvIGN1dHMgZG93biBvbiB0aGUgbnVtYmVyIG9mIHBhaW50cyB0cmlnZ2VyZWRcbi8vICAqIGZvciBlbGVtZW50cyB3aGVyZSBvcGFjaXR5IGlzIGRvaW5nIHRoYXQgd29yayBmb3IgdXMuXG4vLyAgKi9cbi8vIGlmIChcbi8vICAgICAhaGFzRm9sbG93RWxlbWVudCAmJlxuLy8gICAgIGxhdGVzdExlYWRWYWx1ZXMuYmFja2dyb3VuZENvbG9yICYmXG4vLyAgICAgbGF0ZXN0Rm9sbG93VmFsdWVzLmJhY2tncm91bmRDb2xvclxuLy8gKSB7XG4vLyAgICAgLyoqXG4vLyAgICAgICogVGhpcyBpc24ndCBpZGVhbCBwZXJmb3JtYW5jZS13aXNlIGFzIG1peENvbG9yIGlzIGNyZWF0aW5nIGEgbmV3IGZ1bmN0aW9uIGV2ZXJ5IGZyYW1lLlxuLy8gICAgICAqIFdlIGNvdWxkIHByb2JhYmx5IGNyZWF0ZSBhIG1peGVyIHRoYXQgcnVucyBhdCB0aGUgc3RhcnQgb2YgdGhlIGFuaW1hdGlvbiBidXRcbi8vICAgICAgKiB0aGUgaWRlYSBiZWhpbmQgdGhlIGNyb3NzZmFkZXIgaXMgdGhhdCBpdCBydW5zIGR5bmFtaWNhbGx5IGJldHdlZW4gdHdvIHBvdGVudGlhbGx5XG4vLyAgICAgICogY2hhbmdpbmcgdGFyZ2V0cyAoaWUgb3BhY2l0eSBvciBib3JkZXJSYWRpdXMgbWF5IGJlIGFuaW1hdGluZyBpbmRlcGVuZGVudGx5IHZpYSB2YXJpYW50cylcbi8vICAgICAgKi9cbi8vICAgICBsZWFkU3RhdGUuYmFja2dyb3VuZENvbG9yID0gZm9sbG93U3RhdGUuYmFja2dyb3VuZENvbG9yID0gbWl4Q29sb3IoXG4vLyAgICAgICAgIGxhdGVzdEZvbGxvd1ZhbHVlcy5iYWNrZ3JvdW5kQ29sb3IgYXMgc3RyaW5nLFxuLy8gICAgICAgICBsYXRlc3RMZWFkVmFsdWVzLmJhY2tncm91bmRDb2xvciBhcyBzdHJpbmdcbi8vICAgICApKHApXG4vLyB9XG5jb25zdCBlYXNlQ3Jvc3NmYWRlSW4gPSBjb21wcmVzcygwLCAwLjUsIGNpcmNPdXQpO1xuY29uc3QgZWFzZUNyb3NzZmFkZU91dCA9IGNvbXByZXNzKDAuNSwgMC45NSwgbGluZWFyKTtcbmZ1bmN0aW9uIGNvbXByZXNzKG1pbiwgbWF4LCBlYXNpbmcpIHtcbiAgICByZXR1cm4gKHApID0+IHtcbiAgICAgICAgLy8gQ291bGQgcmVwbGFjZSBpZnMgd2l0aCBjbGFtcFxuICAgICAgICBpZiAocCA8IG1pbilcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBpZiAocCA+IG1heClcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gZWFzaW5nKHByb2dyZXNzKG1pbiwgbWF4LCBwKSk7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgbWl4VmFsdWVzIH07XG4iLCIvKipcbiAqIFJlc2V0IGFuIGF4aXMgdG8gdGhlIHByb3ZpZGVkIG9yaWdpbiBib3guXG4gKlxuICogVGhpcyBpcyBhIG11dGF0aXZlIG9wZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY29weUF4aXNJbnRvKGF4aXMsIG9yaWdpbkF4aXMpIHtcbiAgICBheGlzLm1pbiA9IG9yaWdpbkF4aXMubWluO1xuICAgIGF4aXMubWF4ID0gb3JpZ2luQXhpcy5tYXg7XG59XG4vKipcbiAqIFJlc2V0IGEgYm94IHRvIHRoZSBwcm92aWRlZCBvcmlnaW4gYm94LlxuICpcbiAqIFRoaXMgaXMgYSBtdXRhdGl2ZSBvcGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGNvcHlCb3hJbnRvKGJveCwgb3JpZ2luQm94KSB7XG4gICAgY29weUF4aXNJbnRvKGJveC54LCBvcmlnaW5Cb3gueCk7XG4gICAgY29weUF4aXNJbnRvKGJveC55LCBvcmlnaW5Cb3gueSk7XG59XG5cbmV4cG9ydCB7IGNvcHlBeGlzSW50bywgY29weUJveEludG8gfTtcbiIsImltcG9ydCB7IG1peCB9IGZyb20gJ3BvcG1vdGlvbic7XG5pbXBvcnQgeyBwZXJjZW50IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuaW1wb3J0IHsgc2NhbGVQb2ludCB9IGZyb20gJy4vZGVsdGEtYXBwbHkubWpzJztcblxuLyoqXG4gKiBSZW1vdmUgYSBkZWx0YSBmcm9tIGEgcG9pbnQuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5UG9pbnREZWx0YSBpbiByZXZlcnNlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVBvaW50RGVsdGEocG9pbnQsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSkge1xuICAgIHBvaW50IC09IHRyYW5zbGF0ZTtcbiAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIDEgLyBzY2FsZSwgb3JpZ2luUG9pbnQpO1xuICAgIGlmIChib3hTY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBvaW50ID0gc2NhbGVQb2ludChwb2ludCwgMSAvIGJveFNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgfVxuICAgIHJldHVybiBwb2ludDtcbn1cbi8qKlxuICogUmVtb3ZlIGEgZGVsdGEgZnJvbSBhbiBheGlzLiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseUF4aXNEZWx0YSBpbiByZXZlcnNlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF4aXNEZWx0YShheGlzLCB0cmFuc2xhdGUgPSAwLCBzY2FsZSA9IDEsIG9yaWdpbiA9IDAuNSwgYm94U2NhbGUsIG9yaWdpbkF4aXMgPSBheGlzLCBzb3VyY2VBeGlzID0gYXhpcykge1xuICAgIGlmIChwZXJjZW50LnRlc3QodHJhbnNsYXRlKSkge1xuICAgICAgICB0cmFuc2xhdGUgPSBwYXJzZUZsb2F0KHRyYW5zbGF0ZSk7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlUHJvZ3Jlc3MgPSBtaXgoc291cmNlQXhpcy5taW4sIHNvdXJjZUF4aXMubWF4LCB0cmFuc2xhdGUgLyAxMDApO1xuICAgICAgICB0cmFuc2xhdGUgPSByZWxhdGl2ZVByb2dyZXNzIC0gc291cmNlQXhpcy5taW47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdHJhbnNsYXRlICE9PSBcIm51bWJlclwiKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IG9yaWdpblBvaW50ID0gbWl4KG9yaWdpbkF4aXMubWluLCBvcmlnaW5BeGlzLm1heCwgb3JpZ2luKTtcbiAgICBpZiAoYXhpcyA9PT0gb3JpZ2luQXhpcylcbiAgICAgICAgb3JpZ2luUG9pbnQgLT0gdHJhbnNsYXRlO1xuICAgIGF4aXMubWluID0gcmVtb3ZlUG9pbnREZWx0YShheGlzLm1pbiwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbiAgICBheGlzLm1heCA9IHJlbW92ZVBvaW50RGVsdGEoYXhpcy5tYXgsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSk7XG59XG4vKipcbiAqIFJlbW92ZSBhIHRyYW5zZm9ybXMgZnJvbSBhbiBheGlzLiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseUF4aXNUcmFuc2Zvcm1zIGluIHJldmVyc2VcbiAqIGFuZCBhY3RzIGFzIGEgYnJpZGdlIGJldHdlZW4gbW90aW9uIHZhbHVlcyBhbmQgcmVtb3ZlQXhpc0RlbHRhXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF4aXNUcmFuc2Zvcm1zKGF4aXMsIHRyYW5zZm9ybXMsIFtrZXksIHNjYWxlS2V5LCBvcmlnaW5LZXldLCBvcmlnaW4sIHNvdXJjZUF4aXMpIHtcbiAgICByZW1vdmVBeGlzRGVsdGEoYXhpcywgdHJhbnNmb3Jtc1trZXldLCB0cmFuc2Zvcm1zW3NjYWxlS2V5XSwgdHJhbnNmb3Jtc1tvcmlnaW5LZXldLCB0cmFuc2Zvcm1zLnNjYWxlLCBvcmlnaW4sIHNvdXJjZUF4aXMpO1xufVxuLyoqXG4gKiBUaGUgbmFtZXMgb2YgdGhlIG1vdGlvbiB2YWx1ZXMgd2Ugd2FudCB0byBhcHBseSBhcyB0cmFuc2xhdGlvbiwgc2NhbGUgYW5kIG9yaWdpbi5cbiAqL1xuY29uc3QgeEtleXMgPSBbXCJ4XCIsIFwic2NhbGVYXCIsIFwib3JpZ2luWFwiXTtcbmNvbnN0IHlLZXlzID0gW1wieVwiLCBcInNjYWxlWVwiLCBcIm9yaWdpbllcIl07XG4vKipcbiAqIFJlbW92ZSBhIHRyYW5zZm9ybXMgZnJvbSBhbiBib3guIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc0JveCBpbiByZXZlcnNlXG4gKiBhbmQgYWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuIG1vdGlvbiB2YWx1ZXMgYW5kIHJlbW92ZUF4aXNEZWx0YVxuICovXG5mdW5jdGlvbiByZW1vdmVCb3hUcmFuc2Zvcm1zKGJveCwgdHJhbnNmb3Jtcywgb3JpZ2luQm94LCBzb3VyY2VCb3gpIHtcbiAgICByZW1vdmVBeGlzVHJhbnNmb3Jtcyhib3gueCwgdHJhbnNmb3JtcywgeEtleXMsIG9yaWdpbkJveCA9PT0gbnVsbCB8fCBvcmlnaW5Cb3ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbkJveC54LCBzb3VyY2VCb3ggPT09IG51bGwgfHwgc291cmNlQm94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2VCb3gueCk7XG4gICAgcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYm94LnksIHRyYW5zZm9ybXMsIHlLZXlzLCBvcmlnaW5Cb3ggPT09IG51bGwgfHwgb3JpZ2luQm94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5Cb3gueSwgc291cmNlQm94ID09PSBudWxsIHx8IHNvdXJjZUJveCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlQm94LnkpO1xufVxuXG5leHBvcnQgeyByZW1vdmVBeGlzRGVsdGEsIHJlbW92ZUF4aXNUcmFuc2Zvcm1zLCByZW1vdmVCb3hUcmFuc2Zvcm1zLCByZW1vdmVQb2ludERlbHRhIH07XG4iLCJpbXBvcnQgeyBkaXN0YW5jZSB9IGZyb20gJ3BvcG1vdGlvbic7XG5pbXBvcnQgeyBjYWxjTGVuZ3RoIH0gZnJvbSAnLi9kZWx0YS1jYWxjLm1qcyc7XG5cbmZ1bmN0aW9uIGlzQXhpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBkZWx0YS50cmFuc2xhdGUgPT09IDAgJiYgZGVsdGEuc2NhbGUgPT09IDE7XG59XG5mdW5jdGlvbiBpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBpc0F4aXNEZWx0YVplcm8oZGVsdGEueCkgJiYgaXNBeGlzRGVsdGFaZXJvKGRlbHRhLnkpO1xufVxuZnVuY3Rpb24gYm94RXF1YWxzKGEsIGIpIHtcbiAgICByZXR1cm4gKGEueC5taW4gPT09IGIueC5taW4gJiZcbiAgICAgICAgYS54Lm1heCA9PT0gYi54Lm1heCAmJlxuICAgICAgICBhLnkubWluID09PSBiLnkubWluICYmXG4gICAgICAgIGEueS5tYXggPT09IGIueS5tYXgpO1xufVxuZnVuY3Rpb24gYXNwZWN0UmF0aW8oYm94KSB7XG4gICAgcmV0dXJuIGNhbGNMZW5ndGgoYm94LngpIC8gY2FsY0xlbmd0aChib3gueSk7XG59XG5mdW5jdGlvbiBpc0Nsb3NlVG8oYSwgYiwgbWF4ID0gMC4wMSkge1xuICAgIHJldHVybiBkaXN0YW5jZShhLCBiKSA8PSBtYXg7XG59XG5cbmV4cG9ydCB7IGFzcGVjdFJhdGlvLCBib3hFcXVhbHMsIGlzQ2xvc2VUbywgaXNEZWx0YVplcm8gfTtcbiIsImltcG9ydCB7IGFkZFVuaXF1ZUl0ZW0sIHJlbW92ZUl0ZW0gfSBmcm9tICcuLi8uLi91dGlscy9hcnJheS5tanMnO1xuXG5jbGFzcyBOb2RlU3RhY2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1lbWJlcnMgPSBbXTtcbiAgICB9XG4gICAgYWRkKG5vZGUpIHtcbiAgICAgICAgYWRkVW5pcXVlSXRlbSh0aGlzLm1lbWJlcnMsIG5vZGUpO1xuICAgICAgICBub2RlLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgfVxuICAgIHJlbW92ZShub2RlKSB7XG4gICAgICAgIHJlbW92ZUl0ZW0odGhpcy5tZW1iZXJzLCBub2RlKTtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMucHJldkxlYWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJldkxlYWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMubGVhZCkge1xuICAgICAgICAgICAgY29uc3QgcHJldkxlYWQgPSB0aGlzLm1lbWJlcnNbdGhpcy5tZW1iZXJzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKHByZXZMZWFkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9tb3RlKHByZXZMZWFkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZWxlZ2F0ZShub2RlKSB7XG4gICAgICAgIGNvbnN0IGluZGV4T2ZOb2RlID0gdGhpcy5tZW1iZXJzLmZpbmRJbmRleCgobWVtYmVyKSA9PiBub2RlID09PSBtZW1iZXIpO1xuICAgICAgICBpZiAoaW5kZXhPZk5vZGUgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaW5kIHRoZSBuZXh0IHByb2plY3Rpb24gbm9kZSB0aGF0IGlzIHByZXNlbnRcbiAgICAgICAgICovXG4gICAgICAgIGxldCBwcmV2TGVhZDtcbiAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4T2ZOb2RlOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgbWVtYmVyID0gdGhpcy5tZW1iZXJzW2ldO1xuICAgICAgICAgICAgaWYgKG1lbWJlci5pc1ByZXNlbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcHJldkxlYWQgPSBtZW1iZXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZMZWFkKSB7XG4gICAgICAgICAgICB0aGlzLnByb21vdGUocHJldkxlYWQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvbW90ZShub2RlLCBwcmVzZXJ2ZUZvbGxvd09wYWNpdHkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBwcmV2TGVhZCA9IHRoaXMubGVhZDtcbiAgICAgICAgaWYgKG5vZGUgPT09IHByZXZMZWFkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnByZXZMZWFkID0gcHJldkxlYWQ7XG4gICAgICAgIHRoaXMubGVhZCA9IG5vZGU7XG4gICAgICAgIG5vZGUuc2hvdygpO1xuICAgICAgICBpZiAocHJldkxlYWQpIHtcbiAgICAgICAgICAgIHByZXZMZWFkLmluc3RhbmNlICYmIHByZXZMZWFkLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICBub2RlLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICBub2RlLnJlc3VtZUZyb20gPSBwcmV2TGVhZDtcbiAgICAgICAgICAgIGlmIChwcmVzZXJ2ZUZvbGxvd09wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICBub2RlLnJlc3VtZUZyb20ucHJlc2VydmVPcGFjaXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2TGVhZC5zbmFwc2hvdCkge1xuICAgICAgICAgICAgICAgIG5vZGUuc25hcHNob3QgPSBwcmV2TGVhZC5zbmFwc2hvdDtcbiAgICAgICAgICAgICAgICBub2RlLnNuYXBzaG90LmxhdGVzdFZhbHVlcyA9XG4gICAgICAgICAgICAgICAgICAgIHByZXZMZWFkLmFuaW1hdGlvblZhbHVlcyB8fCBwcmV2TGVhZC5sYXRlc3RWYWx1ZXM7XG4gICAgICAgICAgICAgICAgbm9kZS5zbmFwc2hvdC5pc1NoYXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKF9hID0gbm9kZS5yb290KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNVcGRhdGluZykge1xuICAgICAgICAgICAgICAgIG5vZGUuaXNMYXlvdXREaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGNyb3NzZmFkZSB9ID0gbm9kZS5vcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNyb3NzZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwcmV2TGVhZC5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRPRE86XG4gICAgICAgICAgICAgKiAgIC0gVGVzdCBib3JkZXIgcmFkaXVzIHdoZW4gcHJldmlvdXMgbm9kZSB3YXMgZGVsZXRlZFxuICAgICAgICAgICAgICogICAtIGJveFNoYWRvdyBtaXhpbmdcbiAgICAgICAgICAgICAqICAgLSBTaGFyZWQgYmV0d2VlbiBlbGVtZW50IEEgaW4gc2Nyb2xsZWQgY29udGFpbmVyIGFuZCBlbGVtZW50IEIgKHNjcm9sbCBzdGF5cyB0aGUgc2FtZSBvciBjaGFuZ2VzKVxuICAgICAgICAgICAgICogICAtIFNoYXJlZCBiZXR3ZWVuIGVsZW1lbnQgQSBpbiB0cmFuc2Zvcm1lZCBjb250YWluZXIgYW5kIGVsZW1lbnQgQiAodHJhbnNmb3JtIHN0YXlzIHRoZSBzYW1lIG9yIGNoYW5nZXMpXG4gICAgICAgICAgICAgKiAgIC0gU2hhcmVkIGJldHdlZW4gZWxlbWVudCBBIGluIHNjcm9sbGVkIHBhZ2UgYW5kIGVsZW1lbnQgQiAoc2Nyb2xsIHN0YXlzIHRoZSBzYW1lIG9yIGNoYW5nZXMpXG4gICAgICAgICAgICAgKiAtLS1cbiAgICAgICAgICAgICAqICAgLSBDcm9zc2ZhZGUgb3BhY2l0eSBvZiByb290IG5vZGVzXG4gICAgICAgICAgICAgKiAgIC0gbGF5b3V0SWQgY2hhbmdlcyBhZnRlciBhbmltYXRpb25cbiAgICAgICAgICAgICAqICAgLSBsYXlvdXRJZCBjaGFuZ2VzIG1pZCBhbmltYXRpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4aXRBbmltYXRpb25Db21wbGV0ZSgpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSBub2RlLm9wdGlvbnMpLm9uRXhpdENvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICAoX2UgPSAoX2MgPSBub2RlLnJlc3VtaW5nRnJvbSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZCA9IF9jLm9wdGlvbnMpLm9uRXhpdENvbXBsZXRlKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuY2FsbChfZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzY2hlZHVsZVJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIG5vZGUuaW5zdGFuY2UgJiYgbm9kZS5zY2hlZHVsZVJlbmRlcihmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbnkgbGVhZHMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCB0aGlzIHJlbmRlciB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZ1xuICAgICAqIHVzZWQgaW4gZnV0dXJlIGFuaW1hdGlvbnMgYW5kIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzXG4gICAgICovXG4gICAgcmVtb3ZlTGVhZFNuYXBzaG90KCkge1xuICAgICAgICBpZiAodGhpcy5sZWFkICYmIHRoaXMubGVhZC5zbmFwc2hvdCkge1xuICAgICAgICAgICAgdGhpcy5sZWFkLnNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBOb2RlU3RhY2sgfTtcbiIsImNvbnN0IGlkZW50aXR5UHJvamVjdGlvbiA9IFwidHJhbnNsYXRlM2QoMHB4LCAwcHgsIDApIHNjYWxlKDEsIDEpIHNjYWxlKDEsIDEpXCI7XG5mdW5jdGlvbiBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0oZGVsdGEsIHRyZWVTY2FsZSwgbGF0ZXN0VHJhbnNmb3JtKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zbGF0aW9ucyB3ZSB1c2UgdG8gY2FsY3VsYXRlIGFyZSBhbHdheXMgcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0IGNvb3JkaW5hdGUgc3BhY2UuXG4gICAgICogQnV0IHdoZW4gd2UgYXBwbHkgc2NhbGVzLCB3ZSBhbHNvIHNjYWxlIHRoZSBjb29yZGluYXRlIHNwYWNlIG9mIGFuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgKiBGb3IgaW5zdGFuY2UgaWYgd2UgaGF2ZSBhIHRyZWVTY2FsZSAodGhlIGN1bG1pbmF0aW9uIG9mIGFsbCBwYXJlbnQgc2NhbGVzKSBvZiAwLjUgYW5kIHdlIG5lZWRcbiAgICAgKiB0byBtb3ZlIGFuIGVsZW1lbnQgMTAwIHBpeGVscywgd2UgYWN0dWFsbHkgbmVlZCB0byBtb3ZlIGl0IDIwMCBpbiB3aXRoaW4gdGhhdCBzY2FsZWQgc3BhY2UuXG4gICAgICovXG4gICAgY29uc3QgeFRyYW5zbGF0ZSA9IGRlbHRhLngudHJhbnNsYXRlIC8gdHJlZVNjYWxlLng7XG4gICAgY29uc3QgeVRyYW5zbGF0ZSA9IGRlbHRhLnkudHJhbnNsYXRlIC8gdHJlZVNjYWxlLnk7XG4gICAgbGV0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3hUcmFuc2xhdGV9cHgsICR7eVRyYW5zbGF0ZX1weCwgMCkgYDtcbiAgICAvKipcbiAgICAgKiBBcHBseSBzY2FsZSBjb3JyZWN0aW9uIGZvciB0aGUgdHJlZSB0cmFuc2Zvcm0uXG4gICAgICogVGhpcyB3aWxsIGFwcGx5IHNjYWxlIHRvIHRoZSBzY3JlZW4tb3JpZW50YXRlZCBheGVzLlxuICAgICAqL1xuICAgIHRyYW5zZm9ybSArPSBgc2NhbGUoJHsxIC8gdHJlZVNjYWxlLnh9LCAkezEgLyB0cmVlU2NhbGUueX0pIGA7XG4gICAgaWYgKGxhdGVzdFRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB7IHJvdGF0ZSwgcm90YXRlWCwgcm90YXRlWSB9ID0gbGF0ZXN0VHJhbnNmb3JtO1xuICAgICAgICBpZiAocm90YXRlKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IGByb3RhdGUoJHtyb3RhdGV9ZGVnKSBgO1xuICAgICAgICBpZiAocm90YXRlWClcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSBgO1xuICAgICAgICBpZiAocm90YXRlWSlcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBgcm90YXRlWSgke3JvdGF0ZVl9ZGVnKSBgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBseSBzY2FsZSB0byBtYXRjaCB0aGUgc2l6ZSBvZiB0aGUgZWxlbWVudCB0byB0aGUgc2l6ZSB3ZSB3YW50IGl0LlxuICAgICAqIFRoaXMgd2lsbCBhcHBseSBzY2FsZSB0byB0aGUgZWxlbWVudC1vcmllbnRhdGVkIGF4ZXMuXG4gICAgICovXG4gICAgY29uc3QgZWxlbWVudFNjYWxlWCA9IGRlbHRhLnguc2NhbGUgKiB0cmVlU2NhbGUueDtcbiAgICBjb25zdCBlbGVtZW50U2NhbGVZID0gZGVsdGEueS5zY2FsZSAqIHRyZWVTY2FsZS55O1xuICAgIHRyYW5zZm9ybSArPSBgc2NhbGUoJHtlbGVtZW50U2NhbGVYfSwgJHtlbGVtZW50U2NhbGVZfSlgO1xuICAgIHJldHVybiB0cmFuc2Zvcm0gPT09IGlkZW50aXR5UHJvamVjdGlvbiA/IFwibm9uZVwiIDogdHJhbnNmb3JtO1xufVxuXG5leHBvcnQgeyBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0sIGlkZW50aXR5UHJvamVjdGlvbiB9O1xuIiwiY29uc3QgY29tcGFyZUJ5RGVwdGggPSAoYSwgYikgPT4gYS5kZXB0aCAtIGIuZGVwdGg7XG5cbmV4cG9ydCB7IGNvbXBhcmVCeURlcHRoIH07XG4iLCJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi4vLi4vdXRpbHMvYXJyYXkubWpzJztcbmltcG9ydCB7IGNvbXBhcmVCeURlcHRoIH0gZnJvbSAnLi9jb21wYXJlLWJ5LWRlcHRoLm1qcyc7XG5cbmNsYXNzIEZsYXRUcmVlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICB9XG4gICAgYWRkKGNoaWxkKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5jaGlsZHJlbiwgY2hpbGQpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgIH1cbiAgICByZW1vdmUoY2hpbGQpIHtcbiAgICAgICAgcmVtb3ZlSXRlbSh0aGlzLmNoaWxkcmVuLCBjaGlsZCk7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IHRydWU7XG4gICAgfVxuICAgIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5pc0RpcnR5ICYmIHRoaXMuY2hpbGRyZW4uc29ydChjb21wYXJlQnlEZXB0aCk7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2FsbGJhY2spO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRmxhdFRyZWUgfTtcbiIsImltcG9ydCBzeW5jLCB7IGNhbmNlbFN5bmMsIGZsdXNoU3luYyB9IGZyb20gJ2ZyYW1lc3luYyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgYW5pbWF0ZSB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi9hbmltYXRlLm1qcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25NYW5hZ2VyIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3Vic2NyaXB0aW9uLW1hbmFnZXIubWpzJztcbmltcG9ydCB7IG1peFZhbHVlcyB9IGZyb20gJy4uL2FuaW1hdGlvbi9taXgtdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyBjb3B5Qm94SW50byB9IGZyb20gJy4uL2dlb21ldHJ5L2NvcHkubWpzJztcbmltcG9ydCB7IHRyYW5zbGF0ZUF4aXMsIHRyYW5zZm9ybUJveCwgYXBwbHlCb3hEZWx0YSwgYXBwbHlUcmVlRGVsdGFzIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZGVsdGEtYXBwbHkubWpzJztcbmltcG9ydCB7IGNhbGNSZWxhdGl2ZVBvc2l0aW9uLCBjYWxjUmVsYXRpdmVCb3gsIGNhbGNCb3hEZWx0YSwgY2FsY0xlbmd0aCB9IGZyb20gJy4uL2dlb21ldHJ5L2RlbHRhLWNhbGMubWpzJztcbmltcG9ydCB7IHJlbW92ZUJveFRyYW5zZm9ybXMgfSBmcm9tICcuLi9nZW9tZXRyeS9kZWx0YS1yZW1vdmUubWpzJztcbmltcG9ydCB7IGNyZWF0ZUJveCwgY3JlYXRlRGVsdGEgfSBmcm9tICcuLi9nZW9tZXRyeS9tb2RlbHMubWpzJztcbmltcG9ydCB7IGdldFZhbHVlVHJhbnNpdGlvbiB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi91dGlscy90cmFuc2l0aW9ucy5tanMnO1xuaW1wb3J0IHsgYm94RXF1YWxzLCBpc0RlbHRhWmVybywgaXNDbG9zZVRvLCBhc3BlY3RSYXRpbyB9IGZyb20gJy4uL2dlb21ldHJ5L3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBOb2RlU3RhY2sgfSBmcm9tICcuLi9zaGFyZWQvc3RhY2subWpzJztcbmltcG9ydCB7IHNjYWxlQ29ycmVjdG9ycyB9IGZyb20gJy4uL3N0eWxlcy9zY2FsZS1jb3JyZWN0aW9uLm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBlYWNoQXhpcyB9IGZyb20gJy4uL3V0aWxzL2VhY2gtYXhpcy5tanMnO1xuaW1wb3J0IHsgaGFzVHJhbnNmb3JtLCBoYXNTY2FsZSB9IGZyb20gJy4uL3V0aWxzL2hhcy10cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IEZsYXRUcmVlIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL2ZsYXQtdHJlZS5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZU1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvcmVzb2x2ZS1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGdsb2JhbFByb2plY3Rpb25TdGF0ZSB9IGZyb20gJy4vc3RhdGUubWpzJztcblxuY29uc3QgdHJhbnNmb3JtQXhlcyA9IFtcIlwiLCBcIlhcIiwgXCJZXCIsIFwiWlwiXTtcbi8qKlxuICogV2UgdXNlIDEwMDAgYXMgdGhlIGFuaW1hdGlvbiB0YXJnZXQgYXMgMC0xMDAwIG1hcHMgYmV0dGVyIHRvIHBpeGVscyB0aGFuIDAtMVxuICogd2hpY2ggaGFzIGEgbm90aWNlYWJsZSBkaWZmZXJlbmNlIGluIHNwcmluZyBhbmltYXRpb25zXG4gKi9cbmNvbnN0IGFuaW1hdGlvblRhcmdldCA9IDEwMDA7XG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0aW9uTm9kZSh7IGF0dGFjaFJlc2l6ZUxpc3RlbmVyLCBkZWZhdWx0UGFyZW50LCBtZWFzdXJlU2Nyb2xsLCBjaGVja0lzU2Nyb2xsUm9vdCwgcmVzZXRUcmFuc2Zvcm0sIH0pIHtcbiAgICByZXR1cm4gY2xhc3MgUHJvamVjdGlvbk5vZGUge1xuICAgICAgICBjb25zdHJ1Y3RvcihpZCwgbGF0ZXN0VmFsdWVzID0ge30sIHBhcmVudCA9IGRlZmF1bHRQYXJlbnQgPT09IG51bGwgfHwgZGVmYXVsdFBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdFBhcmVudCgpKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgU2V0IGNvbnRhaW5pbmcgYWxsIHRoaXMgY29tcG9uZW50J3MgY2hpbGRyZW4uIFRoaXMgaXMgdXNlZCB0byBpdGVyYXRlXG4gICAgICAgICAgICAgKiB0aHJvdWdoIHRoZSBjaGlsZHJlbi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUT0RPOiBUaGlzIGNvdWxkIGJlIGZhc3RlciB0byBpdGVyYXRlIGFzIGEgZmxhdCBhcnJheSBzdG9yZWQgb24gdGhlIHJvb3Qgbm9kZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT3B0aW9ucyBmb3IgdGhlIG5vZGUuIFdlIHVzZSB0aGlzIHRvIGNvbmZpZ3VyZSB3aGF0IGtpbmQgb2YgbGF5b3V0IGFuaW1hdGlvbnNcbiAgICAgICAgICAgICAqIHdlIHNob3VsZCBwZXJmb3JtIChpZiBhbnkpLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2UgdXNlIHRoaXMgdG8gZGV0ZWN0IHdoZW4gaXRzIHNhZmUgdG8gc2h1dCBkb3duIHBhcnQgb2YgYSBwcm9qZWN0aW9uIHRyZWUuXG4gICAgICAgICAgICAgKiBXZSBoYXZlIHRvIGtlZXAgcHJvamVjdGluZyBjaGlsZHJlbiBmb3Igc2NhbGUgY29ycmVjdGlvbiBhbmQgcmVsYXRpdmUgcHJvamVjdGlvblxuICAgICAgICAgICAgICogdW50aWwgYWxsIHRoZWlyIHBhcmVudHMgc3RvcCBwZXJmb3JtaW5nIGxheW91dCBhbmltYXRpb25zLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzVHJlZUFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pc0FuaW1hdGlvbkJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmxhZyB0byB0cnVlIGlmIHdlIHRoaW5rIHRoaXMgbGF5b3V0IGhhcyBiZWVuIGNoYW5nZWQuIFdlIGNhbid0IGFsd2F5cyBrbm93IHRoaXMsXG4gICAgICAgICAgICAgKiBjdXJyZW50bHkgd2Ugc2V0IGl0IHRvIHRydWUgZXZlcnkgdGltZSBhIGNvbXBvbmVudCByZW5kZXJzLCBvciBpZiBpdCBoYXMgYSBsYXlvdXREZXBlbmRlbmN5XG4gICAgICAgICAgICAgKiBpZiB0aGF0IGhhcyBjaGFuZ2VkIGJldHdlZW4gcmVuZGVycy4gQWRkaXRpb25hbGx5LCBjb21wb25lbnRzIGNhbiBiZSBncm91cGVkIGJ5IExheW91dEdyb3VwXG4gICAgICAgICAgICAgKiBhbmQgaWYgb25lIG5vZGUgaXMgZGlydGllZCwgdGhleSBhbGwgYXJlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQmxvY2sgbGF5b3V0IHVwZGF0ZXMgZm9yIGluc3RhbnQgbGF5b3V0IHRyYW5zaXRpb25zIHRocm91Z2hvdXQgdGhlIHRyZWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMudXBkYXRlTWFudWFsbHlCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdG8gdHJ1ZSBiZXR3ZWVuIHRoZSBzdGFydCBvZiB0aGUgZmlyc3QgYHdpbGxVcGRhdGVgIGNhbGwgYW5kIHRoZSBlbmQgb2YgdGhlIGBkaWRVcGRhdGVgXG4gICAgICAgICAgICAgKiBjYWxsLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhbiBTVkcgZWxlbWVudCB3ZSBjdXJyZW50bHkgZGlzYWJsZSBwcm9qZWN0aW9uIHRyYW5zZm9ybXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1NWRyA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGFnIHRvIHRydWUgKGR1cmluZyBwcm9tb3Rpb24pIGlmIGEgbm9kZSBkb2luZyBhbiBpbnN0YW50IGxheW91dCB0cmFuc2l0aW9uIG5lZWRzIHRvIHJlc2V0XG4gICAgICAgICAgICAgKiBpdHMgcHJvamVjdGlvbiBzdHlsZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMubmVlZHNSZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGFncyB3aGV0aGVyIHRoaXMgbm9kZSBzaG91bGQgaGF2ZSBpdHMgdHJhbnNmb3JtIHJlc2V0IHByaW9yIHRvIG1lYXN1cmluZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5zaG91bGRSZXNldFRyYW5zZm9ybSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjYWxjdWxhdGVkIGNvbnRleHR1YWwvYWNjdW11bGF0ZWQvdHJlZSBzY2FsZS5cbiAgICAgICAgICAgICAqIFRoaXMgd2lsbCBiZSB1c2VkIHRvIHNjYWxlIGNhbGN1bGNhdGVkIHByb2plY3Rpb24gdHJhbnNmb3JtcywgYXMgdGhlc2UgYXJlXG4gICAgICAgICAgICAgKiBjYWxjdWxhdGVkIGluIHNjcmVlbi1zcGFjZSBidXQgbmVlZCB0byBiZSBzY2FsZWQgZm9yIGVsZW1lbnRzIHRvIGFjdHVhbGx5XG4gICAgICAgICAgICAgKiBtYWtlIGl0IHRvIHRoZWlyIGNhbGN1bGF0ZWQgZGVzdGluYXRpb25zLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRPRE86IExhenktaW5pdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnRyZWVTY2FsZSA9IHsgeDogMSwgeTogMSB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAvLyBOb3RlOiBDdXJyZW50bHkgb25seSBydW5uaW5nIG9uIHJvb3Qgbm9kZVxuICAgICAgICAgICAgdGhpcy5wb3RlbnRpYWxOb2RlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tVcGRhdGVGYWlsZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNVcGRhdGluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckFsbFNuYXBzaG90cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2plY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKHJlc29sdmVUYXJnZXREZWx0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGNhbGNQcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmhhc1Byb2plY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Qcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNoYXJlZCBsYXlvdXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gVE9ETyBPbmx5IHJ1bm5pbmcgb24gcm9vdCBub2RlXG4gICAgICAgICAgICB0aGlzLnNoYXJlZE5vZGVzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5sYXRlc3RWYWx1ZXMgPSBsYXRlc3RWYWx1ZXM7XG4gICAgICAgICAgICB0aGlzLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCB8fCBwYXJlbnQgOiB0aGlzO1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gcGFyZW50ID8gWy4uLnBhcmVudC5wYXRoLCBwYXJlbnRdIDogW107XG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgIHRoaXMuZGVwdGggPSBwYXJlbnQgPyBwYXJlbnQuZGVwdGggKyAxIDogMDtcbiAgICAgICAgICAgIGlkICYmIHRoaXMucm9vdC5yZWdpc3RlclBvdGVudGlhbE5vZGUoaWQsIHRoaXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhbaV0uc2hvdWxkUmVzZXRUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucm9vdCA9PT0gdGhpcylcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzID0gbmV3IEZsYXRUcmVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnRIYW5kbGVycy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnMuc2V0KG5hbWUsIG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRIYW5kbGVycy5nZXQobmFtZSkuYWRkKGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIG5vdGlmeUxpc3RlbmVycyhuYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25NYW5hZ2VyID0gdGhpcy5ldmVudEhhbmRsZXJzLmdldChuYW1lKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbk1hbmFnZXIgPT09IG51bGwgfHwgc3Vic2NyaXB0aW9uTWFuYWdlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3Vic2NyaXB0aW9uTWFuYWdlci5ub3RpZnkoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaGFzTGlzdGVuZXJzKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50SGFuZGxlcnMuaGFzKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJlZ2lzdGVyUG90ZW50aWFsTm9kZShpZCwgbm9kZSkge1xuICAgICAgICAgICAgdGhpcy5wb3RlbnRpYWxOb2Rlcy5zZXQoaWQsIG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaWZlY3ljbGVzXG4gICAgICAgICAqL1xuICAgICAgICBtb3VudChpbnN0YW5jZSwgaXNMYXlvdXREaXJ0eSA9IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzU1ZHID1cbiAgICAgICAgICAgICAgICBpbnN0YW5jZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQgJiYgaW5zdGFuY2UudGFnTmFtZSAhPT0gXCJzdmdcIjtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0SWQsIGxheW91dCwgdmlzdWFsRWxlbWVudCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQgJiYgIXZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKSkge1xuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQubW91bnQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yb290Lm5vZGVzLmFkZCh0aGlzKTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2hpbGRyZW4uYWRkKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5pZCAmJiB0aGlzLnJvb3QucG90ZW50aWFsTm9kZXMuZGVsZXRlKHRoaXMuaWQpO1xuICAgICAgICAgICAgaWYgKGlzTGF5b3V0RGlydHkgJiYgKGxheW91dCB8fCBsYXlvdXRJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF0dGFjaFJlc2l6ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IHVuYmxvY2tUaW1lb3V0O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc2l6ZVVuYmxvY2tVcGRhdGUgPSAoKSA9PiAodGhpcy5yb290LnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZSA9IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhdHRhY2hSZXNpemVMaXN0ZW5lcihpbnN0YW5jZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QudXBkYXRlQmxvY2tlZEJ5UmVzaXplID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHVuYmxvY2tUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgdW5ibG9ja1RpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChyZXNpemVVbmJsb2NrVXBkYXRlLCAyNTApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsUHJvamVjdGlvblN0YXRlLmhhc0FuaW1hdGVkU2luY2VSZXNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFByb2plY3Rpb25TdGF0ZS5oYXNBbmltYXRlZFNpbmNlUmVzaXplID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goZmluaXNoQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxheW91dElkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb290LnJlZ2lzdGVyU2hhcmVkTm9kZShsYXlvdXRJZCwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBPbmx5IHJlZ2lzdGVyIHRoZSBoYW5kbGVyIGlmIGl0IHJlcXVpcmVzIGxheW91dCBhbmltYXRpb25cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0ZSAhPT0gZmFsc2UgJiZcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgKGxheW91dElkIHx8IGxheW91dCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJkaWRVcGRhdGVcIiwgKHsgZGVsdGEsIGhhc0xheW91dENoYW5nZWQsIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCwgbGF5b3V0OiBuZXdMYXlvdXQsIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUcmVlQW5pbWF0aW9uQmxvY2tlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogQ2hlY2sgaGVyZSBpZiBhbiBhbmltYXRpb24gZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheW91dFRyYW5zaXRpb24gPSAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdmlzdWFsRWxlbWVudC5nZXREZWZhdWx0VHJhbnNpdGlvbigpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBkZWZhdWx0TGF5b3V0VHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBvbkxheW91dEFuaW1hdGlvblN0YXJ0LCBvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlLCB9ID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogVGhlIHRhcmdldCBsYXlvdXQgb2YgdGhlIGVsZW1lbnQgbWlnaHQgc3RheSB0aGUgc2FtZSxcbiAgICAgICAgICAgICAgICAgICAgICogYnV0IGl0cyBwb3NpdGlvbiByZWxhdGl2ZSB0byBpdHMgcGFyZW50IGhhcyBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Q2hhbmdlZCA9ICF0aGlzLnRhcmdldExheW91dCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIWJveEVxdWFscyh0aGlzLnRhcmdldExheW91dCwgbmV3TGF5b3V0KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkO1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgdGhlIGxheW91dCBoYXNuJ3Qgc2VlbWVkIHRvIGhhdmUgY2hhbmdlZCwgaXQgbWlnaHQgYmUgdGhhdCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICogZWxlbWVudCBpcyB2aXN1YWxseSBpbiB0aGUgc2FtZSBwbGFjZSBpbiB0aGUgZG9jdW1lbnQgYnV0IGl0cyBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiByZWxhdGl2ZSB0byBpdHMgcGFyZW50IGhhcyBpbmRlZWQgY2hhbmdlZC4gU28gaGVyZSB3ZSBjaGVjayBmb3IgdGhhdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQgPSAhaGFzTGF5b3V0Q2hhbmdlZCAmJiBoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoKF9jID0gdGhpcy5yZXN1bWVGcm9tKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuaW5zdGFuY2UpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaGFzTGF5b3V0Q2hhbmdlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0YXJnZXRDaGFuZ2VkIHx8ICF0aGlzLmN1cnJlbnRBbmltYXRpb24pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzdW1lRnJvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tID0gdGhpcy5yZXN1bWVGcm9tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tLnJlc3VtaW5nRnJvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uT3JpZ2luKGRlbHRhLCBoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZ2V0VmFsdWVUcmFuc2l0aW9uKGxheW91dFRyYW5zaXRpb24sIFwibGF5b3V0XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUGxheTogb25MYXlvdXRBbmltYXRpb25TdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aXN1YWxFbGVtZW50LnNob3VsZFJlZHVjZU1vdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbk9wdGlvbnMuZGVsYXkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbk9wdGlvbnMudHlwZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbihhbmltYXRpb25PcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgdGhlIGxheW91dCBoYXNuJ3QgY2hhbmdlZCBhbmQgd2UgaGF2ZSBhbiBhbmltYXRpb24gdGhhdCBoYXNuJ3Qgc3RhcnRlZCB5ZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBmaW5pc2ggaXQgaW1tZWRpYXRlbHkuIE90aGVyd2lzZSBpdCB3aWxsIGJlIGFuaW1hdGluZyBmcm9tIGEgbG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoYXQgd2FzIHByb2JhYmx5IG5ldmVyIGNvbW1pdGVkIHRvIHNjcmVlbiBhbmQgbG9vayBsaWtlIGEganVtcHkgYm94LlxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0xheW91dENoYW5nZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblByb2dyZXNzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5pc2hBbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMZWFkKCkgJiYgKChfZSA9IChfZCA9IHRoaXMub3B0aW9ucykub25FeGl0Q29tcGxldGUpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5jYWxsKF9kKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRMYXlvdXQgPSBuZXdMYXlvdXQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdW5tb3VudCgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubGF5b3V0SWQgJiYgdGhpcy53aWxsVXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnJvb3Qubm9kZXMucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgKF9iID0gdGhpcy5wYXJlbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jaGlsZHJlbi5kZWxldGUodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuY2VsU3luYy5wcmVSZW5kZXIodGhpcy51cGRhdGVQcm9qZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvbmx5IG9uIHRoZSByb290XG4gICAgICAgIGJsb2NrVXBkYXRlKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNYW51YWxseUJsb2NrZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHVuYmxvY2tVcGRhdGUoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlzVXBkYXRlQmxvY2tlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCB8fCB0aGlzLnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpc1RyZWVBbmltYXRpb25CbG9ja2VkKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmlzQW5pbWF0aW9uQmxvY2tlZCB8fFxuICAgICAgICAgICAgICAgICgoX2EgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzVHJlZUFuaW1hdGlvbkJsb2NrZWQoKSkgfHxcbiAgICAgICAgICAgICAgICBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm90ZTogY3VycmVudGx5IG9ubHkgcnVubmluZyBvbiByb290IG5vZGVcbiAgICAgICAgc3RhcnRVcGRhdGUoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1VwZGF0ZUJsb2NrZWQoKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzVXBkYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5ub2RlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvckVhY2gocmVzZXRSb3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgd2lsbFVwZGF0ZShzaG91bGROb3RpZnlMaXN0ZW5lcnMgPSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb3QuaXNVcGRhdGVCbG9ja2VkKCkpIHtcbiAgICAgICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpLm9uRXhpdENvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIXRoaXMucm9vdC5pc1VwZGF0aW5nICYmIHRoaXMucm9vdC5zdGFydFVwZGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNMYXlvdXREaXJ0eSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5wYXRoW2ldO1xuICAgICAgICAgICAgICAgIG5vZGUuc2hvdWxkUmVzZXRUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRPRE86IENoZWNrIHdlIGhhdmVuJ3QgdXBkYXRlZCB0aGUgc2Nyb2xsXG4gICAgICAgICAgICAgICAgICogc2luY2UgdGhlIGxhc3QgZGlkVXBkYXRlXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbm9kZS51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0SWQsIGxheW91dCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgaWYgKGxheW91dElkID09PSB1bmRlZmluZWQgJiYgIWxheW91dClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1UZW1wbGF0ZSA9IChfYyA9IHRoaXMub3B0aW9ucy52aXN1YWxFbGVtZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZ2V0UHJvcHMoKS50cmFuc2Zvcm1UZW1wbGF0ZTtcbiAgICAgICAgICAgIHRoaXMucHJldlRyYW5zZm9ybVRlbXBsYXRlVmFsdWUgPSB0cmFuc2Zvcm1UZW1wbGF0ZSA9PT0gbnVsbCB8fCB0cmFuc2Zvcm1UZW1wbGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHJhbnNmb3JtVGVtcGxhdGUodGhpcy5sYXRlc3RWYWx1ZXMsIFwiXCIpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTbmFwc2hvdCgpO1xuICAgICAgICAgICAgc2hvdWxkTm90aWZ5TGlzdGVuZXJzICYmIHRoaXMubm90aWZ5TGlzdGVuZXJzKFwid2lsbFVwZGF0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3RlOiBDdXJyZW50bHkgb25seSBydW5uaW5nIG9uIHJvb3Qgbm9kZVxuICAgICAgICBkaWRVcGRhdGUoKSB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVXYXNCbG9ja2VkID0gdGhpcy5pc1VwZGF0ZUJsb2NrZWQoKTtcbiAgICAgICAgICAgIC8vIFdoZW4gZG9pbmcgYW4gaW5zdGFudCB0cmFuc2l0aW9uLCB3ZSBza2lwIHRoZSBsYXlvdXQgdXBkYXRlLFxuICAgICAgICAgICAgLy8gYnV0IHNob3VsZCBzdGlsbCBjbGVhbiB1cCB0aGUgbWVhc3VyZW1lbnRzIHNvIHRoYXQgdGhlIG5leHRcbiAgICAgICAgICAgIC8vIHNuYXBzaG90IGNvdWxkIGJlIHRha2VuIGNvcnJlY3RseS5cbiAgICAgICAgICAgIGlmICh1cGRhdGVXYXNCbG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bmJsb2NrVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckFsbFNuYXBzaG90cygpO1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChjbGVhck1lYXN1cmVtZW50cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVXBkYXRpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNlYXJjaCBmb3IgYW5kIG1vdW50IG5ld2x5LWFkZGVkIHByb2plY3Rpb24gZWxlbWVudHMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVE9ETzogRXZlcnkgdGltZSBhIG5ldyBjb21wb25lbnQgaXMgcmVuZGVyZWQgd2UgY291bGQgc2VhcmNoIHVwIHRoZSB0cmVlIGZvclxuICAgICAgICAgICAgICogdGhlIGNsb3Nlc3QgbW91bnRlZCBub2RlIGFuZCBxdWVyeSBmcm9tIHRoZXJlIHJhdGhlciB0aGFuIGRvY3VtZW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3RlbnRpYWxOb2Rlcy5zaXplKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3RlbnRpYWxOb2Rlcy5mb3JFYWNoKG1vdW50Tm9kZUVhcmx5KTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvdGVudGlhbE5vZGVzLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdyaXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChyZXNldFRyYW5zZm9ybVN0eWxlKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVhZCA9PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gVXBkYXRlIGxheW91dCBtZWFzdXJlbWVudHMgb2YgdXBkYXRlZCBjaGlsZHJlblxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKHVwZGF0ZUxheW91dCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdyaXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgdGhhdCB0aGUgbGF5b3V0IGlzIHVwZGF0ZWRcbiAgICAgICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChub3RpZnlMYXlvdXRVcGRhdGUpO1xuICAgICAgICAgICAgdGhpcy5jbGVhckFsbFNuYXBzaG90cygpO1xuICAgICAgICAgICAgLy8gRmx1c2ggYW55IHNjaGVkdWxlZCB1cGRhdGVzXG4gICAgICAgICAgICBmbHVzaFN5bmMudXBkYXRlKCk7XG4gICAgICAgICAgICBmbHVzaFN5bmMucHJlUmVuZGVyKCk7XG4gICAgICAgICAgICBmbHVzaFN5bmMucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJBbGxTbmFwc2hvdHMoKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goY2xlYXJTbmFwc2hvdCk7XG4gICAgICAgICAgICB0aGlzLnNoYXJlZE5vZGVzLmZvckVhY2gocmVtb3ZlTGVhZFNuYXBzaG90cyk7XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVVcGRhdGVQcm9qZWN0aW9uKCkge1xuICAgICAgICAgICAgc3luYy5wcmVSZW5kZXIodGhpcy51cGRhdGVQcm9qZWN0aW9uLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVDaGVja0FmdGVyVW5tb3VudCgpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIHVubW91bnRpbmcgbm9kZSBpcyBpbiBhIGxheW91dEdyb3VwIGFuZCBkaWQgdHJpZ2dlciBhIHdpbGxVcGRhdGUsXG4gICAgICAgICAgICAgKiB3ZSBtYW51YWxseSBjYWxsIGRpZFVwZGF0ZSB0byBnaXZlIGEgY2hhbmNlIHRvIHRoZSBzaWJsaW5ncyB0byBhbmltYXRlLlxuICAgICAgICAgICAgICogT3RoZXJ3aXNlLCBjbGVhbnVwIGFsbCBzbmFwc2hvdHMgdG8gcHJldmVudHMgZnV0dXJlIG5vZGVzIGZyb20gcmV1c2luZyB0aGVtLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzeW5jLnBvc3RSZW5kZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTGF5b3V0RGlydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LmRpZFVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LmNoZWNrVXBkYXRlRmFpbGVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZSBtZWFzdXJlbWVudHNcbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZVNuYXBzaG90KCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc25hcHNob3QgfHwgIXRoaXMuaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgbWVhc3VyZWQgPSB0aGlzLm1lYXN1cmUoKTtcbiAgICAgICAgICAgIGNvbnN0IGxheW91dCA9IHRoaXMucmVtb3ZlVHJhbnNmb3JtKHRoaXMucmVtb3ZlRWxlbWVudFNjcm9sbChtZWFzdXJlZCkpO1xuICAgICAgICAgICAgcm91bmRCb3gobGF5b3V0KTtcbiAgICAgICAgICAgIHRoaXMuc25hcHNob3QgPSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZWQsXG4gICAgICAgICAgICAgICAgbGF5b3V0LFxuICAgICAgICAgICAgICAgIGxhdGVzdFZhbHVlczoge30sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUxheW91dCgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBUT0RPOiBJbmNvcnBvcmF0ZSBpbnRvIGEgZm9yd2FyZGVkIHNjcm9sbCBvZmZzZXRcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgICAgICBpZiAoISh0aGlzLm9wdGlvbnMuYWx3YXlzTWVhc3VyZUxheW91dCAmJiB0aGlzLmlzTGVhZCgpKSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLmlzTGF5b3V0RGlydHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdoZW4gYSBub2RlIGlzIG1vdW50ZWQsIGl0IHNpbXBseSByZXN1bWVzIGZyb20gdGhlIHByZXZMZWFkJ3NcbiAgICAgICAgICAgICAqIHNuYXBzaG90IGluc3RlYWQgb2YgdGFraW5nIGEgbmV3IG9uZSwgYnV0IHRoZSBhbmNlc3RvcnMgc2Nyb2xsXG4gICAgICAgICAgICAgKiBtaWdodCBoYXZlIHVwZGF0ZWQgd2hpbGUgdGhlIHByZXZMZWFkIGlzIHVubW91bnRlZC4gV2UgbmVlZCB0b1xuICAgICAgICAgICAgICogdXBkYXRlIHRoZSBzY3JvbGwgYWdhaW4gdG8gbWFrZSBzdXJlIHRoZSBsYXlvdXQgd2UgbWVhc3VyZSBpc1xuICAgICAgICAgICAgICogdXAgdG8gZGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzdW1lRnJvbSAmJiAhdGhpcy5yZXN1bWVGcm9tLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtZWFzdXJlZCA9IHRoaXMubWVhc3VyZSgpO1xuICAgICAgICAgICAgcm91bmRCb3gobWVhc3VyZWQpO1xuICAgICAgICAgICAgY29uc3QgcHJldkxheW91dCA9IHRoaXMubGF5b3V0O1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQgPSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZWQsXG4gICAgICAgICAgICAgICAgYWN0dWFsOiB0aGlzLnJlbW92ZUVsZW1lbnRTY3JvbGwobWVhc3VyZWQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0Q29ycmVjdGVkID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbkRlbHRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJtZWFzdXJlXCIsIHRoaXMubGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLm9wdGlvbnMudmlzdWFsRWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5vdGlmeUxheW91dE1lYXN1cmUodGhpcy5sYXlvdXQuYWN0dWFsLCBwcmV2TGF5b3V0ID09PSBudWxsIHx8IHByZXZMYXlvdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXZMYXlvdXQuYWN0dWFsKTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVTY3JvbGwoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxheW91dFNjcm9sbCAmJiB0aGlzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1Njcm9sbFJvb3QgPSBjaGVja0lzU2Nyb2xsUm9vdCh0aGlzLmluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbCA9IG1lYXN1cmVTY3JvbGwodGhpcy5pbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzZXRUcmFuc2Zvcm0oKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoIXJlc2V0VHJhbnNmb3JtKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGlzUmVzZXRSZXF1ZXN0ZWQgPSB0aGlzLmlzTGF5b3V0RGlydHkgfHwgdGhpcy5zaG91bGRSZXNldFRyYW5zZm9ybTtcbiAgICAgICAgICAgIGNvbnN0IGhhc1Byb2plY3Rpb24gPSB0aGlzLnByb2plY3Rpb25EZWx0YSAmJiAhaXNEZWx0YVplcm8odGhpcy5wcm9qZWN0aW9uRGVsdGEpO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtVGVtcGxhdGUgPSAoX2EgPSB0aGlzLm9wdGlvbnMudmlzdWFsRWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFByb3BzKCkudHJhbnNmb3JtVGVtcGxhdGU7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1UZW1wbGF0ZVZhbHVlID0gdHJhbnNmb3JtVGVtcGxhdGUgPT09IG51bGwgfHwgdHJhbnNmb3JtVGVtcGxhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRyYW5zZm9ybVRlbXBsYXRlKHRoaXMubGF0ZXN0VmFsdWVzLCBcIlwiKTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybVRlbXBsYXRlSGFzQ2hhbmdlZCA9IHRyYW5zZm9ybVRlbXBsYXRlVmFsdWUgIT09IHRoaXMucHJldlRyYW5zZm9ybVRlbXBsYXRlVmFsdWU7XG4gICAgICAgICAgICBpZiAoaXNSZXNldFJlcXVlc3RlZCAmJlxuICAgICAgICAgICAgICAgIChoYXNQcm9qZWN0aW9uIHx8XG4gICAgICAgICAgICAgICAgICAgIGhhc1RyYW5zZm9ybSh0aGlzLmxhdGVzdFZhbHVlcykgfHxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtVGVtcGxhdGVIYXNDaGFuZ2VkKSkge1xuICAgICAgICAgICAgICAgIHJlc2V0VHJhbnNmb3JtKHRoaXMuaW5zdGFuY2UsIHRyYW5zZm9ybVRlbXBsYXRlVmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkUmVzZXRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWVhc3VyZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdmlzdWFsRWxlbWVudCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IHZpc3VhbEVsZW1lbnQubWVhc3VyZVZpZXdwb3J0Qm94KCk7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdmlld3BvcnQgc2Nyb2xsIHRvIGdpdmUgcGFnZS1yZWxhdGl2ZSBjb29yZGluYXRlc1xuICAgICAgICAgICAgY29uc3QgeyBzY3JvbGwgfSA9IHRoaXMucm9vdDtcbiAgICAgICAgICAgIGlmIChzY3JvbGwpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVBeGlzKGJveC54LCBzY3JvbGwueCk7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlQXhpcyhib3gueSwgc2Nyb2xsLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJveDtcbiAgICAgICAgfVxuICAgICAgICByZW1vdmVFbGVtZW50U2Nyb2xsKGJveCkge1xuICAgICAgICAgICAgY29uc3QgYm94V2l0aG91dFNjcm9sbCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgY29weUJveEludG8oYm94V2l0aG91dFNjcm9sbCwgYm94KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGVyZm9ybWFuY2UgVE9ETzogS2VlcCBhIGN1bXVsYXRpdmUgc2Nyb2xsIG9mZnNldCBkb3duIHRoZSB0cmVlXG4gICAgICAgICAgICAgKiByYXRoZXIgdGhhbiBsb29wIGJhY2sgdXAgdGhlIHBhdGguXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNjcm9sbCwgb3B0aW9ucywgaXNTY3JvbGxSb290IH0gPSBub2RlO1xuICAgICAgICAgICAgICAgIGlmIChub2RlICE9PSB0aGlzLnJvb3QgJiYgc2Nyb2xsICYmIG9wdGlvbnMubGF5b3V0U2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGEgbmV3IHNjcm9sbCByb290LCB3ZSB3YW50IHRvIHJlbW92ZSBhbGwgcHJldmlvdXMgc2Nyb2xsc1xuICAgICAgICAgICAgICAgICAgICAgKiBmcm9tIHRoZSB2aWV3cG9ydCBib3guXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTY3JvbGxSb290KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5Qm94SW50byhib3hXaXRob3V0U2Nyb2xsLCBib3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzY3JvbGw6IHJvb3RTY3JvbGwgfSA9IHRoaXMucm9vdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogVW5kbyB0aGUgYXBwbGljYXRpb24gb2YgcGFnZSBzY3JvbGwgdGhhdCB3YXMgb3JpZ2luYWxseSBhZGRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICogdG8gdGhlIG1lYXN1cmVkIGJvdW5kaW5nIGJveC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvb3RTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVBeGlzKGJveFdpdGhvdXRTY3JvbGwueCwgLXJvb3RTY3JvbGwueCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlQXhpcyhib3hXaXRob3V0U2Nyb2xsLnksIC1yb290U2Nyb2xsLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94V2l0aG91dFNjcm9sbC54LCBzY3JvbGwueCk7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94V2l0aG91dFNjcm9sbC55LCBzY3JvbGwueSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJveFdpdGhvdXRTY3JvbGw7XG4gICAgICAgIH1cbiAgICAgICAgYXBwbHlUcmFuc2Zvcm0oYm94LCB0cmFuc2Zvcm1Pbmx5ID0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHdpdGhUcmFuc2Zvcm1zID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICBjb3B5Qm94SW50byh3aXRoVHJhbnNmb3JtcywgYm94KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZm9ybU9ubHkgJiZcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5vcHRpb25zLmxheW91dFNjcm9sbCAmJlxuICAgICAgICAgICAgICAgICAgICBub2RlLnNjcm9sbCAmJlxuICAgICAgICAgICAgICAgICAgICBub2RlICE9PSBub2RlLnJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtQm94KHdpdGhUcmFuc2Zvcm1zLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiAtbm9kZS5zY3JvbGwueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IC1ub2RlLnNjcm9sbC55LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNUcmFuc2Zvcm0obm9kZS5sYXRlc3RWYWx1ZXMpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1Cb3god2l0aFRyYW5zZm9ybXMsIG5vZGUubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNUcmFuc2Zvcm0odGhpcy5sYXRlc3RWYWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtQm94KHdpdGhUcmFuc2Zvcm1zLCB0aGlzLmxhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd2l0aFRyYW5zZm9ybXM7XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlVHJhbnNmb3JtKGJveCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgYm94V2l0aG91dFRyYW5zZm9ybSA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgY29weUJveEludG8oYm94V2l0aG91dFRyYW5zZm9ybSwgYm94KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmICghaGFzVHJhbnNmb3JtKG5vZGUubGF0ZXN0VmFsdWVzKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaGFzU2NhbGUobm9kZS5sYXRlc3RWYWx1ZXMpICYmIG5vZGUudXBkYXRlU25hcHNob3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VCb3ggPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlQm94ID0gbm9kZS5tZWFzdXJlKCk7XG4gICAgICAgICAgICAgICAgY29weUJveEludG8oc291cmNlQm94LCBub2RlQm94KTtcbiAgICAgICAgICAgICAgICByZW1vdmVCb3hUcmFuc2Zvcm1zKGJveFdpdGhvdXRUcmFuc2Zvcm0sIG5vZGUubGF0ZXN0VmFsdWVzLCAoX2EgPSBub2RlLnNuYXBzaG90KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGF5b3V0LCBzb3VyY2VCb3gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc1RyYW5zZm9ybSh0aGlzLmxhdGVzdFZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVCb3hUcmFuc2Zvcm1zKGJveFdpdGhvdXRUcmFuc2Zvcm0sIHRoaXMubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBib3hXaXRob3V0VHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0VGFyZ2V0RGVsdGEoZGVsdGEpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RGVsdGEgPSBkZWx0YTtcbiAgICAgICAgICAgIHRoaXMucm9vdC5zY2hlZHVsZVVwZGF0ZVByb2plY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjcm9zc2ZhZGU6IG9wdGlvbnMuY3Jvc3NmYWRlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNyb3NzZmFkZSA6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyTWVhc3VyZW1lbnRzKCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmxheW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuc25hcHNob3QgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnByZXZUcmFuc2Zvcm1UZW1wbGF0ZVZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy50YXJnZXREZWx0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5pc0xheW91dERpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZyYW1lIGNhbGN1bGF0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgcmVzb2x2ZVRhcmdldERlbHRhKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgeyBsYXlvdXQsIGxheW91dElkIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgbm8gbGF5b3V0LCB3ZSBjYW4ndCBwZXJmb3JtIHByb2plY3Rpb24sIHNvIGVhcmx5IHJldHVyblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIXRoaXMubGF5b3V0IHx8ICEobGF5b3V0IHx8IGxheW91dElkKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGRvbid0IGhhdmUgYSB0YXJnZXREZWx0YSBidXQgZG8gaGF2ZSBhIGxheW91dCwgd2UgY2FuIGF0dGVtcHQgdG8gcmVzb2x2ZVxuICAgICAgICAgICAgICogYSByZWxhdGl2ZVBhcmVudC4gVGhpcyB3aWxsIGFsbG93IGEgY29tcG9uZW50IHRvIHBlcmZvcm0gc2NhbGUgY29ycmVjdGlvblxuICAgICAgICAgICAgICogZXZlbiBpZiBubyBhbmltYXRpb24gaGFzIHN0YXJ0ZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIFRPRE8gSWYgdGhpcyBpcyB1bnN1Y2Nlc3NmdWwgdGhpcyBjdXJyZW50bHkgaGFwcGVucyBldmVyeSBmcmFtZVxuICAgICAgICAgICAgaWYgKCF0aGlzLnRhcmdldERlbHRhICYmICF0aGlzLnJlbGF0aXZlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBpcyBhIHNlbWktcmVwZXRpdGlvbiBvZiBmdXJ0aGVyIGRvd24gdGhpcyBmdW5jdGlvbiwgbWFrZSBEUllcbiAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50ID0gdGhpcy5nZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlUGFyZW50ICYmIHRoaXMucmVsYXRpdmVQYXJlbnQubGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXQgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbih0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luLCB0aGlzLmxheW91dC5hY3R1YWwsIHRoaXMucmVsYXRpdmVQYXJlbnQubGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMucmVsYXRpdmVUYXJnZXQsIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UgaGF2ZSBubyByZWxhdGl2ZSB0YXJnZXQgb3Igbm8gdGFyZ2V0IGRlbHRhIG91ciB0YXJnZXQgaXNuJ3QgdmFsaWRcbiAgICAgICAgICAgICAqIGZvciB0aGlzIGZyYW1lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVsYXRpdmVUYXJnZXQgJiYgIXRoaXMudGFyZ2V0RGVsdGEpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMYXp5LWluaXQgdGFyZ2V0IGRhdGEgc3RydWN0dXJlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0V2l0aFRyYW5zZm9ybXMgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UndmUgZ290IGEgcmVsYXRpdmUgYm94IGZvciB0aGlzIGNvbXBvbmVudCwgcmVzb2x2ZSBpdCBpbnRvIGEgdGFyZ2V0IHJlbGF0aXZlIHRvIHRoZSBwYXJlbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlVGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiAmJlxuICAgICAgICAgICAgICAgICgoX2EgPSB0aGlzLnJlbGF0aXZlUGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZUJveCh0aGlzLnRhcmdldCwgdGhpcy5yZWxhdGl2ZVRhcmdldCwgdGhpcy5yZWxhdGl2ZVBhcmVudC50YXJnZXQpO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHdlJ3ZlIG9ubHkgZ290IGEgdGFyZ2V0RGVsdGEsIHJlc29sdmUgaXQgaW50byBhIHRhcmdldFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy50YXJnZXREZWx0YSkge1xuICAgICAgICAgICAgICAgIGlmIChCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBUaGlzIGlzIGNyZWF0aW5nIGEgbmV3IG9iamVjdCBldmVyeSBmcmFtZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMuYXBwbHlUcmFuc2Zvcm0odGhpcy5sYXlvdXQuYWN0dWFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMudGFyZ2V0LCB0aGlzLmxheW91dC5hY3R1YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcHBseUJveERlbHRhKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldERlbHRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIG5vIHRhcmdldCwgdXNlIG93biBsYXlvdXQgYXMgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY29weUJveEludG8odGhpcy50YXJnZXQsIHRoaXMubGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3ZlIGJlZW4gdG9sZCB0byBhdHRlbXB0IHRvIHJlc29sdmUgYSByZWxhdGl2ZSB0YXJnZXQsIGRvIHNvLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5hdHRlbXB0VG9SZXNvbHZlUmVsYXRpdmVUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGVtcHRUb1Jlc29sdmVSZWxhdGl2ZVRhcmdldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVQYXJlbnQgPSB0aGlzLmdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmVQYXJlbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgQm9vbGVhbih0aGlzLnJlbGF0aXZlUGFyZW50LnJlc3VtaW5nRnJvbSkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSAmJlxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5yZWxhdGl2ZVBhcmVudC5vcHRpb25zLmxheW91dFNjcm9sbCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50LnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4gPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsY1JlbGF0aXZlUG9zaXRpb24odGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiwgdGhpcy50YXJnZXQsIHRoaXMucmVsYXRpdmVQYXJlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgY29weUJveEludG8odGhpcy5yZWxhdGl2ZVRhcmdldCwgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50KCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCB8fCBoYXNUcmFuc2Zvcm0odGhpcy5wYXJlbnQubGF0ZXN0VmFsdWVzKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCh0aGlzLnBhcmVudC5yZWxhdGl2ZVRhcmdldCB8fCB0aGlzLnBhcmVudC50YXJnZXREZWx0YSkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5sYXlvdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0Q2xvc2VzdFByb2plY3RpbmdQYXJlbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYWxjUHJvamVjdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0LCBsYXlvdXRJZCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIHNlY3Rpb24gb2YgdGhlIHRyZWUgaXNuJ3QgYW5pbWF0aW5nIHdlIGNhblxuICAgICAgICAgICAgICogZGVsZXRlIG91ciB0YXJnZXQgc291cmNlcyBmb3IgdGhlIGZvbGxvd2luZyBmcmFtZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1RyZWVBbmltYXRpbmcgPSBCb29sZWFuKCgoX2EgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzVHJlZUFuaW1hdGluZykgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24gfHxcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdBbmltYXRpb24pO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVHJlZUFuaW1hdGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0RGVsdGEgPSB0aGlzLnJlbGF0aXZlVGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmxheW91dCB8fCAhKGxheW91dCB8fCBsYXlvdXRJZCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgbGVhZCA9IHRoaXMuZ2V0TGVhZCgpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXNldCB0aGUgY29ycmVjdGVkIGJveCB3aXRoIHRoZSBsYXRlc3QgdmFsdWVzIGZyb20gYm94LCBhcyB3ZSdyZSB0aGVuIGdvaW5nXG4gICAgICAgICAgICAgKiB0byBwZXJmb3JtIG11dGF0aXZlIG9wZXJhdGlvbnMgb24gaXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMubGF5b3V0Q29ycmVjdGVkLCB0aGlzLmxheW91dC5hY3R1YWwpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBcHBseSBhbGwgdGhlIHBhcmVudCBkZWx0YXMgdG8gdGhpcyBib3ggdG8gcHJvZHVjZSB0aGUgY29ycmVjdGVkIGJveC4gVGhpc1xuICAgICAgICAgICAgICogaXMgdGhlIGxheW91dCBib3gsIGFzIGl0IHdpbGwgYXBwZWFyIG9uIHNjcmVlbiBhcyBhIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtcyBvZiBpdHMgcGFyZW50cy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYXBwbHlUcmVlRGVsdGFzKHRoaXMubGF5b3V0Q29ycmVjdGVkLCB0aGlzLnRyZWVTY2FsZSwgdGhpcy5wYXRoLCBCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSB8fCB0aGlzICE9PSBsZWFkKTtcbiAgICAgICAgICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBsZWFkO1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2plY3Rpb25EZWx0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbkRlbHRhID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0gPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJldlRyZWVTY2FsZVggPSB0aGlzLnRyZWVTY2FsZS54O1xuICAgICAgICAgICAgY29uc3QgcHJldlRyZWVTY2FsZVkgPSB0aGlzLnRyZWVTY2FsZS55O1xuICAgICAgICAgICAgY29uc3QgcHJldlByb2plY3Rpb25UcmFuc2Zvcm0gPSB0aGlzLnByb2plY3Rpb25UcmFuc2Zvcm07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSB0aGUgZGVsdGEgYmV0d2VlbiB0aGUgY29ycmVjdGVkIGJveCBhbmQgdGhlIHRhcmdldCBib3ggYmVmb3JlIHVzZXItc2V0IHRyYW5zZm9ybXMgd2VyZSBhcHBsaWVkLlxuICAgICAgICAgICAgICogVGhpcyB3aWxsIGFsbG93IHVzIHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdGVkIGJvcmRlclJhZGl1cyBhbmQgYm94U2hhZG93IHRvIGNvbXBlbnNhdGVcbiAgICAgICAgICAgICAqIGZvciBvdXIgbGF5b3V0IHJlcHJvamVjdGlvbiwgYnV0IHN0aWxsIGFsbG93IHRoZW0gdG8gYmUgc2NhbGVkIGNvcnJlY3RseSBieSB0aGUgdXNlci5cbiAgICAgICAgICAgICAqIEl0IG1pZ2h0IGJlIHRoYXQgdG8gc2ltcGxpZnkgdGhpcyB3ZSBtYXkgd2FudCB0byBhY2NlcHQgdGhhdCB1c2VyLXNldCBzY2FsZSBpcyBhbHNvIGNvcnJlY3RlZFxuICAgICAgICAgICAgICogYW5kIHdlIHdvdWxkbid0IGhhdmUgdG8ga2VlcCBhbmQgY2FsYyBib3RoIGRlbHRhcywgT1Igd2UgY291bGQgc3VwcG9ydCBhIHVzZXIgc2V0dGluZ1xuICAgICAgICAgICAgICogdG8gYWxsb3cgcGVvcGxlIHRvIGNob29zZSB3aGV0aGVyIHRoZXNlIHN0eWxlcyBhcmUgY29ycmVjdGVkIGJhc2VkIG9uIGp1c3QgdGhlXG4gICAgICAgICAgICAgKiBsYXlvdXQgcmVwcm9qZWN0aW9uIG9yIHRoZSBmaW5hbCBib3VuZGluZyBib3guXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh0aGlzLnByb2plY3Rpb25EZWx0YSwgdGhpcy5sYXlvdXRDb3JyZWN0ZWQsIHRhcmdldCwgdGhpcy5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtID0gYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtKHRoaXMucHJvamVjdGlvbkRlbHRhLCB0aGlzLnRyZWVTY2FsZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtICE9PSBwcmV2UHJvamVjdGlvblRyYW5zZm9ybSB8fFxuICAgICAgICAgICAgICAgIHRoaXMudHJlZVNjYWxlLnggIT09IHByZXZUcmVlU2NhbGVYIHx8XG4gICAgICAgICAgICAgICAgdGhpcy50cmVlU2NhbGUueSAhPT0gcHJldlRyZWVTY2FsZVkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc1Byb2plY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKFwicHJvamVjdGlvblVwZGF0ZVwiLCB0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGhpZGUoKSB7XG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gVE9ETzogU2NoZWR1bGUgcmVuZGVyXG4gICAgICAgIH1cbiAgICAgICAgc2hvdygpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIFRPRE86IFNjaGVkdWxlIHJlbmRlclxuICAgICAgICB9XG4gICAgICAgIHNjaGVkdWxlUmVuZGVyKG5vdGlmeUFsbCA9IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5vcHRpb25zKS5zY2hlZHVsZVJlbmRlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgbm90aWZ5QWxsICYmICgoX2MgPSB0aGlzLmdldFN0YWNrKCkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zY2hlZHVsZVJlbmRlcigpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSAmJiAhdGhpcy5yZXN1bWluZ0Zyb20uaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXRBbmltYXRpb25PcmlnaW4oZGVsdGEsIGhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQgPSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSB0aGlzLnNuYXBzaG90O1xuICAgICAgICAgICAgY29uc3Qgc25hcHNob3RMYXRlc3RWYWx1ZXMgPSAoc25hcHNob3QgPT09IG51bGwgfHwgc25hcHNob3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNuYXBzaG90LmxhdGVzdFZhbHVlcykgfHwge307XG4gICAgICAgICAgICBjb25zdCBtaXhlZFZhbHVlcyA9IHsgLi4udGhpcy5sYXRlc3RWYWx1ZXMgfTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldERlbHRhID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXQgPSB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5hdHRlbXB0VG9SZXNvbHZlUmVsYXRpdmVUYXJnZXQgPSAhaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZDtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlTGF5b3V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICBjb25zdCBpc1NoYXJlZExheW91dEFuaW1hdGlvbiA9IHNuYXBzaG90ID09PSBudWxsIHx8IHNuYXBzaG90ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzbmFwc2hvdC5pc1NoYXJlZDtcbiAgICAgICAgICAgIGNvbnN0IGlzT25seU1lbWJlciA9ICgoKF9hID0gdGhpcy5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWVtYmVycy5sZW5ndGgpIHx8IDApIDw9IDE7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRDcm9zc2ZhZGVPcGFjaXR5ID0gQm9vbGVhbihpc1NoYXJlZExheW91dEFuaW1hdGlvbiAmJlxuICAgICAgICAgICAgICAgICFpc09ubHlNZW1iZXIgJiZcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuY3Jvc3NmYWRlID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgIXRoaXMucGF0aC5zb21lKGhhc09wYWNpdHlDcm9zc2ZhZGUpKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgICAgdGhpcy5taXhUYXJnZXREZWx0YSA9IChsYXRlc3QpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBsYXRlc3QgLyAxMDAwO1xuICAgICAgICAgICAgICAgIG1peEF4aXNEZWx0YSh0YXJnZXREZWx0YS54LCBkZWx0YS54LCBwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgbWl4QXhpc0RlbHRhKHRhcmdldERlbHRhLnksIGRlbHRhLnksIHByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRhcmdldERlbHRhKHRhcmdldERlbHRhKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWxhdGl2ZVRhcmdldCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0ICYmXG4gICAgICAgICAgICAgICAgICAgICgoX2EgPSB0aGlzLnJlbGF0aXZlUGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGF5b3V0KSkge1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbihyZWxhdGl2ZUxheW91dCwgdGhpcy5sYXlvdXQuYWN0dWFsLCB0aGlzLnJlbGF0aXZlUGFyZW50LmxheW91dC5hY3R1YWwpO1xuICAgICAgICAgICAgICAgICAgICBtaXhCb3godGhpcy5yZWxhdGl2ZVRhcmdldCwgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiwgcmVsYXRpdmVMYXlvdXQsIHByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzU2hhcmVkTGF5b3V0QW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uVmFsdWVzID0gbWl4ZWRWYWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgIG1peFZhbHVlcyhtaXhlZFZhbHVlcywgc25hcHNob3RMYXRlc3RWYWx1ZXMsIHRoaXMubGF0ZXN0VmFsdWVzLCBwcm9ncmVzcywgc2hvdWxkQ3Jvc3NmYWRlT3BhY2l0eSwgaXNPbmx5TWVtYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yb290LnNjaGVkdWxlVXBkYXRlUHJvamVjdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5taXhUYXJnZXREZWx0YSgwKTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydEFuaW1hdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJhbmltYXRpb25TdGFydFwiKTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuY3VycmVudEFuaW1hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0b3AoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSkge1xuICAgICAgICAgICAgICAgIChfYiA9IHRoaXMucmVzdW1pbmdGcm9tLmN1cnJlbnRBbmltYXRpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsU3luYy51cGRhdGUodGhpcy5wZW5kaW5nQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdBbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFN0YXJ0IHRoZSBhbmltYXRpb24gaW4gdGhlIG5leHQgZnJhbWUgdG8gaGF2ZSBhIGZyYW1lIHdpdGggcHJvZ3Jlc3MgMCxcbiAgICAgICAgICAgICAqIHdoZXJlIHRoZSB0YXJnZXQgaXMgdGhlIHNhbWUgYXMgd2hlbiB0aGUgYW5pbWF0aW9uIHN0YXJ0ZWQsIHNvIHdlIGNhblxuICAgICAgICAgICAgICogY2FsY3VsYXRlIHRoZSByZWxhdGl2ZSBwb3NpdGlvbnMgY29ycmVjdGx5IGZvciBpbnN0YW50IHRyYW5zaXRpb25zLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdBbmltYXRpb24gPSBzeW5jLnVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsUHJvamVjdGlvblN0YXRlLmhhc0FuaW1hdGVkU2luY2VSZXNpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9IGFuaW1hdGUoMCwgYW5pbWF0aW9uVGFyZ2V0LCB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAobGF0ZXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1peFRhcmdldERlbHRhKGxhdGVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSBvcHRpb25zLm9uVXBkYXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCBsYXRlc3QpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSBvcHRpb25zLm9uQ29tcGxldGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbS5jdXJyZW50QW5pbWF0aW9uID0gdGhpcy5jdXJyZW50QW5pbWF0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdBbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb21wbGV0ZUFuaW1hdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tLmN1cnJlbnRBbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWluZ0Zyb20ucHJlc2VydmVPcGFjaXR5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF9hID0gdGhpcy5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXhpdEFuaW1hdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbSA9XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25WYWx1ZXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJhbmltYXRpb25Db21wbGV0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5pc2hBbmltYXRpb24oKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5taXhUYXJnZXREZWx0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywgYW5pbWF0aW9uVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5VHJhbnNmb3Jtc1RvVGFyZ2V0KCkge1xuICAgICAgICAgICAgY29uc3QgbGVhZCA9IHRoaXMuZ2V0TGVhZCgpO1xuICAgICAgICAgICAgbGV0IHsgdGFyZ2V0V2l0aFRyYW5zZm9ybXMsIHRhcmdldCwgbGF5b3V0LCBsYXRlc3RWYWx1ZXMgfSA9IGxlYWQ7XG4gICAgICAgICAgICBpZiAoIXRhcmdldFdpdGhUcmFuc2Zvcm1zIHx8ICF0YXJnZXQgfHwgIWxheW91dClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3JlIG9ubHkgYW5pbWF0aW5nIHBvc2l0aW9uLCBhbmQgdGhpcyBlbGVtZW50IGlzbid0IHRoZSBsZWFkIGVsZW1lbnQsXG4gICAgICAgICAgICAgKiB0aGVuIGluc3RlYWQgb2YgcHJvamVjdGluZyBpbnRvIHRoZSBsZWFkIGJveCB3ZSBpbnN0ZWFkIHdhbnQgdG8gY2FsY3VsYXRlXG4gICAgICAgICAgICAgKiBhIG5ldyB0YXJnZXQgdGhhdCBhbGlnbnMgdGhlIHR3byBib3hlcyBidXQgbWFpbnRhaW5zIHRoZSBsYXlvdXQgc2hhcGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzICE9PSBsZWFkICYmXG4gICAgICAgICAgICAgICAgdGhpcy5sYXlvdXQgJiZcbiAgICAgICAgICAgICAgICBsYXlvdXQgJiZcbiAgICAgICAgICAgICAgICBzaG91bGRBbmltYXRlUG9zaXRpb25Pbmx5KHRoaXMub3B0aW9ucy5hbmltYXRpb25UeXBlLCB0aGlzLmxheW91dC5hY3R1YWwsIGxheW91dC5hY3R1YWwpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQgfHwgY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeExlbmd0aCA9IGNhbGNMZW5ndGgodGhpcy5sYXlvdXQuYWN0dWFsLngpO1xuICAgICAgICAgICAgICAgIHRhcmdldC54Lm1pbiA9IGxlYWQudGFyZ2V0LngubWluO1xuICAgICAgICAgICAgICAgIHRhcmdldC54Lm1heCA9IHRhcmdldC54Lm1pbiArIHhMZW5ndGg7XG4gICAgICAgICAgICAgICAgY29uc3QgeUxlbmd0aCA9IGNhbGNMZW5ndGgodGhpcy5sYXlvdXQuYWN0dWFsLnkpO1xuICAgICAgICAgICAgICAgIHRhcmdldC55Lm1pbiA9IGxlYWQudGFyZ2V0LnkubWluO1xuICAgICAgICAgICAgICAgIHRhcmdldC55Lm1heCA9IHRhcmdldC55Lm1pbiArIHlMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3B5Qm94SW50byh0YXJnZXRXaXRoVHJhbnNmb3JtcywgdGFyZ2V0KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXBwbHkgdGhlIGxhdGVzdCB1c2VyLXNldCB0cmFuc2Zvcm1zIHRvIHRoZSB0YXJnZXRCb3ggdG8gcHJvZHVjZSB0aGUgdGFyZ2V0Qm94RmluYWwuXG4gICAgICAgICAgICAgKiBUaGlzIGlzIHRoZSBmaW5hbCBib3ggdGhhdCB3ZSB3aWxsIHRoZW4gcHJvamVjdCBpbnRvIGJ5IGNhbGN1bGF0aW5nIGEgdHJhbnNmb3JtIGRlbHRhIGFuZFxuICAgICAgICAgICAgICogYXBwbHlpbmcgaXQgdG8gdGhlIGNvcnJlY3RlZCBib3guXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRyYW5zZm9ybUJveCh0YXJnZXRXaXRoVHJhbnNmb3JtcywgbGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXBkYXRlIHRoZSBkZWx0YSBiZXR3ZWVuIHRoZSBjb3JyZWN0ZWQgYm94IGFuZCB0aGUgZmluYWwgdGFyZ2V0IGJveCwgYWZ0ZXJcbiAgICAgICAgICAgICAqIHVzZXItc2V0IHRyYW5zZm9ybXMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoaXMgd2lsbCBiZSB1c2VkIGJ5IHRoZSByZW5kZXJlciB0b1xuICAgICAgICAgICAgICogY3JlYXRlIGEgdHJhbnNmb3JtIHN0eWxlIHRoYXQgd2lsbCByZXByb2plY3QgdGhlIGVsZW1lbnQgZnJvbSBpdHMgYWN0dWFsIGxheW91dFxuICAgICAgICAgICAgICogaW50byB0aGUgZGVzaXJlZCBib3VuZGluZyBib3guXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh0aGlzLnByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0sIHRoaXMubGF5b3V0Q29ycmVjdGVkLCB0YXJnZXRXaXRoVHJhbnNmb3JtcywgbGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICByZWdpc3RlclNoYXJlZE5vZGUobGF5b3V0SWQsIG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNoYXJlZE5vZGVzLmhhcyhsYXlvdXRJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXJlZE5vZGVzLnNldChsYXlvdXRJZCwgbmV3IE5vZGVTdGFjaygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5zaGFyZWROb2Rlcy5nZXQobGF5b3V0SWQpO1xuICAgICAgICAgICAgc3RhY2suYWRkKG5vZGUpO1xuICAgICAgICAgICAgbm9kZS5wcm9tb3RlKHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAoX2EgPSBub2RlLm9wdGlvbnMuaW5pdGlhbFByb21vdGlvbkNvbmZpZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRyYW5zaXRpb24sXG4gICAgICAgICAgICAgICAgcHJlc2VydmVGb2xsb3dPcGFjaXR5OiAoX2MgPSAoX2IgPSBub2RlLm9wdGlvbnMuaW5pdGlhbFByb21vdGlvbkNvbmZpZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNob3VsZFByZXNlcnZlRm9sbG93T3BhY2l0eSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IsIG5vZGUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaXNMZWFkKCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2sgPyBzdGFjay5sZWFkID09PSB0aGlzIDogdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBnZXRMZWFkKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgeyBsYXlvdXRJZCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIGxheW91dElkID8gKChfYSA9IHRoaXMuZ2V0U3RhY2soKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlYWQpIHx8IHRoaXMgOiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGdldFByZXZMZWFkKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgeyBsYXlvdXRJZCB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIGxheW91dElkID8gKF9hID0gdGhpcy5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJldkxlYWQgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0U3RhY2soKSB7XG4gICAgICAgICAgICBjb25zdCB7IGxheW91dElkIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAobGF5b3V0SWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5zaGFyZWROb2Rlcy5nZXQobGF5b3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIHByb21vdGUoeyBuZWVkc1Jlc2V0LCB0cmFuc2l0aW9uLCBwcmVzZXJ2ZUZvbGxvd09wYWNpdHksIH0gPSB7fSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgICAgICBpZiAoc3RhY2spXG4gICAgICAgICAgICAgICAgc3RhY2sucHJvbW90ZSh0aGlzLCBwcmVzZXJ2ZUZvbGxvd09wYWNpdHkpO1xuICAgICAgICAgICAgaWYgKG5lZWRzUmVzZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRzUmVzZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24pXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRPcHRpb25zKHsgdHJhbnNpdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgICByZWxlZ2F0ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5nZXRTdGFjaygpO1xuICAgICAgICAgICAgaWYgKHN0YWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnJlbGVnYXRlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc2V0Um90YXRpb24oKSB7XG4gICAgICAgICAgICBjb25zdCB7IHZpc3VhbEVsZW1lbnQgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgIGlmICghdmlzdWFsRWxlbWVudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGRldGVjdGVkIHJvdGF0aW9uIHZhbHVlcywgd2UgY2FuIGVhcmx5IHJldHVybiB3aXRob3V0IGEgZm9yY2VkIHJlbmRlci5cbiAgICAgICAgICAgIGxldCBoYXNSb3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIEtlZXAgYSByZWNvcmQgb2YgYWxsIHRoZSB2YWx1ZXMgd2UndmUgcmVzZXRcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0VmFsdWVzID0ge307XG4gICAgICAgICAgICAvLyBDaGVjayB0aGUgcm90YXRlIHZhbHVlIG9mIGFsbCBheGVzIGFuZCByZXNldCB0byAwXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYW5zZm9ybUF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlzID0gdHJhbnNmb3JtQXhlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBcInJvdGF0ZVwiICsgYXhpcztcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIHJvdGF0aW9uIGRvZXNuJ3QgZXhpc3QgYXMgYSBtb3Rpb24gdmFsdWUsIHRoZW4gd2UgZG9uJ3RcbiAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHJlc2V0IGl0XG4gICAgICAgICAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50LmdldFN0YXRpY1ZhbHVlKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhc1JvdGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSByb3RhdGlvbiBhbmQgdGhlbiB0ZW1wb3JhcmlseSBzZXQgaXQgdG8gMFxuICAgICAgICAgICAgICAgIHJlc2V0VmFsdWVzW2tleV0gPSB2aXN1YWxFbGVtZW50LmdldFN0YXRpY1ZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRTdGF0aWNWYWx1ZShrZXksIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyByb3RhdGlvbiB2YWx1ZXMsIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55IG1vcmUuXG4gICAgICAgICAgICBpZiAoIWhhc1JvdGF0ZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBGb3JjZSBhIHJlbmRlciBvZiB0aGlzIGVsZW1lbnQgdG8gYXBwbHkgdGhlIHRyYW5zZm9ybSB3aXRoIGFsbCByb3RhdGlvbnNcbiAgICAgICAgICAgIC8vIHNldCB0byAwLlxuICAgICAgICAgICAgdmlzdWFsRWxlbWVudCA9PT0gbnVsbCB8fCB2aXN1YWxFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2aXN1YWxFbGVtZW50LnN5bmNSZW5kZXIoKTtcbiAgICAgICAgICAgIC8vIFB1dCBiYWNrIGFsbCB0aGUgdmFsdWVzIHdlIHJlc2V0XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByZXNldFZhbHVlcykge1xuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuc2V0U3RhdGljVmFsdWUoa2V5LCByZXNldFZhbHVlc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIGEgcmVuZGVyIGZvciB0aGUgbmV4dCBmcmFtZS4gVGhpcyBlbnN1cmVzIHdlIHdvbid0IHZpc3VhbGx5XG4gICAgICAgICAgICAvLyBzZWUgdGhlIGVsZW1lbnQgd2l0aCB0aGUgcmVzZXQgcm90YXRlIHZhbHVlIGFwcGxpZWQuXG4gICAgICAgICAgICB2aXN1YWxFbGVtZW50LnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0UHJvamVjdGlvblN0eWxlcyhzdHlsZVByb3AgPSB7fSkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXR1cm4gbGlmZWN5Y2xlLXBlcnNpc3RlbnQgb2JqZWN0XG4gICAgICAgICAgICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbnN0YW5jZSB8fCB0aGlzLmlzU1ZHKVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3R5bGVzLnZpc2liaWxpdHkgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtVGVtcGxhdGUgPSAoX2EgPSB0aGlzLm9wdGlvbnMudmlzdWFsRWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFByb3BzKCkudHJhbnNmb3JtVGVtcGxhdGU7XG4gICAgICAgICAgICBpZiAodGhpcy5uZWVkc1Jlc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZWVkc1Jlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3R5bGVzLm9wYWNpdHkgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHN0eWxlcy5wb2ludGVyRXZlbnRzID1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZU1vdGlvblZhbHVlKHN0eWxlUHJvcC5wb2ludGVyRXZlbnRzKSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIHN0eWxlcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHRoaXMubGF0ZXN0VmFsdWVzLCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICA6IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsZWFkID0gdGhpcy5nZXRMZWFkKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvamVjdGlvbkRlbHRhIHx8ICF0aGlzLmxheW91dCB8fCAhbGVhZC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbXB0eVN0eWxlcyA9IHt9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGF5b3V0SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1wdHlTdHlsZXMub3BhY2l0eSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhdGVzdFZhbHVlcy5vcGFjaXR5ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMubGF0ZXN0VmFsdWVzLm9wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDE7XG4gICAgICAgICAgICAgICAgICAgIGVtcHR5U3R5bGVzLnBvaW50ZXJFdmVudHMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZU1vdGlvblZhbHVlKHN0eWxlUHJvcC5wb2ludGVyRXZlbnRzKSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNQcm9qZWN0ZWQgJiYgIWhhc1RyYW5zZm9ybSh0aGlzLmxhdGVzdFZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1wdHlTdHlsZXMudHJhbnNmb3JtID0gdHJhbnNmb3JtVGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJhbnNmb3JtVGVtcGxhdGUoe30sIFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc1Byb2plY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlTdHlsZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXNUb1JlbmRlciA9IGxlYWQuYW5pbWF0aW9uVmFsdWVzIHx8IGxlYWQubGF0ZXN0VmFsdWVzO1xuICAgICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXNUb1RhcmdldCgpO1xuICAgICAgICAgICAgc3R5bGVzLnRyYW5zZm9ybSA9IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSh0aGlzLnByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0sIHRoaXMudHJlZVNjYWxlLCB2YWx1ZXNUb1JlbmRlcik7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMudHJhbnNmb3JtID0gdHJhbnNmb3JtVGVtcGxhdGUodmFsdWVzVG9SZW5kZXIsIHN0eWxlcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzLnByb2plY3Rpb25EZWx0YTtcbiAgICAgICAgICAgIHN0eWxlcy50cmFuc2Zvcm1PcmlnaW4gPSBgJHt4Lm9yaWdpbiAqIDEwMH0lICR7eS5vcmlnaW4gKiAxMDB9JSAwYDtcbiAgICAgICAgICAgIGlmIChsZWFkLmFuaW1hdGlvblZhbHVlcykge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZSBsZWFkIGNvbXBvbmVudCBpcyBhbmltYXRpbmcsIGFzc2lnbiB0aGlzIGVpdGhlciB0aGUgZW50ZXJpbmcvbGVhdmluZ1xuICAgICAgICAgICAgICAgICAqIG9wYWNpdHlcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzdHlsZXMub3BhY2l0eSA9XG4gICAgICAgICAgICAgICAgICAgIGxlYWQgPT09IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKF9jID0gKF9iID0gdmFsdWVzVG9SZW5kZXIub3BhY2l0eSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5sYXRlc3RWYWx1ZXMub3BhY2l0eSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnByZXNlcnZlT3BhY2l0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5sYXRlc3RWYWx1ZXMub3BhY2l0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWVzVG9SZW5kZXIub3BhY2l0eUV4aXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBPciB3ZSdyZSBub3QgYW5pbWF0aW5nIGF0IGFsbCwgc2V0IHRoZSBsZWFkIGNvbXBvbmVudCB0byBpdHMgYWN0dWFsXG4gICAgICAgICAgICAgICAgICogb3BhY2l0eSBhbmQgb3RoZXIgY29tcG9uZW50cyB0byBoaWRkZW4uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc3R5bGVzLm9wYWNpdHkgPVxuICAgICAgICAgICAgICAgICAgICBsZWFkID09PSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHZhbHVlc1RvUmVuZGVyLm9wYWNpdHkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsdWVzVG9SZW5kZXIub3BhY2l0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZXNUb1JlbmRlci5vcGFjaXR5RXhpdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZXNUb1JlbmRlci5vcGFjaXR5RXhpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXBwbHkgc2NhbGUgY29ycmVjdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2FsZUNvcnJlY3RvcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzVG9SZW5kZXJba2V5XSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNvcnJlY3QsIGFwcGx5VG8gfSA9IHNjYWxlQ29ycmVjdG9yc1trZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvcnJlY3RlZCA9IGNvcnJlY3QodmFsdWVzVG9SZW5kZXJba2V5XSwgbGVhZCk7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGx5VG8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbnVtID0gYXBwbHlUby5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlc1thcHBseVRvW2ldXSA9IGNvcnJlY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzW2tleV0gPSBjb3JyZWN0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEaXNhYmxlIHBvaW50ZXIgZXZlbnRzIG9uIGZvbGxvdyBjb21wb25lbnRzLiBUaGlzIGlzIHRvIGVuc3VyZVxuICAgICAgICAgICAgICogdGhhdCBpZiBhIGZvbGxvdyBjb21wb25lbnQgY292ZXJzIGEgbGVhZCBjb21wb25lbnQgaXQgZG9lc24ndCBibG9ja1xuICAgICAgICAgICAgICogcG9pbnRlciBldmVudHMgb24gdGhlIGxlYWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGF5b3V0SWQpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMucG9pbnRlckV2ZW50cyA9XG4gICAgICAgICAgICAgICAgICAgIGxlYWQgPT09IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzb2x2ZU1vdGlvblZhbHVlKHN0eWxlUHJvcC5wb2ludGVyRXZlbnRzKSB8fCBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwibm9uZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfVxuICAgICAgICBjbGVhclNuYXBzaG90KCkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bWVGcm9tID0gdGhpcy5zbmFwc2hvdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmx5IHJ1biBvbiByb290XG4gICAgICAgIHJlc2V0VHJlZSgpIHtcbiAgICAgICAgICAgIHRoaXMucm9vdC5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IG5vZGUuY3VycmVudEFuaW1hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0b3AoKTsgfSk7XG4gICAgICAgICAgICB0aGlzLnJvb3Qubm9kZXMuZm9yRWFjaChjbGVhck1lYXN1cmVtZW50cyk7XG4gICAgICAgICAgICB0aGlzLnJvb3Quc2hhcmVkTm9kZXMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiB1cGRhdGVMYXlvdXQobm9kZSkge1xuICAgIG5vZGUudXBkYXRlTGF5b3V0KCk7XG59XG5mdW5jdGlvbiBub3RpZnlMYXlvdXRVcGRhdGUobm9kZSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGNvbnN0IHNuYXBzaG90ID0gKChfYSA9IG5vZGUucmVzdW1lRnJvbSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNuYXBzaG90KSB8fCBub2RlLnNuYXBzaG90O1xuICAgIGlmIChub2RlLmlzTGVhZCgpICYmXG4gICAgICAgIG5vZGUubGF5b3V0ICYmXG4gICAgICAgIHNuYXBzaG90ICYmXG4gICAgICAgIG5vZGUuaGFzTGlzdGVuZXJzKFwiZGlkVXBkYXRlXCIpKSB7XG4gICAgICAgIGNvbnN0IHsgYWN0dWFsOiBsYXlvdXQsIG1lYXN1cmVkOiBtZWFzdXJlZExheW91dCB9ID0gbm9kZS5sYXlvdXQ7XG4gICAgICAgIGNvbnN0IHsgYW5pbWF0aW9uVHlwZSB9ID0gbm9kZS5vcHRpb25zO1xuICAgICAgICAvLyBUT0RPIE1heWJlIHdlIHdhbnQgdG8gYWxzbyByZXNpemUgdGhlIGxheW91dCBzbmFwc2hvdCBzbyB3ZSBkb24ndCB0cmlnZ2VyXG4gICAgICAgIC8vIGFuaW1hdGlvbnMgZm9yIGluc3RhbmNlIGlmIGxheW91dD1cInNpemVcIiBhbmQgYW4gZWxlbWVudCBoYXMgb25seSBjaGFuZ2VkIHBvc2l0aW9uXG4gICAgICAgIGlmIChhbmltYXRpb25UeXBlID09PSBcInNpemVcIikge1xuICAgICAgICAgICAgZWFjaEF4aXMoKGF4aXMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlzU25hcHNob3QgPSBzbmFwc2hvdC5pc1NoYXJlZFxuICAgICAgICAgICAgICAgICAgICA/IHNuYXBzaG90Lm1lYXN1cmVkW2F4aXNdXG4gICAgICAgICAgICAgICAgICAgIDogc25hcHNob3QubGF5b3V0W2F4aXNdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGNhbGNMZW5ndGgoYXhpc1NuYXBzaG90KTtcbiAgICAgICAgICAgICAgICBheGlzU25hcHNob3QubWluID0gbGF5b3V0W2F4aXNdLm1pbjtcbiAgICAgICAgICAgICAgICBheGlzU25hcHNob3QubWF4ID0gYXhpc1NuYXBzaG90Lm1pbiArIGxlbmd0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNob3VsZEFuaW1hdGVQb3NpdGlvbk9ubHkoYW5pbWF0aW9uVHlwZSwgc25hcHNob3QubGF5b3V0LCBsYXlvdXQpKSB7XG4gICAgICAgICAgICBlYWNoQXhpcygoYXhpcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXNTbmFwc2hvdCA9IHNuYXBzaG90LmlzU2hhcmVkXG4gICAgICAgICAgICAgICAgICAgID8gc25hcHNob3QubWVhc3VyZWRbYXhpc11cbiAgICAgICAgICAgICAgICAgICAgOiBzbmFwc2hvdC5sYXlvdXRbYXhpc107XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gY2FsY0xlbmd0aChsYXlvdXRbYXhpc10pO1xuICAgICAgICAgICAgICAgIGF4aXNTbmFwc2hvdC5tYXggPSBheGlzU25hcHNob3QubWluICsgbGVuZ3RoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGF5b3V0RGVsdGEgPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICBjYWxjQm94RGVsdGEobGF5b3V0RGVsdGEsIGxheW91dCwgc25hcHNob3QubGF5b3V0KTtcbiAgICAgICAgY29uc3QgdmlzdWFsRGVsdGEgPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICBpZiAoc25hcHNob3QuaXNTaGFyZWQpIHtcbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh2aXN1YWxEZWx0YSwgbm9kZS5hcHBseVRyYW5zZm9ybShtZWFzdXJlZExheW91dCwgdHJ1ZSksIHNuYXBzaG90Lm1lYXN1cmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh2aXN1YWxEZWx0YSwgbGF5b3V0LCBzbmFwc2hvdC5sYXlvdXQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhc0xheW91dENoYW5nZWQgPSAhaXNEZWx0YVplcm8obGF5b3V0RGVsdGEpO1xuICAgICAgICBsZXQgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGlmICghbm9kZS5yZXN1bWVGcm9tKSB7XG4gICAgICAgICAgICBub2RlLnJlbGF0aXZlUGFyZW50ID0gbm9kZS5nZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCgpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGUgcmVsYXRpdmVQYXJlbnQgaXMgaXRzZWxmIHJlc3VtaW5nIGZyb20gYSBkaWZmZXJlbnQgZWxlbWVudCB0aGVuXG4gICAgICAgICAgICAgKiB0aGUgcmVsYXRpdmUgc25hcHNob3QgaXMgbm90IHJlbGF2ZW50XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChub2RlLnJlbGF0aXZlUGFyZW50ICYmICFub2RlLnJlbGF0aXZlUGFyZW50LnJlc3VtZUZyb20pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNuYXBzaG90OiBwYXJlbnRTbmFwc2hvdCwgbGF5b3V0OiBwYXJlbnRMYXlvdXQgfSA9IG5vZGUucmVsYXRpdmVQYXJlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudFNuYXBzaG90ICYmIHBhcmVudExheW91dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWxhdGl2ZVNuYXBzaG90ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHJlbGF0aXZlU25hcHNob3QsIHNuYXBzaG90LmxheW91dCwgcGFyZW50U25hcHNob3QubGF5b3V0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVMYXlvdXQgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsY1JlbGF0aXZlUG9zaXRpb24ocmVsYXRpdmVMYXlvdXQsIGxheW91dCwgcGFyZW50TGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYm94RXF1YWxzKHJlbGF0aXZlU25hcHNob3QsIHJlbGF0aXZlTGF5b3V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub2RlLm5vdGlmeUxpc3RlbmVycyhcImRpZFVwZGF0ZVwiLCB7XG4gICAgICAgICAgICBsYXlvdXQsXG4gICAgICAgICAgICBzbmFwc2hvdCxcbiAgICAgICAgICAgIGRlbHRhOiB2aXN1YWxEZWx0YSxcbiAgICAgICAgICAgIGxheW91dERlbHRhLFxuICAgICAgICAgICAgaGFzTGF5b3V0Q2hhbmdlZCxcbiAgICAgICAgICAgIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUuaXNMZWFkKCkpIHtcbiAgICAgICAgKF9jID0gKF9iID0gbm9kZS5vcHRpb25zKS5vbkV4aXRDb21wbGV0ZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcmluZyB0cmFuc2l0aW9uXG4gICAgICogVE9ETzogSW52ZXN0aWdhdGUgd2h5IHRoaXMgdHJhbnNpdGlvbiBpcyBiZWluZyBwYXNzZWQgaW4gYXMge3R5cGU6IGZhbHNlIH0gZnJvbSBGcmFtZXJcbiAgICAgKiBhbmQgd2h5IHdlIG5lZWQgaXQgYXQgYWxsXG4gICAgICovXG4gICAgbm9kZS5vcHRpb25zLnRyYW5zaXRpb24gPSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBjbGVhclNuYXBzaG90KG5vZGUpIHtcbiAgICBub2RlLmNsZWFyU25hcHNob3QoKTtcbn1cbmZ1bmN0aW9uIGNsZWFyTWVhc3VyZW1lbnRzKG5vZGUpIHtcbiAgICBub2RlLmNsZWFyTWVhc3VyZW1lbnRzKCk7XG59XG5mdW5jdGlvbiByZXNldFRyYW5zZm9ybVN0eWxlKG5vZGUpIHtcbiAgICBjb25zdCB7IHZpc3VhbEVsZW1lbnQgfSA9IG5vZGUub3B0aW9ucztcbiAgICBpZiAodmlzdWFsRWxlbWVudCA9PT0gbnVsbCB8fCB2aXN1YWxFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2aXN1YWxFbGVtZW50LmdldFByb3BzKCkub25CZWZvcmVMYXlvdXRNZWFzdXJlKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQubm90aWZ5QmVmb3JlTGF5b3V0TWVhc3VyZSgpO1xuICAgIH1cbiAgICBub2RlLnJlc2V0VHJhbnNmb3JtKCk7XG59XG5mdW5jdGlvbiBmaW5pc2hBbmltYXRpb24obm9kZSkge1xuICAgIG5vZGUuZmluaXNoQW5pbWF0aW9uKCk7XG4gICAgbm9kZS50YXJnZXREZWx0YSA9IG5vZGUucmVsYXRpdmVUYXJnZXQgPSBub2RlLnRhcmdldCA9IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVUYXJnZXREZWx0YShub2RlKSB7XG4gICAgbm9kZS5yZXNvbHZlVGFyZ2V0RGVsdGEoKTtcbn1cbmZ1bmN0aW9uIGNhbGNQcm9qZWN0aW9uKG5vZGUpIHtcbiAgICBub2RlLmNhbGNQcm9qZWN0aW9uKCk7XG59XG5mdW5jdGlvbiByZXNldFJvdGF0aW9uKG5vZGUpIHtcbiAgICBub2RlLnJlc2V0Um90YXRpb24oKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUxlYWRTbmFwc2hvdHMoc3RhY2spIHtcbiAgICBzdGFjay5yZW1vdmVMZWFkU25hcHNob3QoKTtcbn1cbmZ1bmN0aW9uIG1peEF4aXNEZWx0YShvdXRwdXQsIGRlbHRhLCBwKSB7XG4gICAgb3V0cHV0LnRyYW5zbGF0ZSA9IG1peChkZWx0YS50cmFuc2xhdGUsIDAsIHApO1xuICAgIG91dHB1dC5zY2FsZSA9IG1peChkZWx0YS5zY2FsZSwgMSwgcCk7XG4gICAgb3V0cHV0Lm9yaWdpbiA9IGRlbHRhLm9yaWdpbjtcbiAgICBvdXRwdXQub3JpZ2luUG9pbnQgPSBkZWx0YS5vcmlnaW5Qb2ludDtcbn1cbmZ1bmN0aW9uIG1peEF4aXMob3V0cHV0LCBmcm9tLCB0bywgcCkge1xuICAgIG91dHB1dC5taW4gPSBtaXgoZnJvbS5taW4sIHRvLm1pbiwgcCk7XG4gICAgb3V0cHV0Lm1heCA9IG1peChmcm9tLm1heCwgdG8ubWF4LCBwKTtcbn1cbmZ1bmN0aW9uIG1peEJveChvdXRwdXQsIGZyb20sIHRvLCBwKSB7XG4gICAgbWl4QXhpcyhvdXRwdXQueCwgZnJvbS54LCB0by54LCBwKTtcbiAgICBtaXhBeGlzKG91dHB1dC55LCBmcm9tLnksIHRvLnksIHApO1xufVxuZnVuY3Rpb24gaGFzT3BhY2l0eUNyb3NzZmFkZShub2RlKSB7XG4gICAgcmV0dXJuIChub2RlLmFuaW1hdGlvblZhbHVlcyAmJiBub2RlLmFuaW1hdGlvblZhbHVlcy5vcGFjaXR5RXhpdCAhPT0gdW5kZWZpbmVkKTtcbn1cbmNvbnN0IGRlZmF1bHRMYXlvdXRUcmFuc2l0aW9uID0ge1xuICAgIGR1cmF0aW9uOiAwLjQ1LFxuICAgIGVhc2U6IFswLjQsIDAsIDAuMSwgMV0sXG59O1xuZnVuY3Rpb24gbW91bnROb2RlRWFybHkobm9kZSwgaWQpIHtcbiAgICAvKipcbiAgICAgKiBSYXRoZXIgdGhhbiBzZWFyY2hpbmcgdGhlIERPTSBmcm9tIGRvY3VtZW50IHdlIGNhbiBzZWFyY2ggdGhlXG4gICAgICogcGF0aCBmb3IgdGhlIGRlZXBlc3QgbW91bnRlZCBhbmNlc3RvciBhbmQgc2VhcmNoIGZyb20gdGhlcmVcbiAgICAgKi9cbiAgICBsZXQgc2VhcmNoTm9kZSA9IG5vZGUucm9vdDtcbiAgICBmb3IgKGxldCBpID0gbm9kZS5wYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChCb29sZWFuKG5vZGUucGF0aFtpXS5pbnN0YW5jZSkpIHtcbiAgICAgICAgICAgIHNlYXJjaE5vZGUgPSBub2RlLnBhdGhbaV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzZWFyY2hFbGVtZW50ID0gc2VhcmNoTm9kZSAmJiBzZWFyY2hOb2RlICE9PSBub2RlLnJvb3QgPyBzZWFyY2hOb2RlLmluc3RhbmNlIDogZG9jdW1lbnQ7XG4gICAgY29uc3QgZWxlbWVudCA9IHNlYXJjaEVsZW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtcHJvamVjdGlvbi1pZD1cIiR7aWR9XCJdYCk7XG4gICAgaWYgKGVsZW1lbnQpXG4gICAgICAgIG5vZGUubW91bnQoZWxlbWVudCwgdHJ1ZSk7XG59XG5mdW5jdGlvbiByb3VuZEF4aXMoYXhpcykge1xuICAgIGF4aXMubWluID0gTWF0aC5yb3VuZChheGlzLm1pbik7XG4gICAgYXhpcy5tYXggPSBNYXRoLnJvdW5kKGF4aXMubWF4KTtcbn1cbmZ1bmN0aW9uIHJvdW5kQm94KGJveCkge1xuICAgIHJvdW5kQXhpcyhib3gueCk7XG4gICAgcm91bmRBeGlzKGJveC55KTtcbn1cbmZ1bmN0aW9uIHNob3VsZEFuaW1hdGVQb3NpdGlvbk9ubHkoYW5pbWF0aW9uVHlwZSwgc25hcHNob3QsIGxheW91dCkge1xuICAgIHJldHVybiAoYW5pbWF0aW9uVHlwZSA9PT0gXCJwb3NpdGlvblwiIHx8XG4gICAgICAgIChhbmltYXRpb25UeXBlID09PSBcInByZXNlcnZlLWFzcGVjdFwiICYmXG4gICAgICAgICAgICAhaXNDbG9zZVRvKGFzcGVjdFJhdGlvKHNuYXBzaG90KSwgYXNwZWN0UmF0aW8obGF5b3V0KSkpKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUHJvamVjdGlvbk5vZGUsIG1peEF4aXMsIG1peEF4aXNEZWx0YSwgbWl4Qm94IH07XG4iLCJpbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBzdGFydEFuaW1hdGlvbiB9IGZyb20gJy4vdXRpbHMvdHJhbnNpdGlvbnMubWpzJztcblxuLyoqXG4gKiBBbmltYXRlIGEgc2luZ2xlIHZhbHVlIG9yIGEgYE1vdGlvblZhbHVlYC5cbiAqXG4gKiBUaGUgZmlyc3QgYXJndW1lbnQgaXMgZWl0aGVyIGEgYE1vdGlvblZhbHVlYCB0byBhbmltYXRlLCBvciBhbiBpbml0aWFsIGFuaW1hdGlvbiB2YWx1ZS5cbiAqXG4gKiBUaGUgc2Vjb25kIGlzIGVpdGhlciBhIHZhbHVlIHRvIGFuaW1hdGUgdG8sIG9yIGFuIGFycmF5IG9mIGtleWZyYW1lcyB0byBhbmltYXRlIHRocm91Z2guXG4gKlxuICogVGhlIHRoaXJkIGFyZ3VtZW50IGNhbiBiZSBlaXRoZXIgdHdlZW4gb3Igc3ByaW5nIG9wdGlvbnMsIGFuZCBvcHRpb25hbCBsaWZlY3ljbGUgbWV0aG9kczogYG9uVXBkYXRlYCwgYG9uUGxheWAsIGBvbkNvbXBsZXRlYCwgYG9uUmVwZWF0YCBhbmQgYG9uU3RvcGAuXG4gKlxuICogUmV0dXJucyBgQW5pbWF0aW9uUGxheWJhY2tDb250cm9sc2AsIGN1cnJlbnRseSBqdXN0IGEgYHN0b3BgIG1ldGhvZC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAqXG4gKiB1c2VFZmZlY3QoKCkgPT4ge1xuICogICBjb25zdCBjb250cm9scyA9IGFuaW1hdGUoeCwgMTAwLCB7XG4gKiAgICAgdHlwZTogXCJzcHJpbmdcIixcbiAqICAgICBzdGlmZm5lc3M6IDIwMDAsXG4gKiAgICAgb25Db21wbGV0ZTogdiA9PiB7fVxuICogICB9KVxuICpcbiAqICAgcmV0dXJuIGNvbnRyb2xzLnN0b3BcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGUoZnJvbSwgdG8sIHRyYW5zaXRpb24gPSB7fSkge1xuICAgIGNvbnN0IHZhbHVlID0gaXNNb3Rpb25WYWx1ZShmcm9tKSA/IGZyb20gOiBtb3Rpb25WYWx1ZShmcm9tKTtcbiAgICBzdGFydEFuaW1hdGlvbihcIlwiLCB2YWx1ZSwgdG8sIHRyYW5zaXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0b3A6ICgpID0+IHZhbHVlLnN0b3AoKSxcbiAgICAgICAgaXNBbmltYXRpbmc6ICgpID0+IHZhbHVlLmlzQW5pbWF0aW5nKCksXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgYW5pbWF0ZSB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuL2NyZWF0ZS1wcm9qZWN0aW9uLW5vZGUubWpzJztcbmltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL3VzZS1kb20tZXZlbnQubWpzJztcblxuY29uc3QgRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSA9IGNyZWF0ZVByb2plY3Rpb25Ob2RlKHtcbiAgICBhdHRhY2hSZXNpemVMaXN0ZW5lcjogKHJlZiwgbm90aWZ5KSA9PiBhZGREb21FdmVudChyZWYsIFwicmVzaXplXCIsIG5vdGlmeSksXG4gICAgbWVhc3VyZVNjcm9sbDogKCkgPT4gKHtcbiAgICAgICAgeDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LFxuICAgICAgICB5OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLFxuICAgIH0pLFxuICAgIGNoZWNrSXNTY3JvbGxSb290OiAoKSA9PiB0cnVlLFxufSk7XG5cbmV4cG9ydCB7IERvY3VtZW50UHJvamVjdGlvbk5vZGUgfTtcbiIsImltcG9ydCB7IGNyZWF0ZVByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi9jcmVhdGUtcHJvamVjdGlvbi1ub2RlLm1qcyc7XG5pbXBvcnQgeyBEb2N1bWVudFByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi9Eb2N1bWVudFByb2plY3Rpb25Ob2RlLm1qcyc7XG5cbmNvbnN0IHJvb3RQcm9qZWN0aW9uTm9kZSA9IHtcbiAgICBjdXJyZW50OiB1bmRlZmluZWQsXG59O1xuY29uc3QgSFRNTFByb2plY3Rpb25Ob2RlID0gY3JlYXRlUHJvamVjdGlvbk5vZGUoe1xuICAgIG1lYXN1cmVTY3JvbGw6IChpbnN0YW5jZSkgPT4gKHtcbiAgICAgICAgeDogaW5zdGFuY2Uuc2Nyb2xsTGVmdCxcbiAgICAgICAgeTogaW5zdGFuY2Uuc2Nyb2xsVG9wLFxuICAgIH0pLFxuICAgIGRlZmF1bHRQYXJlbnQ6ICgpID0+IHtcbiAgICAgICAgaWYgKCFyb290UHJvamVjdGlvbk5vZGUuY3VycmVudCkge1xuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnROb2RlID0gbmV3IERvY3VtZW50UHJvamVjdGlvbk5vZGUoMCwge30pO1xuICAgICAgICAgICAgZG9jdW1lbnROb2RlLm1vdW50KHdpbmRvdyk7XG4gICAgICAgICAgICBkb2N1bWVudE5vZGUuc2V0T3B0aW9ucyh7IGxheW91dFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50ID0gZG9jdW1lbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb290UHJvamVjdGlvbk5vZGUuY3VycmVudDtcbiAgICB9LFxuICAgIHJlc2V0VHJhbnNmb3JtOiAoaW5zdGFuY2UsIHZhbHVlKSA9PiB7XG4gICAgICAgIGluc3RhbmNlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IFwibm9uZVwiO1xuICAgIH0sXG4gICAgY2hlY2tJc1Njcm9sbFJvb3Q6IChpbnN0YW5jZSkgPT4gQm9vbGVhbih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnN0YW5jZSkucG9zaXRpb24gPT09IFwiZml4ZWRcIiksXG59KTtcblxuZXhwb3J0IHsgSFRNTFByb2plY3Rpb25Ob2RlLCByb290UHJvamVjdGlvbk5vZGUgfTtcbiIsImltcG9ydCB7IGNyZWF0ZU1vdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL21vdGlvbi9pbmRleC5tanMnO1xuaW1wb3J0IHsgY3JlYXRlTW90aW9uUHJveHkgfSBmcm9tICcuL21vdGlvbi1wcm94eS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlRG9tTW90aW9uQ29uZmlnIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtY29uZmlnLm1qcyc7XG5pbXBvcnQgeyBnZXN0dXJlQW5pbWF0aW9ucyB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9nZXN0dXJlcy5tanMnO1xuaW1wb3J0IHsgYW5pbWF0aW9ucyB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9hbmltYXRpb25zLm1qcyc7XG5pbXBvcnQgeyBkcmFnIH0gZnJvbSAnLi4vLi4vbW90aW9uL2ZlYXR1cmVzL2RyYWcubWpzJztcbmltcG9ydCB7IGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQgfSBmcm9tICcuL2NyZWF0ZS12aXN1YWwtZWxlbWVudC5tanMnO1xuaW1wb3J0IHsgbGF5b3V0RmVhdHVyZXMgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvbGF5b3V0L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBIVE1MUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL25vZGUvSFRNTFByb2plY3Rpb25Ob2RlLm1qcyc7XG5cbmNvbnN0IGZlYXR1cmVCdW5kbGUgPSB7XG4gICAgLi4uYW5pbWF0aW9ucyxcbiAgICAuLi5nZXN0dXJlQW5pbWF0aW9ucyxcbiAgICAuLi5kcmFnLFxuICAgIC4uLmxheW91dEZlYXR1cmVzLFxufTtcbi8qKlxuICogSFRNTCAmIFNWRyBjb21wb25lbnRzLCBvcHRpbWlzZWQgZm9yIHVzZSB3aXRoIGdlc3R1cmVzIGFuZCBhbmltYXRpb24uIFRoZXNlIGNhbiBiZSB1c2VkIGFzXG4gKiBkcm9wLWluIHJlcGxhY2VtZW50cyBmb3IgYW55IEhUTUwgJiBTVkcgY29tcG9uZW50LCBhbGwgQ1NTICYgU1ZHIHByb3BlcnRpZXMgYXJlIHN1cHBvcnRlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNvbnN0IG1vdGlvbiA9IC8qQF9fUFVSRV9fKi8gY3JlYXRlTW90aW9uUHJveHkoKENvbXBvbmVudCwgY29uZmlnKSA9PiBjcmVhdGVEb21Nb3Rpb25Db25maWcoQ29tcG9uZW50LCBjb25maWcsIGZlYXR1cmVCdW5kbGUsIGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQsIEhUTUxQcm9qZWN0aW9uTm9kZSkpO1xuLyoqXG4gKiBDcmVhdGUgYSBET00gYG1vdGlvbmAgY29tcG9uZW50IHdpdGggdGhlIHByb3ZpZGVkIHN0cmluZy4gVGhpcyBpcyBwcmltYXJpbHkgaW50ZW5kZWRcbiAqIGFzIGEgZnVsbCBhbHRlcm5hdGl2ZSB0byBgbW90aW9uYCBmb3IgY29uc3VtZXJzIHdobyBoYXZlIHRvIHN1cHBvcnQgZW52aXJvbm1lbnRzIHRoYXQgZG9uJ3RcbiAqIHN1cHBvcnQgYFByb3h5YC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogY29uc3QgbW90aW9uID0ge1xuICogICBkaXY6IGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCgnZGl2JylcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50KGtleSkge1xuICAgIHJldHVybiBjcmVhdGVNb3Rpb25Db21wb25lbnQoY3JlYXRlRG9tTW90aW9uQ29uZmlnKGtleSwgeyBmb3J3YXJkTW90aW9uUHJvcHM6IGZhbHNlIH0sIGZlYXR1cmVCdW5kbGUsIGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQsIEhUTUxQcm9qZWN0aW9uTm9kZSkpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQsIG1vdGlvbiB9O1xuIiwiaW1wb3J0IHsgaXNTVkdDb21wb25lbnQgfSBmcm9tICcuL2lzLXN2Zy1jb21wb25lbnQubWpzJztcbmltcG9ydCB7IGNyZWF0ZVVzZVJlbmRlciB9IGZyb20gJy4uL3VzZS1yZW5kZXIubWpzJztcbmltcG9ydCB7IHN2Z01vdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uL3N2Zy9jb25maWctbW90aW9uLm1qcyc7XG5pbXBvcnQgeyBodG1sTW90aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vaHRtbC9jb25maWctbW90aW9uLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZURvbU1vdGlvbkNvbmZpZyhDb21wb25lbnQsIHsgZm9yd2FyZE1vdGlvblByb3BzID0gZmFsc2UgfSwgcHJlbG9hZGVkRmVhdHVyZXMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQsIHByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IpIHtcbiAgICBjb25zdCBiYXNlQ29uZmlnID0gaXNTVkdDb21wb25lbnQoQ29tcG9uZW50KVxuICAgICAgICA/IHN2Z01vdGlvbkNvbmZpZ1xuICAgICAgICA6IGh0bWxNb3Rpb25Db25maWc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uYmFzZUNvbmZpZyxcbiAgICAgICAgcHJlbG9hZGVkRmVhdHVyZXMsXG4gICAgICAgIHVzZVJlbmRlcjogY3JlYXRlVXNlUmVuZGVyKGZvcndhcmRNb3Rpb25Qcm9wcyksXG4gICAgICAgIGNyZWF0ZVZpc3VhbEVsZW1lbnQsXG4gICAgICAgIHByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IsXG4gICAgICAgIENvbXBvbmVudCxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db25maWcgfTtcbiIsImNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcblxuZXhwb3J0IHsgaXNCcm93c2VyIH07XG4iLCIvKipcbiAqIEJyb3dzZXItc2FmZSB1c2FnZSBvZiBwcm9jZXNzXG4gKi9cbmNvbnN0IGRlZmF1bHRFbnZpcm9ubWVudCA9IFwicHJvZHVjdGlvblwiO1xuY29uc3QgZW52ID0gdHlwZW9mIHByb2Nlc3MgPT09IFwidW5kZWZpbmVkXCIgfHwgcHJvY2Vzcy5lbnYgPT09IHVuZGVmaW5lZFxuICAgID8gZGVmYXVsdEVudmlyb25tZW50XG4gICAgOiBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCBkZWZhdWx0RW52aXJvbm1lbnQ7XG5cbmV4cG9ydCB7IGVudiB9O1xuIiwiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjb25zdGFudCB2YWx1ZSBvdmVyIHRoZSBsaWZlY3ljbGUgb2YgYSBjb21wb25lbnQuXG4gKlxuICogRXZlbiBpZiBgdXNlTWVtb2AgaXMgcHJvdmlkZWQgYW4gZW1wdHkgYXJyYXkgYXMgaXRzIGZpbmFsIGFyZ3VtZW50LCBpdCBkb2Vzbid0IG9mZmVyXG4gKiBhIGd1YXJhbnRlZSB0aGF0IGl0IHdvbid0IHJlLXJ1biBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyBsYXRlciBvbi4gQnkgdXNpbmcgYHVzZUNvbnN0YW50YFxuICogeW91IGNhbiBlbnN1cmUgdGhhdCBpbml0aWFsaXNlcnMgZG9uJ3QgZXhlY3V0ZSB0d2ljZSBvciBtb3JlLlxuICovXG5mdW5jdGlvbiB1c2VDb25zdGFudChpbml0KSB7XG4gICAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGlmIChyZWYuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICByZWYuY3VycmVudCA9IGluaXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50O1xufVxuXG5leHBvcnQgeyB1c2VDb25zdGFudCB9O1xuIiwiaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuL2lzLWJyb3dzZXIubWpzJztcblxuY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzQnJvd3NlciA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuZXhwb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9O1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiB1c2VVbm1vdW50RWZmZWN0KGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHVzZUVmZmVjdCgoKSA9PiAoKSA9PiBjYWxsYmFjaygpLCBbXSk7XG59XG5cbmV4cG9ydCB7IHVzZVVubW91bnRFZmZlY3QgfTtcbiIsImNvbnN0IHdhcm5lZCA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIHdhcm5PbmNlKGNvbmRpdGlvbiwgbWVzc2FnZSwgZWxlbWVudCkge1xuICAgIGlmIChjb25kaXRpb24gfHwgd2FybmVkLmhhcyhtZXNzYWdlKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICBpZiAoZWxlbWVudClcbiAgICAgICAgY29uc29sZS53YXJuKGVsZW1lbnQpO1xuICAgIHdhcm5lZC5hZGQobWVzc2FnZSk7XG59XG5cbmV4cG9ydCB7IHdhcm5PbmNlIH07XG4iLCJjb25zdCBkZWZhdWx0VGltZXN0ZXAgPSAoMSAvIDYwKSAqIDEwMDA7XG5jb25zdCBnZXRDdXJyZW50VGltZSA9IHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgID8gKCkgPT4gcGVyZm9ybWFuY2Uubm93KClcbiAgICA6ICgpID0+IERhdGUubm93KCk7XG5jb25zdCBvbk5leHRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCJcbiAgICA/IChjYWxsYmFjaykgPT4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaylcbiAgICA6IChjYWxsYmFjaykgPT4gc2V0VGltZW91dCgoKSA9PiBjYWxsYmFjayhnZXRDdXJyZW50VGltZSgpKSwgZGVmYXVsdFRpbWVzdGVwKTtcblxuZXhwb3J0IHsgZGVmYXVsdFRpbWVzdGVwLCBvbk5leHRGcmFtZSB9O1xuIiwiaW1wb3J0IHsgb25OZXh0RnJhbWUsIGRlZmF1bHRUaW1lc3RlcCB9IGZyb20gJy4vb24tbmV4dC1mcmFtZS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlUmVuZGVyU3RlcCB9IGZyb20gJy4vY3JlYXRlLXJlbmRlci1zdGVwLm1qcyc7XG5cbmNvbnN0IG1heEVsYXBzZWQgPSA0MDtcbmxldCB1c2VEZWZhdWx0RWxhcHNlZCA9IHRydWU7XG5sZXQgcnVuTmV4dEZyYW1lID0gZmFsc2U7XG5sZXQgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG5jb25zdCBmcmFtZSA9IHtcbiAgICBkZWx0YTogMCxcbiAgICB0aW1lc3RhbXA6IDAsXG59O1xuY29uc3Qgc3RlcHNPcmRlciA9IFtcbiAgICBcInJlYWRcIixcbiAgICBcInVwZGF0ZVwiLFxuICAgIFwicHJlUmVuZGVyXCIsXG4gICAgXCJyZW5kZXJcIixcbiAgICBcInBvc3RSZW5kZXJcIixcbl07XG5jb25zdCBzdGVwcyA9IHN0ZXBzT3JkZXIucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGFjY1trZXldID0gY3JlYXRlUmVuZGVyU3RlcCgoKSA9PiAocnVuTmV4dEZyYW1lID0gdHJ1ZSkpO1xuICAgIHJldHVybiBhY2M7XG59LCB7fSk7XG5jb25zdCBzeW5jID0gc3RlcHNPcmRlci5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3Qgc3RlcCA9IHN0ZXBzW2tleV07XG4gICAgYWNjW2tleV0gPSAocHJvY2Vzcywga2VlcEFsaXZlID0gZmFsc2UsIGltbWVkaWF0ZSA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGlmICghcnVuTmV4dEZyYW1lKVxuICAgICAgICAgICAgc3RhcnRMb29wKCk7XG4gICAgICAgIHJldHVybiBzdGVwLnNjaGVkdWxlKHByb2Nlc3MsIGtlZXBBbGl2ZSwgaW1tZWRpYXRlKTtcbiAgICB9O1xuICAgIHJldHVybiBhY2M7XG59LCB7fSk7XG5jb25zdCBjYW5jZWxTeW5jID0gc3RlcHNPcmRlci5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgYWNjW2tleV0gPSBzdGVwc1trZXldLmNhbmNlbDtcbiAgICByZXR1cm4gYWNjO1xufSwge30pO1xuY29uc3QgZmx1c2hTeW5jID0gc3RlcHNPcmRlci5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgYWNjW2tleV0gPSAoKSA9PiBzdGVwc1trZXldLnByb2Nlc3MoZnJhbWUpO1xuICAgIHJldHVybiBhY2M7XG59LCB7fSk7XG5jb25zdCBwcm9jZXNzU3RlcCA9IChzdGVwSWQpID0+IHN0ZXBzW3N0ZXBJZF0ucHJvY2VzcyhmcmFtZSk7XG5jb25zdCBwcm9jZXNzRnJhbWUgPSAodGltZXN0YW1wKSA9PiB7XG4gICAgcnVuTmV4dEZyYW1lID0gZmFsc2U7XG4gICAgZnJhbWUuZGVsdGEgPSB1c2VEZWZhdWx0RWxhcHNlZFxuICAgICAgICA/IGRlZmF1bHRUaW1lc3RlcFxuICAgICAgICA6IE1hdGgubWF4KE1hdGgubWluKHRpbWVzdGFtcCAtIGZyYW1lLnRpbWVzdGFtcCwgbWF4RWxhcHNlZCksIDEpO1xuICAgIGZyYW1lLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICBpc1Byb2Nlc3NpbmcgPSB0cnVlO1xuICAgIHN0ZXBzT3JkZXIuZm9yRWFjaChwcm9jZXNzU3RlcCk7XG4gICAgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgaWYgKHJ1bk5leHRGcmFtZSkge1xuICAgICAgICB1c2VEZWZhdWx0RWxhcHNlZCA9IGZhbHNlO1xuICAgICAgICBvbk5leHRGcmFtZShwcm9jZXNzRnJhbWUpO1xuICAgIH1cbn07XG5jb25zdCBzdGFydExvb3AgPSAoKSA9PiB7XG4gICAgcnVuTmV4dEZyYW1lID0gdHJ1ZTtcbiAgICB1c2VEZWZhdWx0RWxhcHNlZCA9IHRydWU7XG4gICAgaWYgKCFpc1Byb2Nlc3NpbmcpXG4gICAgICAgIG9uTmV4dEZyYW1lKHByb2Nlc3NGcmFtZSk7XG59O1xuY29uc3QgZ2V0RnJhbWVEYXRhID0gKCkgPT4gZnJhbWU7XG5cbmV4cG9ydCBkZWZhdWx0IHN5bmM7XG5leHBvcnQgeyBjYW5jZWxTeW5jLCBmbHVzaFN5bmMsIGdldEZyYW1lRGF0YSB9O1xuIiwiZnVuY3Rpb24gY3JlYXRlUmVuZGVyU3RlcChydW5OZXh0RnJhbWUpIHtcbiAgICBsZXQgdG9SdW4gPSBbXTtcbiAgICBsZXQgdG9SdW5OZXh0RnJhbWUgPSBbXTtcbiAgICBsZXQgbnVtVG9SdW4gPSAwO1xuICAgIGxldCBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICBsZXQgZmx1c2hOZXh0RnJhbWUgPSBmYWxzZTtcbiAgICBjb25zdCB0b0tlZXBBbGl2ZSA9IG5ldyBXZWFrU2V0KCk7XG4gICAgY29uc3Qgc3RlcCA9IHtcbiAgICAgICAgc2NoZWR1bGU6IChjYWxsYmFjaywga2VlcEFsaXZlID0gZmFsc2UsIGltbWVkaWF0ZSA9IGZhbHNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZGRUb0N1cnJlbnRGcmFtZSA9IGltbWVkaWF0ZSAmJiBpc1Byb2Nlc3Npbmc7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhZGRUb0N1cnJlbnRGcmFtZSA/IHRvUnVuIDogdG9SdW5OZXh0RnJhbWU7XG4gICAgICAgICAgICBpZiAoa2VlcEFsaXZlKVxuICAgICAgICAgICAgICAgIHRvS2VlcEFsaXZlLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmluZGV4T2YoY2FsbGJhY2spID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoYWRkVG9DdXJyZW50RnJhbWUgJiYgaXNQcm9jZXNzaW5nKVxuICAgICAgICAgICAgICAgICAgICBudW1Ub1J1biA9IHRvUnVuLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaztcbiAgICAgICAgfSxcbiAgICAgICAgY2FuY2VsOiAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdG9SdW5OZXh0RnJhbWUuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgIHRvUnVuTmV4dEZyYW1lLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB0b0tlZXBBbGl2ZS5kZWxldGUoY2FsbGJhY2spO1xuICAgICAgICB9LFxuICAgICAgICBwcm9jZXNzOiAoZnJhbWVEYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNQcm9jZXNzaW5nKSB7XG4gICAgICAgICAgICAgICAgZmx1c2hOZXh0RnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgICAgICBbdG9SdW4sIHRvUnVuTmV4dEZyYW1lXSA9IFt0b1J1bk5leHRGcmFtZSwgdG9SdW5dO1xuICAgICAgICAgICAgdG9SdW5OZXh0RnJhbWUubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIG51bVRvUnVuID0gdG9SdW4ubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKG51bVRvUnVuKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Ub1J1bjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gdG9SdW5baV07XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZyYW1lRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b0tlZXBBbGl2ZS5oYXMoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwLnNjaGVkdWxlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bk5leHRGcmFtZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZmx1c2hOZXh0RnJhbWUpIHtcbiAgICAgICAgICAgICAgICBmbHVzaE5leHRGcmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN0ZXAucHJvY2VzcyhmcmFtZURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHN0ZXA7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVJlbmRlclN0ZXAgfTtcbiJdLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJpc05vZGUiLCJnIiwidG9TdHJpbmciLCJjYWxsIiwiZ2V0TWV0aG9kTmFtZSIsInByb3AiLCJ0eXBlIiwiaW5kZXhPZiIsInRvTG93ZXJDYXNlIiwiY29uY2F0Iiwic3Vic3RyIiwidG9VcHBlckNhc2UiLCJpc0RvbUVsZW1lbnQiLCJlbGVtZW50IiwiQm9vbGVhbiIsIm5vZGVUeXBlIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiaXNJbnRlZ2VyIiwidmFsdWUiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsIk1hdGgiLCJmbG9vciIsImlzVmltZW9VcmwiLCJ1cmwiLCJ0ZXN0IiwiaXNWaW1lb0VtYmVkIiwiZ2V0VmltZW9VcmwiLCJvRW1iZWRQYXJhbWV0ZXJzIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiaWQiLCJpZE9yVXJsIiwiRXJyb3IiLCJyZXBsYWNlIiwiYXJyYXlJbmRleE9mU3VwcG9ydCIsIkFycmF5IiwicHJvdG90eXBlIiwicG9zdE1lc3NhZ2VTdXBwb3J0Iiwid2luZG93IiwicG9zdE1lc3NhZ2UiLCJjb21tb25qc0dsb2JhbCIsImdsb2JhbFRoaXMiLCJzZWxmIiwiV2Vha01hcCIsImhhc093blByb3BlcnR5IiwiaGFzRGVmaW5lIiwieCIsImUiLCJvYmplY3QiLCJuYW1lIiwidGhpcyIsImdlbklkIiwiY2hlY2tJbnN0YW5jZSIsIm1ldGhvZE5hbWUiLCJpc09iamVjdCIsInByZWZpeCIsInJhbmQiLCJyYW5kb20iLCJzdWJzdHJpbmciLCJlbnRyeSIsIl9pZCIsImZuIiwibW9kdWxlIiwibnBvX3NyYyIsImNvbnRleHQiLCJkZWZpbml0aW9uIiwiYnVpbHRJblByb3AiLCJjeWNsZSIsInNjaGVkdWxpbmdfcXVldWUiLCJUb1N0cmluZyIsInRpbWVyIiwic2V0SW1tZWRpYXRlIiwic2V0VGltZW91dCIsIm9iaiIsInZhbCIsImNvbmZpZyIsImVyciIsInNjaGVkdWxlIiwiYWRkIiwiZHJhaW4iLCJpc1RoZW5hYmxlIiwibyIsIl90aGVuIiwib190eXBlIiwidGhlbiIsIm5vdGlmeSIsImNoYWluIiwibm90aWZ5SXNvbGF0ZWQiLCJzdGF0ZSIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwiY2IiLCJyZXQiLCJyZWplY3QiLCJtc2ciLCJwcm9taXNlIiwicmVzb2x2ZSIsInRyaWdnZXJlZCIsImRlZiIsImRlZl93cmFwcGVyIiwiTWFrZURlZldyYXBwZXIiLCJhcHBseSIsIml0ZXJhdGVQcm9taXNlcyIsImFyciIsInJlc29sdmVyIiwicmVqZWN0ZXIiLCJpZHgiLCJNYWtlRGVmIiwiUHJvbWlzZSIsImV4ZWN1dG9yIiwiX19OUE9fXyIsImNvbnN0cnVjdG9yIiwicHVzaCIsImZpcnN0IiwibGFzdCIsIml0ZW0iLCJJdGVtIiwibmV4dCIsImYiLCJQcm9taXNlUHJvdG90eXBlIiwibGVuIiwibXNncyIsImNvdW50IiwiZXhwb3J0cyIsImNhbGxiYWNrTWFwIiwic3RvcmVDYWxsYmFjayIsInBsYXllciIsImNhbGxiYWNrIiwicGxheWVyQ2FsbGJhY2tzIiwiZ2V0Iiwic2V0IiwiZ2V0Q2FsbGJhY2tzIiwicmVtb3ZlQ2FsbGJhY2siLCJpbmRleCIsInNwbGljZSIsInN3YXBDYWxsYmFja3MiLCJvbGRFbGVtZW50IiwibmV3RWxlbWVudCIsImRlbGV0ZSIsInBhcnNlTWVzc2FnZURhdGEiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiZXJyb3IiLCJjb25zb2xlIiwid2FybiIsIm1ldGhvZCIsInBhcmFtcyIsImNvbnRlbnRXaW5kb3ciLCJtZXNzYWdlIiwiaWVWZXJzaW9uIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwic3RyaW5naWZ5Iiwib3JpZ2luIiwicHJvY2Vzc0RhdGEiLCJwYXJhbSIsImNhbGxiYWNrcyIsImV2ZW50IiwiZm9yRWFjaCIsInNoaWZ0Iiwic2hpZnRDYWxsYmFja3MiLCJnZXRPRW1iZWRQYXJhbWV0ZXJzIiwiZGVmYXVsdHMiLCJyZWR1Y2UiLCJnZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbWJlZCIsIl9yZWYiLCJodG1sIiwicXVlcnlTZWxlY3RvciIsImRpdiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsInNldEF0dHJpYnV0ZSIsImdldE9FbWJlZERhdGEiLCJ2aWRlb1VybCIsImVuY29kZVVSSUNvbXBvbmVudCIsInhociIsIlhEb21haW5SZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25sb2FkIiwic3RhdHVzIiwianNvbiIsInJlc3BvbnNlVGV4dCIsImRvbWFpbl9zdGF0dXNfY29kZSIsIm9uZXJyb3IiLCJzZW5kIiwicGxheWVyTWFwIiwicmVhZHlNYXAiLCJzY3JlZW5mdWxsIiwiUGxheWVyIiwiX3RoaXMiLCJvcHRpb25zIiwialF1ZXJ5IiwiZ2V0RWxlbWVudEJ5SWQiLCJub2RlTmFtZSIsImlmcmFtZSIsImhhcyIsIl93aW5kb3ciLCJyZWFkeVByb21pc2UiLCJfb25NZXNzYWdlIiwic291cmNlIiwiaXNSZWFkeUV2ZW50IiwiaXNQaW5nUmVzcG9uc2UiLCJhZGRFdmVudExpc3RlbmVyIiwiX29yaWdpbmFsRWxlbWVudCIsImNhdGNoIiwiaXNFbmFibGVkIiwiZXhpdEZ1bGxzY3JlZW4iLCJleGl0IiwiZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIiLCJpc0Z1bGxzY3JlZW4iLCJyZWFkeSIsIm9uIiwicHJvdG9Qcm9wcyIsIl90aGlzMiIsImFyZ3MiLCJfdGhpczMiLCJfdGhpczQiLCJldmVudE5hbWUiLCJjYWxsTWV0aG9kIiwidGltZSIsImxhbmd1YWdlIiwia2luZCIsInJlcXVlc3QiLCJfdGhpczUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib2ZmIiwiYXV0b3BhdXNlIiwiY2FtZXJhIiwiY29sb3IiLCJjdXJyZW50VGltZSIsImxvb3AiLCJtdXRlZCIsInBsYXliYWNrUmF0ZSIsInF1YWxpdHkiLCJ2b2x1bWUiLCJmbk1hcCIsImwiLCJldmVudE5hbWVNYXAiLCJmdWxsc2NyZWVuY2hhbmdlIiwiZnVsbHNjcmVlbmVycm9yIiwib25GdWxsU2NyZWVuRW50ZXJlZCIsInJldHVyblByb21pc2UiLCJkb2N1bWVudEVsZW1lbnQiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIm9uRnVsbFNjcmVlbkV4aXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImluaXRpYWxpemVTY3JlZW5mdWxsIiwicGFyZW50IiwiZWxlbWVudHMiLCJzbGljZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoYW5kbGVFcnJvciIsImluaXRpYWxpemVFbWJlZHMiLCJWaW1lb1BsYXllclJlc2l6ZUVtYmVkc18iLCJvbk1lc3NhZ2UiLCJpZnJhbWVzIiwicGFyZW50RWxlbWVudCIsInN0eWxlIiwicGFkZGluZ0JvdHRvbSIsImJvdHRvbSIsInJlc2l6ZUVtYmVkcyIsIlZpbWVvU2VvTWV0YWRhdGFBcHBlbmRlZCIsImlzVmFsaWRNZXNzYWdlU291cmNlIiwic3JjIiwibG9jYXRpb24iLCJocmVmIiwiaW5pdEFwcGVuZFZpZGVvTWV0YWRhdGEiLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJldmVudE5hbWVzIiwicGxheSIsInBhdXNlIiwiZW5kZWQiLCJ0aW1ldXBkYXRlIiwicHJvZ3Jlc3MiLCJzZWVrZWQiLCJ0ZXh0dHJhY2tjaGFuZ2UiLCJjdWVjaGFuZ2UiLCJjdWVwb2ludCIsInZvbHVtZWNoYW5nZSIsInBsYXliYWNrcmF0ZWNoYW5nZSIsImxvYWRlZCIsIlZpbWVvIiwiX1JlYWN0JENvbXBvbmVudCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInJlZkNvbnRhaW5lciIsImJpbmQiLCJSZWZlcmVuY2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJjcmVhdGUiLCJfcHJvdG8iLCJjb21wb25lbnREaWRNb3VudCIsImNyZWF0ZVBsYXllciIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsImNoYW5nZXMiLCJrZXlzIiwiZmlsdGVyIiwidXBkYXRlUHJvcHMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRlc3Ryb3kiLCJnZXRJbml0aWFsT3B0aW9ucyIsInZpZGVvIiwid2lkdGgiLCJoZWlnaHQiLCJhdXRvcGxheSIsImJ5bGluZSIsInNob3dCeWxpbmUiLCJjb250cm9scyIsInBvcnRyYWl0Iiwic2hvd1BvcnRyYWl0IiwidGl0bGUiLCJzaG93VGl0bGUiLCJiYWNrZ3JvdW5kIiwicmVzcG9uc2l2ZSIsImRudCIsInNwZWVkIiwia2V5Ym9hcmQiLCJwaXAiLCJwbGF5c2lubGluZSIsInBsYXlzSW5saW5lIiwidGV4dHRyYWNrIiwidGV4dFRyYWNrIiwidHJhbnNwYXJlbnQiLCJwcm9wTmFtZXMiLCJzZXRBdXRvcGF1c2UiLCJzZXRDb2xvciIsInNldExvb3AiLCJzZXRWb2x1bWUiLCJnZXRQYXVzZWQiLCJwYXVzZWQiLCJzdGFydCIsImxvYWRWaWRlbyIsInNldEN1cnJlbnRUaW1lIiwidW5sb2FkIiwiX3RoaXMkcHJvcHMiLCJjb250YWluZXIiLCJkbU5hbWUiLCJyZWFjdE5hbWUiLCJoYW5kbGVyIiwiX3RoaXMkcHJvcHMyIiwib25FcnJvciIsIm9uUmVhZHkiLCJyZW5kZXIiLCJfdGhpcyRwcm9wczMiLCJjbGFzc05hbWUiLCJyZWYiLCJkZWZhdWx0UHJvcHMiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImFyZyIsImFyZ1R5cGUiLCJpc0FycmF5IiwiaW5uZXIiLCJqb2luIiwiZGVmYXVsdCIsIlN5bWJvbCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsInRyaW1tZWRFbmRJbmRleCIsInJlVHJpbVN0YXJ0Iiwic3RyaW5nIiwiZnJlZUdsb2JhbCIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInRhZyIsInVubWFza2VkIiwicmVzdWx0IiwiZnJlZVNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJyZVdoaXRlc3BhY2UiLCJjaGFyQXQiLCJub3ciLCJ0b051bWJlciIsIm5hdGl2ZU1heCIsIm1heCIsIm5hdGl2ZU1pbiIsIm1pbiIsImZ1bmMiLCJ3YWl0IiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwidHJhaWxpbmciLCJpbnZva2VGdW5jIiwidGhpc0FyZyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2xlYXJUaW1lb3V0IiwiY2FuY2VsIiwiZmx1c2giLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwiRGF0ZSIsImRlYm91bmNlIiwiYmFzZVRyaW0iLCJpc1N5bWJvbCIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwicGFyc2VJbnQiLCJvdGhlciIsInZhbHVlT2YiLCJpc0JpbmFyeSIsInVzZUlzTW91bnRlZCIsImlzTW91bnRlZCIsInVzZVJlZiIsImN1cnJlbnQiLCJQb3BDaGlsZE1lYXN1cmUiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImNoaWxkUmVmIiwiaXNQcmVzZW50Iiwic2l6ZSIsInNpemVSZWYiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRXaWR0aCIsInRvcCIsIm9mZnNldFRvcCIsImxlZnQiLCJvZmZzZXRMZWZ0IiwiY2hpbGRyZW4iLCJQb3BDaGlsZCIsInVzZUlkIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwiZGF0YXNldCIsIm1vdGlvblBvcElkIiwiaGVhZCIsInNoZWV0IiwiaW5zZXJ0UnVsZSIsIlByZXNlbmNlQ2hpbGQiLCJpbml0aWFsIiwib25FeGl0Q29tcGxldGUiLCJjdXN0b20iLCJwcmVzZW5jZUFmZmVjdHNMYXlvdXQiLCJtb2RlIiwicHJlc2VuY2VDaGlsZHJlbiIsIm5ld0NoaWxkcmVuTWFwIiwidXNlTWVtbyIsImNoaWxkSWQiLCJpc0NvbXBsZXRlIiwidmFsdWVzIiwicmVnaXN0ZXIiLCJfIiwiUHJlc2VuY2VDb250ZXh0IiwiTWFwIiwiZ2V0Q2hpbGRLZXkiLCJjaGlsZCIsIkFuaW1hdGVQcmVzZW5jZSIsImV4aXRCZWZvcmVFbnRlciIsImZvcmNlUmVuZGVyIiwiZm9yY2VkUmVuZGVyQ291bnQiLCJzZXRGb3JjZWRSZW5kZXJDb3VudCIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJ1c2VGb3JjZVVwZGF0ZSIsImZvcmNlUmVuZGVyTGF5b3V0R3JvdXAiLCJ1c2VDb250ZXh0IiwiTGF5b3V0R3JvdXBDb250ZXh0IiwiZmlsdGVyZWRDaGlsZHJlbiIsImZpbHRlcmVkIiwiQ2hpbGRyZW4iLCJpc1ZhbGlkRWxlbWVudCIsIm9ubHlFbGVtZW50cyIsImNoaWxkcmVuVG9SZW5kZXIiLCJleGl0aW5nIiwiU2V0IiwicHJlc2VudENoaWxkcmVuIiwiYWxsQ2hpbGRyZW4iLCJpc0luaXRpYWxSZW5kZXIiLCJ1cGRhdGVDaGlsZExvb2t1cCIsImNsZWFyIiwibWFwIiwicHJlc2VudEtleXMiLCJ0YXJnZXRLZXlzIiwibnVtUHJlc2VudCIsImluc2VydGlvbkluZGV4IiwicmVtb3ZlSW5kZXgiLCJmaW5kSW5kZXgiLCJwcmVzZW50Q2hpbGQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiTW90aW9uQ29uZmlnQ29udGV4dCIsInRyYW5zZm9ybVBhZ2VQb2ludCIsImlzU3RhdGljIiwicmVkdWNlZE1vdGlvbiIsIk1vdGlvbkNvbnRleHQiLCJMYXp5Q29udGV4dCIsInN0cmljdCIsImlzUmVmT2JqZWN0IiwiaXNWYXJpYW50TGFiZWwiLCJ2IiwiaXNBbmltYXRpb25Db250cm9scyIsInZhcmlhbnRQcm9wcyIsImlzQ29udHJvbGxpbmdWYXJpYW50cyIsImFuaW1hdGUiLCJzb21lIiwiaXNWYXJpYW50Tm9kZSIsInZhcmlhbnRzIiwidmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeSIsImNyZWF0ZURlZmluaXRpb24iLCJmZWF0dXJlRGVmaW5pdGlvbnMiLCJtZWFzdXJlTGF5b3V0IiwiYW5pbWF0aW9uIiwiZHJhZyIsImZvY3VzIiwiaG92ZXIiLCJ0YXAiLCJwYW4iLCJpblZpZXciLCJnbG9iYWxQcm9qZWN0aW9uU3RhdGUiLCJoYXNBbmltYXRlZFNpbmNlUmVzaXplIiwiaGFzRXZlclVwZGF0ZWQiLCJWaXN1YWxFbGVtZW50SGFuZGxlciIsInZpc3VhbEVsZW1lbnQiLCJzZXRQcm9wcyIsIlN3aXRjaExheW91dEdyb3VwQ29udGV4dCIsIm1vdGlvbkNvbXBvbmVudFN5bWJvbCIsImZvciIsInByZWxvYWRlZEZlYXR1cmVzIiwiY3JlYXRlVmlzdWFsRWxlbWVudCIsInByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IiLCJ1c2VSZW5kZXIiLCJ1c2VWaXN1YWxTdGF0ZSIsIkNvbXBvbmVudCIsImZlYXR1cmVzIiwibG9hZEZlYXR1cmVzIiwiRm9yd2FyZFJlZkNvbXBvbmVudCIsImZvcndhcmRSZWYiLCJleHRlcm5hbFJlZiIsImNvbmZpZ0FuZFByb3BzIiwibGF5b3V0SWQiLCJ1c2VMYXlvdXRJZCIsImluaGVyaXQiLCJnZXRDdXJyZW50VHJlZVZhcmlhbnRzIiwidXNlQ3JlYXRlTW90aW9uQ29udGV4dCIsInByb2plY3Rpb25JZCIsInZpc3VhbFN0YXRlIiwibGF6eUNvbnRleHQiLCJwcmVzZW5jZUNvbnRleHQiLCJyZWR1Y2VkTW90aW9uQ29uZmlnIiwidmlzdWFsRWxlbWVudFJlZiIsInJlbmRlcmVyIiwicHJlc2VuY2VJZCIsImJsb2NrSW5pdGlhbEFuaW1hdGlvbiIsInN5bmNSZW5kZXIiLCJ1c2VFZmZlY3QiLCJhbmltYXRpb25TdGF0ZSIsImFuaW1hdGVDaGFuZ2VzIiwibm90aWZ5VW5tb3VudCIsInVzZVZpc3VhbEVsZW1lbnQiLCJsYXp5U3RyaWN0TW9kZSIsImluaXRpYWxMYXlvdXRHcm91cENvbmZpZyIsIlByb3ZpZGVyIiwibW91bnQiLCJ1bm1vdW50IiwidXNlTW90aW9uUmVmIiwibGF5b3V0R3JvdXBJZCIsImNyZWF0ZU1vdGlvblByb3h5IiwiY3JlYXRlQ29uZmlnIiwiY3VzdG9tTW90aW9uQ29tcG9uZW50Q29uZmlnIiwiUHJveHkiLCJjb21wb25lbnRDYWNoZSIsIl90YXJnZXQiLCJsb3dlcmNhc2VTVkdFbGVtZW50cyIsImlzU1ZHQ29tcG9uZW50IiwiaW5jbHVkZXMiLCJzY2FsZUNvcnJlY3RvcnMiLCJ0cmFuc2Zvcm1Qcm9wT3JkZXIiLCJ0cmFuc2Zvcm1Qcm9wcyIsImlzRm9yY2VkTW90aW9uVmFsdWUiLCJsYXlvdXQiLCJzdGFydHNXaXRoIiwiaXNNb3Rpb25WYWx1ZSIsImdldFZlbG9jaXR5IiwidHJhbnNsYXRlQWxpYXMiLCJ5IiwieiIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwic29ydFRyYW5zZm9ybVByb3BzIiwiYSIsImIiLCJpc0NTU1ZhcmlhYmxlIiwiZ2V0VmFsdWVBc1R5cGUiLCJ0cmFuc2Zvcm0iLCJjbGFtcCIsInNhbml0aXplIiwiTnVtYmVyIiwidG9GaXhlZCIsImZsb2F0UmVnZXgiLCJjb2xvclJlZ2V4Iiwic2luZ2xlQ29sb3JSZWdleCIsImlzU3RyaW5nIiwiY3JlYXRlVW5pdFR5cGUiLCJ1bml0IiwiZW5kc1dpdGgiLCJzcGxpdCIsImRlZ3JlZXMiLCJwZXJjZW50IiwicHgiLCJ2aCIsInZ3IiwicHJvZ3Jlc3NQZXJjZW50YWdlIiwiYXNzaWduIiwibnVtYmVyIiwiYWxwaGEiLCJzY2FsZSIsInJvdW5kIiwibnVtYmVyVmFsdWVUeXBlcyIsImJvcmRlcldpZHRoIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSYWRpdXMiLCJyYWRpdXMiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInJpZ2h0IiwicGFkZGluZyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nTGVmdCIsIm1hcmdpbiIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsInJvdGF0ZSIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInNjYWxlWCIsInNjYWxlWSIsInNjYWxlWiIsInNrZXciLCJza2V3WCIsInNrZXdZIiwiZGlzdGFuY2UiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJwZXJzcGVjdGl2ZSIsIm9wYWNpdHkiLCJvcmlnaW5YIiwib3JpZ2luWSIsIm9yaWdpbloiLCJ6SW5kZXgiLCJmaWxsT3BhY2l0eSIsInN0cm9rZU9wYWNpdHkiLCJudW1PY3RhdmVzIiwiYnVpbGRIVE1MU3R5bGVzIiwibGF0ZXN0VmFsdWVzIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJ2YXJzIiwidHJhbnNmb3JtS2V5cyIsInRyYW5zZm9ybU9yaWdpbiIsImhhc1RyYW5zZm9ybSIsImhhc1RyYW5zZm9ybU9yaWdpbiIsInRyYW5zZm9ybUlzTm9uZSIsInZhbHVlVHlwZSIsInZhbHVlQXNUeXBlIiwiZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24iLCJhbGxvd1RyYW5zZm9ybU5vbmUiLCJ0cmFuc2Zvcm1Jc0RlZmF1bHQiLCJ0cmFuc2Zvcm1TdHJpbmciLCJzb3J0IiwidHJpbSIsImJ1aWxkVHJhbnNmb3JtIiwiY29weVJhd1ZhbHVlc09ubHkiLCJ1c2VIVE1MUHJvcHMiLCJodG1sUHJvcHMiLCJ1c2VJbml0aWFsTW90aW9uVmFsdWVzIiwidHJhbnNmb3JtVmFsdWVzIiwidXNlU3R5bGUiLCJkcmFnTGlzdGVuZXIiLCJkcmFnZ2FibGUiLCJ1c2VyU2VsZWN0IiwiV2Via2l0VXNlclNlbGVjdCIsIldlYmtpdFRvdWNoQ2FsbG91dCIsInRvdWNoQWN0aW9uIiwidmFsaWRNb3Rpb25Qcm9wcyIsImlzVmFsaWRNb3Rpb25Qcm9wIiwic2hvdWxkRm9yd2FyZCIsImlzVmFsaWRQcm9wIiwicmVxdWlyZSIsIl9hIiwiY2FsY09yaWdpbiIsIm9mZnNldCIsImRhc2hLZXlzIiwiYXJyYXkiLCJjYW1lbEtleXMiLCJidWlsZFNWR0F0dHJzIiwiYXR0clgiLCJhdHRyWSIsInBhdGhMZW5ndGgiLCJwYXRoU3BhY2luZyIsInBhdGhPZmZzZXQiLCJsYXRlc3QiLCJhdHRycyIsImRpbWVuc2lvbnMiLCJjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luIiwic3BhY2luZyIsInVzZURhc2hDYXNlIiwiYnVpbGRTVkdQYXRoIiwidXNlU1ZHUHJvcHMiLCJ2aXN1YWxQcm9wcyIsInJhd1N0eWxlcyIsImNyZWF0ZVVzZVJlbmRlciIsImZvcndhcmRNb3Rpb25Qcm9wcyIsImZpbHRlcmVkUHJvcHMiLCJpc0RvbSIsImZpbHRlclByb3BzIiwiZWxlbWVudFByb3BzIiwiY2FtZWxUb0Rhc2giLCJzdHIiLCJyZW5kZXJIVE1MIiwic3R5bGVQcm9wIiwicHJvamVjdGlvbiIsImdldFByb2plY3Rpb25TdHlsZXMiLCJzZXRQcm9wZXJ0eSIsImNhbWVsQ2FzZUF0dHJpYnV0ZXMiLCJyZW5kZXJTVkciLCJyZW5kZXJTdGF0ZSIsIl9zdHlsZVByb3AiLCJzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMiLCJuZXdWYWx1ZXMiLCJyZXNvbHZlVmFyaWFudEZyb21Qcm9wcyIsImN1cnJlbnRWYWx1ZXMiLCJjdXJyZW50VmVsb2NpdHkiLCJpc0tleWZyYW1lc1RhcmdldCIsInJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMiLCJyZXNvbHZlTW90aW9uVmFsdWUiLCJ1bndyYXBwZWRWYWx1ZSIsIm1peCIsInRvVmFsdWUiLCJtYWtlVXNlVmlzdWFsU3RhdGUiLCJtYWtlIiwiY3JlYXRlUmVuZGVyU3RhdGUiLCJvbk1vdW50IiwibWFrZUxhdGVzdFZhbHVlcyIsIm1ha2VTdGF0ZSIsInNjcmFwZU1vdGlvblZhbHVlcyIsIm1vdGlvblZhbHVlcyIsImlzQ29udHJvbGxpbmdWYXJpYW50cyQxIiwiaXNWYXJpYW50Tm9kZSQxIiwiaXNJbml0aWFsQW5pbWF0aW9uQmxvY2tlZCIsInZhcmlhbnRUb1NldCIsInJlc29sdmVkIiwidHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb24iLCJ2YWx1ZVRhcmdldCIsInN2Z01vdGlvbkNvbmZpZyIsImdldEJCb3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJodG1sTW90aW9uQ29uZmlnIiwiQW5pbWF0aW9uVHlwZSIsImFkZERvbUV2ZW50IiwicGFzc2l2ZSIsInVzZURvbUV2ZW50IiwiaXNNb3VzZUV2ZW50IiwiUG9pbnRlckV2ZW50IiwicG9pbnRlclR5cGUiLCJNb3VzZUV2ZW50IiwiaXNUb3VjaEV2ZW50IiwidG91Y2hlcyIsImRlZmF1bHRQYWdlUG9pbnQiLCJwYWdlWCIsInBhZ2VZIiwicG9pbnRGcm9tVG91Y2giLCJwb2ludFR5cGUiLCJwb2ludCIsImNoYW5nZWRUb3VjaGVzIiwicG9pbnRGcm9tTW91c2UiLCJleHRyYWN0RXZlbnRJbmZvIiwid3JhcEhhbmRsZXIiLCJzaG91bGRGaWx0ZXJQcmltYXJ5UG9pbnRlciIsImxpc3RlbmVyIiwiZXZlbnRIYW5kbGVyIiwiYnV0dG9uIiwibW91c2VFdmVudE5hbWVzIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJjYW5jZWwiLCJwb2ludGVyb3ZlciIsInBvaW50ZXJvdXQiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJ0b3VjaEV2ZW50TmFtZXMiLCJnZXRQb2ludGVyRXZlbnROYW1lIiwib25wb2ludGVyZG93biIsIm9udG91Y2hzdGFydCIsIm9ubW91c2Vkb3duIiwiYWRkUG9pbnRlckV2ZW50IiwidXNlUG9pbnRlckV2ZW50IiwiY3JlYXRlTG9jayIsImxvY2siLCJnbG9iYWxIb3Jpem9udGFsTG9jayIsImdsb2JhbFZlcnRpY2FsTG9jayIsImdldEdsb2JhbExvY2siLCJvcGVuSG9yaXpvbnRhbCIsIm9wZW5WZXJ0aWNhbCIsImlzRHJhZ0FjdGl2ZSIsIm9wZW5HZXN0dXJlTG9jayIsImNyZWF0ZUhvdmVyRXZlbnQiLCJpc0FjdGl2ZSIsImluZm8iLCJzZXRBY3RpdmUiLCJIb3ZlciIsImlzTm9kZU9yQ2hpbGQiLCJjb21iaW5lRnVuY3Rpb25zIiwicGlwZSIsInRyYW5zZm9ybWVycyIsIm9ic2VydmVyQ2FsbGJhY2tzIiwib2JzZXJ2ZXJzIiwiZmlyZU9ic2VydmVyQ2FsbGJhY2siLCJmaXJlQWxsT2JzZXJ2ZXJDYWxsYmFja3MiLCJlbnRyaWVzIiwidGhyZXNob2xkTmFtZXMiLCJhbGwiLCJ1c2VJbnRlcnNlY3Rpb25PYnNlcnZlciIsInNob3VsZE9ic2VydmUiLCJyb290TWFyZ2luIiwiYW1vdW50Iiwib25jZSIsInRocmVzaG9sZCIsInJvb3RJbnRlcmVzZWN0aW9uT2JzZXJ2ZXIiLCJsb29rdXBSb290Iiwicm9vdE9ic2VydmVycyIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiaW5pdEludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIm9ic2VydmVJbnRlcnNlY3Rpb24iLCJnZXRJbnN0YW5jZSIsImlzSW50ZXJzZWN0aW5nIiwiaXNJblZpZXciLCJoYXNFbnRlcmVkVmlldyIsIkluVmlldyIsImdldFByb3BzIiwib25WaWV3cG9ydEVudGVyIiwib25WaWV3cG9ydExlYXZlIiwidXNlTWlzc2luZ0ludGVyc2VjdGlvbk9ic2VydmVyIiwiZmFsbGJhY2siLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtYWtlUmVuZGVybGVzc0NvbXBvbmVudCIsImhvb2siLCJnZXN0dXJlQW5pbWF0aW9ucyIsIndoaWxlSW5WaWV3Iiwidmlld3BvcnQiLCJvblRhcCIsIm9uVGFwU3RhcnQiLCJvblRhcENhbmNlbCIsIndoaWxlVGFwIiwiaGFzUHJlc3NMaXN0ZW5lcnMiLCJpc1ByZXNzaW5nIiwiY2FuY2VsUG9pbnRlckVuZExpc3RlbmVycyIsImV2ZW50T3B0aW9ucyIsIm9uUG9pbnRlckRvd24iLCJyZW1vdmVQb2ludGVyRW5kTGlzdGVuZXIiLCJjaGVja1BvaW50ZXJFbmQiLCJUYXAiLCJvblBvaW50ZXJVcCIsIm9uUG9pbnRlckNhbmNlbCIsIndoaWxlRm9jdXMiLCJGb2N1cyIsIm9uSG92ZXJTdGFydCIsIm9uSG92ZXJFbmQiLCJ3aGlsZUhvdmVyIiwidXNlUHJlc2VuY2UiLCJzaGFsbG93Q29tcGFyZSIsInByZXYiLCJwcmV2TGVuZ3RoIiwiX19yZXN0IiwicyIsInQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNhbGNBbmd1bGFyRnJlcSIsInVuZGFtcGVkRnJlcSIsImRhbXBpbmdSYXRpbyIsInNxcnQiLCJkdXJhdGlvbktleXMiLCJwaHlzaWNzS2V5cyIsImlzU3ByaW5nVHlwZSIsInNwcmluZyIsImZyb20iLCJ0byIsInJlc3RTcGVlZCIsInJlc3REZWx0YSIsImRvbmUiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwibWFzcyIsInZlbG9jaXR5IiwiZHVyYXRpb24iLCJpc1Jlc29sdmVkRnJvbUR1cmF0aW9uIiwic3ByaW5nT3B0aW9ucyIsImRlcml2ZWQiLCJib3VuY2UiLCJlbnZlbG9wZSIsImRlcml2YXRpdmUiLCJleHBvbmVudGlhbERlY2F5IiwiZGVsdGEiLCJleHAiLCJkIiwicG93IiwiaW5pdGlhbEd1ZXNzIiwiYXBwcm94aW1hdGVSb290IiwiZmluZFNwcmluZyIsImdldFNwcmluZ09wdGlvbnMiLCJyZXNvbHZlU3ByaW5nIiwiemVybyIsInJlc29sdmVWZWxvY2l0eSIsImNyZWF0ZVNwcmluZyIsImluaXRpYWxWZWxvY2l0eSIsImluaXRpYWxEZWx0YSIsInVuZGFtcGVkQW5ndWxhckZyZXEiLCJhYnMiLCJhbmd1bGFyRnJlcSIsInNpbiIsImNvcyIsImRhbXBlZEFuZ3VsYXJGcmVxIiwiZnJlcUZvclQiLCJzaW5oIiwiY29zaCIsImlzQmVsb3dWZWxvY2l0eVRocmVzaG9sZCIsImlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQiLCJmbGlwVGFyZ2V0IiwibmVlZHNJbnRlcnBvbGF0aW9uIiwiX3QiLCJ0b0Zyb21EaWZmZXJlbmNlIiwiaXNDb2xvclN0cmluZyIsInRlc3RQcm9wIiwic3BsaXRDb2xvciIsImFOYW1lIiwiYk5hbWUiLCJjTmFtZSIsImMiLCJtYXRjaCIsImNsYW1wUmdiVW5pdCIsInJnYlVuaXQiLCJyZ2JhIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiYWxwaGEkMSIsImhleCIsInIiLCJoc2xhIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImh1ZVRvUmdiIiwicSIsImhzbGFUb1JnYmEiLCJtaXhMaW5lYXJDb2xvciIsImZyb21FeHBvIiwidG9FeHBvIiwiY29sb3JUeXBlcyIsImdldENvbG9yVHlwZSIsImZpbmQiLCJub3RBbmltYXRhYmxlIiwibWl4Q29sb3IiLCJmcm9tQ29sb3JUeXBlIiwidG9Db2xvclR5cGUiLCJmcm9tQ29sb3IiLCJ0b0NvbG9yIiwiYmxlbmRlZCIsImNvbG9yVG9rZW4iLCJudW1iZXJUb2tlbiIsImFuYWx5c2UiLCJudW1Db2xvcnMiLCJjb2xvcnMiLCJudW1iZXJzIiwidG9rZW5pc2VkIiwiY3JlYXRlVHJhbnNmb3JtZXIiLCJudW1WYWx1ZXMiLCJvdXRwdXQiLCJjb252ZXJ0TnVtYmVyc1RvWmVybyIsImNvbXBsZXgiLCJfYiIsIl9jIiwiX2QiLCJnZXRBbmltYXRhYmxlTm9uZSIsInBhcnNlZCIsInRyYW5zZm9ybWVyIiwiaXNOdW0iLCJnZXRNaXhlciIsIm1peENvbXBsZXgiLCJtaXhBcnJheSIsImJsZW5kVmFsdWUiLCJmcm9tVGhpcyIsIm1peE9iamVjdCIsIm51bU51bWJlcnMiLCJudW1SR0IiLCJudW1IU0wiLCJ0ZW1wbGF0ZSIsIm9yaWdpblN0YXRzIiwidGFyZ2V0U3RhdHMiLCJtaXhOdW1iZXIiLCJpbnRlcnBvbGF0ZSIsImlucHV0IiwiaXNDbGFtcCIsImVhc2UiLCJtaXhlciIsImlucHV0TGVuZ3RoIiwicmV2ZXJzZSIsIm1peGVycyIsImN1c3RvbU1peGVyIiwibWl4ZXJGYWN0b3J5IiwibnVtTWl4ZXJzIiwiZWFzaW5nRnVuY3Rpb24iLCJjcmVhdGVNaXhlcnMiLCJpbnRlcnBvbGF0b3IiLCJmYXN0SW50ZXJwb2xhdGUiLCJsYXN0SW5wdXRJbmRleCIsIm1peGVySW5kZXgiLCJmb3VuZE1peGVySW5kZXgiLCJwcm9ncmVzc0luUmFuZ2UiLCJzbG93SW50ZXJwb2xhdGUiLCJyZXZlcnNlRWFzaW5nIiwiZWFzaW5nIiwibWlycm9yRWFzaW5nIiwiY3JlYXRlQmFja0luIiwicG93ZXIiLCJsaW5lYXIiLCJlYXNlSW4iLCJlYXNlT3V0IiwiZWFzZUluT3V0IiwiY2lyY0luIiwiYWNvcyIsImNpcmNPdXQiLCJjaXJjSW5PdXQiLCJiYWNrSW4iLCJiYWNrT3V0IiwiYmFja0luT3V0IiwiYW50aWNpcGF0ZSIsImJhY2tFYXNpbmciLCJjcmVhdGVBbnRpY2lwYXRlIiwiYm91bmNlT3V0IiwicDIiLCJib3VuY2VJbiIsImRlZmF1bHRFYXNpbmciLCJrZXlmcmFtZXMiLCJ0aW1lcyIsImNvbnZlcnRPZmZzZXRUb1RpbWVzIiwiX3ZhbHVlIiwiZGVmYXVsdE9mZnNldCIsImNyZWF0ZUludGVycG9sYXRvciIsInR5cGVzIiwidGltZUNvbnN0YW50IiwibW9kaWZ5VGFyZ2V0IiwiYW1wbGl0dWRlIiwiaWRlYWwiLCJsb29wRWxhcHNlZCIsImVsYXBzZWQiLCJkZWxheSIsImZyYW1lc3luYyIsInVwZGF0ZSIsInBhc3NUaW1lc3RhbXAiLCJzdG9wIiwiZHJpdmVyIiwicmVwZWF0IiwicmVwZWF0TWF4IiwicmVwZWF0VHlwZSIsInJlcGVhdERlbGF5Iiwib25QbGF5Iiwib25TdG9wIiwib25Db21wbGV0ZSIsIm9uUmVwZWF0Iiwib25VcGRhdGUiLCJkcml2ZXJDb250cm9scyIsImludGVycG9sYXRlRnJvbU51bWJlciIsInJlcGVhdENvdW50IiwiY29tcHV0ZWREdXJhdGlvbiIsImlzRm9yd2FyZFBsYXliYWNrIiwiYW5pbWF0b3IiLCJkZXRlY3RBbmltYXRpb25Gcm9tT3B0aW9ucyIsImhhc1JlcGVhdERlbGF5RWxhcHNlZCIsInJldmVyc2VFbGFwc2VkIiwidmVsb2NpdHlQZXJTZWNvbmQiLCJmcmFtZUR1cmF0aW9uIiwic2Vjb25kc1RvTWlsbGlzZWNvbmRzIiwic2Vjb25kcyIsImExIiwiYTIiLCJjYWxjQmV6aWVyIiwiZ2V0U2xvcGUiLCJrU2FtcGxlU3RlcFNpemUiLCJjdWJpY0JlemllciIsIm1YMSIsIm1ZMSIsIm1YMiIsIm1ZMiIsInNhbXBsZVZhbHVlcyIsIkZsb2F0MzJBcnJheSIsImFYIiwiaW50ZXJ2YWxTdGFydCIsImN1cnJlbnRTYW1wbGUiLCJrU3BsaW5lVGFibGVTaXplIiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwiYUd1ZXNzVCIsImN1cnJlbnRTbG9wZSIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiYUEiLCJhQiIsImN1cnJlbnRYIiwiY3VycmVudFQiLCJiaW5hcnlTdWJkaXZpZGUiLCJnZXRURm9yWCIsImVhc2luZ0xvb2t1cCIsImJvdW5jZUluT3V0IiwiZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24iLCJ4MSIsInkxIiwieDIiLCJ5MiIsImlzQW5pbWF0YWJsZSIsInVuZGVyRGFtcGVkU3ByaW5nIiwiY3JpdGljYWxseURhbXBlZFNwcmluZyIsImxpbmVhclR3ZWVuIiwiZGVmYXVsdFRyYW5zaXRpb25zIiwiYmFja2dyb3VuZENvbG9yIiwiZ2V0RGVmYXVsdFRyYW5zaXRpb24iLCJ2YWx1ZUtleSIsInRyYW5zaXRpb25GYWN0b3J5IiwibWF4RGVmYXVsdHMiLCJhcHBseURlZmF1bHRGaWx0ZXIiLCJkZWZhdWx0VmFsdWUiLCJmdW5jdGlvblJlZ2V4IiwiZnVuY3Rpb25zIiwiZGVmYXVsdFZhbHVlVHlwZXMiLCJvdXRsaW5lQ29sb3IiLCJmaWxsIiwic3Ryb2tlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckxlZnRDb2xvciIsIldlYmtpdEZpbHRlciIsImdldERlZmF1bHRWYWx1ZVR5cGUiLCJkZWZhdWx0VmFsdWVUeXBlIiwibGVnYWN5UmVwZWF0V2FybmluZyIsImNvbnZlcnRUcmFuc2l0aW9uVG9BbmltYXRpb25PcHRpb25zIiwieW95byIsImZsaXAiLCJpc0Vhc2luZ0FycmF5IiwiZ2V0UG9wbW90aW9uQW5pbWF0aW9uT3B0aW9ucyIsImh5ZHJhdGVLZXlmcmFtZXMiLCJ3aGVuIiwiZGVsYXlDaGlsZHJlbiIsInN0YWdnZXJDaGlsZHJlbiIsInN0YWdnZXJEaXJlY3Rpb24iLCJpc1RyYW5zaXRpb25EZWZpbmVkIiwiaXNaZXJvIiwiZ2V0WmVyb1VuaXQiLCJwb3RlbnRpYWxVbml0VHlwZSIsImdldFZhbHVlVHJhbnNpdGlvbiIsInN0YXJ0QW5pbWF0aW9uIiwiZGVsYXlUaW1lciIsInZhbHVlVHJhbnNpdGlvbiIsImlzVGFyZ2V0QW5pbWF0YWJsZSIsImJvdW5jZVN0aWZmbmVzcyIsImJvdW5jZURhbXBpbmciLCJjdXJyZW50QW5pbWF0aW9uIiwiaXNPdXRPZkJvdW5kcyIsImJvdW5kYXJ5TmVhcmVzdCIsInN0YXJ0U3ByaW5nIiwiYm91bmRhcnkiLCJoZWFkaW5nIiwiY2hlY2tCb3VuZGFyeSIsImluZXJ0aWEiLCJmaW5hbFRhcmdldCIsImdldEFuaW1hdGlvbiIsImdldERlbGF5RnJvbVRyYW5zaXRpb24iLCJhZGRVbmlxdWVJdGVtIiwicmVtb3ZlSXRlbSIsIlN1YnNjcmlwdGlvbk1hbmFnZXIiLCJzdWJzY3JpcHRpb25zIiwibnVtU3Vic2NyaXB0aW9ucyIsImdldFNpemUiLCJNb3Rpb25WYWx1ZSIsImluaXQiLCJ2ZXJzaW9uIiwidGltZURlbHRhIiwibGFzdFVwZGF0ZWQiLCJ1cGRhdGVTdWJzY3JpYmVycyIsInZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMiLCJyZW5kZXJTdWJzY3JpYmVycyIsImNhblRyYWNrVmVsb2NpdHkiLCJ1cGRhdGVBbmROb3RpZnkiLCJ0aW1lc3RhbXAiLCJzY2hlZHVsZVZlbG9jaXR5Q2hlY2siLCJ2ZWxvY2l0eUNoZWNrIiwiaGFzQW5pbWF0ZWQiLCJvbkNoYW5nZSIsInN1YnNjcmlwdGlvbiIsImNsZWFyTGlzdGVuZXJzIiwib25SZW5kZXJSZXF1ZXN0IiwiYXR0YWNoIiwicGFzc2l2ZUVmZmVjdCIsImdldFByZXZpb3VzIiwic3RvcEFuaW1hdGlvbiIsImNsZWFyQW5pbWF0aW9uIiwiaXNBbmltYXRpbmciLCJtb3Rpb25WYWx1ZSIsInRlc3RWYWx1ZVR5cGUiLCJkaW1lbnNpb25WYWx1ZVR5cGVzIiwiZmluZERpbWVuc2lvblZhbHVlVHlwZSIsInZhbHVlVHlwZXMiLCJmaW5kVmFsdWVUeXBlIiwicmVzb2x2ZVZhcmlhbnQiLCJmb3JFYWNoVmFsdWUiLCJnZXRDdXJyZW50Iiwic2V0TW90aW9uVmFsdWUiLCJoYXNWYWx1ZSIsImdldFZhbHVlIiwiYWRkVmFsdWUiLCJnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbiIsImlzV2lsbENoYW5nZU1vdGlvblZhbHVlIiwiYW5pbWF0ZVZhcmlhbnQiLCJ2YXJpYW50IiwidHJhbnNpdGlvbk92ZXJyaWRlIiwiYW5pbWF0ZVRhcmdldCIsImdldENoaWxkQW5pbWF0aW9ucyIsInZhcmlhbnRDaGlsZHJlbiIsImZvcndhcmREZWxheSIsImFuaW1hdGlvbnMiLCJtYXhTdGFnZ2VyRHVyYXRpb24iLCJnZW5lcmF0ZVN0YWdnZXJEdXJhdGlvbiIsInNvcnRCeVRyZWVPcmRlciIsIm5vdGlmeUFuaW1hdGlvbkNvbXBsZXRlIiwiYW5pbWF0ZUNoaWxkcmVuIiwibWFrZVRhcmdldEFuaW1hdGFibGUiLCJ3aWxsQ2hhbmdlIiwiYW5pbWF0aW9uVHlwZVN0YXRlIiwiZ2V0U3RhdGUiLCJzaG91bGRCbG9ja0FuaW1hdGlvbiIsInNob3VsZFJlZHVjZU1vdGlvbiIsInJlbW92ZSIsInNldFRhcmdldCIsInNvcnROb2RlUG9zaXRpb24iLCJwcm90ZWN0ZWRLZXlzIiwibmVlZHNBbmltYXRpbmciLCJzaG91bGRCbG9jayIsInZhcmlhbnRQcmlvcml0eU9yZGVyIiwiQW5pbWF0ZSIsIkRyYWciLCJFeGl0IiwicmV2ZXJzZVByaW9yaXR5T3JkZXIiLCJudW1BbmltYXRpb25UeXBlcyIsImNyZWF0ZUFuaW1hdGlvblN0YXRlIiwibm90aWZ5QW5pbWF0aW9uU3RhcnQiLCJyZXNvbHZlZERlZmluaXRpb24iLCJhbmltYXRlVmlzdWFsRWxlbWVudCIsImFuaW1hdGVMaXN0IiwiY3JlYXRlVHlwZVN0YXRlIiwiYnVpbGRSZXNvbHZlZFR5cGVWYWx1ZXMiLCJhY2MiLCJjaGFuZ2VkQWN0aXZlVHlwZSIsImdldFZhcmlhbnRDb250ZXh0IiwicmVtb3ZlZEtleXMiLCJlbmNvdW50ZXJlZEtleXMiLCJyZW1vdmVkVmFyaWFudEluZGV4IiwiSW5maW5pdHkiLCJ0eXBlU3RhdGUiLCJwcm9wSXNWYXJpYW50IiwiYWN0aXZlRGVsdGEiLCJpc0luaGVyaXRlZCIsIm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQiLCJwcmV2UHJvcCIsInZhcmlhbnREaWRDaGFuZ2UiLCJzaG91bGRBbmltYXRlVHlwZSIsImRlZmluaXRpb25MaXN0IiwicmVzb2x2ZWRWYWx1ZXMiLCJwcmV2UmVzb2x2ZWRWYWx1ZXMiLCJhbGxLZXlzIiwibWFya1RvQW5pbWF0ZSIsImZhbGxiYWNrQW5pbWF0aW9uIiwiZmFsbGJhY2tUYXJnZXQiLCJnZXRCYXNlVGFyZ2V0Iiwic2hvdWxkQW5pbWF0ZSIsInNldEFuaW1hdGVGdW5jdGlvbiIsIm1ha2VBbmltYXRvciIsInN1YnNjcmliZSIsInNhZmVUb1JlbW92ZSIsImlzUG9pbnQiLCJpc1BvaW50M0QiLCJkaXN0YW5jZTFEIiwieERlbHRhIiwieURlbHRhIiwiekRlbHRhIiwiUGFuU2Vzc2lvbiIsImhhbmRsZXJzIiwic3RhcnRFdmVudCIsImxhc3RNb3ZlRXZlbnQiLCJsYXN0TW92ZUV2ZW50SW5mbyIsInVwZGF0ZVBvaW50IiwiZ2V0UGFuSW5mbyIsImhpc3RvcnkiLCJpc1BhblN0YXJ0ZWQiLCJpc0Rpc3RhbmNlUGFzdFRocmVzaG9sZCIsIm9uU3RhcnQiLCJvbk1vdmUiLCJoYW5kbGVQb2ludGVyTW92ZSIsInRyYW5zZm9ybVBvaW50IiwiYnV0dG9ucyIsImhhbmRsZVBvaW50ZXJVcCIsImVuZCIsIm9uRW5kIiwib25TZXNzaW9uRW5kIiwicGFuSW5mbyIsImluaXRpYWxJbmZvIiwib25TZXNzaW9uU3RhcnQiLCJyZW1vdmVMaXN0ZW5lcnMiLCJ1cGRhdGVIYW5kbGVycyIsInN1YnRyYWN0UG9pbnQiLCJsYXN0RGV2aWNlUG9pbnQiLCJzdGFydERldmljZVBvaW50IiwidGltZXN0YW1wZWRQb2ludCIsImxhc3RQb2ludCIsImNhbGNMZW5ndGgiLCJheGlzIiwiaXNOZWFyIiwibWF4RGlzdGFuY2UiLCJjYWxjQXhpc0RlbHRhIiwib3JpZ2luUG9pbnQiLCJ0cmFuc2xhdGUiLCJjYWxjQm94RGVsdGEiLCJjYWxjUmVsYXRpdmVBeGlzIiwicmVsYXRpdmUiLCJjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24iLCJjYWxjUmVsYXRpdmVQb3NpdGlvbiIsImNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyIsImNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyIsImxheW91dEF4aXMiLCJjb25zdHJhaW50c0F4aXMiLCJkZWZhdWx0RWxhc3RpYyIsInJlc29sdmVBeGlzRWxhc3RpYyIsImRyYWdFbGFzdGljIiwibWluTGFiZWwiLCJtYXhMYWJlbCIsInJlc29sdmVQb2ludEVsYXN0aWMiLCJsYWJlbCIsImVhY2hBeGlzIiwiY29udmVydEJvdW5kaW5nQm94VG9Cb3giLCJpc0lkZW50aXR5U2NhbGUiLCJoYXNTY2FsZSIsImhhc1RyYW5zbGF0ZSIsInNjYWxlUG9pbnQiLCJhcHBseVBvaW50RGVsdGEiLCJib3hTY2FsZSIsImFwcGx5QXhpc0RlbHRhIiwiYXBwbHlCb3hEZWx0YSIsImJveCIsInRyYW5zbGF0ZUF4aXMiLCJ0cmFuc2Zvcm1BeGlzIiwidHJhbnNmb3JtcyIsInNjYWxlS2V5Iiwib3JpZ2luS2V5IiwiYXhpc09yaWdpbiIsInhLZXlzIiwieUtleXMiLCJ0cmFuc2Zvcm1Cb3giLCJtZWFzdXJlVmlld3BvcnRCb3giLCJ0b3BMZWZ0IiwiYm90dG9tUmlnaHQiLCJ0cmFuc2Zvcm1Cb3hQb2ludHMiLCJlbGVtZW50RHJhZ0NvbnRyb2xzIiwiVmlzdWFsRWxlbWVudERyYWdDb250cm9scyIsIm9wZW5HbG9iYWxMb2NrIiwiaXNEcmFnZ2luZyIsImN1cnJlbnREaXJlY3Rpb24iLCJjb25zdHJhaW50cyIsImhhc011dGF0ZWRDb25zdHJhaW50cyIsImVsYXN0aWMiLCJvcmlnaW5FdmVudCIsInNuYXBUb0N1cnNvciIsInBhblNlc3Npb24iLCJkcmFnUHJvcGFnYXRpb24iLCJvbkRyYWdTdGFydCIsInJlc29sdmVDb25zdHJhaW50cyIsImlzQW5pbWF0aW9uQmxvY2tlZCIsImdldEF4aXNNb3Rpb25WYWx1ZSIsIm1lYXN1cmVkQXhpcyIsImFjdHVhbCIsImRyYWdEaXJlY3Rpb25Mb2NrIiwib25EaXJlY3Rpb25Mb2NrIiwib25EcmFnIiwibG9ja1RocmVzaG9sZCIsImRpcmVjdGlvbiIsImdldEN1cnJlbnREaXJlY3Rpb24iLCJ1cGRhdGVBeGlzIiwiZ2V0VHJhbnNmb3JtUGFnZVBvaW50Iiwib25EcmFnRW5kIiwiX3BvaW50Iiwic2hvdWxkRHJhZyIsImF4aXNWYWx1ZSIsImFwcGx5Q29uc3RyYWludHMiLCJkcmFnQ29uc3RyYWludHMiLCJwcmV2Q29uc3RyYWludHMiLCJyZXNvbHZlUmVmQ29uc3RyYWludHMiLCJsYXlvdXRCb3giLCJjYWxjUmVsYXRpdmVDb25zdHJhaW50cyIsInJlc29sdmVEcmFnRWxhc3RpYyIsInJlbGF0aXZlQ29uc3RyYWludHMiLCJyZWJhc2VBeGlzQ29uc3RyYWludHMiLCJvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMiLCJjb25zdHJhaW50c0VsZW1lbnQiLCJjb25zdHJhaW50c0JveCIsInJvb3RQcm9qZWN0aW9uTm9kZSIsInZpZXdwb3J0Qm94Iiwic2Nyb2xsIiwibWVhc3VyZVBhZ2VCb3giLCJtZWFzdXJlZENvbnN0cmFpbnRzIiwiY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMiLCJ1c2VyQ29uc3RyYWludHMiLCJjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCIsImRyYWdNb21lbnR1bSIsImRyYWdUcmFuc2l0aW9uIiwiZHJhZ1NuYXBUb09yaWdpbiIsIm9uRHJhZ1RyYW5zaXRpb25FbmQiLCJtb21lbnR1bUFuaW1hdGlvbnMiLCJzdGFydEF4aXNWYWx1ZUFuaW1hdGlvbiIsImRyYWdLZXkiLCJzY2FsZVBvc2l0aW9uV2l0aGluQ29uc3RyYWludHMiLCJib3hQcm9ncmVzcyIsInNvdXJjZUxlbmd0aCIsInRhcmdldExlbmd0aCIsInVwZGF0ZVNjcm9sbCIsInVwZGF0ZUxheW91dCIsImFkZExpc3RlbmVycyIsInN0b3BQb2ludGVyTGlzdGVuZXIiLCJtZWFzdXJlRHJhZ0NvbnN0cmFpbnRzIiwic3RvcE1lYXN1cmVMYXlvdXRMaXN0ZW5lciIsInN0b3BSZXNpemVMaXN0ZW5lciIsInN0b3BMYXlvdXRVcGRhdGVMaXN0ZW5lciIsImhhc0xheW91dENoYW5nZWQiLCJvblBhbiIsIm9uUGFuU3RhcnQiLCJvblBhbkVuZCIsIm9uUGFuU2Vzc2lvblN0YXJ0IiwiaGFzUGFuRXZlbnRzIiwiZHJhZ0NvbnRyb2xzIiwiZ3JvdXBEcmFnQ29udHJvbHMiLCJwcmVmZXJzUmVkdWNlZE1vdGlvbiIsImhhc1JlZHVjZWRNb3Rpb25MaXN0ZW5lciIsIm5hbWVzIiwiZmVhdHVyZU5hbWVzIiwibnVtRmVhdHVyZXMiLCJ0cmVlVHlwZSIsImJ1aWxkIiwicmVuZGVySW5zdGFuY2UiLCJyZWFkVmFsdWVGcm9tSW5zdGFuY2UiLCJyZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZSIsImxpZmVjeWNsZXMiLCJtYW5hZ2VycyIsInByb3BTdWJzY3JpcHRpb25zIiwiY2xlYXJBbGxMaXN0ZW5lcnMiLCJtYW5hZ2VyIiwidXBkYXRlUHJvcExpc3RlbmVycyIsInByb3BMaXN0ZW5lciIsImNyZWF0ZUxpZmVjeWNsZXMiLCJ2YWx1ZVN1YnNjcmlwdGlvbnMiLCJwcmV2TW90aW9uVmFsdWVzIiwiYmFzZVRhcmdldCIsInJlbW92ZUZyb21WYXJpYW50VHJlZSIsInRyaWdnZXJCdWlsZCIsIm5vdGlmeVVwZGF0ZSIsImJpbmRUb01vdGlvblZhbHVlIiwicmVtb3ZlT25DaGFuZ2UiLCJsYXRlc3RWYWx1ZSIsInJlbW92ZU9uUmVuZGVyUmVxdWVzdCIsInNjaGVkdWxlUmVuZGVyIiwiaW5pdGlhbE1vdGlvblZhbHVlcyIsImRlcHRoIiwiaXNWaXNpYmxlIiwibmV3SW5zdGFuY2UiLCJhZGRWYXJpYW50Q2hpbGQiLCJtYXRjaE1lZGlhIiwibW90aW9uTWVkaWFRdWVyeSIsInNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyIsIm1hdGNoZXMiLCJhZGRMaXN0ZW5lciIsImluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbiIsInJlbmRlcmVkUHJvcHMiLCJpc1N0cmljdCIsIlByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IiLCJnZXRMYXRlc3RWYWx1ZXMiLCJsYXlvdXRTY3JvbGwiLCJzZXRPcHRpb25zIiwiYWx3YXlzTWVhc3VyZUxheW91dCIsImFuaW1hdGlvblR5cGUiLCJpbml0aWFsUHJvbW90aW9uQ29uZmlnIiwiY2xvc2VzdFZhcmlhbnROb2RlIiwiZ2V0Q2xvc2VzdFZhcmlhbnROb2RlIiwiZ2V0TGF5b3V0SWQiLCJnZXRTdGF0aWNWYWx1ZSIsInNldFN0YXRpY1ZhbHVlIiwic2V0VmlzaWJpbGl0eSIsInZpc2liaWxpdHkiLCJjYW5NdXRhdGUiLCJyZW1vdmVWYWx1ZSIsInJlYWRWYWx1ZSIsInNldEJhc2VUYXJnZXQiLCJuZXdQcm9wcyIsIm5leHRWYWx1ZSIsInByZXZWYWx1ZSIsImV4aXN0aW5nVmFsdWUiLCJ1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMiLCJnZXRWYXJpYW50Iiwic3RhcnRBdFBhcmVudCIsIm51bVZhcmlhbnRQcm9wcyIsImNzc1ZhcmlhYmxlUmVnZXgiLCJnZXRWYXJpYWJsZVZhbHVlIiwidG9rZW4iLCJleGVjIiwicGFyc2VDU1NWYXJpYWJsZSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicG9zaXRpb25hbEtleXMiLCJpc1Bvc2l0aW9uYWxLZXkiLCJzZXRBbmRSZXNldFZlbG9jaXR5IiwiaXNOdW1PclB4VHlwZSIsIkJvdW5kaW5nQm94RGltZW5zaW9uIiwiZ2V0UG9zRnJvbU1hdHJpeCIsIm1hdHJpeCIsInBvcyIsImdldFRyYW5zbGF0ZUZyb21NYXRyaXgiLCJwb3MyIiwicG9zMyIsIl9iYm94IiwibWF0cml4M2QiLCJub25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtS2V5cyIsInBvc2l0aW9uYWxWYWx1ZXMiLCJ1bml0Q29udmVyc2lvbiIsImhhc1Bvc2l0aW9uYWxLZXkiLCJ0YXJnZXRQb3NpdGlvbmFsS2V5cyIsInJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMiLCJoYXNBdHRlbXB0ZWRUb1JlbW92ZVRyYW5zZm9ybVZhbHVlcyIsImNoYW5nZWRWYWx1ZVR5cGVLZXlzIiwiZnJvbVR5cGUiLCJ0b1R5cGUiLCJudW1LZXlmcmFtZXMiLCJmcm9tSW5kZXgiLCJyZW1vdmVkVHJhbnNmb3JtcyIsInJlbW92ZU5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm0iLCJzY3JvbGxZIiwicGFnZVlPZmZzZXQiLCJjb252ZXJ0ZWRUYXJnZXQiLCJjaGFuZ2VkS2V5cyIsIm9yaWdpbkJib3giLCJlbGVtZW50Q29tcHV0ZWRTdHlsZSIsImRpc3BsYXkiLCJ0YXJnZXRCYm94IiwiY29udmVydENoYW5nZWRWYWx1ZVR5cGVzIiwic2Nyb2xsVG8iLCJjaGVja0FuZENvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyIsImh0bWxDb25maWciLCJkb21FbGVtZW50IiwiZGVmYXVsdFR5cGUiLCJjb21wdXRlZFN0eWxlIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJyZXNldFRyYW5zZm9ybSIsInJlc3RvcmVUcmFuc2Zvcm0iLCJtdXRhYmxlU3RhdGUiLCJ0cmFuc2l0aW9uT3JpZ2luIiwiZ2V0T3JpZ2luIiwibmV3VmFsdWVLZXlzIiwibnVtTmV3VmFsdWVzIiwidGFyZ2V0VmFsdWUiLCJjaGVja1RhcmdldEZvck5ld1ZhbHVlcyIsIkVsZW1lbnQiLCJyZXNvbHZlQ1NTVmFyaWFibGVzIiwicGFyc2VEb21WYXJpYW50IiwiaHRtbFZpc3VhbEVsZW1lbnQiLCJzdmdWaXN1YWxFbGVtZW50IiwiX2VsZW1lbnQiLCJwaXhlbHNUb1BlcmNlbnQiLCJwaXhlbHMiLCJjb3JyZWN0Qm9yZGVyUmFkaXVzIiwiY29ycmVjdCIsIm5vZGUiLCJ2YXJUb2tlbiIsImNvcnJlY3RCb3hTaGFkb3ciLCJ0cmVlU2NhbGUiLCJwcm9qZWN0aW9uRGVsdGEiLCJvcmlnaW5hbCIsImNvbnRhaW5zQ1NTVmFyaWFibGVzIiwiY3NzVmFyaWFibGVzIiwic2hhZG93IiwieFNjYWxlIiwieVNjYWxlIiwiYXZlcmFnZVNjYWxlIiwiY3NzVmFyaWFibGUiLCJNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQiLCJsYXlvdXRHcm91cCIsInN3aXRjaExheW91dEdyb3VwIiwiY29ycmVjdG9ycyIsImRlZmF1bHRTY2FsZUNvcnJlY3RvcnMiLCJncm91cCIsImRpZFVwZGF0ZSIsImxheW91dERlcGVuZGVuY3kiLCJ3aWxsVXBkYXRlIiwicHJvbW90ZSIsInJlbGVnYXRlIiwiZ2V0U3RhY2siLCJtZW1iZXJzIiwiaXNMZWFkIiwicHJvbW90ZUNvbnRleHQiLCJzY2hlZHVsZUNoZWNrQWZ0ZXJVbm1vdW50IiwiZGVyZWdpc3RlciIsImFwcGx5VG8iLCJib3hTaGFkb3ciLCJsYXlvdXRGZWF0dXJlcyIsImJvcmRlcnMiLCJudW1Cb3JkZXJzIiwiYXNOdW1iZXIiLCJpc1B4IiwiZ2V0UmFkaXVzIiwicmFkaXVzTmFtZSIsImVhc2VDcm9zc2ZhZGVJbiIsImNvbXByZXNzIiwiZWFzZUNyb3NzZmFkZU91dCIsImNvcHlBeGlzSW50byIsIm9yaWdpbkF4aXMiLCJjb3B5Qm94SW50byIsIm9yaWdpbkJveCIsInJlbW92ZVBvaW50RGVsdGEiLCJyZW1vdmVBeGlzVHJhbnNmb3JtcyIsInNvdXJjZUF4aXMiLCJyZW1vdmVBeGlzRGVsdGEiLCJyZW1vdmVCb3hUcmFuc2Zvcm1zIiwic291cmNlQm94IiwiaXNBeGlzRGVsdGFaZXJvIiwiaXNEZWx0YVplcm8iLCJib3hFcXVhbHMiLCJhc3BlY3RSYXRpbyIsIk5vZGVTdGFjayIsInByZXZMZWFkIiwibGVhZCIsImluZGV4T2ZOb2RlIiwibWVtYmVyIiwicHJlc2VydmVGb2xsb3dPcGFjaXR5Iiwic2hvdyIsInJlc3VtZUZyb20iLCJwcmVzZXJ2ZU9wYWNpdHkiLCJzbmFwc2hvdCIsImFuaW1hdGlvblZhbHVlcyIsImlzU2hhcmVkIiwiaXNVcGRhdGluZyIsImlzTGF5b3V0RGlydHkiLCJjcm9zc2ZhZGUiLCJoaWRlIiwiZXhpdEFuaW1hdGlvbkNvbXBsZXRlIiwiX2UiLCJyZXN1bWluZ0Zyb20iLCJyZW1vdmVMZWFkU25hcHNob3QiLCJidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0iLCJsYXRlc3RUcmFuc2Zvcm0iLCJjb21wYXJlQnlEZXB0aCIsIkZsYXRUcmVlIiwiaXNEaXJ0eSIsInRyYW5zZm9ybUF4ZXMiLCJjcmVhdGVQcm9qZWN0aW9uTm9kZSIsImF0dGFjaFJlc2l6ZUxpc3RlbmVyIiwiZGVmYXVsdFBhcmVudCIsIm1lYXN1cmVTY3JvbGwiLCJjaGVja0lzU2Nyb2xsUm9vdCIsImlzVHJlZUFuaW1hdGluZyIsInVwZGF0ZU1hbnVhbGx5QmxvY2tlZCIsInVwZGF0ZUJsb2NrZWRCeVJlc2l6ZSIsImlzU1ZHIiwibmVlZHNSZXNldCIsInNob3VsZFJlc2V0VHJhbnNmb3JtIiwiZXZlbnRIYW5kbGVycyIsInBvdGVudGlhbE5vZGVzIiwiY2hlY2tVcGRhdGVGYWlsZWQiLCJjbGVhckFsbFNuYXBzaG90cyIsInVwZGF0ZVByb2plY3Rpb24iLCJub2RlcyIsInJlc29sdmVUYXJnZXREZWx0YSIsImNhbGNQcm9qZWN0aW9uIiwiaGFzUHJvamVjdGVkIiwiYW5pbWF0aW9uUHJvZ3Jlc3MiLCJzaGFyZWROb2RlcyIsInBhdGgiLCJyZWdpc3RlclBvdGVudGlhbE5vZGUiLCJub3RpZnlMaXN0ZW5lcnMiLCJzdWJzY3JpcHRpb25NYW5hZ2VyIiwiaGFzTGlzdGVuZXJzIiwiU1ZHRWxlbWVudCIsInRhZ05hbWUiLCJ1bmJsb2NrVGltZW91dCIsInJlc2l6ZVVuYmxvY2tVcGRhdGUiLCJmaW5pc2hBbmltYXRpb24iLCJyZWdpc3RlclNoYXJlZE5vZGUiLCJoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQiLCJuZXdMYXlvdXQiLCJpc1RyZWVBbmltYXRpb25CbG9ja2VkIiwicmVsYXRpdmVUYXJnZXQiLCJsYXlvdXRUcmFuc2l0aW9uIiwiZGVmYXVsdExheW91dFRyYW5zaXRpb24iLCJvbkxheW91dEFuaW1hdGlvblN0YXJ0Iiwib25MYXlvdXRBbmltYXRpb25Db21wbGV0ZSIsInRhcmdldENoYW5nZWQiLCJ0YXJnZXRMYXlvdXQiLCJoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkIiwic2V0QW5pbWF0aW9uT3JpZ2luIiwiYW5pbWF0aW9uT3B0aW9ucyIsImJsb2NrVXBkYXRlIiwidW5ibG9ja1VwZGF0ZSIsImlzVXBkYXRlQmxvY2tlZCIsInN0YXJ0VXBkYXRlIiwicmVzZXRSb3RhdGlvbiIsInNob3VsZE5vdGlmeUxpc3RlbmVycyIsInByZXZUcmFuc2Zvcm1UZW1wbGF0ZVZhbHVlIiwidXBkYXRlU25hcHNob3QiLCJjbGVhck1lYXN1cmVtZW50cyIsIm1vdW50Tm9kZUVhcmx5IiwicmVzZXRUcmFuc2Zvcm1TdHlsZSIsIm5vdGlmeUxheW91dFVwZGF0ZSIsImNsZWFyU25hcHNob3QiLCJyZW1vdmVMZWFkU25hcHNob3RzIiwic2NoZWR1bGVVcGRhdGVQcm9qZWN0aW9uIiwibWVhc3VyZWQiLCJtZWFzdXJlIiwicmVtb3ZlVHJhbnNmb3JtIiwicmVtb3ZlRWxlbWVudFNjcm9sbCIsInJvdW5kQm94IiwicHJldkxheW91dCIsImxheW91dENvcnJlY3RlZCIsIm5vdGlmeUxheW91dE1lYXN1cmUiLCJpc1Njcm9sbFJvb3QiLCJpc1Jlc2V0UmVxdWVzdGVkIiwiaGFzUHJvamVjdGlvbiIsInRyYW5zZm9ybVRlbXBsYXRlVmFsdWUiLCJ0cmFuc2Zvcm1UZW1wbGF0ZUhhc0NoYW5nZWQiLCJib3hXaXRob3V0U2Nyb2xsIiwicm9vdFNjcm9sbCIsImFwcGx5VHJhbnNmb3JtIiwidHJhbnNmb3JtT25seSIsIndpdGhUcmFuc2Zvcm1zIiwiYm94V2l0aG91dFRyYW5zZm9ybSIsInNldFRhcmdldERlbHRhIiwidGFyZ2V0RGVsdGEiLCJyZWxhdGl2ZVBhcmVudCIsImdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50IiwicmVsYXRpdmVUYXJnZXRPcmlnaW4iLCJ0YXJnZXRXaXRoVHJhbnNmb3JtcyIsImF0dGVtcHRUb1Jlc29sdmVSZWxhdGl2ZVRhcmdldCIsInBlbmRpbmdBbmltYXRpb24iLCJnZXRMZWFkIiwidHJlZVBhdGgiLCJpc1NoYXJlZFRyYW5zaXRpb24iLCJ0cmVlTGVuZ3RoIiwiYXBwbHlUcmVlRGVsdGFzIiwicHJvamVjdGlvbkRlbHRhV2l0aFRyYW5zZm9ybSIsInByZXZUcmVlU2NhbGVYIiwicHJldlRyZWVTY2FsZVkiLCJwcmV2UHJvamVjdGlvblRyYW5zZm9ybSIsInByb2plY3Rpb25UcmFuc2Zvcm0iLCJub3RpZnlBbGwiLCJzbmFwc2hvdExhdGVzdFZhbHVlcyIsIm1peGVkVmFsdWVzIiwicmVsYXRpdmVMYXlvdXQiLCJpc1NoYXJlZExheW91dEFuaW1hdGlvbiIsImlzT25seU1lbWJlciIsInNob3VsZENyb3NzZmFkZU9wYWNpdHkiLCJoYXNPcGFjaXR5Q3Jvc3NmYWRlIiwibWl4VGFyZ2V0RGVsdGEiLCJtaXhBeGlzRGVsdGEiLCJtaXhBeGlzIiwiZm9sbG93Iiwib3BhY2l0eUV4aXQiLCJib3JkZXJMYWJlbCIsImZvbGxvd1JhZGl1cyIsImxlYWRSYWRpdXMiLCJtaXhWYWx1ZXMiLCJjb21wbGV0ZUFuaW1hdGlvbiIsImFwcGx5VHJhbnNmb3Jtc1RvVGFyZ2V0Iiwic2hvdWxkQW5pbWF0ZVBvc2l0aW9uT25seSIsInhMZW5ndGgiLCJ5TGVuZ3RoIiwic2hvdWxkUHJlc2VydmVGb2xsb3dPcGFjaXR5Iiwic3RhY2siLCJnZXRQcmV2TGVhZCIsImhhc1JvdGF0ZSIsInJlc2V0VmFsdWVzIiwic3R5bGVzIiwicG9pbnRlckV2ZW50cyIsImVtcHR5U3R5bGVzIiwidmFsdWVzVG9SZW5kZXIiLCJjb3JyZWN0ZWQiLCJudW0iLCJyZXNldFRyZWUiLCJtZWFzdXJlZExheW91dCIsImF4aXNTbmFwc2hvdCIsImxheW91dERlbHRhIiwidmlzdWFsRGVsdGEiLCJwYXJlbnRTbmFwc2hvdCIsInBhcmVudExheW91dCIsInJlbGF0aXZlU25hcHNob3QiLCJvbkJlZm9yZUxheW91dE1lYXN1cmUiLCJub3RpZnlCZWZvcmVMYXlvdXRNZWFzdXJlIiwic2VhcmNoTm9kZSIsInJvdW5kQXhpcyIsImlzQ2xvc2VUbyIsIkRvY3VtZW50UHJvamVjdGlvbk5vZGUiLCJzY3JvbGxMZWZ0IiwiYm9keSIsInNjcm9sbFRvcCIsImRvY3VtZW50Tm9kZSIsInBvc2l0aW9uIiwiZmVhdHVyZUJ1bmRsZSIsIm1vdGlvbiIsImlzQnJvd3NlciIsImVudiIsInByb2Nlc3MiLCJ1c2VDb25zdGFudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VVbm1vdW50RWZmZWN0Iiwid2FybmVkIiwid2Fybk9uY2UiLCJjb25kaXRpb24iLCJkZWZhdWx0VGltZXN0ZXAiLCJnZXRDdXJyZW50VGltZSIsInBlcmZvcm1hbmNlIiwib25OZXh0RnJhbWUiLCJ1c2VEZWZhdWx0RWxhcHNlZCIsInJ1bk5leHRGcmFtZSIsImlzUHJvY2Vzc2luZyIsInN0ZXBzT3JkZXIiLCJzdGVwcyIsInRvUnVuIiwidG9SdW5OZXh0RnJhbWUiLCJudW1Ub1J1biIsImZsdXNoTmV4dEZyYW1lIiwidG9LZWVwQWxpdmUiLCJXZWFrU2V0Iiwic3RlcCIsImtlZXBBbGl2ZSIsImltbWVkaWF0ZSIsImFkZFRvQ3VycmVudEZyYW1lIiwiYnVmZmVyIiwiZnJhbWVEYXRhIiwiY3JlYXRlUmVuZGVyU3RlcCIsInN5bmMiLCJzdGFydExvb3AiLCJjYW5jZWxTeW5jIiwiZmx1c2hTeW5jIiwicHJvY2Vzc1N0ZXAiLCJzdGVwSWQiLCJwcm9jZXNzRnJhbWUiLCJnZXRGcmFtZURhdGEiXSwic291cmNlUm9vdCI6IiJ9